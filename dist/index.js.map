{"version":3,"file":"index.js","mappingsnvTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzxhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACllCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnvqlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClpsjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrvfholCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClhZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnlRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9FA;AACA;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClxgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdxNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChhuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5BA;AACA;;;;;;;;;ACDA;AACA;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrhBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9CA;AACA;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/BA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtBA;AACA;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzzFA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACptNA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/CA;AACA;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACTA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjBA;AACA;AACA;AACA;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxCA;;;;;AAKA;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AClxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrnRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACphrzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChhzlhtxjlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjp8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9rxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChlpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvldljrtYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACljTA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtfpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACRA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;ACAA;;ACAA;AACA;AACA;;;;;;;;;ACFA;;ACAA;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AClHA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACvsources":["../webpack://aws-static-web-app-update-action/./build/action.js","../webpack://aws-static-web-app-update-action/./node_modules/@actions/core/lib/command.js","../webpack://aws-static-web-app-update-action/./node_modules/@actions/core/lib/core.js","../webpack://aws-static-web-app-update-action/./node_modules/@actions/core/lib/file-command.js","../webpack://aws-static-web-app-update-action/./node_modules/@actions/core/lib/oidc-utils.js","../webpack://aws-static-web-app-update-action/./node_modules/@actions/core/lib/utils.js","../webpack://aws-static-web-app-update-action/./node_modules/@actions/http-client/auth.js","../webpack://aws-static-web-app-update-action/./node_modules/@actions/http-client/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@actions/http-client/proxy.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-crypto/crc32/build/aws_crc32.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-crypto/crc32/build/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-crypto/util/build/convertToBuffer.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-crypto/util/build/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-crypto/util/build/isEmptyData.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-crypto/util/build/numToUint8.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-crypto/util/build/uint32ArrayFrom.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/CloudFront.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/CloudFrontClient.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/AssociateAliasCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateCachePolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateCloudFrontOriginAccessIdentityCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateDistributionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateDistributionWithTagsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateFieldLevelEncryptionConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateFieldLevelEncryptionProfileCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateFunctionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateInvalidationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateKeyGroupCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateMonitoringSubscriptionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateOriginRequestPolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreatePublicKeyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateRealtimeLogConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateResponseHeadersPolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateStreamingDistributionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/CreateStreamingDistributionWithTagsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/DeleteCachePolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/DeleteCloudFrontOriginAccessIdentityCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/DeleteDistributionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/DeleteFieldLevelEncryptionConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/DeleteFieldLevelEncryptionProfileCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/DeleteFunctionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/DeleteKeyGroupCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/DeleteMonitoringSubscriptionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/DeleteOriginRequestPolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/DeletePublicKeyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/DeleteRealtimeLogConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/DeleteResponseHeadersPolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/DeleteStreamingDistributionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/DescribeFunctionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetCachePolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetCachePolicyConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetCloudFrontOriginAccessIdentityCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetCloudFrontOriginAccessIdentityConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetDistributionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetDistributionConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetFieldLevelEncryptionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetFieldLevelEncryptionConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetFieldLevelEncryptionProfileCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetFieldLevelEncryptionProfileConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetFunctionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetInvalidationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetKeyGroupCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetKeyGroupConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetMonitoringSubscriptionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetOriginRequestPolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetOriginRequestPolicyConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetPublicKeyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetPublicKeyConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetRealtimeLogConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetResponseHeadersPolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetResponseHeadersPolicyConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetStreamingDistributionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/GetStreamingDistributionConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListCachePoliciesCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListCloudFrontOriginAccessIdentitiesCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListConflictingAliasesCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListDistributionsByCachePolicyIdCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListDistributionsByKeyGroupCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListDistributionsByOriginRequestPolicyIdCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListDistributionsByRealtimeLogConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListDistributionsByResponseHeadersPolicyIdCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListDistributionsByWebACLIdCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListDistributionsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListFieldLevelEncryptionConfigsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListFieldLevelEncryptionProfilesCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListFunctionsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListInvalidationsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListKeyGroupsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListOriginRequestPoliciesCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListPublicKeysCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListRealtimeLogConfigsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListResponseHeadersPoliciesCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListStreamingDistributionsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/ListTagsForResourceCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/PublishFunctionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/TagResourceCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/TestFunctionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/UntagResourceCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/UpdateCachePolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/UpdateCloudFrontOriginAccessIdentityCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/UpdateDistributionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/UpdateFieldLevelEncryptionConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/UpdateFieldLevelEncryptionProfileCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/UpdateFunctionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/UpdateKeyGroupCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/UpdateOriginRequestPolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/UpdatePublicKeyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/UpdateRealtimeLogConfigCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/UpdateResponseHeadersPolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/UpdateStreamingDistributionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/commands/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/endpoints.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/models/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/models/models_0.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/models/models_1.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/pagination/Interfaces.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/pagination/ListCloudFrontOriginAccessIdentitiesPaginator.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/pagination/ListDistributionsPaginator.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/pagination/ListInvalidationsPaginator.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/pagination/ListStreamingDistributionsPaginator.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/pagination/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/protocols/Aws_restXml.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/runtimeConfig.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/runtimeConfig.shared.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/waiters/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/waiters/waitForDistributionDeployed.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/waiters/waitForInvalidationCompleted.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-cloudfront/dist-cjs/waiters/waitForStreamingDistributionDeployed.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/S3.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/S3Client.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/AbortMultipartUploadCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/CompleteMultipartUploadCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/CopyObjectCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/CreateBucketCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/CreateMultipartUploadCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketAnalyticsConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketCorsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketEncryptionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketIntelligentTieringConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketInventoryConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketLifecycleCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketMetricsConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketOwnershipControlsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketPolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketReplicationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketTaggingCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketWebsiteCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteObjectCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteObjectTaggingCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteObjectsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeletePublicAccessBlockCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketAccelerateConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketAclCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketAnalyticsConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketCorsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketEncryptionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketIntelligentTieringConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketInventoryConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketLifecycleConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketLocationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketLoggingCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketMetricsConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketNotificationConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketOwnershipControlsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketPolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketPolicyStatusCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketReplicationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketRequestPaymentCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketTaggingCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketVersioningCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketWebsiteCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectAclCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectLegalHoldCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectLockConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectRetentionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectTaggingCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectTorrentCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetPublicAccessBlockCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/HeadBucketCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/HeadObjectCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketAnalyticsConfigurationsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketIntelligentTieringConfigurationsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketInventoryConfigurationsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketMetricsConfigurationsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListMultipartUploadsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListObjectVersionsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListObjectsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListObjectsV2Command.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListPartsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketAccelerateConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketAclCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketAnalyticsConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketCorsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketEncryptionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketIntelligentTieringConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketInventoryConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketLifecycleConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketLoggingCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketMetricsConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketNotificationConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketOwnershipControlsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketPolicyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketReplicationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketRequestPaymentCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketTaggingCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketVersioningCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketWebsiteCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectAclCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectLegalHoldCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectLockConfigurationCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectRetentionCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectTaggingCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutPublicAccessBlockCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/RestoreObjectCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/SelectObjectContentCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/UploadPartCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/UploadPartCopyCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/WriteGetObjectResponseCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/commands/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/endpoints.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/models/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/models/models_0.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/models/models_1.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/pagination/Interfaces.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/pagination/ListObjectsV2Paginator.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/pagination/ListPartsPaginator.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/pagination/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/protocols/Aws_restXml.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/runtimeConfig.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/runtimeConfig.shared.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/waiters/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/waiters/waitForBucketExists.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/waiters/waitForBucketNotExists.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/waiters/waitForObjectExists.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-s3/dist-cjs/waiters/waitForObjectNotExists.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/endpoints.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/STS.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/endpoints.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/normalizeBoolean.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/normalizeEndpoint.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-marshaller/dist-cjs/EventStreamMarshaller.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-marshaller/dist-cjs/HeaderMarshaller.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-marshaller/dist-cjs/Int64.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-marshaller/dist-cjs/Message.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-marshaller/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-marshaller/dist-cjs/splitMessage.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-cjs/EventStreamSerdeConfig.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-serde-node/dist-cjs/EventStreamMarshaller.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-serde-node/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-serde-node/dist-cjs/provider.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-serde-node/dist-cjs/utils.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-serde-universal/dist-cjs/EventStreamMarshaller.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-serde-universal/dist-cjs/getChunkedStream.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-serde-universal/dist-cjs/getUnmarshalledStream.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-serde-universal/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/eventstream-serde-universal/dist-cjs/provider.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/hash-node/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/hash-stream-node/dist-cjs/hash-calculator.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/hash-stream-node/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-apply-body-checksum/dist-cjs/applyMd5BodyChecksumMiddleware.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-apply-body-checksum/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-apply-body-checksum/dist-cjs/md5Configuration.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/NodeDisableMultiregionAccessPointConfigOptions.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/NodeUseArnRegionConfigOptions.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/bucketEndpointMiddleware.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/bucketHostname.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/bucketHostnameUtils.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/configurations.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-expect-continue/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-location-constraint/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/S3SignatureV4.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/throw-200-exceptions.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/use-regional-endpoint.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/validate-bucket-name.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-ssec/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/property-provider/dist-cjs/chain.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/property-provider/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/protocol-http/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4-crt/dist-cjs/CrtSignerV4.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4-crt/dist-cjs/constants.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4-crt/dist-cjs/headerUtil.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4-crt/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4/dist-cjs/normalizeProvider.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/smithy-client/dist-cjs/client.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/smithy-client/dist-cjs/command.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/smithy-client/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/url-parser/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-arn-parser/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-credentials/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-utf8-browser/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-utf8-browser/dist-cjs/pureJs.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-utf8-browser/dist-cjs/whatwgEncodingApi.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-waiter/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/xml-builder/dist-cjs/XmlNode.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/xml-builder/dist-cjs/XmlText.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/xml-builder/dist-cjs/escape-attribute.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/xml-builder/dist-cjs/escape-element.js","../webpack://aws-static-web-app-update-action/./node_modules/@aws-sdk/xml-builder/dist-cjs/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.scandir/out/adapters/fs.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.scandir/out/constants.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.scandir/out/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.scandir/out/providers/async.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.scandir/out/providers/common.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.scandir/out/providers/sync.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.scandir/out/settings.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.scandir/out/utils/fs.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.scandir/out/utils/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.stat/out/adapters/fs.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.stat/out/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.stat/out/providers/async.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.stat/out/providers/sync.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.stat/out/settings.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.walk/out/index.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.walk/out/providers/async.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.walk/out/providers/stream.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.walk/out/providers/sync.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.walk/out/readers/async.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.walk/out/readers/common.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.walk/out/readers/reader.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.walk/out/readers/sync.js","../webpack://aws-static-web-app-update-action/./node_modules/@nodelib/fs.walk/out/settings.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/common/event.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/common/http.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/common/io.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/common/mqtt.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/common/platform.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/common/resource_safety.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/index.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/native/auth.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/native/aws_iot.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/native/binding.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/native/crt.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/native/crypto.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/native/error.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/native/http.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/native/io.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/native/mqtt.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/native/native_resource.js","../webpack://aws-static-web-app-update-action/./node_modules/braces/index.js","../webpack://aws-static-web-app-update-action/./node_modules/braces/lib/compile.js","../webpack://aws-static-web-app-update-action/./node_modules/braces/lib/constants.js","../webpack://aws-static-web-app-update-action/./node_modules/braces/lib/expand.js","../webpack://aws-static-web-app-update-action/./node_modules/braces/lib/parse.js","../webpack://aws-static-web-app-update-action/./node_modules/braces/lib/stringify.js","../webpack://aws-static-web-app-update-action/./node_modules/braces/lib/utils.js","../webpack://aws-static-web-app-update-action/./node_modules/dir-glob/index.js","../webpack://aws-static-web-app-update-action/./node_modules/entities/lib/decode.js","../webpack://aws-static-web-app-update-action/./node_modules/entities/lib/decode_codepoint.js","../webpack://aws-static-web-app-update-action/./node_modules/entities/lib/encode.js","../webpack://aws-static-web-app-update-action/./node_modules/entities/lib/index.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/node_modules/glob-parent/index.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/index.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/managers/tasks.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/providers/async.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/providers/filters/deep.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/providers/filters/entry.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/providers/filters/error.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/providers/matchers/matcher.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/providers/matchers/partial.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/providers/provider.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/providers/stream.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/providers/sync.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/providers/transformers/entry.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/readers/reader.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/readers/stream.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/readers/sync.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/settings.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/utils/array.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/utils/errno.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/utils/fs.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/utils/index.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/utils/path.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/utils/pattern.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/utils/stream.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-glob/out/utils/string.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-xml-parser/src/json2xml.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-xml-parser/src/nimndata.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-xml-parser/src/node2json.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-xml-parser/src/node2json_str.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-xml-parser/src/parser.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-xml-parser/src/util.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-xml-parser/src/validator.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-xml-parser/src/xmlNode.js","../webpack://aws-static-web-app-update-action/./node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","../webpack://aws-static-web-app-update-action/./node_modules/fastq/queue.js","../webpack://aws-static-web-app-update-action/./node_modules/fill-range/index.js","../webpack://aws-static-web-app-update-action/./node_modules/ignore/index.js","../webpack://aws-static-web-app-update-action/./node_modules/is-extglob/index.js","../webpack://aws-static-web-app-update-action/./node_modules/is-glob/index.js","../webpack://aws-static-web-app-update-action/./node_modules/is-number/index.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/index.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/common.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/dumper.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/exception.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/loader.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/schema.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/schema/core.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/schema/default.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/schema/failsafe.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/schema/json.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/snippet.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/type.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/type/binary.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/type/bool.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/type/float.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/type/int.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/type/map.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/type/merge.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/type/null.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/type/omap.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/type/pairs.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/type/seq.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/type/set.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/type/str.js","../webpack://aws-static-web-app-update-action/./node_modules/js-yaml/lib/type/timestamp.js","../webpack://aws-static-web-app-update-action/./node_modules/merge2/index.js","../webpack://aws-static-web-app-update-action/./node_modules/micromatch/index.js","../webpack://aws-static-web-app-update-action/./node_modules/mime-db/index.js","../webpack://aws-static-web-app-update-action/./node_modules/mime-types/index.js","../webpack://aws-static-web-app-update-action/./node_modules/path-type/index.js","../webpack://aws-static-web-app-update-action/./node_modules/picomatch/index.js","../webpack://aws-static-web-app-update-action/./node_modules/picomatch/lib/constants.js","../webpack://aws-static-web-app-update-action/./node_modules/picomatch/lib/parse.js","../webpack://aws-static-web-app-update-action/./node_modules/picomatch/lib/picomatch.js","../webpack://aws-static-web-app-update-action/./node_modules/picomatch/lib/scan.js","../webpack://aws-static-web-app-update-action/./node_modules/picomatch/lib/utils.js","../webpack://aws-static-web-app-update-action/./node_modules/queue-microtask/index.js","../webpack://aws-static-web-app-update-action/./node_modules/reusify/reusify.js","../webpack://aws-static-web-app-update-action/./node_modules/run-parallel/index.js","../webpack://aws-static-web-app-update-action/./node_modules/to-regex-range/index.js","../webpack://aws-static-web-app-update-action/./node_modules/tslib/tslib.js","../webpack://aws-static-web-app-update-action/./node_modules/tunnel/index.js","../webpack://aws-static-web-app-update-action/./node_modules/tunnel/lib/tunnel.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/index.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/md5.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/nil.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/parse.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/regex.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/rng.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/sha1.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/stringify.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/v1.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/v3.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/v35.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/v4.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/v5.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/validate.js","../webpack://aws-static-web-app-update-action/./node_modules/uuid/dist/version.js","../webpack://aws-static-web-app-update-action/./node_modules/aws-crt/dist/native|sync","../webpack://aws-static-web-app-update-action/external node-commonjs \"assert\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"buffer\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"child_process\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"crypto\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"events\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"fs\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"http\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"http2\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"https\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"net\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"os\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"path\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"process\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"stream\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"tls\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"url\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"util\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"node:fs\"","../webpack://aws-static-web-app-update-action/./node_modules/array-union/index.js","../webpack://aws-static-web-app-update-action/external node-commonjs \"node:util\"","../webpack://aws-static-web-app-update-action/external node-commonjs \"node:path\"","../webpack://aws-static-web-app-update-action/./node_modules/slash/index.js","../webpack://aws-static-web-app-update-action/./node_modules/globby/gitignore.js","../webpack://aws-static-web-app-update-action/external node-commonjs \"node:stream\"","../webpack://aws-static-web-app-update-action/./node_modules/globby/stream-utils.js","../webpack://aws-static-web-app-update-action/./node_modules/globby/index.js","../webpack://aws-static-web-app-update-action/webpack/bootstrap","../webpack://aws-static-web-app-update-action/webpack/runtime/define property getters","../webpack://aws-static-web-app-update-action/webpack/runtime/hasOwnProperty shorthand","../webpack://aws-static-web-app-update-action/webpack/runtime/make namespace object","../webpack://aws-static-web-app-update-action/webpack/runtime/compat","../webpack://aws-static-web-app-update-action/./build/index.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Action = void 0;\r\nconst client_s3_1 = require(\"@aws-sdk/client-s3\");\r\nconst client_cloudfront_1 = require(\"@aws-sdk/client-cloudfront\");\r\nclass Action {\r\n    constructor(fs, s3, cf, mime, glob, log) {\r\n        this.fs = fs;\r\n        this.s3 = s3;\r\n        this.cf = cf;\r\n        this.mime = mime;\r\n        this.glob = glob;\r\n        this.log = log;\r\n    }\r\n    async run(input) {\r\n        const [cacheMap, files] = await Promise.all([\r\n            this.buildCacheMap(input.location, input.cacheControl),\r\n            this.listFiles(input.location)\r\n        ]);\r\n        this.log(`Uploading to s3 bucket ${input.bucket}`);\r\n        const uploads = files.map(async (file) => this.upload({\r\n            location: input.location,\r\n            bucket: input.bucket,\r\n            cacheControl: cacheMap.get(file),\r\n            file\r\n        }));\r\n        await Promise.all(uploads);\r\n        this.log('Upload completed');\r\n        if (typeof input.invalidate === 'undefined' ||\r\n            (input.invalidate || 'false').toString().toLowerCase() === 'false') {\r\n            return;\r\n        }\r\n        const distributionId = input.invalidate.toString().toLowerCase() === 'true'\r\n            ? await this.findDistributionId(input.bucket, input.region)\r\n            : input.invalidate.toString();\r\n        if (!distributionId) {\r\n            throw new Error(`Could not find any cloudfront distribution that is associated with s3 bucket ${input.bucket}!`);\r\n        }\r\n        await this.invalidateDistribution(distributionId, input.wait);\r\n    }\r\n    async buildCacheMap(path, cacheControl) {\r\n        const map = new Map();\r\n        for (const key of Object.keys(cacheControl)) {\r\n            const files = await this.glob.match(path, cacheControl[key]);\r\n            for (const file of files) {\r\n                map.set(this.fs.join(path, file), key);\r\n            }\r\n        }\r\n        return map;\r\n    }\r\n    async listFiles(path) {\r\n        const entries = await this.fs.readdir(path);\r\n        const entriesWithStat = await Promise.all(entries.map(async (entry) => {\r\n            const full = this.fs.join(path, entry);\r\n            const stat = await this.fs.stat(full);\r\n            return {\r\n                full,\r\n                stat\r\n            };\r\n        }));\r\n        const files = [];\r\n        const directories = [];\r\n        for (const entry of entriesWithStat) {\r\n            if (entry.stat.isFile()) {\r\n                files.push(entry.full);\r\n            }\r\n            else if (entry.stat.isDirectory()) {\r\n                directories.push(entry.full);\r\n            }\r\n        }\r\n        const tasks = await Promise.all(directories.map(async (directory) => this.listFiles(directory)));\r\n        return tasks.reduce((a, c) => [...a, ...c], files);\r\n    }\r\n    async upload(input) {\r\n        const key = input.file\r\n            .substring(input.location.length - 1)\r\n            .replace(/\\\\/g, '/');\r\n        const cmd = new client_s3_1.PutObjectCommand({\r\n            Bucket: input.bucket,\r\n            Key: key,\r\n            Body: this.fs.createReadStream(input.file),\r\n            CacheControl: input.cacheControl,\r\n            ContentType: this.mime.lookup(key)\r\n        });\r\n        this.log(`...Uploading ${input.file}`);\r\n        await this.s3.putObject(cmd);\r\n        this.log(`...Uploaded ${input.file}`);\r\n    }\r\n    async findDistributionId(bucket, region) {\r\n        var _a, _b, _c, _d, _e;\r\n        const normalizedBucket = bucket.toLowerCase();\r\n        const normalizedRegion = region.toLowerCase();\r\n        const bucketWithDomainNames = [\r\n            `${normalizedBucket}.s3.${normalizedRegion}.amazonaws.com`,\r\n            `${normalizedBucket}.s3-website-${normalizedRegion}.amazonaws.com`\r\n        ];\r\n        let nextMarker = undefined;\r\n        do {\r\n            const cmd = new client_cloudfront_1.ListDistributionsCommand({\r\n                Marker: nextMarker,\r\n                MaxItems: 10\r\n            });\r\n            const result = await this.cf.listDistributions(cmd);\r\n            let match = (_b = (_a = result.DistributionList) === null || _a === void 0 ? void 0 : _a.Items) === null || _b === void 0 ? void 0 : _b.find((item) => item.Aliases &&\r\n                item.Aliases.Items &&\r\n                item.Aliases.Items.some((a) => a.toLowerCase() === normalizedBucket));\r\n            if (!match) {\r\n                match = (_d = (_c = result.DistributionList) === null || _c === void 0 ? void 0 : _c.Items) === null || _d === void 0 ? void 0 : _d.find((item) => item.Origins &&\r\n                    item.Origins.Items &&\r\n                    item.Origins.Items.some((o) => o.DomainName &&\r\n                        bucketWithDomainNames.includes(o.DomainName.toLowerCase())));\r\n            }\r\n            if (match) {\r\n                return match.Id;\r\n            }\r\n            nextMarker = (_e = result.DistributionList) === null || _e === void 0 ? void 0 : _e.NextMarker;\r\n        } while (nextMarker);\r\n        return undefined;\r\n    }\r\n    async invalidateDistribution(distributionId, wait) {\r\n        const poll = async (id) => {\r\n            return new Promise((resolve, reject) => {\r\n                setTimeout(async () => {\r\n                    const getInvalidationCommand = new client_cloudfront_1.GetInvalidationCommand({\r\n                        DistributionId: distributionId,\r\n                        Id: id\r\n                    });\r\n                    this.log('...Checking invalidation status');\r\n                    try {\r\n                        const getInvalidationResult = await this.cf.getInvalidation(getInvalidationCommand);\r\n                        if (getInvalidationResult.Invalidation &&\r\n                            getInvalidationResult.Invalidation.Status === 'InProgress') {\r\n                            await poll(id);\r\n                            return;\r\n                        }\r\n                        this.log('Invalidation completed');\r\n                        return resolve();\r\n                    }\r\n                    catch (error) {\r\n                        return reject(error);\r\n                    }\r\n                }, 1000 * 20);\r\n            });\r\n        };\r\n        const createInvalidationCommand = new client_cloudfront_1.CreateInvalidationCommand({\r\n            DistributionId: distributionId,\r\n            InvalidationBatch: {\r\n                CallerReference: process.env.GITHUB_SHA,\r\n                Paths: {\r\n                    Quantity: 1,\r\n                    Items: ['/*']\r\n                }\r\n            }\r\n        });\r\n        this.log(`Invalidating cloudfront distribution ${distributionId}`);\r\n        const createInvalidationResult = await this.cf.createInvalidation(createInvalidationCommand);\r\n        if (wait &&\r\n            createInvalidationResult.Invalidation &&\r\n            createInvalidationResult.Invalidation.Id) {\r\n            await poll(createInvalidationResult.Invalidation.Id);\r\n        }\r\n    }\r\n}\r\nexports.Action = Action;\r\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issue = exports.issueCommand = void 0;\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Commands\n *\n * Command Format:\n *   ::name key=value,key=value::message\n *\n * Examples:\n *   ::warning::This is the message\n *   ::set-env name=MY_VAR::some value\n */\nfunction issueCommand(command, properties, message) {\n    const cmd = new Command(command, properties, message);\n    process.stdout.write(cmd.toString() + os.EOL);\n}\nexports.issueCommand = issueCommand;\nfunction issue(name, message = '') {\n    issueCommand(name, {}, message);\n}\nexports.issue = issue;\nconst CMD_STRING = '::';\nclass Command {\n    constructor(command, properties, message) {\n        if (!command) {\n            command = 'missing.command';\n        }\n        this.command = command;\n        this.properties = properties;\n        this.message = message;\n    }\n    toString() {\n        let cmdStr = CMD_STRING + this.command;\n        if (this.properties && Object.keys(this.properties).length > 0) {\n            cmdStr += ' ';\n            let first = true;\n            for (const key in this.properties) {\n                if (this.properties.hasOwnProperty(key)) {\n                    const val = this.properties[key];\n                    if (val) {\n                        if (first) {\n                            first = false;\n                        }\n                        else {\n                            cmdStr += ',';\n                        }\n                        cmdStr += `${key}=${escapeProperty(val)}`;\n                    }\n                }\n            }\n        }\n        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;\n        return cmdStr;\n    }\n}\nfunction escapeData(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A');\n}\nfunction escapeProperty(s) {\n    return utils_1.toCommandValue(s)\n        .replace(/%/g, '%25')\n        .replace(/\\r/g, '%0D')\n        .replace(/\\n/g, '%0A')\n        .replace(/:/g, '%3A')\n        .replace(/,/g, '%2C');\n}\n//# sourceMappingURL=command.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;\nconst command_1 = require(\"./command\");\nconst file_command_1 = require(\"./file-command\");\nconst utils_1 = require(\"./utils\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst oidc_utils_1 = require(\"./oidc-utils\");\n/**\n * The code to exit an action\n */\nvar ExitCode;\n(function (ExitCode) {\n    /**\n     * A code indicating that the action was successful\n     */\n    ExitCode[ExitCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * A code indicating that the action was a failure\n     */\n    ExitCode[ExitCode[\"Failure\"] = 1] = \"Failure\";\n})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));\n//-----------------------------------------------------------------------\n// Variables\n//-----------------------------------------------------------------------\n/**\n * Sets env variable for this action and future actions in the job\n * @param name the name of the variable to set\n * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction exportVariable(name, val) {\n    const convertedVal = utils_1.toCommandValue(val);\n    process.env[name] = convertedVal;\n    const filePath = process.env['GITHUB_ENV'] || '';\n    if (filePath) {\n        const delimiter = '_GitHubActionsFileCommandDelimeter_';\n        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;\n        file_command_1.issueCommand('ENV', commandValue);\n    }\n    else {\n        command_1.issueCommand('set-env', { name }, convertedVal);\n    }\n}\nexports.exportVariable = exportVariable;\n/**\n * Registers a secret which will get masked from logs\n * @param secret value of the secret\n */\nfunction setSecret(secret) {\n    command_1.issueCommand('add-mask', {}, secret);\n}\nexports.setSecret = setSecret;\n/**\n * Prepends inputPath to the PATH (for this action and future actions)\n * @param inputPath\n */\nfunction addPath(inputPath) {\n    const filePath = process.env['GITHUB_PATH'] || '';\n    if (filePath) {\n        file_command_1.issueCommand('PATH', inputPath);\n    }\n    else {\n        command_1.issueCommand('add-path', {}, inputPath);\n    }\n    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;\n}\nexports.addPath = addPath;\n/**\n * Gets the value of an input.\n * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.\n * Returns an empty string if the value is not defined.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string\n */\nfunction getInput(name, options) {\n    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';\n    if (options && options.required && !val) {\n        throw new Error(`Input required and not supplied: ${name}`);\n    }\n    if (options && options.trimWhitespace === false) {\n        return val;\n    }\n    return val.trim();\n}\nexports.getInput = getInput;\n/**\n * Gets the values of an multiline input.  Each value is also trimmed.\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   string[]\n *\n */\nfunction getMultilineInput(name, options) {\n    const inputs = getInput(name, options)\n        .split('\\n')\n        .filter(x => x !== '');\n    return inputs;\n}\nexports.getMultilineInput = getMultilineInput;\n/**\n * Gets the input value of the boolean type in the YAML 1.2 \"core schema\" specification.\n * Support boolean input list: `true | True | TRUE | false | False | FALSE` .\n * The return value is also in boolean type.\n * ref: https://yaml.org/spec/1.2/spec.html#id2804923\n *\n * @param     name     name of the input to get\n * @param     options  optional. See InputOptions.\n * @returns   boolean\n */\nfunction getBooleanInput(name, options) {\n    const trueValue = ['true', 'True', 'TRUE'];\n    const falseValue = ['false', 'False', 'FALSE'];\n    const val = getInput(name, options);\n    if (trueValue.includes(val))\n        return true;\n    if (falseValue.includes(val))\n        return false;\n    throw new TypeError(`Input does not meet YAML 1.2 \"Core Schema\" specification: ${name}\\n` +\n        `Support boolean input list: \\`true | True | TRUE | false | False | FALSE\\``);\n}\nexports.getBooleanInput = getBooleanInput;\n/**\n * Sets the value of an output.\n *\n * @param     name     name of the output to set\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setOutput(name, value) {\n    process.stdout.write(os.EOL);\n    command_1.issueCommand('set-output', { name }, value);\n}\nexports.setOutput = setOutput;\n/**\n * Enables or disables the echoing of commands into stdout for the rest of the step.\n * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.\n *\n */\nfunction setCommandEcho(enabled) {\n    command_1.issue('echo', enabled ? 'on' : 'off');\n}\nexports.setCommandEcho = setCommandEcho;\n//-----------------------------------------------------------------------\n// Results\n//-----------------------------------------------------------------------\n/**\n * Sets the action status to failed.\n * When the action exits it will be with an exit code of 1\n * @param message add error issue message\n */\nfunction setFailed(message) {\n    process.exitCode = ExitCode.Failure;\n    error(message);\n}\nexports.setFailed = setFailed;\n//-----------------------------------------------------------------------\n// Logging Commands\n//-----------------------------------------------------------------------\n/**\n * Gets whether Actions Step Debug is on or not\n */\nfunction isDebug() {\n    return process.env['RUNNER_DEBUG'] === '1';\n}\nexports.isDebug = isDebug;\n/**\n * Writes debug message to user log\n * @param message debug message\n */\nfunction debug(message) {\n    command_1.issueCommand('debug', {}, message);\n}\nexports.debug = debug;\n/**\n * Adds an error issue\n * @param message error issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction error(message, properties = {}) {\n    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.error = error;\n/**\n * Adds a warning issue\n * @param message warning issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction warning(message, properties = {}) {\n    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.warning = warning;\n/**\n * Adds a notice issue\n * @param message notice issue message. Errors will be converted to string via toString()\n * @param properties optional properties to add to the annotation.\n */\nfunction notice(message, properties = {}) {\n    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);\n}\nexports.notice = notice;\n/**\n * Writes info to log with console.log.\n * @param message info message\n */\nfunction info(message) {\n    process.stdout.write(message + os.EOL);\n}\nexports.info = info;\n/**\n * Begin an output group.\n *\n * Output until the next `groupEnd` will be foldable in this group\n *\n * @param name The name of the output group\n */\nfunction startGroup(name) {\n    command_1.issue('group', name);\n}\nexports.startGroup = startGroup;\n/**\n * End an output group.\n */\nfunction endGroup() {\n    command_1.issue('endgroup');\n}\nexports.endGroup = endGroup;\n/**\n * Wrap an asynchronous function call in a group.\n *\n * Returns the same type as the function itself.\n *\n * @param name The name of the group\n * @param fn The function to wrap in the group\n */\nfunction group(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n        startGroup(name);\n        let result;\n        try {\n            result = yield fn();\n        }\n        finally {\n            endGroup();\n        }\n        return result;\n    });\n}\nexports.group = group;\n//-----------------------------------------------------------------------\n// Wrapper action state\n//-----------------------------------------------------------------------\n/**\n * Saves state for current action, the state can only be retrieved by this action's post job execution.\n *\n * @param     name     name of the state to store\n * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction saveState(name, value) {\n    command_1.issueCommand('save-state', { name }, value);\n}\nexports.saveState = saveState;\n/**\n * Gets the value of an state set by this action's main execution.\n *\n * @param     name     name of the state to get\n * @returns   string\n */\nfunction getState(name) {\n    return process.env[`STATE_${name}`] || '';\n}\nexports.getState = getState;\nfunction getIDToken(aud) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield oidc_utils_1.OidcClient.getIDToken(aud);\n    });\n}\nexports.getIDToken = getIDToken;\n//# sourceMappingURL=core.js.map","\"use strict\";\n// For internal use, subject to change.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.issueCommand = void 0;\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fs = __importStar(require(\"fs\"));\nconst os = __importStar(require(\"os\"));\nconst utils_1 = require(\"./utils\");\nfunction issueCommand(command, message) {\n    const filePath = process.env[`GITHUB_${command}`];\n    if (!filePath) {\n        throw new Error(`Unable to find environment variable for file command ${command}`);\n    }\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Missing file at path: ${filePath}`);\n    }\n    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {\n        encoding: 'utf8'\n    });\n}\nexports.issueCommand = issueCommand;\n//# sourceMappingURL=file-command.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OidcClient = void 0;\nconst http_client_1 = require(\"@actions/http-client\");\nconst auth_1 = require(\"@actions/http-client/auth\");\nconst core_1 = require(\"./core\");\nclass OidcClient {\n    static createHttpClient(allowRetry = true, maxRetry = 10) {\n        const requestOptions = {\n            allowRetries: allowRetry,\n            maxRetries: maxRetry\n        };\n        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);\n    }\n    static getRequestToken() {\n        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];\n        if (!token) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');\n        }\n        return token;\n    }\n    static getIDTokenUrl() {\n        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];\n        if (!runtimeUrl) {\n            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');\n        }\n        return runtimeUrl;\n    }\n    static getCall(id_token_url) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const httpclient = OidcClient.createHttpClient();\n            const res = yield httpclient\n                .getJson(id_token_url)\n                .catch(error => {\n                throw new Error(`Failed to get ID Token. \\n \n        Error Code : ${error.statusCode}\\n \n        Error Message: ${error.result.message}`);\n            });\n            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;\n            if (!id_token) {\n                throw new Error('Response json body do not have ID Token field');\n            }\n            return id_token;\n        });\n    }\n    static getIDToken(audience) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // New ID Token is requested from action service\n                let id_token_url = OidcClient.getIDTokenUrl();\n                if (audience) {\n                    const encodedAudience = encodeURIComponent(audience);\n                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;\n                }\n                core_1.debug(`ID token url is ${id_token_url}`);\n                const id_token = yield OidcClient.getCall(id_token_url);\n                core_1.setSecret(id_token);\n                return id_token;\n            }\n            catch (error) {\n                throw new Error(`Error message: ${error.message}`);\n            }\n        });\n    }\n}\nexports.OidcClient = OidcClient;\n//# sourceMappingURL=oidc-utils.js.map","\"use strict\";\n// We use any as a valid input type\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCommandProperties = exports.toCommandValue = void 0;\n/**\n * Sanitizes an input into a string so it can be passed into issueCommand safely\n * @param input input to sanitize into a string\n */\nfunction toCommandValue(input) {\n    if (input === null || input === undefined) {\n        return '';\n    }\n    else if (typeof input === 'string' || input instanceof String) {\n        return input;\n    }\n    return JSON.stringify(input);\n}\nexports.toCommandValue = toCommandValue;\n/**\n *\n * @param annotationProperties\n * @returns The command properties to send with the actual annotation command\n * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646\n */\nfunction toCommandProperties(annotationProperties) {\n    if (!Object.keys(annotationProperties).length) {\n        return {};\n    }\n    return {\n        title: annotationProperties.title,\n        file: annotationProperties.file,\n        line: annotationProperties.startLine,\n        endLine: annotationProperties.endLine,\n        col: annotationProperties.startColumn,\n        endColumn: annotationProperties.endColumn\n    };\n}\nexports.toCommandProperties = toCommandProperties;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass BasicCredentialHandler {\n    constructor(username, password) {\n        this.username = username;\n        this.password = password;\n    }\n    prepareRequest(options) {\n        options.headers['Authorization'] =\n            'Basic ' +\n                Buffer.from(this.username + ':' + this.password).toString('base64');\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication(response) {\n        return false;\n    }\n    handleAuthentication(httpClient, requestInfo, objs) {\n        return null;\n    }\n}\nexports.BasicCredentialHandler = BasicCredentialHandler;\nclass BearerCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        options.headers['Authorization'] = 'Bearer ' + this.token;\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication(response) {\n        return false;\n    }\n    handleAuthentication(httpClient, requestInfo, objs) {\n        return null;\n    }\n}\nexports.BearerCredentialHandler = BearerCredentialHandler;\nclass PersonalAccessTokenCredentialHandler {\n    constructor(token) {\n        this.token = token;\n    }\n    // currently implements pre-authorization\n    // TODO: support preAuth = false where it hooks on 401\n    prepareRequest(options) {\n        options.headers['Authorization'] =\n            'Basic ' + Buffer.from('PAT:' + this.token).toString('base64');\n    }\n    // This handler cannot handle 401\n    canHandleAuthentication(response) {\n        return false;\n    }\n    handleAuthentication(httpClient, requestInfo, objs) {\n        return null;\n    }\n}\nexports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst http = require(\"http\");\nconst https = require(\"https\");\nconst pm = require(\"./proxy\");\nlet tunnel;\nvar HttpCodes;\n(function (HttpCodes) {\n    HttpCodes[HttpCodes[\"OK\"] = 200] = \"OK\";\n    HttpCodes[HttpCodes[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpCodes[HttpCodes[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpCodes[HttpCodes[\"ResourceMoved\"] = 302] = \"ResourceMoved\";\n    HttpCodes[HttpCodes[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpCodes[HttpCodes[\"NotModified\"] = 304] = \"NotModified\";\n    HttpCodes[HttpCodes[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpCodes[HttpCodes[\"SwitchProxy\"] = 306] = \"SwitchProxy\";\n    HttpCodes[HttpCodes[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpCodes[HttpCodes[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpCodes[HttpCodes[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpCodes[HttpCodes[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpCodes[HttpCodes[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpCodes[HttpCodes[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpCodes[HttpCodes[\"NotFound\"] = 404] = \"NotFound\";\n    HttpCodes[HttpCodes[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpCodes[HttpCodes[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpCodes[HttpCodes[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpCodes[HttpCodes[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpCodes[HttpCodes[\"Conflict\"] = 409] = \"Conflict\";\n    HttpCodes[HttpCodes[\"Gone\"] = 410] = \"Gone\";\n    HttpCodes[HttpCodes[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpCodes[HttpCodes[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpCodes[HttpCodes[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpCodes[HttpCodes[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpCodes[HttpCodes[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpCodes[HttpCodes[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));\nvar Headers;\n(function (Headers) {\n    Headers[\"Accept\"] = \"accept\";\n    Headers[\"ContentType\"] = \"content-type\";\n})(Headers = exports.Headers || (exports.Headers = {}));\nvar MediaTypes;\n(function (MediaTypes) {\n    MediaTypes[\"ApplicationJson\"] = \"application/json\";\n})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));\n/**\n * Returns the proxy URL, depending upon the supplied url and proxy environment variables.\n * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n */\nfunction getProxyUrl(serverUrl) {\n    let proxyUrl = pm.getProxyUrl(new URL(serverUrl));\n    return proxyUrl ? proxyUrl.href : '';\n}\nexports.getProxyUrl = getProxyUrl;\nconst HttpRedirectCodes = [\n    HttpCodes.MovedPermanently,\n    HttpCodes.ResourceMoved,\n    HttpCodes.SeeOther,\n    HttpCodes.TemporaryRedirect,\n    HttpCodes.PermanentRedirect\n];\nconst HttpResponseRetryCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n];\nconst RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];\nconst ExponentialBackoffCeiling = 10;\nconst ExponentialBackoffTimeSlice = 5;\nclass HttpClientError extends Error {\n    constructor(message, statusCode) {\n        super(message);\n        this.name = 'HttpClientError';\n        this.statusCode = statusCode;\n        Object.setPrototypeOf(this, HttpClientError.prototype);\n    }\n}\nexports.HttpClientError = HttpClientError;\nclass HttpClientResponse {\n    constructor(message) {\n        this.message = message;\n    }\n    readBody() {\n        return new Promise(async (resolve, reject) => {\n            let output = Buffer.alloc(0);\n            this.message.on('data', (chunk) => {\n                output = Buffer.concat([output, chunk]);\n            });\n            this.message.on('end', () => {\n                resolve(output.toString());\n            });\n        });\n    }\n}\nexports.HttpClientResponse = HttpClientResponse;\nfunction isHttps(requestUrl) {\n    let parsedUrl = new URL(requestUrl);\n    return parsedUrl.protocol === 'https:';\n}\nexports.isHttps = isHttps;\nclass HttpClient {\n    constructor(userAgent, handlers, requestOptions) {\n        this._ignoreSslError = false;\n        this._allowRedirects = true;\n        this._allowRedirectDowngrade = false;\n        this._maxRedirects = 50;\n        this._allowRetries = false;\n        this._maxRetries = 1;\n        this._keepAlive = false;\n        this._disposed = false;\n        this.userAgent = userAgent;\n        this.handlers = handlers || [];\n        this.requestOptions = requestOptions;\n        if (requestOptions) {\n            if (requestOptions.ignoreSslError != null) {\n                this._ignoreSslError = requestOptions.ignoreSslError;\n            }\n            this._socketTimeout = requestOptions.socketTimeout;\n            if (requestOptions.allowRedirects != null) {\n                this._allowRedirects = requestOptions.allowRedirects;\n            }\n            if (requestOptions.allowRedirectDowngrade != null) {\n                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;\n            }\n            if (requestOptions.maxRedirects != null) {\n                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);\n            }\n            if (requestOptions.keepAlive != null) {\n                this._keepAlive = requestOptions.keepAlive;\n            }\n            if (requestOptions.allowRetries != null) {\n                this._allowRetries = requestOptions.allowRetries;\n            }\n            if (requestOptions.maxRetries != null) {\n                this._maxRetries = requestOptions.maxRetries;\n            }\n        }\n    }\n    options(requestUrl, additionalHeaders) {\n        return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});\n    }\n    get(requestUrl, additionalHeaders) {\n        return this.request('GET', requestUrl, null, additionalHeaders || {});\n    }\n    del(requestUrl, additionalHeaders) {\n        return this.request('DELETE', requestUrl, null, additionalHeaders || {});\n    }\n    post(requestUrl, data, additionalHeaders) {\n        return this.request('POST', requestUrl, data, additionalHeaders || {});\n    }\n    patch(requestUrl, data, additionalHeaders) {\n        return this.request('PATCH', requestUrl, data, additionalHeaders || {});\n    }\n    put(requestUrl, data, additionalHeaders) {\n        return this.request('PUT', requestUrl, data, additionalHeaders || {});\n    }\n    head(requestUrl, additionalHeaders) {\n        return this.request('HEAD', requestUrl, null, additionalHeaders || {});\n    }\n    sendStream(verb, requestUrl, stream, additionalHeaders) {\n        return this.request(verb, requestUrl, stream, additionalHeaders);\n    }\n    /**\n     * Gets a typed object from an endpoint\n     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise\n     */\n    async getJson(requestUrl, additionalHeaders = {}) {\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        let res = await this.get(requestUrl, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async postJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.post(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async putJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.put(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    async patchJson(requestUrl, obj, additionalHeaders = {}) {\n        let data = JSON.stringify(obj, null, 2);\n        additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);\n        additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);\n        let res = await this.patch(requestUrl, data, additionalHeaders);\n        return this._processResponse(res, this.requestOptions);\n    }\n    /**\n     * Makes a raw http request.\n     * All other methods such as get, post, patch, and request ultimately call this.\n     * Prefer get, del, post and patch\n     */\n    async request(verb, requestUrl, data, headers) {\n        if (this._disposed) {\n            throw new Error('Client has already been disposed.');\n        }\n        let parsedUrl = new URL(requestUrl);\n        let info = this._prepareRequest(verb, parsedUrl, headers);\n        // Only perform retries on reads since writes may not be idempotent.\n        let maxTries = this._allowRetries && RetryableHttpVerbs.indexOf(verb) != -1\n            ? this._maxRetries + 1\n            : 1;\n        let numTries = 0;\n        let response;\n        while (numTries < maxTries) {\n            response = await this.requestRaw(info, data);\n            // Check if it's an authentication challenge\n            if (response &&\n                response.message &&\n                response.message.statusCode === HttpCodes.Unauthorized) {\n                let authenticationHandler;\n                for (let i = 0; i < this.handlers.length; i++) {\n                    if (this.handlers[i].canHandleAuthentication(response)) {\n                        authenticationHandler = this.handlers[i];\n                        break;\n                    }\n                }\n                if (authenticationHandler) {\n                    return authenticationHandler.handleAuthentication(this, info, data);\n                }\n                else {\n                    // We have received an unauthorized response but have no handlers to handle it.\n                    // Let the response return to the caller.\n                    return response;\n                }\n            }\n            let redirectsRemaining = this._maxRedirects;\n            while (HttpRedirectCodes.indexOf(response.message.statusCode) != -1 &&\n                this._allowRedirects &&\n                redirectsRemaining > 0) {\n                const redirectUrl = response.message.headers['location'];\n                if (!redirectUrl) {\n                    // if there's no location to redirect to, we won't\n                    break;\n                }\n                let parsedRedirectUrl = new URL(redirectUrl);\n                if (parsedUrl.protocol == 'https:' &&\n                    parsedUrl.protocol != parsedRedirectUrl.protocol &&\n                    !this._allowRedirectDowngrade) {\n                    throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');\n                }\n                // we need to finish reading the response before reassigning response\n                // which will leak the open socket.\n                await response.readBody();\n                // strip authorization header if redirected to a different hostname\n                if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {\n                    for (let header in headers) {\n                        // header names are case insensitive\n                        if (header.toLowerCase() === 'authorization') {\n                            delete headers[header];\n                        }\n                    }\n                }\n                // let's make the request with the new redirectUrl\n                info = this._prepareRequest(verb, parsedRedirectUrl, headers);\n                response = await this.requestRaw(info, data);\n                redirectsRemaining--;\n            }\n            if (HttpResponseRetryCodes.indexOf(response.message.statusCode) == -1) {\n                // If not a retry code, return immediately instead of retrying\n                return response;\n            }\n            numTries += 1;\n            if (numTries < maxTries) {\n                await response.readBody();\n                await this._performExponentialBackoff(numTries);\n            }\n        }\n        return response;\n    }\n    /**\n     * Needs to be called if keepAlive is set to true in request options.\n     */\n    dispose() {\n        if (this._agent) {\n            this._agent.destroy();\n        }\n        this._disposed = true;\n    }\n    /**\n     * Raw request.\n     * @param info\n     * @param data\n     */\n    requestRaw(info, data) {\n        return new Promise((resolve, reject) => {\n            let callbackForResult = function (err, res) {\n                if (err) {\n                    reject(err);\n                }\n                resolve(res);\n            };\n            this.requestRawWithCallback(info, data, callbackForResult);\n        });\n    }\n    /**\n     * Raw request with callback.\n     * @param info\n     * @param data\n     * @param onResult\n     */\n    requestRawWithCallback(info, data, onResult) {\n        let socket;\n        if (typeof data === 'string') {\n            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');\n        }\n        let callbackCalled = false;\n        let handleResult = (err, res) => {\n            if (!callbackCalled) {\n                callbackCalled = true;\n                onResult(err, res);\n            }\n        };\n        let req = info.httpModule.request(info.options, (msg) => {\n            let res = new HttpClientResponse(msg);\n            handleResult(null, res);\n        });\n        req.on('socket', sock => {\n            socket = sock;\n        });\n        // If we ever get disconnected, we want the socket to timeout eventually\n        req.setTimeout(this._socketTimeout || 3 * 60000, () => {\n            if (socket) {\n                socket.end();\n            }\n            handleResult(new Error('Request timeout: ' + info.options.path), null);\n        });\n        req.on('error', function (err) {\n            // err has statusCode property\n            // res should have headers\n            handleResult(err, null);\n        });\n        if (data && typeof data === 'string') {\n            req.write(data, 'utf8');\n        }\n        if (data && typeof data !== 'string') {\n            data.on('close', function () {\n                req.end();\n            });\n            data.pipe(req);\n        }\n        else {\n            req.end();\n        }\n    }\n    /**\n     * Gets an http agent. This function is useful when you need an http agent that handles\n     * routing through a proxy server - depending upon the url and proxy environment variables.\n     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com\n     */\n    getAgent(serverUrl) {\n        let parsedUrl = new URL(serverUrl);\n        return this._getAgent(parsedUrl);\n    }\n    _prepareRequest(method, requestUrl, headers) {\n        const info = {};\n        info.parsedUrl = requestUrl;\n        const usingSsl = info.parsedUrl.protocol === 'https:';\n        info.httpModule = usingSsl ? https : http;\n        const defaultPort = usingSsl ? 443 : 80;\n        info.options = {};\n        info.options.host = info.parsedUrl.hostname;\n        info.options.port = info.parsedUrl.port\n            ? parseInt(info.parsedUrl.port)\n            : defaultPort;\n        info.options.path =\n            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');\n        info.options.method = method;\n        info.options.headers = this._mergeHeaders(headers);\n        if (this.userAgent != null) {\n            info.options.headers['user-agent'] = this.userAgent;\n        }\n        info.options.agent = this._getAgent(info.parsedUrl);\n        // gives handlers an opportunity to participate\n        if (this.handlers) {\n            this.handlers.forEach(handler => {\n                handler.prepareRequest(info.options);\n            });\n        }\n        return info;\n    }\n    _mergeHeaders(headers) {\n        const lowercaseKeys = obj => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n        if (this.requestOptions && this.requestOptions.headers) {\n            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers));\n        }\n        return lowercaseKeys(headers || {});\n    }\n    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {\n        const lowercaseKeys = obj => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});\n        let clientHeader;\n        if (this.requestOptions && this.requestOptions.headers) {\n            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];\n        }\n        return additionalHeaders[header] || clientHeader || _default;\n    }\n    _getAgent(parsedUrl) {\n        let agent;\n        let proxyUrl = pm.getProxyUrl(parsedUrl);\n        let useProxy = proxyUrl && proxyUrl.hostname;\n        if (this._keepAlive && useProxy) {\n            agent = this._proxyAgent;\n        }\n        if (this._keepAlive && !useProxy) {\n            agent = this._agent;\n        }\n        // if agent is already assigned use that agent.\n        if (!!agent) {\n            return agent;\n        }\n        const usingSsl = parsedUrl.protocol === 'https:';\n        let maxSockets = 100;\n        if (!!this.requestOptions) {\n            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;\n        }\n        if (useProxy) {\n            // If using proxy, need tunnel\n            if (!tunnel) {\n                tunnel = require('tunnel');\n            }\n            const agentOptions = {\n                maxSockets: maxSockets,\n                keepAlive: this._keepAlive,\n                proxy: {\n                    ...((proxyUrl.username || proxyUrl.password) && {\n                        proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`\n                    }),\n                    host: proxyUrl.hostname,\n                    port: proxyUrl.port\n                }\n            };\n            let tunnelAgent;\n            const overHttps = proxyUrl.protocol === 'https:';\n            if (usingSsl) {\n                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;\n            }\n            else {\n                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;\n            }\n            agent = tunnelAgent(agentOptions);\n            this._proxyAgent = agent;\n        }\n        // if reusing agent across request and tunneling agent isn't assigned create a new agent\n        if (this._keepAlive && !agent) {\n            const options = { keepAlive: this._keepAlive, maxSockets: maxSockets };\n            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);\n            this._agent = agent;\n        }\n        // if not using private agent and tunnel agent isn't setup then use global agent\n        if (!agent) {\n            agent = usingSsl ? https.globalAgent : http.globalAgent;\n        }\n        if (usingSsl && this._ignoreSslError) {\n            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process\n            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options\n            // we have to cast it to any and change it directly\n            agent.options = Object.assign(agent.options || {}, {\n                rejectUnauthorized: false\n            });\n        }\n        return agent;\n    }\n    _performExponentialBackoff(retryNumber) {\n        retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);\n        const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);\n        return new Promise(resolve => setTimeout(() => resolve(), ms));\n    }\n    static dateTimeDeserializer(key, value) {\n        if (typeof value === 'string') {\n            let a = new Date(value);\n            if (!isNaN(a.valueOf())) {\n                return a;\n            }\n        }\n        return value;\n    }\n    async _processResponse(res, options) {\n        return new Promise(async (resolve, reject) => {\n            const statusCode = res.message.statusCode;\n            const response = {\n                statusCode: statusCode,\n                result: null,\n                headers: {}\n            };\n            // not found leads to null obj returned\n            if (statusCode == HttpCodes.NotFound) {\n                resolve(response);\n            }\n            let obj;\n            let contents;\n            // get the result from the body\n            try {\n                contents = await res.readBody();\n                if (contents && contents.length > 0) {\n                    if (options && options.deserializeDates) {\n                        obj = JSON.parse(contents, HttpClient.dateTimeDeserializer);\n                    }\n                    else {\n                        obj = JSON.parse(contents);\n                    }\n                    response.result = obj;\n                }\n                response.headers = res.message.headers;\n            }\n            catch (err) {\n                // Invalid resource (contents not json);  leaving result obj null\n            }\n            // note that 3xx redirects are handled by the http layer.\n            if (statusCode > 299) {\n                let msg;\n                // if exception/error in body, attempt to get better error\n                if (obj && obj.message) {\n                    msg = obj.message;\n                }\n                else if (contents && contents.length > 0) {\n                    // it may be the case that the exception is in the body message as string\n                    msg = contents;\n                }\n                else {\n                    msg = 'Failed request: (' + statusCode + ')';\n                }\n                let err = new HttpClientError(msg, statusCode);\n                err.result = response.result;\n                reject(err);\n            }\n            else {\n                resolve(response);\n            }\n        });\n    }\n}\nexports.HttpClient = HttpClient;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction getProxyUrl(reqUrl) {\n    let usingSsl = reqUrl.protocol === 'https:';\n    let proxyUrl;\n    if (checkBypass(reqUrl)) {\n        return proxyUrl;\n    }\n    let proxyVar;\n    if (usingSsl) {\n        proxyVar = process.env['https_proxy'] || process.env['HTTPS_PROXY'];\n    }\n    else {\n        proxyVar = process.env['http_proxy'] || process.env['HTTP_PROXY'];\n    }\n    if (proxyVar) {\n        proxyUrl = new URL(proxyVar);\n    }\n    return proxyUrl;\n}\nexports.getProxyUrl = getProxyUrl;\nfunction checkBypass(reqUrl) {\n    if (!reqUrl.hostname) {\n        return false;\n    }\n    let noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';\n    if (!noProxy) {\n        return false;\n    }\n    // Determine the request port\n    let reqPort;\n    if (reqUrl.port) {\n        reqPort = Number(reqUrl.port);\n    }\n    else if (reqUrl.protocol === 'http:') {\n        reqPort = 80;\n    }\n    else if (reqUrl.protocol === 'https:') {\n        reqPort = 443;\n    }\n    // Format the request hostname and hostname with port\n    let upperReqHosts = [reqUrl.hostname.toUpperCase()];\n    if (typeof reqPort === 'number') {\n        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);\n    }\n    // Compare request host against noproxy\n    for (let upperNoProxyItem of noProxy\n        .split(',')\n        .map(x => x.trim().toUpperCase())\n        .filter(x => x)) {\n        if (upperReqHosts.some(x => x === upperNoProxyItem)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.checkBypass = checkBypass;\n","\"use strict\";\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AwsCrc32 = void 0;\nvar tslib_1 = require(\"tslib\");\nvar util_1 = require(\"@aws-crypto/util\");\nvar index_1 = require(\"./index\");\nvar AwsCrc32 = /** @class */ (function () {\n    function AwsCrc32() {\n        this.crc32 = new index_1.Crc32();\n    }\n    AwsCrc32.prototype.update = function (toHash) {\n        if ((0, util_1.isEmptyData)(toHash))\n            return;\n        this.crc32.update((0, util_1.convertToBuffer)(toHash));\n    };\n    AwsCrc32.prototype.digest = function () {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n            return (0, tslib_1.__generator)(this, function (_a) {\n                return [2 /*return*/, (0, util_1.numToUint8)(this.crc32.digest())];\n            });\n        });\n    };\n    return AwsCrc32;\n}());\nexports.AwsCrc32 = AwsCrc32;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzX2NyYzMyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2F3c19jcmMzMi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7OztBQUd0Qyx5Q0FBNEU7QUFDNUUsaUNBQWdDO0FBRWhDO0lBQUE7UUFDbUIsVUFBSyxHQUFHLElBQUksYUFBSyxFQUFFLENBQUM7SUFXdkMsQ0FBQztJQVRDLHlCQUFNLEdBQU4sVUFBTyxNQUFrQjtRQUN2QixJQUFJLElBQUEsa0JBQVcsRUFBQyxNQUFNLENBQUM7WUFBRSxPQUFPO1FBRWhDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUEsc0JBQWUsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFSyx5QkFBTSxHQUFaOzs7Z0JBQ0Usc0JBQU8sSUFBQSxpQkFBVSxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBQzs7O0tBQ3hDO0lBQ0gsZUFBQztBQUFELENBQUMsQUFaRCxJQVlDO0FBWlksNEJBQVEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgQW1hem9uLmNvbSBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcblxuaW1wb3J0IHsgSGFzaCwgU291cmNlRGF0YSB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgY29udmVydFRvQnVmZmVyLCBpc0VtcHR5RGF0YSwgbnVtVG9VaW50OCB9IGZyb20gXCJAYXdzLWNyeXB0by91dGlsXCI7XG5pbXBvcnQgeyBDcmMzMiB9IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBjbGFzcyBBd3NDcmMzMiBpbXBsZW1lbnRzIEhhc2gge1xuICBwcml2YXRlIHJlYWRvbmx5IGNyYzMyID0gbmV3IENyYzMyKCk7XG5cbiAgdXBkYXRlKHRvSGFzaDogU291cmNlRGF0YSkge1xuICAgIGlmIChpc0VtcHR5RGF0YSh0b0hhc2gpKSByZXR1cm47XG5cbiAgICB0aGlzLmNyYzMyLnVwZGF0ZShjb252ZXJ0VG9CdWZmZXIodG9IYXNoKSk7XG4gIH1cblxuICBhc3luYyBkaWdlc3QoKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgcmV0dXJuIG51bVRvVWludDgodGhpcy5jcmMzMi5kaWdlc3QoKSk7XG4gIH1cbn1cbiJdfQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AwsCrc32 = exports.Crc32 = exports.crc32 = void 0;\nvar tslib_1 = require(\"tslib\");\nvar util_1 = require(\"@aws-crypto/util\");\nfunction crc32(data) {\n    return new Crc32().update(data).digest();\n}\nexports.crc32 = crc32;\nvar Crc32 = /** @class */ (function () {\n    function Crc32() {\n        this.checksum = 0xffffffff;\n    }\n    Crc32.prototype.update = function (data) {\n        var e_1, _a;\n        try {\n            for (var data_1 = (0, tslib_1.__values)(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {\n                var byte = data_1_1.value;\n                this.checksum =\n                    (this.checksum >>> 8) ^ lookupTable[(this.checksum ^ byte) & 0xff];\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return this;\n    };\n    Crc32.prototype.digest = function () {\n        return (this.checksum ^ 0xffffffff) >>> 0;\n    };\n    return Crc32;\n}());\nexports.Crc32 = Crc32;\n// prettier-ignore\nvar a_lookUpTable = [\n    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,\n    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,\n    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,\n    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,\n    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,\n    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,\n    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,\n    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,\n    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,\n    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,\n    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,\n    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,\n    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,\n    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,\n    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,\n    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,\n    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,\n    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,\n    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,\n    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,\n    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,\n    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,\n    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,\n    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,\n    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,\n    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,\n    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,\n    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,\n    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,\n    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,\n    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,\n    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,\n    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,\n    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,\n    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,\n    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,\n    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,\n    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,\n    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,\n    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,\n    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,\n    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,\n    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,\n    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,\n    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,\n    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,\n    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,\n    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,\n    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,\n    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,\n    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,\n    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,\n    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,\n    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,\n    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,\n    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,\n    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,\n    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,\n    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,\n    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,\n    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,\n    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,\n    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,\n    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D,\n];\nvar lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);\nvar aws_crc32_1 = require(\"./aws_crc32\");\nObject.defineProperty(exports, \"AwsCrc32\", { enumerable: true, get: function () { return aws_crc32_1.AwsCrc32; } });\n//# sourceMappingURL=data:application/json;base64,","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __createBinding = function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    };\r\n\r\n    __exportStar = function (m, exports) {\r\n        for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    };\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result[\"default\"] = mod;\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, privateMap) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to get private field on non-instance\");\r\n        }\r\n        return privateMap.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, privateMap, value) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to set private field on non-instance\");\r\n        }\r\n        privateMap.set(receiver, value);\r\n        return value;\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n});\r\n","\"use strict\";\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertToBuffer = void 0;\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\n// Quick polyfill\nvar fromUtf8 = typeof Buffer !== \"undefined\" && Buffer.from\n    ? function (input) { return Buffer.from(input, \"utf8\"); }\n    : util_utf8_browser_1.fromUtf8;\nfunction convertToBuffer(data) {\n    // Already a Uint8, do nothing\n    if (data instanceof Uint8Array)\n        return data;\n    if (typeof data === \"string\") {\n        return fromUtf8(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n}\nexports.convertToBuffer = convertToBuffer;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydFRvQnVmZmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnZlcnRUb0J1ZmZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7O0FBR3RDLGdFQUF5RTtBQUV6RSxpQkFBaUI7QUFDakIsSUFBTSxRQUFRLEdBQ1osT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxJQUFJO0lBQzFDLENBQUMsQ0FBQyxVQUFDLEtBQWEsSUFBSyxPQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUExQixDQUEwQjtJQUMvQyxDQUFDLENBQUMsNEJBQWUsQ0FBQztBQUV0QixTQUFnQixlQUFlLENBQUMsSUFBZ0I7SUFDOUMsOEJBQThCO0lBQzlCLElBQUksSUFBSSxZQUFZLFVBQVU7UUFBRSxPQUFPLElBQUksQ0FBQztJQUU1QyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUM1QixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN2QjtJQUVELElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM1QixPQUFPLElBQUksVUFBVSxDQUNuQixJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQy9DLENBQUM7S0FDSDtJQUVELE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQWpCRCwwQ0FpQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgQW1hem9uLmNvbSBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcblxuaW1wb3J0IHsgU291cmNlRGF0YSB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgZnJvbVV0ZjggYXMgZnJvbVV0ZjhCcm93c2VyIH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtdXRmOC1icm93c2VyXCI7XG5cbi8vIFF1aWNrIHBvbHlmaWxsXG5jb25zdCBmcm9tVXRmOCA9XG4gIHR5cGVvZiBCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgQnVmZmVyLmZyb21cbiAgICA/IChpbnB1dDogc3RyaW5nKSA9PiBCdWZmZXIuZnJvbShpbnB1dCwgXCJ1dGY4XCIpXG4gICAgOiBmcm9tVXRmOEJyb3dzZXI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9CdWZmZXIoZGF0YTogU291cmNlRGF0YSk6IFVpbnQ4QXJyYXkge1xuICAvLyBBbHJlYWR5IGEgVWludDgsIGRvIG5vdGhpbmdcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSByZXR1cm4gZGF0YTtcblxuICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZnJvbVV0ZjgoZGF0YSk7XG4gIH1cblxuICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFxuICAgICAgZGF0YS5idWZmZXIsXG4gICAgICBkYXRhLmJ5dGVPZmZzZXQsXG4gICAgICBkYXRhLmJ5dGVMZW5ndGggLyBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhKTtcbn1cbiJdfQ==","\"use strict\";\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;\nvar convertToBuffer_1 = require(\"./convertToBuffer\");\nObject.defineProperty(exports, \"convertToBuffer\", { enumerable: true, get: function () { return convertToBuffer_1.convertToBuffer; } });\nvar isEmptyData_1 = require(\"./isEmptyData\");\nObject.defineProperty(exports, \"isEmptyData\", { enumerable: true, get: function () { return isEmptyData_1.isEmptyData; } });\nvar numToUint8_1 = require(\"./numToUint8\");\nObject.defineProperty(exports, \"numToUint8\", { enumerable: true, get: function () { return numToUint8_1.numToUint8; } });\nvar uint32ArrayFrom_1 = require(\"./uint32ArrayFrom\");\nObject.defineProperty(exports, \"uint32ArrayFrom\", { enumerable: true, get: function () { return uint32ArrayFrom_1.uint32ArrayFrom; } });\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7OztBQUV0QyxxREFBb0Q7QUFBM0Msa0hBQUEsZUFBZSxPQUFBO0FBQ3hCLDZDQUE0QztBQUFuQywwR0FBQSxXQUFXLE9BQUE7QUFDcEIsMkNBQTBDO0FBQWpDLHdHQUFBLFVBQVUsT0FBQTtBQUNuQixxREFBa0Q7QUFBMUMsa0hBQUEsZUFBZSxPQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20gSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG5cbmV4cG9ydCB7IGNvbnZlcnRUb0J1ZmZlciB9IGZyb20gXCIuL2NvbnZlcnRUb0J1ZmZlclwiO1xuZXhwb3J0IHsgaXNFbXB0eURhdGEgfSBmcm9tIFwiLi9pc0VtcHR5RGF0YVwiO1xuZXhwb3J0IHsgbnVtVG9VaW50OCB9IGZyb20gXCIuL251bVRvVWludDhcIjtcbmV4cG9ydCB7dWludDMyQXJyYXlGcm9tfSBmcm9tICcuL3VpbnQzMkFycmF5RnJvbSc7XG4iXX0=","\"use strict\";\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isEmptyData = void 0;\nfunction isEmptyData(data) {\n    if (typeof data === \"string\") {\n        return data.length === 0;\n    }\n    return data.byteLength === 0;\n}\nexports.isEmptyData = isEmptyData;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNFbXB0eURhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaXNFbXB0eURhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7OztBQUl0QyxTQUFnQixXQUFXLENBQUMsSUFBZ0I7SUFDMUMsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7UUFDNUIsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztLQUMxQjtJQUVELE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQU5ELGtDQU1DIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20gSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG5cbmltcG9ydCB7IFNvdXJjZURhdGEgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlEYXRhKGRhdGE6IFNvdXJjZURhdGEpOiBib29sZWFuIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGRhdGEubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgcmV0dXJuIGRhdGEuYnl0ZUxlbmd0aCA9PT0gMDtcbn1cbiJdfQ==","\"use strict\";\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.numToUint8 = void 0;\nfunction numToUint8(num) {\n    return new Uint8Array([\n        (num & 0xff000000) >> 24,\n        (num & 0x00ff0000) >> 16,\n        (num & 0x0000ff00) >> 8,\n        num & 0x000000ff,\n    ]);\n}\nexports.numToUint8 = numToUint8;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtVG9VaW50OC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9udW1Ub1VpbnQ4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDOzs7QUFFdEMsU0FBZ0IsVUFBVSxDQUFDLEdBQVc7SUFDcEMsT0FBTyxJQUFJLFVBQVUsQ0FBQztRQUNwQixDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsSUFBSSxFQUFFO1FBQ3hCLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxJQUFJLEVBQUU7UUFDeEIsQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztRQUN2QixHQUFHLEdBQUcsVUFBVTtLQUNqQixDQUFDLENBQUM7QUFDTCxDQUFDO0FBUEQsZ0NBT0MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgQW1hem9uLmNvbSBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcblxuZXhwb3J0IGZ1bmN0aW9uIG51bVRvVWludDgobnVtOiBudW1iZXIpIHtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFtcbiAgICAobnVtICYgMHhmZjAwMDAwMCkgPj4gMjQsXG4gICAgKG51bSAmIDB4MDBmZjAwMDApID4+IDE2LFxuICAgIChudW0gJiAweDAwMDBmZjAwKSA+PiA4LFxuICAgIG51bSAmIDB4MDAwMDAwZmYsXG4gIF0pO1xufVxuIl19","\"use strict\";\n// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uint32ArrayFrom = void 0;\n// IE 11 does not support Array.from, so we do it manually\nfunction uint32ArrayFrom(a_lookUpTable) {\n    if (!Array.from) {\n        var return_array = new Uint32Array(a_lookUpTable.length);\n        var a_index = 0;\n        while (a_index < a_lookUpTable.length) {\n            return_array[a_index] = a_lookUpTable[a_index];\n        }\n        return return_array;\n    }\n    return Uint32Array.from(a_lookUpTable);\n}\nexports.uint32ArrayFrom = uint32ArrayFrom;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWludDMyQXJyYXlGcm9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3VpbnQzMkFycmF5RnJvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7O0FBRXRDLDBEQUEwRDtBQUMxRCxTQUFnQixlQUFlLENBQUMsYUFBNEI7SUFDMUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7UUFDZixJQUFNLFlBQVksR0FBRyxJQUFJLFdBQVcsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDMUQsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFBO1FBQ2YsT0FBTyxPQUFPLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRTtZQUNyQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1NBQy9DO1FBQ0QsT0FBTyxZQUFZLENBQUE7S0FDcEI7SUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDeEMsQ0FBQztBQVZELDBDQVVDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20gSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG5cbi8vIElFIDExIGRvZXMgbm90IHN1cHBvcnQgQXJyYXkuZnJvbSwgc28gd2UgZG8gaXQgbWFudWFsbHlcbmV4cG9ydCBmdW5jdGlvbiB1aW50MzJBcnJheUZyb20oYV9sb29rVXBUYWJsZTogQXJyYXk8bnVtYmVyPik6IFVpbnQzMkFycmF5IHtcbiAgaWYgKCFBcnJheS5mcm9tKSB7XG4gICAgY29uc3QgcmV0dXJuX2FycmF5ID0gbmV3IFVpbnQzMkFycmF5KGFfbG9va1VwVGFibGUubGVuZ3RoKVxuICAgIGxldCBhX2luZGV4ID0gMFxuICAgIHdoaWxlIChhX2luZGV4IDwgYV9sb29rVXBUYWJsZS5sZW5ndGgpIHtcbiAgICAgIHJldHVybl9hcnJheVthX2luZGV4XSA9IGFfbG9va1VwVGFibGVbYV9pbmRleF1cbiAgICB9XG4gICAgcmV0dXJuIHJldHVybl9hcnJheVxuICB9XG4gIHJldHVybiBVaW50MzJBcnJheS5mcm9tKGFfbG9va1VwVGFibGUpXG59XG4iXX0=","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CloudFront = void 0;\nconst CloudFrontClient_1 = require(\"./CloudFrontClient\");\nconst AssociateAliasCommand_1 = require(\"./commands/AssociateAliasCommand\");\nconst CreateCachePolicyCommand_1 = require(\"./commands/CreateCachePolicyCommand\");\nconst CreateCloudFrontOriginAccessIdentityCommand_1 = require(\"./commands/CreateCloudFrontOriginAccessIdentityCommand\");\nconst CreateDistributionCommand_1 = require(\"./commands/CreateDistributionCommand\");\nconst CreateDistributionWithTagsCommand_1 = require(\"./commands/CreateDistributionWithTagsCommand\");\nconst CreateFieldLevelEncryptionConfigCommand_1 = require(\"./commands/CreateFieldLevelEncryptionConfigCommand\");\nconst CreateFieldLevelEncryptionProfileCommand_1 = require(\"./commands/CreateFieldLevelEncryptionProfileCommand\");\nconst CreateFunctionCommand_1 = require(\"./commands/CreateFunctionCommand\");\nconst CreateInvalidationCommand_1 = require(\"./commands/CreateInvalidationCommand\");\nconst CreateKeyGroupCommand_1 = require(\"./commands/CreateKeyGroupCommand\");\nconst CreateMonitoringSubscriptionCommand_1 = require(\"./commands/CreateMonitoringSubscriptionCommand\");\nconst CreateOriginRequestPolicyCommand_1 = require(\"./commands/CreateOriginRequestPolicyCommand\");\nconst CreatePublicKeyCommand_1 = require(\"./commands/CreatePublicKeyCommand\");\nconst CreateRealtimeLogConfigCommand_1 = require(\"./commands/CreateRealtimeLogConfigCommand\");\nconst CreateResponseHeadersPolicyCommand_1 = require(\"./commands/CreateResponseHeadersPolicyCommand\");\nconst CreateStreamingDistributionCommand_1 = require(\"./commands/CreateStreamingDistributionCommand\");\nconst CreateStreamingDistributionWithTagsCommand_1 = require(\"./commands/CreateStreamingDistributionWithTagsCommand\");\nconst DeleteCachePolicyCommand_1 = require(\"./commands/DeleteCachePolicyCommand\");\nconst DeleteCloudFrontOriginAccessIdentityCommand_1 = require(\"./commands/DeleteCloudFrontOriginAccessIdentityCommand\");\nconst DeleteDistributionCommand_1 = require(\"./commands/DeleteDistributionCommand\");\nconst DeleteFieldLevelEncryptionConfigCommand_1 = require(\"./commands/DeleteFieldLevelEncryptionConfigCommand\");\nconst DeleteFieldLevelEncryptionProfileCommand_1 = require(\"./commands/DeleteFieldLevelEncryptionProfileCommand\");\nconst DeleteFunctionCommand_1 = require(\"./commands/DeleteFunctionCommand\");\nconst DeleteKeyGroupCommand_1 = require(\"./commands/DeleteKeyGroupCommand\");\nconst DeleteMonitoringSubscriptionCommand_1 = require(\"./commands/DeleteMonitoringSubscriptionCommand\");\nconst DeleteOriginRequestPolicyCommand_1 = require(\"./commands/DeleteOriginRequestPolicyCommand\");\nconst DeletePublicKeyCommand_1 = require(\"./commands/DeletePublicKeyCommand\");\nconst DeleteRealtimeLogConfigCommand_1 = require(\"./commands/DeleteRealtimeLogConfigCommand\");\nconst DeleteResponseHeadersPolicyCommand_1 = require(\"./commands/DeleteResponseHeadersPolicyCommand\");\nconst DeleteStreamingDistributionCommand_1 = require(\"./commands/DeleteStreamingDistributionCommand\");\nconst DescribeFunctionCommand_1 = require(\"./commands/DescribeFunctionCommand\");\nconst GetCachePolicyCommand_1 = require(\"./commands/GetCachePolicyCommand\");\nconst GetCachePolicyConfigCommand_1 = require(\"./commands/GetCachePolicyConfigCommand\");\nconst GetCloudFrontOriginAccessIdentityCommand_1 = require(\"./commands/GetCloudFrontOriginAccessIdentityCommand\");\nconst GetCloudFrontOriginAccessIdentityConfigCommand_1 = require(\"./commands/GetCloudFrontOriginAccessIdentityConfigCommand\");\nconst GetDistributionCommand_1 = require(\"./commands/GetDistributionCommand\");\nconst GetDistributionConfigCommand_1 = require(\"./commands/GetDistributionConfigCommand\");\nconst GetFieldLevelEncryptionCommand_1 = require(\"./commands/GetFieldLevelEncryptionCommand\");\nconst GetFieldLevelEncryptionConfigCommand_1 = require(\"./commands/GetFieldLevelEncryptionConfigCommand\");\nconst GetFieldLevelEncryptionProfileCommand_1 = require(\"./commands/GetFieldLevelEncryptionProfileCommand\");\nconst GetFieldLevelEncryptionProfileConfigCommand_1 = require(\"./commands/GetFieldLevelEncryptionProfileConfigCommand\");\nconst GetFunctionCommand_1 = require(\"./commands/GetFunctionCommand\");\nconst GetInvalidationCommand_1 = require(\"./commands/GetInvalidationCommand\");\nconst GetKeyGroupCommand_1 = require(\"./commands/GetKeyGroupCommand\");\nconst GetKeyGroupConfigCommand_1 = require(\"./commands/GetKeyGroupConfigCommand\");\nconst GetMonitoringSubscriptionCommand_1 = require(\"./commands/GetMonitoringSubscriptionCommand\");\nconst GetOriginRequestPolicyCommand_1 = require(\"./commands/GetOriginRequestPolicyCommand\");\nconst GetOriginRequestPolicyConfigCommand_1 = require(\"./commands/GetOriginRequestPolicyConfigCommand\");\nconst GetPublicKeyCommand_1 = require(\"./commands/GetPublicKeyCommand\");\nconst GetPublicKeyConfigCommand_1 = require(\"./commands/GetPublicKeyConfigCommand\");\nconst GetRealtimeLogConfigCommand_1 = require(\"./commands/GetRealtimeLogConfigCommand\");\nconst GetResponseHeadersPolicyCommand_1 = require(\"./commands/GetResponseHeadersPolicyCommand\");\nconst GetResponseHeadersPolicyConfigCommand_1 = require(\"./commands/GetResponseHeadersPolicyConfigCommand\");\nconst GetStreamingDistributionCommand_1 = require(\"./commands/GetStreamingDistributionCommand\");\nconst GetStreamingDistributionConfigCommand_1 = require(\"./commands/GetStreamingDistributionConfigCommand\");\nconst ListCachePoliciesCommand_1 = require(\"./commands/ListCachePoliciesCommand\");\nconst ListCloudFrontOriginAccessIdentitiesCommand_1 = require(\"./commands/ListCloudFrontOriginAccessIdentitiesCommand\");\nconst ListConflictingAliasesCommand_1 = require(\"./commands/ListConflictingAliasesCommand\");\nconst ListDistributionsByCachePolicyIdCommand_1 = require(\"./commands/ListDistributionsByCachePolicyIdCommand\");\nconst ListDistributionsByKeyGroupCommand_1 = require(\"./commands/ListDistributionsByKeyGroupCommand\");\nconst ListDistributionsByOriginRequestPolicyIdCommand_1 = require(\"./commands/ListDistributionsByOriginRequestPolicyIdCommand\");\nconst ListDistributionsByRealtimeLogConfigCommand_1 = require(\"./commands/ListDistributionsByRealtimeLogConfigCommand\");\nconst ListDistributionsByResponseHeadersPolicyIdCommand_1 = require(\"./commands/ListDistributionsByResponseHeadersPolicyIdCommand\");\nconst ListDistributionsByWebACLIdCommand_1 = require(\"./commands/ListDistributionsByWebACLIdCommand\");\nconst ListDistributionsCommand_1 = require(\"./commands/ListDistributionsCommand\");\nconst ListFieldLevelEncryptionConfigsCommand_1 = require(\"./commands/ListFieldLevelEncryptionConfigsCommand\");\nconst ListFieldLevelEncryptionProfilesCommand_1 = require(\"./commands/ListFieldLevelEncryptionProfilesCommand\");\nconst ListFunctionsCommand_1 = require(\"./commands/ListFunctionsCommand\");\nconst ListInvalidationsCommand_1 = require(\"./commands/ListInvalidationsCommand\");\nconst ListKeyGroupsCommand_1 = require(\"./commands/ListKeyGroupsCommand\");\nconst ListOriginRequestPoliciesCommand_1 = require(\"./commands/ListOriginRequestPoliciesCommand\");\nconst ListPublicKeysCommand_1 = require(\"./commands/ListPublicKeysCommand\");\nconst ListRealtimeLogConfigsCommand_1 = require(\"./commands/ListRealtimeLogConfigsCommand\");\nconst ListResponseHeadersPoliciesCommand_1 = require(\"./commands/ListResponseHeadersPoliciesCommand\");\nconst ListStreamingDistributionsCommand_1 = require(\"./commands/ListStreamingDistributionsCommand\");\nconst ListTagsForResourceCommand_1 = require(\"./commands/ListTagsForResourceCommand\");\nconst PublishFunctionCommand_1 = require(\"./commands/PublishFunctionCommand\");\nconst TagResourceCommand_1 = require(\"./commands/TagResourceCommand\");\nconst TestFunctionCommand_1 = require(\"./commands/TestFunctionCommand\");\nconst UntagResourceCommand_1 = require(\"./commands/UntagResourceCommand\");\nconst UpdateCachePolicyCommand_1 = require(\"./commands/UpdateCachePolicyCommand\");\nconst UpdateCloudFrontOriginAccessIdentityCommand_1 = require(\"./commands/UpdateCloudFrontOriginAccessIdentityCommand\");\nconst UpdateDistributionCommand_1 = require(\"./commands/UpdateDistributionCommand\");\nconst UpdateFieldLevelEncryptionConfigCommand_1 = require(\"./commands/UpdateFieldLevelEncryptionConfigCommand\");\nconst UpdateFieldLevelEncryptionProfileCommand_1 = require(\"./commands/UpdateFieldLevelEncryptionProfileCommand\");\nconst UpdateFunctionCommand_1 = require(\"./commands/UpdateFunctionCommand\");\nconst UpdateKeyGroupCommand_1 = require(\"./commands/UpdateKeyGroupCommand\");\nconst UpdateOriginRequestPolicyCommand_1 = require(\"./commands/UpdateOriginRequestPolicyCommand\");\nconst UpdatePublicKeyCommand_1 = require(\"./commands/UpdatePublicKeyCommand\");\nconst UpdateRealtimeLogConfigCommand_1 = require(\"./commands/UpdateRealtimeLogConfigCommand\");\nconst UpdateResponseHeadersPolicyCommand_1 = require(\"./commands/UpdateResponseHeadersPolicyCommand\");\nconst UpdateStreamingDistributionCommand_1 = require(\"./commands/UpdateStreamingDistributionCommand\");\nclass CloudFront extends CloudFrontClient_1.CloudFrontClient {\n    associateAlias(args, optionsOrCb, cb) {\n        const command = new AssociateAliasCommand_1.AssociateAliasCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createCachePolicy(args, optionsOrCb, cb) {\n        const command = new CreateCachePolicyCommand_1.CreateCachePolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createCloudFrontOriginAccessIdentity(args, optionsOrCb, cb) {\n        const command = new CreateCloudFrontOriginAccessIdentityCommand_1.CreateCloudFrontOriginAccessIdentityCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createDistribution(args, optionsOrCb, cb) {\n        const command = new CreateDistributionCommand_1.CreateDistributionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createDistributionWithTags(args, optionsOrCb, cb) {\n        const command = new CreateDistributionWithTagsCommand_1.CreateDistributionWithTagsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createFieldLevelEncryptionConfig(args, optionsOrCb, cb) {\n        const command = new CreateFieldLevelEncryptionConfigCommand_1.CreateFieldLevelEncryptionConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createFieldLevelEncryptionProfile(args, optionsOrCb, cb) {\n        const command = new CreateFieldLevelEncryptionProfileCommand_1.CreateFieldLevelEncryptionProfileCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createFunction(args, optionsOrCb, cb) {\n        const command = new CreateFunctionCommand_1.CreateFunctionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createInvalidation(args, optionsOrCb, cb) {\n        const command = new CreateInvalidationCommand_1.CreateInvalidationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createKeyGroup(args, optionsOrCb, cb) {\n        const command = new CreateKeyGroupCommand_1.CreateKeyGroupCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createMonitoringSubscription(args, optionsOrCb, cb) {\n        const command = new CreateMonitoringSubscriptionCommand_1.CreateMonitoringSubscriptionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createOriginRequestPolicy(args, optionsOrCb, cb) {\n        const command = new CreateOriginRequestPolicyCommand_1.CreateOriginRequestPolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createPublicKey(args, optionsOrCb, cb) {\n        const command = new CreatePublicKeyCommand_1.CreatePublicKeyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createRealtimeLogConfig(args, optionsOrCb, cb) {\n        const command = new CreateRealtimeLogConfigCommand_1.CreateRealtimeLogConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createResponseHeadersPolicy(args, optionsOrCb, cb) {\n        const command = new CreateResponseHeadersPolicyCommand_1.CreateResponseHeadersPolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createStreamingDistribution(args, optionsOrCb, cb) {\n        const command = new CreateStreamingDistributionCommand_1.CreateStreamingDistributionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createStreamingDistributionWithTags(args, optionsOrCb, cb) {\n        const command = new CreateStreamingDistributionWithTagsCommand_1.CreateStreamingDistributionWithTagsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteCachePolicy(args, optionsOrCb, cb) {\n        const command = new DeleteCachePolicyCommand_1.DeleteCachePolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteCloudFrontOriginAccessIdentity(args, optionsOrCb, cb) {\n        const command = new DeleteCloudFrontOriginAccessIdentityCommand_1.DeleteCloudFrontOriginAccessIdentityCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteDistribution(args, optionsOrCb, cb) {\n        const command = new DeleteDistributionCommand_1.DeleteDistributionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteFieldLevelEncryptionConfig(args, optionsOrCb, cb) {\n        const command = new DeleteFieldLevelEncryptionConfigCommand_1.DeleteFieldLevelEncryptionConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteFieldLevelEncryptionProfile(args, optionsOrCb, cb) {\n        const command = new DeleteFieldLevelEncryptionProfileCommand_1.DeleteFieldLevelEncryptionProfileCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteFunction(args, optionsOrCb, cb) {\n        const command = new DeleteFunctionCommand_1.DeleteFunctionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteKeyGroup(args, optionsOrCb, cb) {\n        const command = new DeleteKeyGroupCommand_1.DeleteKeyGroupCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteMonitoringSubscription(args, optionsOrCb, cb) {\n        const command = new DeleteMonitoringSubscriptionCommand_1.DeleteMonitoringSubscriptionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteOriginRequestPolicy(args, optionsOrCb, cb) {\n        const command = new DeleteOriginRequestPolicyCommand_1.DeleteOriginRequestPolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deletePublicKey(args, optionsOrCb, cb) {\n        const command = new DeletePublicKeyCommand_1.DeletePublicKeyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteRealtimeLogConfig(args, optionsOrCb, cb) {\n        const command = new DeleteRealtimeLogConfigCommand_1.DeleteRealtimeLogConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteResponseHeadersPolicy(args, optionsOrCb, cb) {\n        const command = new DeleteResponseHeadersPolicyCommand_1.DeleteResponseHeadersPolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteStreamingDistribution(args, optionsOrCb, cb) {\n        const command = new DeleteStreamingDistributionCommand_1.DeleteStreamingDistributionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    describeFunction(args, optionsOrCb, cb) {\n        const command = new DescribeFunctionCommand_1.DescribeFunctionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getCachePolicy(args, optionsOrCb, cb) {\n        const command = new GetCachePolicyCommand_1.GetCachePolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getCachePolicyConfig(args, optionsOrCb, cb) {\n        const command = new GetCachePolicyConfigCommand_1.GetCachePolicyConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getCloudFrontOriginAccessIdentity(args, optionsOrCb, cb) {\n        const command = new GetCloudFrontOriginAccessIdentityCommand_1.GetCloudFrontOriginAccessIdentityCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getCloudFrontOriginAccessIdentityConfig(args, optionsOrCb, cb) {\n        const command = new GetCloudFrontOriginAccessIdentityConfigCommand_1.GetCloudFrontOriginAccessIdentityConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getDistribution(args, optionsOrCb, cb) {\n        const command = new GetDistributionCommand_1.GetDistributionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getDistributionConfig(args, optionsOrCb, cb) {\n        const command = new GetDistributionConfigCommand_1.GetDistributionConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getFieldLevelEncryption(args, optionsOrCb, cb) {\n        const command = new GetFieldLevelEncryptionCommand_1.GetFieldLevelEncryptionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getFieldLevelEncryptionConfig(args, optionsOrCb, cb) {\n        const command = new GetFieldLevelEncryptionConfigCommand_1.GetFieldLevelEncryptionConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getFieldLevelEncryptionProfile(args, optionsOrCb, cb) {\n        const command = new GetFieldLevelEncryptionProfileCommand_1.GetFieldLevelEncryptionProfileCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getFieldLevelEncryptionProfileConfig(args, optionsOrCb, cb) {\n        const command = new GetFieldLevelEncryptionProfileConfigCommand_1.GetFieldLevelEncryptionProfileConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getFunction(args, optionsOrCb, cb) {\n        const command = new GetFunctionCommand_1.GetFunctionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getInvalidation(args, optionsOrCb, cb) {\n        const command = new GetInvalidationCommand_1.GetInvalidationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getKeyGroup(args, optionsOrCb, cb) {\n        const command = new GetKeyGroupCommand_1.GetKeyGroupCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getKeyGroupConfig(args, optionsOrCb, cb) {\n        const command = new GetKeyGroupConfigCommand_1.GetKeyGroupConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getMonitoringSubscription(args, optionsOrCb, cb) {\n        const command = new GetMonitoringSubscriptionCommand_1.GetMonitoringSubscriptionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getOriginRequestPolicy(args, optionsOrCb, cb) {\n        const command = new GetOriginRequestPolicyCommand_1.GetOriginRequestPolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getOriginRequestPolicyConfig(args, optionsOrCb, cb) {\n        const command = new GetOriginRequestPolicyConfigCommand_1.GetOriginRequestPolicyConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getPublicKey(args, optionsOrCb, cb) {\n        const command = new GetPublicKeyCommand_1.GetPublicKeyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getPublicKeyConfig(args, optionsOrCb, cb) {\n        const command = new GetPublicKeyConfigCommand_1.GetPublicKeyConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getRealtimeLogConfig(args, optionsOrCb, cb) {\n        const command = new GetRealtimeLogConfigCommand_1.GetRealtimeLogConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getResponseHeadersPolicy(args, optionsOrCb, cb) {\n        const command = new GetResponseHeadersPolicyCommand_1.GetResponseHeadersPolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getResponseHeadersPolicyConfig(args, optionsOrCb, cb) {\n        const command = new GetResponseHeadersPolicyConfigCommand_1.GetResponseHeadersPolicyConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getStreamingDistribution(args, optionsOrCb, cb) {\n        const command = new GetStreamingDistributionCommand_1.GetStreamingDistributionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getStreamingDistributionConfig(args, optionsOrCb, cb) {\n        const command = new GetStreamingDistributionConfigCommand_1.GetStreamingDistributionConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listCachePolicies(args, optionsOrCb, cb) {\n        const command = new ListCachePoliciesCommand_1.ListCachePoliciesCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listCloudFrontOriginAccessIdentities(args, optionsOrCb, cb) {\n        const command = new ListCloudFrontOriginAccessIdentitiesCommand_1.ListCloudFrontOriginAccessIdentitiesCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listConflictingAliases(args, optionsOrCb, cb) {\n        const command = new ListConflictingAliasesCommand_1.ListConflictingAliasesCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listDistributions(args, optionsOrCb, cb) {\n        const command = new ListDistributionsCommand_1.ListDistributionsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listDistributionsByCachePolicyId(args, optionsOrCb, cb) {\n        const command = new ListDistributionsByCachePolicyIdCommand_1.ListDistributionsByCachePolicyIdCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listDistributionsByKeyGroup(args, optionsOrCb, cb) {\n        const command = new ListDistributionsByKeyGroupCommand_1.ListDistributionsByKeyGroupCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listDistributionsByOriginRequestPolicyId(args, optionsOrCb, cb) {\n        const command = new ListDistributionsByOriginRequestPolicyIdCommand_1.ListDistributionsByOriginRequestPolicyIdCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listDistributionsByRealtimeLogConfig(args, optionsOrCb, cb) {\n        const command = new ListDistributionsByRealtimeLogConfigCommand_1.ListDistributionsByRealtimeLogConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listDistributionsByResponseHeadersPolicyId(args, optionsOrCb, cb) {\n        const command = new ListDistributionsByResponseHeadersPolicyIdCommand_1.ListDistributionsByResponseHeadersPolicyIdCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listDistributionsByWebACLId(args, optionsOrCb, cb) {\n        const command = new ListDistributionsByWebACLIdCommand_1.ListDistributionsByWebACLIdCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listFieldLevelEncryptionConfigs(args, optionsOrCb, cb) {\n        const command = new ListFieldLevelEncryptionConfigsCommand_1.ListFieldLevelEncryptionConfigsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listFieldLevelEncryptionProfiles(args, optionsOrCb, cb) {\n        const command = new ListFieldLevelEncryptionProfilesCommand_1.ListFieldLevelEncryptionProfilesCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listFunctions(args, optionsOrCb, cb) {\n        const command = new ListFunctionsCommand_1.ListFunctionsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listInvalidations(args, optionsOrCb, cb) {\n        const command = new ListInvalidationsCommand_1.ListInvalidationsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listKeyGroups(args, optionsOrCb, cb) {\n        const command = new ListKeyGroupsCommand_1.ListKeyGroupsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listOriginRequestPolicies(args, optionsOrCb, cb) {\n        const command = new ListOriginRequestPoliciesCommand_1.ListOriginRequestPoliciesCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listPublicKeys(args, optionsOrCb, cb) {\n        const command = new ListPublicKeysCommand_1.ListPublicKeysCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listRealtimeLogConfigs(args, optionsOrCb, cb) {\n        const command = new ListRealtimeLogConfigsCommand_1.ListRealtimeLogConfigsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listResponseHeadersPolicies(args, optionsOrCb, cb) {\n        const command = new ListResponseHeadersPoliciesCommand_1.ListResponseHeadersPoliciesCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listStreamingDistributions(args, optionsOrCb, cb) {\n        const command = new ListStreamingDistributionsCommand_1.ListStreamingDistributionsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listTagsForResource(args, optionsOrCb, cb) {\n        const command = new ListTagsForResourceCommand_1.ListTagsForResourceCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    publishFunction(args, optionsOrCb, cb) {\n        const command = new PublishFunctionCommand_1.PublishFunctionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    tagResource(args, optionsOrCb, cb) {\n        const command = new TagResourceCommand_1.TagResourceCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    testFunction(args, optionsOrCb, cb) {\n        const command = new TestFunctionCommand_1.TestFunctionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    untagResource(args, optionsOrCb, cb) {\n        const command = new UntagResourceCommand_1.UntagResourceCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    updateCachePolicy(args, optionsOrCb, cb) {\n        const command = new UpdateCachePolicyCommand_1.UpdateCachePolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    updateCloudFrontOriginAccessIdentity(args, optionsOrCb, cb) {\n        const command = new UpdateCloudFrontOriginAccessIdentityCommand_1.UpdateCloudFrontOriginAccessIdentityCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    updateDistribution(args, optionsOrCb, cb) {\n        const command = new UpdateDistributionCommand_1.UpdateDistributionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    updateFieldLevelEncryptionConfig(args, optionsOrCb, cb) {\n        const command = new UpdateFieldLevelEncryptionConfigCommand_1.UpdateFieldLevelEncryptionConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    updateFieldLevelEncryptionProfile(args, optionsOrCb, cb) {\n        const command = new UpdateFieldLevelEncryptionProfileCommand_1.UpdateFieldLevelEncryptionProfileCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    updateFunction(args, optionsOrCb, cb) {\n        const command = new UpdateFunctionCommand_1.UpdateFunctionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    updateKeyGroup(args, optionsOrCb, cb) {\n        const command = new UpdateKeyGroupCommand_1.UpdateKeyGroupCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    updateOriginRequestPolicy(args, optionsOrCb, cb) {\n        const command = new UpdateOriginRequestPolicyCommand_1.UpdateOriginRequestPolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    updatePublicKey(args, optionsOrCb, cb) {\n        const command = new UpdatePublicKeyCommand_1.UpdatePublicKeyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    updateRealtimeLogConfig(args, optionsOrCb, cb) {\n        const command = new UpdateRealtimeLogConfigCommand_1.UpdateRealtimeLogConfigCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    updateResponseHeadersPolicy(args, optionsOrCb, cb) {\n        const command = new UpdateResponseHeadersPolicyCommand_1.UpdateResponseHeadersPolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    updateStreamingDistribution(args, optionsOrCb, cb) {\n        const command = new UpdateStreamingDistributionCommand_1.UpdateStreamingDistributionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n}\nexports.CloudFront = CloudFront;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CloudFrontClient = void 0;\nconst config_resolver_1 = require(\"@aws-sdk/config-resolver\");\nconst middleware_content_length_1 = require(\"@aws-sdk/middleware-content-length\");\nconst middleware_host_header_1 = require(\"@aws-sdk/middleware-host-header\");\nconst middleware_logger_1 = require(\"@aws-sdk/middleware-logger\");\nconst middleware_retry_1 = require(\"@aws-sdk/middleware-retry\");\nconst middleware_signing_1 = require(\"@aws-sdk/middleware-signing\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/middleware-user-agent\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst runtimeConfig_1 = require(\"./runtimeConfig\");\nclass CloudFrontClient extends smithy_client_1.Client {\n    constructor(configuration) {\n        const _config_0 = runtimeConfig_1.getRuntimeConfig(configuration);\n        const _config_1 = config_resolver_1.resolveRegionConfig(_config_0);\n        const _config_2 = config_resolver_1.resolveEndpointsConfig(_config_1);\n        const _config_3 = middleware_retry_1.resolveRetryConfig(_config_2);\n        const _config_4 = middleware_host_header_1.resolveHostHeaderConfig(_config_3);\n        const _config_5 = middleware_signing_1.resolveAwsAuthConfig(_config_4);\n        const _config_6 = middleware_user_agent_1.resolveUserAgentConfig(_config_5);\n        super(_config_6);\n        this.config = _config_6;\n        this.middlewareStack.use(middleware_retry_1.getRetryPlugin(this.config));\n        this.middlewareStack.use(middleware_content_length_1.getContentLengthPlugin(this.config));\n        this.middlewareStack.use(middleware_host_header_1.getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(middleware_logger_1.getLoggerPlugin(this.config));\n        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(this.config));\n        this.middlewareStack.use(middleware_user_agent_1.getUserAgentPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\nexports.CloudFrontClient = CloudFrontClient;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AssociateAliasCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass AssociateAliasCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"AssociateAliasCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.AssociateAliasRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlAssociateAliasCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlAssociateAliasCommand(output, context);\n    }\n}\nexports.AssociateAliasCommand = AssociateAliasCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateCachePolicyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateCachePolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateCachePolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateCachePolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateCachePolicyResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateCachePolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateCachePolicyCommand(output, context);\n    }\n}\nexports.CreateCachePolicyCommand = CreateCachePolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateCloudFrontOriginAccessIdentityCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateCloudFrontOriginAccessIdentityCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateCloudFrontOriginAccessIdentityCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateCloudFrontOriginAccessIdentityRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateCloudFrontOriginAccessIdentityResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateCloudFrontOriginAccessIdentityCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateCloudFrontOriginAccessIdentityCommand(output, context);\n    }\n}\nexports.CreateCloudFrontOriginAccessIdentityCommand = CreateCloudFrontOriginAccessIdentityCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateDistributionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateDistributionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateDistributionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateDistributionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateDistributionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateDistributionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateDistributionCommand(output, context);\n    }\n}\nexports.CreateDistributionCommand = CreateDistributionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateDistributionWithTagsCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateDistributionWithTagsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateDistributionWithTagsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateDistributionWithTagsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateDistributionWithTagsResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateDistributionWithTagsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateDistributionWithTagsCommand(output, context);\n    }\n}\nexports.CreateDistributionWithTagsCommand = CreateDistributionWithTagsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateFieldLevelEncryptionConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateFieldLevelEncryptionConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateFieldLevelEncryptionConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateFieldLevelEncryptionConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateFieldLevelEncryptionConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateFieldLevelEncryptionConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateFieldLevelEncryptionConfigCommand(output, context);\n    }\n}\nexports.CreateFieldLevelEncryptionConfigCommand = CreateFieldLevelEncryptionConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateFieldLevelEncryptionProfileCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateFieldLevelEncryptionProfileCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateFieldLevelEncryptionProfileCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateFieldLevelEncryptionProfileRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateFieldLevelEncryptionProfileResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateFieldLevelEncryptionProfileCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateFieldLevelEncryptionProfileCommand(output, context);\n    }\n}\nexports.CreateFieldLevelEncryptionProfileCommand = CreateFieldLevelEncryptionProfileCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateFunctionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateFunctionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateFunctionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateFunctionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateFunctionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateFunctionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateFunctionCommand(output, context);\n    }\n}\nexports.CreateFunctionCommand = CreateFunctionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateInvalidationCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateInvalidationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateInvalidationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateInvalidationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateInvalidationResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateInvalidationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateInvalidationCommand(output, context);\n    }\n}\nexports.CreateInvalidationCommand = CreateInvalidationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateKeyGroupCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateKeyGroupCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateKeyGroupCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateKeyGroupRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateKeyGroupResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateKeyGroupCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateKeyGroupCommand(output, context);\n    }\n}\nexports.CreateKeyGroupCommand = CreateKeyGroupCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateMonitoringSubscriptionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateMonitoringSubscriptionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateMonitoringSubscriptionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateMonitoringSubscriptionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateMonitoringSubscriptionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateMonitoringSubscriptionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateMonitoringSubscriptionCommand(output, context);\n    }\n}\nexports.CreateMonitoringSubscriptionCommand = CreateMonitoringSubscriptionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateOriginRequestPolicyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateOriginRequestPolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateOriginRequestPolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateOriginRequestPolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateOriginRequestPolicyResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateOriginRequestPolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateOriginRequestPolicyCommand(output, context);\n    }\n}\nexports.CreateOriginRequestPolicyCommand = CreateOriginRequestPolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreatePublicKeyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreatePublicKeyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreatePublicKeyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreatePublicKeyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreatePublicKeyResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreatePublicKeyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreatePublicKeyCommand(output, context);\n    }\n}\nexports.CreatePublicKeyCommand = CreatePublicKeyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateRealtimeLogConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateRealtimeLogConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateRealtimeLogConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateRealtimeLogConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateRealtimeLogConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateRealtimeLogConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateRealtimeLogConfigCommand(output, context);\n    }\n}\nexports.CreateRealtimeLogConfigCommand = CreateRealtimeLogConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateResponseHeadersPolicyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateResponseHeadersPolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateResponseHeadersPolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateResponseHeadersPolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateResponseHeadersPolicyResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateResponseHeadersPolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateResponseHeadersPolicyCommand(output, context);\n    }\n}\nexports.CreateResponseHeadersPolicyCommand = CreateResponseHeadersPolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateStreamingDistributionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateStreamingDistributionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateStreamingDistributionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateStreamingDistributionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateStreamingDistributionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateStreamingDistributionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateStreamingDistributionCommand(output, context);\n    }\n}\nexports.CreateStreamingDistributionCommand = CreateStreamingDistributionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateStreamingDistributionWithTagsCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateStreamingDistributionWithTagsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"CreateStreamingDistributionWithTagsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateStreamingDistributionWithTagsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateStreamingDistributionWithTagsResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateStreamingDistributionWithTagsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateStreamingDistributionWithTagsCommand(output, context);\n    }\n}\nexports.CreateStreamingDistributionWithTagsCommand = CreateStreamingDistributionWithTagsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteCachePolicyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteCachePolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"DeleteCachePolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteCachePolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteCachePolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteCachePolicyCommand(output, context);\n    }\n}\nexports.DeleteCachePolicyCommand = DeleteCachePolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteCloudFrontOriginAccessIdentityCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteCloudFrontOriginAccessIdentityCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"DeleteCloudFrontOriginAccessIdentityCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteCloudFrontOriginAccessIdentityRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteCloudFrontOriginAccessIdentityCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteCloudFrontOriginAccessIdentityCommand(output, context);\n    }\n}\nexports.DeleteCloudFrontOriginAccessIdentityCommand = DeleteCloudFrontOriginAccessIdentityCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteDistributionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteDistributionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"DeleteDistributionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteDistributionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteDistributionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteDistributionCommand(output, context);\n    }\n}\nexports.DeleteDistributionCommand = DeleteDistributionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteFieldLevelEncryptionConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteFieldLevelEncryptionConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"DeleteFieldLevelEncryptionConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteFieldLevelEncryptionConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteFieldLevelEncryptionConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteFieldLevelEncryptionConfigCommand(output, context);\n    }\n}\nexports.DeleteFieldLevelEncryptionConfigCommand = DeleteFieldLevelEncryptionConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteFieldLevelEncryptionProfileCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteFieldLevelEncryptionProfileCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"DeleteFieldLevelEncryptionProfileCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteFieldLevelEncryptionProfileRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteFieldLevelEncryptionProfileCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteFieldLevelEncryptionProfileCommand(output, context);\n    }\n}\nexports.DeleteFieldLevelEncryptionProfileCommand = DeleteFieldLevelEncryptionProfileCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteFunctionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteFunctionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"DeleteFunctionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteFunctionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteFunctionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteFunctionCommand(output, context);\n    }\n}\nexports.DeleteFunctionCommand = DeleteFunctionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteKeyGroupCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteKeyGroupCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"DeleteKeyGroupCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteKeyGroupRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteKeyGroupCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteKeyGroupCommand(output, context);\n    }\n}\nexports.DeleteKeyGroupCommand = DeleteKeyGroupCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteMonitoringSubscriptionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteMonitoringSubscriptionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"DeleteMonitoringSubscriptionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteMonitoringSubscriptionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.DeleteMonitoringSubscriptionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteMonitoringSubscriptionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteMonitoringSubscriptionCommand(output, context);\n    }\n}\nexports.DeleteMonitoringSubscriptionCommand = DeleteMonitoringSubscriptionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteOriginRequestPolicyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteOriginRequestPolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"DeleteOriginRequestPolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.DeleteOriginRequestPolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteOriginRequestPolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteOriginRequestPolicyCommand(output, context);\n    }\n}\nexports.DeleteOriginRequestPolicyCommand = DeleteOriginRequestPolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeletePublicKeyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeletePublicKeyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"DeletePublicKeyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.DeletePublicKeyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeletePublicKeyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeletePublicKeyCommand(output, context);\n    }\n}\nexports.DeletePublicKeyCommand = DeletePublicKeyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteRealtimeLogConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteRealtimeLogConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"DeleteRealtimeLogConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.DeleteRealtimeLogConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteRealtimeLogConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteRealtimeLogConfigCommand(output, context);\n    }\n}\nexports.DeleteRealtimeLogConfigCommand = DeleteRealtimeLogConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteResponseHeadersPolicyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteResponseHeadersPolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"DeleteResponseHeadersPolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.DeleteResponseHeadersPolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteResponseHeadersPolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteResponseHeadersPolicyCommand(output, context);\n    }\n}\nexports.DeleteResponseHeadersPolicyCommand = DeleteResponseHeadersPolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteStreamingDistributionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteStreamingDistributionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"DeleteStreamingDistributionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.DeleteStreamingDistributionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteStreamingDistributionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteStreamingDistributionCommand(output, context);\n    }\n}\nexports.DeleteStreamingDistributionCommand = DeleteStreamingDistributionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DescribeFunctionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DescribeFunctionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"DescribeFunctionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.DescribeFunctionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.DescribeFunctionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDescribeFunctionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDescribeFunctionCommand(output, context);\n    }\n}\nexports.DescribeFunctionCommand = DescribeFunctionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetCachePolicyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetCachePolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetCachePolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetCachePolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetCachePolicyResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetCachePolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetCachePolicyCommand(output, context);\n    }\n}\nexports.GetCachePolicyCommand = GetCachePolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetCachePolicyConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetCachePolicyConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetCachePolicyConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetCachePolicyConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetCachePolicyConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetCachePolicyConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetCachePolicyConfigCommand(output, context);\n    }\n}\nexports.GetCachePolicyConfigCommand = GetCachePolicyConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetCloudFrontOriginAccessIdentityCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetCloudFrontOriginAccessIdentityCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetCloudFrontOriginAccessIdentityCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetCloudFrontOriginAccessIdentityRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetCloudFrontOriginAccessIdentityResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetCloudFrontOriginAccessIdentityCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetCloudFrontOriginAccessIdentityCommand(output, context);\n    }\n}\nexports.GetCloudFrontOriginAccessIdentityCommand = GetCloudFrontOriginAccessIdentityCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetCloudFrontOriginAccessIdentityConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetCloudFrontOriginAccessIdentityConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetCloudFrontOriginAccessIdentityConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetCloudFrontOriginAccessIdentityConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetCloudFrontOriginAccessIdentityConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetCloudFrontOriginAccessIdentityConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetCloudFrontOriginAccessIdentityConfigCommand(output, context);\n    }\n}\nexports.GetCloudFrontOriginAccessIdentityConfigCommand = GetCloudFrontOriginAccessIdentityConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetDistributionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetDistributionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetDistributionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetDistributionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetDistributionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetDistributionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetDistributionCommand(output, context);\n    }\n}\nexports.GetDistributionCommand = GetDistributionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetDistributionConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetDistributionConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetDistributionConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetDistributionConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetDistributionConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetDistributionConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetDistributionConfigCommand(output, context);\n    }\n}\nexports.GetDistributionConfigCommand = GetDistributionConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetFieldLevelEncryptionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetFieldLevelEncryptionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetFieldLevelEncryptionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetFieldLevelEncryptionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetFieldLevelEncryptionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetFieldLevelEncryptionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetFieldLevelEncryptionCommand(output, context);\n    }\n}\nexports.GetFieldLevelEncryptionCommand = GetFieldLevelEncryptionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetFieldLevelEncryptionConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetFieldLevelEncryptionConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetFieldLevelEncryptionConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetFieldLevelEncryptionConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetFieldLevelEncryptionConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetFieldLevelEncryptionConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetFieldLevelEncryptionConfigCommand(output, context);\n    }\n}\nexports.GetFieldLevelEncryptionConfigCommand = GetFieldLevelEncryptionConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetFieldLevelEncryptionProfileCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetFieldLevelEncryptionProfileCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetFieldLevelEncryptionProfileCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetFieldLevelEncryptionProfileRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetFieldLevelEncryptionProfileResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetFieldLevelEncryptionProfileCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetFieldLevelEncryptionProfileCommand(output, context);\n    }\n}\nexports.GetFieldLevelEncryptionProfileCommand = GetFieldLevelEncryptionProfileCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetFieldLevelEncryptionProfileConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetFieldLevelEncryptionProfileConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetFieldLevelEncryptionProfileConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetFieldLevelEncryptionProfileConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetFieldLevelEncryptionProfileConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetFieldLevelEncryptionProfileConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetFieldLevelEncryptionProfileConfigCommand(output, context);\n    }\n}\nexports.GetFieldLevelEncryptionProfileConfigCommand = GetFieldLevelEncryptionProfileConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetFunctionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetFunctionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetFunctionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetFunctionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetFunctionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetFunctionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetFunctionCommand(output, context);\n    }\n}\nexports.GetFunctionCommand = GetFunctionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetInvalidationCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetInvalidationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetInvalidationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetInvalidationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetInvalidationResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetInvalidationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetInvalidationCommand(output, context);\n    }\n}\nexports.GetInvalidationCommand = GetInvalidationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetKeyGroupCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetKeyGroupCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetKeyGroupCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetKeyGroupRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetKeyGroupResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetKeyGroupCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetKeyGroupCommand(output, context);\n    }\n}\nexports.GetKeyGroupCommand = GetKeyGroupCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetKeyGroupConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetKeyGroupConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetKeyGroupConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetKeyGroupConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetKeyGroupConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetKeyGroupConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetKeyGroupConfigCommand(output, context);\n    }\n}\nexports.GetKeyGroupConfigCommand = GetKeyGroupConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetMonitoringSubscriptionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetMonitoringSubscriptionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetMonitoringSubscriptionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetMonitoringSubscriptionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetMonitoringSubscriptionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetMonitoringSubscriptionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetMonitoringSubscriptionCommand(output, context);\n    }\n}\nexports.GetMonitoringSubscriptionCommand = GetMonitoringSubscriptionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetOriginRequestPolicyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetOriginRequestPolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetOriginRequestPolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetOriginRequestPolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetOriginRequestPolicyResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetOriginRequestPolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetOriginRequestPolicyCommand(output, context);\n    }\n}\nexports.GetOriginRequestPolicyCommand = GetOriginRequestPolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetOriginRequestPolicyConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetOriginRequestPolicyConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetOriginRequestPolicyConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetOriginRequestPolicyConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetOriginRequestPolicyConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetOriginRequestPolicyConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetOriginRequestPolicyConfigCommand(output, context);\n    }\n}\nexports.GetOriginRequestPolicyConfigCommand = GetOriginRequestPolicyConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetPublicKeyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetPublicKeyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetPublicKeyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetPublicKeyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetPublicKeyResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetPublicKeyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetPublicKeyCommand(output, context);\n    }\n}\nexports.GetPublicKeyCommand = GetPublicKeyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetPublicKeyConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetPublicKeyConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetPublicKeyConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetPublicKeyConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetPublicKeyConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetPublicKeyConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetPublicKeyConfigCommand(output, context);\n    }\n}\nexports.GetPublicKeyConfigCommand = GetPublicKeyConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetRealtimeLogConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetRealtimeLogConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetRealtimeLogConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetRealtimeLogConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetRealtimeLogConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetRealtimeLogConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetRealtimeLogConfigCommand(output, context);\n    }\n}\nexports.GetRealtimeLogConfigCommand = GetRealtimeLogConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetResponseHeadersPolicyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetResponseHeadersPolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetResponseHeadersPolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetResponseHeadersPolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetResponseHeadersPolicyResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetResponseHeadersPolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetResponseHeadersPolicyCommand(output, context);\n    }\n}\nexports.GetResponseHeadersPolicyCommand = GetResponseHeadersPolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetResponseHeadersPolicyConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetResponseHeadersPolicyConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetResponseHeadersPolicyConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetResponseHeadersPolicyConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetResponseHeadersPolicyConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetResponseHeadersPolicyConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetResponseHeadersPolicyConfigCommand(output, context);\n    }\n}\nexports.GetResponseHeadersPolicyConfigCommand = GetResponseHeadersPolicyConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetStreamingDistributionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetStreamingDistributionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetStreamingDistributionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetStreamingDistributionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetStreamingDistributionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetStreamingDistributionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetStreamingDistributionCommand(output, context);\n    }\n}\nexports.GetStreamingDistributionCommand = GetStreamingDistributionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetStreamingDistributionConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetStreamingDistributionConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"GetStreamingDistributionConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.GetStreamingDistributionConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.GetStreamingDistributionConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetStreamingDistributionConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetStreamingDistributionConfigCommand(output, context);\n    }\n}\nexports.GetStreamingDistributionConfigCommand = GetStreamingDistributionConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCachePoliciesCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListCachePoliciesCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListCachePoliciesCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListCachePoliciesRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListCachePoliciesResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListCachePoliciesCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListCachePoliciesCommand(output, context);\n    }\n}\nexports.ListCachePoliciesCommand = ListCachePoliciesCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCloudFrontOriginAccessIdentitiesCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListCloudFrontOriginAccessIdentitiesCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListCloudFrontOriginAccessIdentitiesCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListCloudFrontOriginAccessIdentitiesRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListCloudFrontOriginAccessIdentitiesResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListCloudFrontOriginAccessIdentitiesCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListCloudFrontOriginAccessIdentitiesCommand(output, context);\n    }\n}\nexports.ListCloudFrontOriginAccessIdentitiesCommand = ListCloudFrontOriginAccessIdentitiesCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListConflictingAliasesCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListConflictingAliasesCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListConflictingAliasesCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListConflictingAliasesRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListConflictingAliasesResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListConflictingAliasesCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListConflictingAliasesCommand(output, context);\n    }\n}\nexports.ListConflictingAliasesCommand = ListConflictingAliasesCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListDistributionsByCachePolicyIdCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListDistributionsByCachePolicyIdCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListDistributionsByCachePolicyIdCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListDistributionsByCachePolicyIdRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListDistributionsByCachePolicyIdResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListDistributionsByCachePolicyIdCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListDistributionsByCachePolicyIdCommand(output, context);\n    }\n}\nexports.ListDistributionsByCachePolicyIdCommand = ListDistributionsByCachePolicyIdCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListDistributionsByKeyGroupCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListDistributionsByKeyGroupCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListDistributionsByKeyGroupCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListDistributionsByKeyGroupRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListDistributionsByKeyGroupResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListDistributionsByKeyGroupCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListDistributionsByKeyGroupCommand(output, context);\n    }\n}\nexports.ListDistributionsByKeyGroupCommand = ListDistributionsByKeyGroupCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListDistributionsByOriginRequestPolicyIdCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListDistributionsByOriginRequestPolicyIdCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListDistributionsByOriginRequestPolicyIdCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListDistributionsByOriginRequestPolicyIdRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListDistributionsByOriginRequestPolicyIdResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListDistributionsByOriginRequestPolicyIdCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListDistributionsByOriginRequestPolicyIdCommand(output, context);\n    }\n}\nexports.ListDistributionsByOriginRequestPolicyIdCommand = ListDistributionsByOriginRequestPolicyIdCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListDistributionsByRealtimeLogConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListDistributionsByRealtimeLogConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListDistributionsByRealtimeLogConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListDistributionsByRealtimeLogConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListDistributionsByRealtimeLogConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListDistributionsByRealtimeLogConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListDistributionsByRealtimeLogConfigCommand(output, context);\n    }\n}\nexports.ListDistributionsByRealtimeLogConfigCommand = ListDistributionsByRealtimeLogConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListDistributionsByResponseHeadersPolicyIdCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListDistributionsByResponseHeadersPolicyIdCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListDistributionsByResponseHeadersPolicyIdCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListDistributionsByResponseHeadersPolicyIdRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListDistributionsByResponseHeadersPolicyIdResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListDistributionsByResponseHeadersPolicyIdCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListDistributionsByResponseHeadersPolicyIdCommand(output, context);\n    }\n}\nexports.ListDistributionsByResponseHeadersPolicyIdCommand = ListDistributionsByResponseHeadersPolicyIdCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListDistributionsByWebACLIdCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListDistributionsByWebACLIdCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListDistributionsByWebACLIdCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListDistributionsByWebACLIdRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListDistributionsByWebACLIdResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListDistributionsByWebACLIdCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListDistributionsByWebACLIdCommand(output, context);\n    }\n}\nexports.ListDistributionsByWebACLIdCommand = ListDistributionsByWebACLIdCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListDistributionsCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListDistributionsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListDistributionsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListDistributionsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListDistributionsResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListDistributionsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListDistributionsCommand(output, context);\n    }\n}\nexports.ListDistributionsCommand = ListDistributionsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListFieldLevelEncryptionConfigsCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListFieldLevelEncryptionConfigsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListFieldLevelEncryptionConfigsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListFieldLevelEncryptionConfigsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListFieldLevelEncryptionConfigsResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListFieldLevelEncryptionConfigsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListFieldLevelEncryptionConfigsCommand(output, context);\n    }\n}\nexports.ListFieldLevelEncryptionConfigsCommand = ListFieldLevelEncryptionConfigsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListFieldLevelEncryptionProfilesCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListFieldLevelEncryptionProfilesCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListFieldLevelEncryptionProfilesCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListFieldLevelEncryptionProfilesRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListFieldLevelEncryptionProfilesResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListFieldLevelEncryptionProfilesCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListFieldLevelEncryptionProfilesCommand(output, context);\n    }\n}\nexports.ListFieldLevelEncryptionProfilesCommand = ListFieldLevelEncryptionProfilesCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListFunctionsCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListFunctionsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListFunctionsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListFunctionsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListFunctionsResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListFunctionsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListFunctionsCommand(output, context);\n    }\n}\nexports.ListFunctionsCommand = ListFunctionsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListInvalidationsCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListInvalidationsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListInvalidationsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListInvalidationsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListInvalidationsResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListInvalidationsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListInvalidationsCommand(output, context);\n    }\n}\nexports.ListInvalidationsCommand = ListInvalidationsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListKeyGroupsCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListKeyGroupsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListKeyGroupsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListKeyGroupsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListKeyGroupsResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListKeyGroupsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListKeyGroupsCommand(output, context);\n    }\n}\nexports.ListKeyGroupsCommand = ListKeyGroupsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListOriginRequestPoliciesCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListOriginRequestPoliciesCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListOriginRequestPoliciesCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListOriginRequestPoliciesRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListOriginRequestPoliciesResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListOriginRequestPoliciesCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListOriginRequestPoliciesCommand(output, context);\n    }\n}\nexports.ListOriginRequestPoliciesCommand = ListOriginRequestPoliciesCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListPublicKeysCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListPublicKeysCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListPublicKeysCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListPublicKeysRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListPublicKeysResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListPublicKeysCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListPublicKeysCommand(output, context);\n    }\n}\nexports.ListPublicKeysCommand = ListPublicKeysCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListRealtimeLogConfigsCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListRealtimeLogConfigsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListRealtimeLogConfigsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListRealtimeLogConfigsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListRealtimeLogConfigsResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListRealtimeLogConfigsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListRealtimeLogConfigsCommand(output, context);\n    }\n}\nexports.ListRealtimeLogConfigsCommand = ListRealtimeLogConfigsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListResponseHeadersPoliciesCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListResponseHeadersPoliciesCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListResponseHeadersPoliciesCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListResponseHeadersPoliciesRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListResponseHeadersPoliciesResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListResponseHeadersPoliciesCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListResponseHeadersPoliciesCommand(output, context);\n    }\n}\nexports.ListResponseHeadersPoliciesCommand = ListResponseHeadersPoliciesCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListStreamingDistributionsCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListStreamingDistributionsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListStreamingDistributionsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListStreamingDistributionsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListStreamingDistributionsResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListStreamingDistributionsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListStreamingDistributionsCommand(output, context);\n    }\n}\nexports.ListStreamingDistributionsCommand = ListStreamingDistributionsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListTagsForResourceCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListTagsForResourceCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"ListTagsForResourceCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.ListTagsForResourceRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.ListTagsForResourceResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListTagsForResourceCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListTagsForResourceCommand(output, context);\n    }\n}\nexports.ListTagsForResourceCommand = ListTagsForResourceCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PublishFunctionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PublishFunctionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"PublishFunctionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.PublishFunctionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.PublishFunctionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPublishFunctionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPublishFunctionCommand(output, context);\n    }\n}\nexports.PublishFunctionCommand = PublishFunctionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TagResourceCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass TagResourceCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"TagResourceCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.TagResourceRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlTagResourceCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlTagResourceCommand(output, context);\n    }\n}\nexports.TagResourceCommand = TagResourceCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TestFunctionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass TestFunctionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"TestFunctionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.TestFunctionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.TestFunctionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlTestFunctionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlTestFunctionCommand(output, context);\n    }\n}\nexports.TestFunctionCommand = TestFunctionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UntagResourceCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UntagResourceCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"UntagResourceCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UntagResourceRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUntagResourceCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUntagResourceCommand(output, context);\n    }\n}\nexports.UntagResourceCommand = UntagResourceCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateCachePolicyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UpdateCachePolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"UpdateCachePolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UpdateCachePolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.UpdateCachePolicyResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUpdateCachePolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUpdateCachePolicyCommand(output, context);\n    }\n}\nexports.UpdateCachePolicyCommand = UpdateCachePolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateCloudFrontOriginAccessIdentityCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UpdateCloudFrontOriginAccessIdentityCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"UpdateCloudFrontOriginAccessIdentityCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UpdateCloudFrontOriginAccessIdentityRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.UpdateCloudFrontOriginAccessIdentityResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUpdateCloudFrontOriginAccessIdentityCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUpdateCloudFrontOriginAccessIdentityCommand(output, context);\n    }\n}\nexports.UpdateCloudFrontOriginAccessIdentityCommand = UpdateCloudFrontOriginAccessIdentityCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateDistributionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UpdateDistributionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"UpdateDistributionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UpdateDistributionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.UpdateDistributionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUpdateDistributionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUpdateDistributionCommand(output, context);\n    }\n}\nexports.UpdateDistributionCommand = UpdateDistributionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateFieldLevelEncryptionConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UpdateFieldLevelEncryptionConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"UpdateFieldLevelEncryptionConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UpdateFieldLevelEncryptionConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.UpdateFieldLevelEncryptionConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUpdateFieldLevelEncryptionConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUpdateFieldLevelEncryptionConfigCommand(output, context);\n    }\n}\nexports.UpdateFieldLevelEncryptionConfigCommand = UpdateFieldLevelEncryptionConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateFieldLevelEncryptionProfileCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UpdateFieldLevelEncryptionProfileCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"UpdateFieldLevelEncryptionProfileCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UpdateFieldLevelEncryptionProfileRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.UpdateFieldLevelEncryptionProfileResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUpdateFieldLevelEncryptionProfileCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUpdateFieldLevelEncryptionProfileCommand(output, context);\n    }\n}\nexports.UpdateFieldLevelEncryptionProfileCommand = UpdateFieldLevelEncryptionProfileCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateFunctionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UpdateFunctionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"UpdateFunctionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UpdateFunctionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.UpdateFunctionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUpdateFunctionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUpdateFunctionCommand(output, context);\n    }\n}\nexports.UpdateFunctionCommand = UpdateFunctionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateKeyGroupCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UpdateKeyGroupCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"UpdateKeyGroupCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UpdateKeyGroupRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.UpdateKeyGroupResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUpdateKeyGroupCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUpdateKeyGroupCommand(output, context);\n    }\n}\nexports.UpdateKeyGroupCommand = UpdateKeyGroupCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateOriginRequestPolicyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UpdateOriginRequestPolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"UpdateOriginRequestPolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UpdateOriginRequestPolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.UpdateOriginRequestPolicyResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUpdateOriginRequestPolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUpdateOriginRequestPolicyCommand(output, context);\n    }\n}\nexports.UpdateOriginRequestPolicyCommand = UpdateOriginRequestPolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdatePublicKeyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UpdatePublicKeyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"UpdatePublicKeyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UpdatePublicKeyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.UpdatePublicKeyResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUpdatePublicKeyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUpdatePublicKeyCommand(output, context);\n    }\n}\nexports.UpdatePublicKeyCommand = UpdatePublicKeyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateRealtimeLogConfigCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UpdateRealtimeLogConfigCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"UpdateRealtimeLogConfigCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UpdateRealtimeLogConfigRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.UpdateRealtimeLogConfigResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUpdateRealtimeLogConfigCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUpdateRealtimeLogConfigCommand(output, context);\n    }\n}\nexports.UpdateRealtimeLogConfigCommand = UpdateRealtimeLogConfigCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateResponseHeadersPolicyCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UpdateResponseHeadersPolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"UpdateResponseHeadersPolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UpdateResponseHeadersPolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.UpdateResponseHeadersPolicyResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUpdateResponseHeadersPolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUpdateResponseHeadersPolicyCommand(output, context);\n    }\n}\nexports.UpdateResponseHeadersPolicyCommand = UpdateResponseHeadersPolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UpdateStreamingDistributionCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UpdateStreamingDistributionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudFrontClient\";\n        const commandName = \"UpdateStreamingDistributionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UpdateStreamingDistributionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.UpdateStreamingDistributionResult.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUpdateStreamingDistributionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUpdateStreamingDistributionCommand(output, context);\n    }\n}\nexports.UpdateStreamingDistributionCommand = UpdateStreamingDistributionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./AssociateAliasCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateCachePolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateCloudFrontOriginAccessIdentityCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateDistributionCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateDistributionWithTagsCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateFieldLevelEncryptionConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateFieldLevelEncryptionProfileCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateFunctionCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateInvalidationCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateKeyGroupCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateMonitoringSubscriptionCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateOriginRequestPolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreatePublicKeyCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateRealtimeLogConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateResponseHeadersPolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateStreamingDistributionCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateStreamingDistributionWithTagsCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteCachePolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteCloudFrontOriginAccessIdentityCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteDistributionCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteFieldLevelEncryptionConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteFieldLevelEncryptionProfileCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteFunctionCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteKeyGroupCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteMonitoringSubscriptionCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteOriginRequestPolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeletePublicKeyCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteRealtimeLogConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteResponseHeadersPolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteStreamingDistributionCommand\"), exports);\ntslib_1.__exportStar(require(\"./DescribeFunctionCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetCachePolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetCachePolicyConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetCloudFrontOriginAccessIdentityCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetCloudFrontOriginAccessIdentityConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetDistributionCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetDistributionConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetFieldLevelEncryptionCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetFieldLevelEncryptionConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetFieldLevelEncryptionProfileCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetFieldLevelEncryptionProfileConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetFunctionCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetInvalidationCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetKeyGroupCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetKeyGroupConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetMonitoringSubscriptionCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetOriginRequestPolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetOriginRequestPolicyConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetPublicKeyCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetPublicKeyConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetRealtimeLogConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetResponseHeadersPolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetResponseHeadersPolicyConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetStreamingDistributionCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetStreamingDistributionConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListCachePoliciesCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListCloudFrontOriginAccessIdentitiesCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListConflictingAliasesCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListDistributionsByCachePolicyIdCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListDistributionsByKeyGroupCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListDistributionsByOriginRequestPolicyIdCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListDistributionsByRealtimeLogConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListDistributionsByResponseHeadersPolicyIdCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListDistributionsByWebACLIdCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListDistributionsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListFieldLevelEncryptionConfigsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListFieldLevelEncryptionProfilesCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListFunctionsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListInvalidationsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListKeyGroupsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListOriginRequestPoliciesCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListPublicKeysCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListRealtimeLogConfigsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListResponseHeadersPoliciesCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListStreamingDistributionsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListTagsForResourceCommand\"), exports);\ntslib_1.__exportStar(require(\"./PublishFunctionCommand\"), exports);\ntslib_1.__exportStar(require(\"./TagResourceCommand\"), exports);\ntslib_1.__exportStar(require(\"./TestFunctionCommand\"), exports);\ntslib_1.__exportStar(require(\"./UntagResourceCommand\"), exports);\ntslib_1.__exportStar(require(\"./UpdateCachePolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./UpdateCloudFrontOriginAccessIdentityCommand\"), exports);\ntslib_1.__exportStar(require(\"./UpdateDistributionCommand\"), exports);\ntslib_1.__exportStar(require(\"./UpdateFieldLevelEncryptionConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./UpdateFieldLevelEncryptionProfileCommand\"), exports);\ntslib_1.__exportStar(require(\"./UpdateFunctionCommand\"), exports);\ntslib_1.__exportStar(require(\"./UpdateKeyGroupCommand\"), exports);\ntslib_1.__exportStar(require(\"./UpdateOriginRequestPolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./UpdatePublicKeyCommand\"), exports);\ntslib_1.__exportStar(require(\"./UpdateRealtimeLogConfigCommand\"), exports);\ntslib_1.__exportStar(require(\"./UpdateResponseHeadersPolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./UpdateStreamingDistributionCommand\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultRegionInfoProvider = void 0;\nconst config_resolver_1 = require(\"@aws-sdk/config-resolver\");\nconst regionHash = {\n    \"aws-cn-global\": {\n        variants: [\n            {\n                hostname: \"cloudfront.cn-northwest-1.amazonaws.com.cn\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"cn-northwest-1\",\n    },\n    \"aws-global\": {\n        variants: [\n            {\n                hostname: \"cloudfront.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"us-east-1\",\n    },\n};\nconst partitionHash = {\n    aws: {\n        regions: [\n            \"af-south-1\",\n            \"ap-east-1\",\n            \"ap-northeast-1\",\n            \"ap-northeast-2\",\n            \"ap-northeast-3\",\n            \"ap-south-1\",\n            \"ap-southeast-1\",\n            \"ap-southeast-2\",\n            \"aws-global\",\n            \"ca-central-1\",\n            \"eu-central-1\",\n            \"eu-north-1\",\n            \"eu-south-1\",\n            \"eu-west-1\",\n            \"eu-west-2\",\n            \"eu-west-3\",\n            \"me-south-1\",\n            \"sa-east-1\",\n            \"us-east-1\",\n            \"us-east-2\",\n            \"us-west-1\",\n            \"us-west-2\",\n        ],\n        regionRegex: \"^(us|eu|ap|sa|ca|me|af)\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"cloudfront.{region}.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"cloudfront-fips.{region}.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"cloudfront-fips.{region}.api.aws\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"cloudfront.{region}.api.aws\",\n                tags: [\"dualstack\"],\n            },\n        ],\n        endpoint: \"aws-global\",\n    },\n    \"aws-cn\": {\n        regions: [\"aws-cn-global\", \"cn-north-1\", \"cn-northwest-1\"],\n        regionRegex: \"^cn\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"cloudfront.{region}.amazonaws.com.cn\",\n                tags: [],\n            },\n            {\n                hostname: \"cloudfront-fips.{region}.amazonaws.com.cn\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"cloudfront-fips.{region}.api.amazonwebservices.com.cn\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"cloudfront.{region}.api.amazonwebservices.com.cn\",\n                tags: [\"dualstack\"],\n            },\n        ],\n        endpoint: \"aws-cn-global\",\n    },\n    \"aws-iso\": {\n        regions: [\"us-iso-east-1\", \"us-iso-west-1\"],\n        regionRegex: \"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"cloudfront.{region}.c2s.ic.gov\",\n                tags: [],\n            },\n            {\n                hostname: \"cloudfront-fips.{region}.c2s.ic.gov\",\n                tags: [\"fips\"],\n            },\n        ],\n    },\n    \"aws-iso-b\": {\n        regions: [\"us-isob-east-1\"],\n        regionRegex: \"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"cloudfront.{region}.sc2s.sgov.gov\",\n                tags: [],\n            },\n            {\n                hostname: \"cloudfront-fips.{region}.sc2s.sgov.gov\",\n                tags: [\"fips\"],\n            },\n        ],\n    },\n    \"aws-us-gov\": {\n        regions: [\"us-gov-east-1\", \"us-gov-west-1\"],\n        regionRegex: \"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"cloudfront.{region}.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"cloudfront-fips.{region}.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"cloudfront-fips.{region}.api.aws\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"cloudfront.{region}.api.aws\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n};\nconst defaultRegionInfoProvider = async (region, options) => config_resolver_1.getRegionInfo(region, {\n    ...options,\n    signingService: \"cloudfront\",\n    regionHash,\n    partitionHash,\n});\nexports.defaultRegionInfoProvider = defaultRegionInfoProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./CloudFront\"), exports);\ntslib_1.__exportStar(require(\"./CloudFrontClient\"), exports);\ntslib_1.__exportStar(require(\"./commands\"), exports);\ntslib_1.__exportStar(require(\"./models\"), exports);\ntslib_1.__exportStar(require(\"./pagination\"), exports);\ntslib_1.__exportStar(require(\"./waiters\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./models_0\"), exports);\ntslib_1.__exportStar(require(\"./models_1\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CloudFrontOriginAccessIdentityAlreadyExists = exports.TooManyQueryStringsInCachePolicy = exports.TooManyHeadersInCachePolicy = exports.TooManyCookiesInCachePolicy = exports.TooManyCachePolicies = exports.InconsistentQuantities = exports.CreateCachePolicyResult = exports.CreateCachePolicyRequest = exports.CannotChangeImmutablePublicKeyFields = exports.CachePolicyList = exports.CachePolicySummary = exports.CachePolicyInUse = exports.CachePolicyAlreadyExists = exports.CachePolicy = exports.CachePolicyConfig = exports.ParametersInCacheKeyAndForwardedToOrigin = exports.CachePolicyQueryStringsConfig = exports.QueryStringNames = exports.CachePolicyHeadersConfig = exports.CachePolicyCookiesConfig = exports.CacheBehaviors = exports.CacheBehavior = exports.TrustedSigners = exports.TrustedKeyGroups = exports.LambdaFunctionAssociations = exports.LambdaFunctionAssociation = exports.FunctionAssociations = exports.FunctionAssociation = exports.ForwardedValues = exports.QueryStringCacheKeys = exports.Headers = exports.CookiePreference = exports.CookieNames = exports.BatchTooLarge = exports.TooManyDistributionCNAMEs = exports.NoSuchDistribution = exports.InvalidArgument = exports.IllegalUpdate = exports.AssociateAliasRequest = exports.AllowedMethods = exports.CachedMethods = exports.AliasICPRecordal = exports.Aliases = exports.ActiveTrustedSigners = exports.Signer = exports.ActiveTrustedKeyGroups = exports.KGKeyPairIds = exports.KeyPairIds = exports.AccessDenied = exports.ResponseHeadersPolicyAccessControlAllowMethodsValues = void 0;\nexports.InvalidRelativePath = exports.InvalidQueryStringParameters = exports.InvalidProtocolSettings = exports.InvalidOriginReadTimeout = exports.InvalidOriginKeepaliveTimeout = exports.InvalidOriginAccessIdentity = exports.InvalidOrigin = exports.InvalidMinimumProtocolVersion = exports.InvalidLocationCode = exports.InvalidLambdaFunctionAssociation = exports.InvalidHeadersForS3Origin = exports.InvalidGeoRestrictionParameter = exports.InvalidFunctionAssociation = exports.InvalidForwardCookies = exports.InvalidErrorCode = exports.InvalidDefaultRootObject = exports.IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior = exports.DistributionAlreadyExists = exports.CreateDistributionResult = exports.Distribution = exports.CreateDistributionRequest = exports.DistributionConfig = exports.ViewerCertificate = exports.Restrictions = exports.GeoRestriction = exports.Origins = exports.Origin = exports.S3OriginConfig = exports.OriginShield = exports.CustomOriginConfig = exports.OriginSslProtocols = exports.CustomHeaders = exports.OriginCustomHeader = exports.OriginGroups = exports.OriginGroup = exports.OriginGroupMembers = exports.OriginGroupMember = exports.OriginGroupFailoverCriteria = exports.StatusCodes = exports.LoggingConfig = exports.DefaultCacheBehavior = exports.CustomErrorResponses = exports.CustomErrorResponse = exports.CNAMEAlreadyExists = exports.TooManyCloudFrontOriginAccessIdentities = exports.MissingBody = exports.CreateCloudFrontOriginAccessIdentityResult = exports.CloudFrontOriginAccessIdentity = exports.CreateCloudFrontOriginAccessIdentityRequest = exports.CloudFrontOriginAccessIdentityConfig = void 0;\nexports.FieldLevelEncryption = exports.CreateFieldLevelEncryptionConfigRequest = exports.FieldLevelEncryptionConfig = exports.QueryArgProfileConfig = exports.QueryArgProfiles = exports.QueryArgProfile = exports.ContentTypeProfileConfig = exports.ContentTypeProfiles = exports.ContentTypeProfile = exports.InvalidTagging = exports.CreateDistributionWithTagsResult = exports.CreateDistributionWithTagsRequest = exports.DistributionConfigWithTags = exports.Tags = exports.Tag = exports.TrustedSignerDoesNotExist = exports.TrustedKeyGroupDoesNotExist = exports.TooManyTrustedSigners = exports.TooManyQueryStringParameters = exports.TooManyOrigins = exports.TooManyOriginGroupsPerDistribution = exports.TooManyOriginCustomHeaders = exports.TooManyLambdaFunctionAssociations = exports.TooManyKeyGroupsAssociatedToDistribution = exports.TooManyHeadersInForwardedValues = exports.TooManyFunctionAssociations = exports.TooManyDistributionsWithSingleFunctionARN = exports.TooManyDistributionsWithLambdaAssociations = exports.TooManyDistributionsWithFunctionAssociations = exports.TooManyDistributionsAssociatedToResponseHeadersPolicy = exports.TooManyDistributionsAssociatedToOriginRequestPolicy = exports.TooManyDistributionsAssociatedToKeyGroup = exports.TooManyDistributionsAssociatedToFieldLevelEncryptionConfig = exports.TooManyDistributionsAssociatedToCachePolicy = exports.TooManyDistributions = exports.TooManyCookieNamesInWhiteList = exports.TooManyCertificates = exports.TooManyCacheBehaviors = exports.RealtimeLogConfigOwnerMismatch = exports.NoSuchResponseHeadersPolicy = exports.NoSuchRealtimeLogConfig = exports.NoSuchOriginRequestPolicy = exports.NoSuchOrigin = exports.NoSuchFieldLevelEncryptionConfig = exports.NoSuchCachePolicy = exports.InvalidWebACLId = exports.InvalidViewerCertificate = exports.InvalidTTLOrder = exports.InvalidResponseCode = exports.InvalidRequiredProtocol = void 0;\nexports.OriginRequestPolicyCookiesConfig = exports.CreateMonitoringSubscriptionResult = exports.CreateMonitoringSubscriptionRequest = exports.MonitoringSubscription = exports.RealtimeMetricsSubscriptionConfig = exports.RealtimeMetricsSubscriptionStatus = exports.TooManyPublicKeysInKeyGroup = exports.TooManyKeyGroups = exports.KeyGroupAlreadyExists = exports.CreateKeyGroupResult = exports.KeyGroup = exports.CreateKeyGroupRequest = exports.KeyGroupConfig = exports.TooManyInvalidationsInProgress = exports.CreateInvalidationResult = exports.Invalidation = exports.CreateInvalidationRequest = exports.InvalidationBatch = exports.Paths = exports.UnsupportedOperation = exports.TooManyFunctions = exports.FunctionSizeLimitExceeded = exports.FunctionAlreadyExists = exports.CreateFunctionResult = exports.FunctionSummary = exports.FunctionMetadata = exports.FunctionStage = exports.CreateFunctionRequest = exports.FunctionConfig = exports.FunctionRuntime = exports.TooManyFieldLevelEncryptionProfiles = exports.TooManyFieldLevelEncryptionFieldPatterns = exports.TooManyFieldLevelEncryptionEncryptionEntities = exports.NoSuchPublicKey = exports.FieldLevelEncryptionProfileSizeExceeded = exports.FieldLevelEncryptionProfileAlreadyExists = exports.CreateFieldLevelEncryptionProfileResult = exports.FieldLevelEncryptionProfile = exports.CreateFieldLevelEncryptionProfileRequest = exports.FieldLevelEncryptionProfileConfig = exports.EncryptionEntities = exports.EncryptionEntity = exports.FieldPatterns = exports.TooManyFieldLevelEncryptionQueryArgProfiles = exports.TooManyFieldLevelEncryptionContentTypeProfiles = exports.TooManyFieldLevelEncryptionConfigs = exports.QueryArgProfileEmpty = exports.NoSuchFieldLevelEncryptionProfile = exports.FieldLevelEncryptionConfigAlreadyExists = exports.CreateFieldLevelEncryptionConfigResult = void 0;\nexports.StreamingDistributionConfig = exports.S3Origin = exports.StreamingLoggingConfig = exports.TooManyResponseHeadersPolicies = exports.TooManyCustomHeadersInResponseHeadersPolicy = exports.ResponseHeadersPolicyAlreadyExists = exports.CreateResponseHeadersPolicyResult = exports.ResponseHeadersPolicy = exports.CreateResponseHeadersPolicyRequest = exports.ResponseHeadersPolicyConfig = exports.ResponseHeadersPolicySecurityHeadersConfig = exports.ResponseHeadersPolicyXSSProtection = exports.ResponseHeadersPolicyStrictTransportSecurity = exports.ResponseHeadersPolicyReferrerPolicy = exports.ReferrerPolicyList = exports.ResponseHeadersPolicyFrameOptions = exports.FrameOptionsList = exports.ResponseHeadersPolicyContentTypeOptions = exports.ResponseHeadersPolicyContentSecurityPolicy = exports.ResponseHeadersPolicyCustomHeadersConfig = exports.ResponseHeadersPolicyCustomHeader = exports.ResponseHeadersPolicyCorsConfig = exports.ResponseHeadersPolicyAccessControlExposeHeaders = exports.ResponseHeadersPolicyAccessControlAllowOrigins = exports.ResponseHeadersPolicyAccessControlAllowMethods = exports.ResponseHeadersPolicyAccessControlAllowHeaders = exports.TooManyRealtimeLogConfigs = exports.RealtimeLogConfigAlreadyExists = exports.CreateRealtimeLogConfigResult = exports.RealtimeLogConfig = exports.CreateRealtimeLogConfigRequest = exports.EndPoint = exports.KinesisStreamConfig = exports.TooManyPublicKeys = exports.PublicKeyAlreadyExists = exports.CreatePublicKeyResult = exports.PublicKey = exports.CreatePublicKeyRequest = exports.PublicKeyConfig = exports.TooManyQueryStringsInOriginRequestPolicy = exports.TooManyOriginRequestPolicies = exports.TooManyHeadersInOriginRequestPolicy = exports.TooManyCookiesInOriginRequestPolicy = exports.OriginRequestPolicyAlreadyExists = exports.CreateOriginRequestPolicyResult = exports.OriginRequestPolicy = exports.CreateOriginRequestPolicyRequest = exports.OriginRequestPolicyConfig = exports.OriginRequestPolicyQueryStringsConfig = exports.OriginRequestPolicyHeadersConfig = void 0;\nexports.DeleteMonitoringSubscriptionRequest = exports.ResourceInUse = exports.NoSuchResource = exports.DeleteKeyGroupRequest = exports.NoSuchFunctionExists = exports.FunctionInUse = exports.DeleteFunctionRequest = exports.FieldLevelEncryptionProfileInUse = exports.DeleteFieldLevelEncryptionProfileRequest = exports.FieldLevelEncryptionConfigInUse = exports.DeleteFieldLevelEncryptionConfigRequest = exports.DistributionNotDisabled = exports.DeleteDistributionRequest = exports.NoSuchCloudFrontOriginAccessIdentity = exports.DeleteCloudFrontOriginAccessIdentityRequest = exports.CloudFrontOriginAccessIdentityInUse = exports.PreconditionFailed = exports.InvalidIfMatchVersion = exports.IllegalDelete = exports.DeleteCachePolicyRequest = exports.CreateStreamingDistributionWithTagsResult = exports.CreateStreamingDistributionWithTagsRequest = exports.StreamingDistributionConfigWithTags = exports.TooManyStreamingDistributions = exports.TooManyStreamingDistributionCNAMEs = exports.StreamingDistributionAlreadyExists = exports.CreateStreamingDistributionResult = exports.StreamingDistribution = exports.CreateStreamingDistributionRequest = void 0;\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nvar ResponseHeadersPolicyAccessControlAllowMethodsValues;\n(function (ResponseHeadersPolicyAccessControlAllowMethodsValues) {\n    ResponseHeadersPolicyAccessControlAllowMethodsValues[\"ALL\"] = \"ALL\";\n    ResponseHeadersPolicyAccessControlAllowMethodsValues[\"DELETE\"] = \"DELETE\";\n    ResponseHeadersPolicyAccessControlAllowMethodsValues[\"GET\"] = \"GET\";\n    ResponseHeadersPolicyAccessControlAllowMethodsValues[\"HEAD\"] = \"HEAD\";\n    ResponseHeadersPolicyAccessControlAllowMethodsValues[\"OPTIONS\"] = \"OPTIONS\";\n    ResponseHeadersPolicyAccessControlAllowMethodsValues[\"PATCH\"] = \"PATCH\";\n    ResponseHeadersPolicyAccessControlAllowMethodsValues[\"POST\"] = \"POST\";\n    ResponseHeadersPolicyAccessControlAllowMethodsValues[\"PUT\"] = \"PUT\";\n})(ResponseHeadersPolicyAccessControlAllowMethodsValues = exports.ResponseHeadersPolicyAccessControlAllowMethodsValues || (exports.ResponseHeadersPolicyAccessControlAllowMethodsValues = {}));\nvar AccessDenied;\n(function (AccessDenied) {\n    AccessDenied.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AccessDenied = exports.AccessDenied || (exports.AccessDenied = {}));\nvar KeyPairIds;\n(function (KeyPairIds) {\n    KeyPairIds.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(KeyPairIds = exports.KeyPairIds || (exports.KeyPairIds = {}));\nvar KGKeyPairIds;\n(function (KGKeyPairIds) {\n    KGKeyPairIds.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(KGKeyPairIds = exports.KGKeyPairIds || (exports.KGKeyPairIds = {}));\nvar ActiveTrustedKeyGroups;\n(function (ActiveTrustedKeyGroups) {\n    ActiveTrustedKeyGroups.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ActiveTrustedKeyGroups = exports.ActiveTrustedKeyGroups || (exports.ActiveTrustedKeyGroups = {}));\nvar Signer;\n(function (Signer) {\n    Signer.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Signer = exports.Signer || (exports.Signer = {}));\nvar ActiveTrustedSigners;\n(function (ActiveTrustedSigners) {\n    ActiveTrustedSigners.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ActiveTrustedSigners = exports.ActiveTrustedSigners || (exports.ActiveTrustedSigners = {}));\nvar Aliases;\n(function (Aliases) {\n    Aliases.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Aliases = exports.Aliases || (exports.Aliases = {}));\nvar AliasICPRecordal;\n(function (AliasICPRecordal) {\n    AliasICPRecordal.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AliasICPRecordal = exports.AliasICPRecordal || (exports.AliasICPRecordal = {}));\nvar CachedMethods;\n(function (CachedMethods) {\n    CachedMethods.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CachedMethods = exports.CachedMethods || (exports.CachedMethods = {}));\nvar AllowedMethods;\n(function (AllowedMethods) {\n    AllowedMethods.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AllowedMethods = exports.AllowedMethods || (exports.AllowedMethods = {}));\nvar AssociateAliasRequest;\n(function (AssociateAliasRequest) {\n    AssociateAliasRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AssociateAliasRequest = exports.AssociateAliasRequest || (exports.AssociateAliasRequest = {}));\nvar IllegalUpdate;\n(function (IllegalUpdate) {\n    IllegalUpdate.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(IllegalUpdate = exports.IllegalUpdate || (exports.IllegalUpdate = {}));\nvar InvalidArgument;\n(function (InvalidArgument) {\n    InvalidArgument.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidArgument = exports.InvalidArgument || (exports.InvalidArgument = {}));\nvar NoSuchDistribution;\n(function (NoSuchDistribution) {\n    NoSuchDistribution.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchDistribution = exports.NoSuchDistribution || (exports.NoSuchDistribution = {}));\nvar TooManyDistributionCNAMEs;\n(function (TooManyDistributionCNAMEs) {\n    TooManyDistributionCNAMEs.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyDistributionCNAMEs = exports.TooManyDistributionCNAMEs || (exports.TooManyDistributionCNAMEs = {}));\nvar BatchTooLarge;\n(function (BatchTooLarge) {\n    BatchTooLarge.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(BatchTooLarge = exports.BatchTooLarge || (exports.BatchTooLarge = {}));\nvar CookieNames;\n(function (CookieNames) {\n    CookieNames.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CookieNames = exports.CookieNames || (exports.CookieNames = {}));\nvar CookiePreference;\n(function (CookiePreference) {\n    CookiePreference.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CookiePreference = exports.CookiePreference || (exports.CookiePreference = {}));\nvar Headers;\n(function (Headers) {\n    Headers.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Headers = exports.Headers || (exports.Headers = {}));\nvar QueryStringCacheKeys;\n(function (QueryStringCacheKeys) {\n    QueryStringCacheKeys.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(QueryStringCacheKeys = exports.QueryStringCacheKeys || (exports.QueryStringCacheKeys = {}));\nvar ForwardedValues;\n(function (ForwardedValues) {\n    ForwardedValues.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ForwardedValues = exports.ForwardedValues || (exports.ForwardedValues = {}));\nvar FunctionAssociation;\n(function (FunctionAssociation) {\n    FunctionAssociation.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FunctionAssociation = exports.FunctionAssociation || (exports.FunctionAssociation = {}));\nvar FunctionAssociations;\n(function (FunctionAssociations) {\n    FunctionAssociations.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FunctionAssociations = exports.FunctionAssociations || (exports.FunctionAssociations = {}));\nvar LambdaFunctionAssociation;\n(function (LambdaFunctionAssociation) {\n    LambdaFunctionAssociation.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(LambdaFunctionAssociation = exports.LambdaFunctionAssociation || (exports.LambdaFunctionAssociation = {}));\nvar LambdaFunctionAssociations;\n(function (LambdaFunctionAssociations) {\n    LambdaFunctionAssociations.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(LambdaFunctionAssociations = exports.LambdaFunctionAssociations || (exports.LambdaFunctionAssociations = {}));\nvar TrustedKeyGroups;\n(function (TrustedKeyGroups) {\n    TrustedKeyGroups.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TrustedKeyGroups = exports.TrustedKeyGroups || (exports.TrustedKeyGroups = {}));\nvar TrustedSigners;\n(function (TrustedSigners) {\n    TrustedSigners.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TrustedSigners = exports.TrustedSigners || (exports.TrustedSigners = {}));\nvar CacheBehavior;\n(function (CacheBehavior) {\n    CacheBehavior.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CacheBehavior = exports.CacheBehavior || (exports.CacheBehavior = {}));\nvar CacheBehaviors;\n(function (CacheBehaviors) {\n    CacheBehaviors.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CacheBehaviors = exports.CacheBehaviors || (exports.CacheBehaviors = {}));\nvar CachePolicyCookiesConfig;\n(function (CachePolicyCookiesConfig) {\n    CachePolicyCookiesConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CachePolicyCookiesConfig = exports.CachePolicyCookiesConfig || (exports.CachePolicyCookiesConfig = {}));\nvar CachePolicyHeadersConfig;\n(function (CachePolicyHeadersConfig) {\n    CachePolicyHeadersConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CachePolicyHeadersConfig = exports.CachePolicyHeadersConfig || (exports.CachePolicyHeadersConfig = {}));\nvar QueryStringNames;\n(function (QueryStringNames) {\n    QueryStringNames.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(QueryStringNames = exports.QueryStringNames || (exports.QueryStringNames = {}));\nvar CachePolicyQueryStringsConfig;\n(function (CachePolicyQueryStringsConfig) {\n    CachePolicyQueryStringsConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CachePolicyQueryStringsConfig = exports.CachePolicyQueryStringsConfig || (exports.CachePolicyQueryStringsConfig = {}));\nvar ParametersInCacheKeyAndForwardedToOrigin;\n(function (ParametersInCacheKeyAndForwardedToOrigin) {\n    ParametersInCacheKeyAndForwardedToOrigin.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ParametersInCacheKeyAndForwardedToOrigin = exports.ParametersInCacheKeyAndForwardedToOrigin || (exports.ParametersInCacheKeyAndForwardedToOrigin = {}));\nvar CachePolicyConfig;\n(function (CachePolicyConfig) {\n    CachePolicyConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CachePolicyConfig = exports.CachePolicyConfig || (exports.CachePolicyConfig = {}));\nvar CachePolicy;\n(function (CachePolicy) {\n    CachePolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CachePolicy = exports.CachePolicy || (exports.CachePolicy = {}));\nvar CachePolicyAlreadyExists;\n(function (CachePolicyAlreadyExists) {\n    CachePolicyAlreadyExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CachePolicyAlreadyExists = exports.CachePolicyAlreadyExists || (exports.CachePolicyAlreadyExists = {}));\nvar CachePolicyInUse;\n(function (CachePolicyInUse) {\n    CachePolicyInUse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CachePolicyInUse = exports.CachePolicyInUse || (exports.CachePolicyInUse = {}));\nvar CachePolicySummary;\n(function (CachePolicySummary) {\n    CachePolicySummary.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CachePolicySummary = exports.CachePolicySummary || (exports.CachePolicySummary = {}));\nvar CachePolicyList;\n(function (CachePolicyList) {\n    CachePolicyList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CachePolicyList = exports.CachePolicyList || (exports.CachePolicyList = {}));\nvar CannotChangeImmutablePublicKeyFields;\n(function (CannotChangeImmutablePublicKeyFields) {\n    CannotChangeImmutablePublicKeyFields.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CannotChangeImmutablePublicKeyFields = exports.CannotChangeImmutablePublicKeyFields || (exports.CannotChangeImmutablePublicKeyFields = {}));\nvar CreateCachePolicyRequest;\n(function (CreateCachePolicyRequest) {\n    CreateCachePolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateCachePolicyRequest = exports.CreateCachePolicyRequest || (exports.CreateCachePolicyRequest = {}));\nvar CreateCachePolicyResult;\n(function (CreateCachePolicyResult) {\n    CreateCachePolicyResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateCachePolicyResult = exports.CreateCachePolicyResult || (exports.CreateCachePolicyResult = {}));\nvar InconsistentQuantities;\n(function (InconsistentQuantities) {\n    InconsistentQuantities.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InconsistentQuantities = exports.InconsistentQuantities || (exports.InconsistentQuantities = {}));\nvar TooManyCachePolicies;\n(function (TooManyCachePolicies) {\n    TooManyCachePolicies.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyCachePolicies = exports.TooManyCachePolicies || (exports.TooManyCachePolicies = {}));\nvar TooManyCookiesInCachePolicy;\n(function (TooManyCookiesInCachePolicy) {\n    TooManyCookiesInCachePolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyCookiesInCachePolicy = exports.TooManyCookiesInCachePolicy || (exports.TooManyCookiesInCachePolicy = {}));\nvar TooManyHeadersInCachePolicy;\n(function (TooManyHeadersInCachePolicy) {\n    TooManyHeadersInCachePolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyHeadersInCachePolicy = exports.TooManyHeadersInCachePolicy || (exports.TooManyHeadersInCachePolicy = {}));\nvar TooManyQueryStringsInCachePolicy;\n(function (TooManyQueryStringsInCachePolicy) {\n    TooManyQueryStringsInCachePolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyQueryStringsInCachePolicy = exports.TooManyQueryStringsInCachePolicy || (exports.TooManyQueryStringsInCachePolicy = {}));\nvar CloudFrontOriginAccessIdentityAlreadyExists;\n(function (CloudFrontOriginAccessIdentityAlreadyExists) {\n    CloudFrontOriginAccessIdentityAlreadyExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CloudFrontOriginAccessIdentityAlreadyExists = exports.CloudFrontOriginAccessIdentityAlreadyExists || (exports.CloudFrontOriginAccessIdentityAlreadyExists = {}));\nvar CloudFrontOriginAccessIdentityConfig;\n(function (CloudFrontOriginAccessIdentityConfig) {\n    CloudFrontOriginAccessIdentityConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CloudFrontOriginAccessIdentityConfig = exports.CloudFrontOriginAccessIdentityConfig || (exports.CloudFrontOriginAccessIdentityConfig = {}));\nvar CreateCloudFrontOriginAccessIdentityRequest;\n(function (CreateCloudFrontOriginAccessIdentityRequest) {\n    CreateCloudFrontOriginAccessIdentityRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateCloudFrontOriginAccessIdentityRequest = exports.CreateCloudFrontOriginAccessIdentityRequest || (exports.CreateCloudFrontOriginAccessIdentityRequest = {}));\nvar CloudFrontOriginAccessIdentity;\n(function (CloudFrontOriginAccessIdentity) {\n    CloudFrontOriginAccessIdentity.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CloudFrontOriginAccessIdentity = exports.CloudFrontOriginAccessIdentity || (exports.CloudFrontOriginAccessIdentity = {}));\nvar CreateCloudFrontOriginAccessIdentityResult;\n(function (CreateCloudFrontOriginAccessIdentityResult) {\n    CreateCloudFrontOriginAccessIdentityResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateCloudFrontOriginAccessIdentityResult = exports.CreateCloudFrontOriginAccessIdentityResult || (exports.CreateCloudFrontOriginAccessIdentityResult = {}));\nvar MissingBody;\n(function (MissingBody) {\n    MissingBody.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(MissingBody = exports.MissingBody || (exports.MissingBody = {}));\nvar TooManyCloudFrontOriginAccessIdentities;\n(function (TooManyCloudFrontOriginAccessIdentities) {\n    TooManyCloudFrontOriginAccessIdentities.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyCloudFrontOriginAccessIdentities = exports.TooManyCloudFrontOriginAccessIdentities || (exports.TooManyCloudFrontOriginAccessIdentities = {}));\nvar CNAMEAlreadyExists;\n(function (CNAMEAlreadyExists) {\n    CNAMEAlreadyExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CNAMEAlreadyExists = exports.CNAMEAlreadyExists || (exports.CNAMEAlreadyExists = {}));\nvar CustomErrorResponse;\n(function (CustomErrorResponse) {\n    CustomErrorResponse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CustomErrorResponse = exports.CustomErrorResponse || (exports.CustomErrorResponse = {}));\nvar CustomErrorResponses;\n(function (CustomErrorResponses) {\n    CustomErrorResponses.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CustomErrorResponses = exports.CustomErrorResponses || (exports.CustomErrorResponses = {}));\nvar DefaultCacheBehavior;\n(function (DefaultCacheBehavior) {\n    DefaultCacheBehavior.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DefaultCacheBehavior = exports.DefaultCacheBehavior || (exports.DefaultCacheBehavior = {}));\nvar LoggingConfig;\n(function (LoggingConfig) {\n    LoggingConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(LoggingConfig = exports.LoggingConfig || (exports.LoggingConfig = {}));\nvar StatusCodes;\n(function (StatusCodes) {\n    StatusCodes.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(StatusCodes = exports.StatusCodes || (exports.StatusCodes = {}));\nvar OriginGroupFailoverCriteria;\n(function (OriginGroupFailoverCriteria) {\n    OriginGroupFailoverCriteria.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginGroupFailoverCriteria = exports.OriginGroupFailoverCriteria || (exports.OriginGroupFailoverCriteria = {}));\nvar OriginGroupMember;\n(function (OriginGroupMember) {\n    OriginGroupMember.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginGroupMember = exports.OriginGroupMember || (exports.OriginGroupMember = {}));\nvar OriginGroupMembers;\n(function (OriginGroupMembers) {\n    OriginGroupMembers.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginGroupMembers = exports.OriginGroupMembers || (exports.OriginGroupMembers = {}));\nvar OriginGroup;\n(function (OriginGroup) {\n    OriginGroup.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginGroup = exports.OriginGroup || (exports.OriginGroup = {}));\nvar OriginGroups;\n(function (OriginGroups) {\n    OriginGroups.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginGroups = exports.OriginGroups || (exports.OriginGroups = {}));\nvar OriginCustomHeader;\n(function (OriginCustomHeader) {\n    OriginCustomHeader.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.HeaderValue && { HeaderValue: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(OriginCustomHeader = exports.OriginCustomHeader || (exports.OriginCustomHeader = {}));\nvar CustomHeaders;\n(function (CustomHeaders) {\n    CustomHeaders.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Items && { Items: obj.Items.map((item) => OriginCustomHeader.filterSensitiveLog(item)) }),\n    });\n})(CustomHeaders = exports.CustomHeaders || (exports.CustomHeaders = {}));\nvar OriginSslProtocols;\n(function (OriginSslProtocols) {\n    OriginSslProtocols.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginSslProtocols = exports.OriginSslProtocols || (exports.OriginSslProtocols = {}));\nvar CustomOriginConfig;\n(function (CustomOriginConfig) {\n    CustomOriginConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CustomOriginConfig = exports.CustomOriginConfig || (exports.CustomOriginConfig = {}));\nvar OriginShield;\n(function (OriginShield) {\n    OriginShield.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginShield = exports.OriginShield || (exports.OriginShield = {}));\nvar S3OriginConfig;\n(function (S3OriginConfig) {\n    S3OriginConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(S3OriginConfig = exports.S3OriginConfig || (exports.S3OriginConfig = {}));\nvar Origin;\n(function (Origin) {\n    Origin.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.CustomHeaders && { CustomHeaders: CustomHeaders.filterSensitiveLog(obj.CustomHeaders) }),\n    });\n})(Origin = exports.Origin || (exports.Origin = {}));\nvar Origins;\n(function (Origins) {\n    Origins.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Origins = exports.Origins || (exports.Origins = {}));\nvar GeoRestriction;\n(function (GeoRestriction) {\n    GeoRestriction.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GeoRestriction = exports.GeoRestriction || (exports.GeoRestriction = {}));\nvar Restrictions;\n(function (Restrictions) {\n    Restrictions.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Restrictions = exports.Restrictions || (exports.Restrictions = {}));\nvar ViewerCertificate;\n(function (ViewerCertificate) {\n    ViewerCertificate.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ViewerCertificate = exports.ViewerCertificate || (exports.ViewerCertificate = {}));\nvar DistributionConfig;\n(function (DistributionConfig) {\n    DistributionConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Comment && { Comment: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(DistributionConfig = exports.DistributionConfig || (exports.DistributionConfig = {}));\nvar CreateDistributionRequest;\n(function (CreateDistributionRequest) {\n    CreateDistributionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.DistributionConfig && {\n            DistributionConfig: DistributionConfig.filterSensitiveLog(obj.DistributionConfig),\n        }),\n    });\n})(CreateDistributionRequest = exports.CreateDistributionRequest || (exports.CreateDistributionRequest = {}));\nvar Distribution;\n(function (Distribution) {\n    Distribution.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.DistributionConfig && {\n            DistributionConfig: DistributionConfig.filterSensitiveLog(obj.DistributionConfig),\n        }),\n    });\n})(Distribution = exports.Distribution || (exports.Distribution = {}));\nvar CreateDistributionResult;\n(function (CreateDistributionResult) {\n    CreateDistributionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Distribution && { Distribution: Distribution.filterSensitiveLog(obj.Distribution) }),\n    });\n})(CreateDistributionResult = exports.CreateDistributionResult || (exports.CreateDistributionResult = {}));\nvar DistributionAlreadyExists;\n(function (DistributionAlreadyExists) {\n    DistributionAlreadyExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DistributionAlreadyExists = exports.DistributionAlreadyExists || (exports.DistributionAlreadyExists = {}));\nvar IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior;\n(function (IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior) {\n    IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior = exports.IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior || (exports.IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior = {}));\nvar InvalidDefaultRootObject;\n(function (InvalidDefaultRootObject) {\n    InvalidDefaultRootObject.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidDefaultRootObject = exports.InvalidDefaultRootObject || (exports.InvalidDefaultRootObject = {}));\nvar InvalidErrorCode;\n(function (InvalidErrorCode) {\n    InvalidErrorCode.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidErrorCode = exports.InvalidErrorCode || (exports.InvalidErrorCode = {}));\nvar InvalidForwardCookies;\n(function (InvalidForwardCookies) {\n    InvalidForwardCookies.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidForwardCookies = exports.InvalidForwardCookies || (exports.InvalidForwardCookies = {}));\nvar InvalidFunctionAssociation;\n(function (InvalidFunctionAssociation) {\n    InvalidFunctionAssociation.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidFunctionAssociation = exports.InvalidFunctionAssociation || (exports.InvalidFunctionAssociation = {}));\nvar InvalidGeoRestrictionParameter;\n(function (InvalidGeoRestrictionParameter) {\n    InvalidGeoRestrictionParameter.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidGeoRestrictionParameter = exports.InvalidGeoRestrictionParameter || (exports.InvalidGeoRestrictionParameter = {}));\nvar InvalidHeadersForS3Origin;\n(function (InvalidHeadersForS3Origin) {\n    InvalidHeadersForS3Origin.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidHeadersForS3Origin = exports.InvalidHeadersForS3Origin || (exports.InvalidHeadersForS3Origin = {}));\nvar InvalidLambdaFunctionAssociation;\n(function (InvalidLambdaFunctionAssociation) {\n    InvalidLambdaFunctionAssociation.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidLambdaFunctionAssociation = exports.InvalidLambdaFunctionAssociation || (exports.InvalidLambdaFunctionAssociation = {}));\nvar InvalidLocationCode;\n(function (InvalidLocationCode) {\n    InvalidLocationCode.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidLocationCode = exports.InvalidLocationCode || (exports.InvalidLocationCode = {}));\nvar InvalidMinimumProtocolVersion;\n(function (InvalidMinimumProtocolVersion) {\n    InvalidMinimumProtocolVersion.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidMinimumProtocolVersion = exports.InvalidMinimumProtocolVersion || (exports.InvalidMinimumProtocolVersion = {}));\nvar InvalidOrigin;\n(function (InvalidOrigin) {\n    InvalidOrigin.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidOrigin = exports.InvalidOrigin || (exports.InvalidOrigin = {}));\nvar InvalidOriginAccessIdentity;\n(function (InvalidOriginAccessIdentity) {\n    InvalidOriginAccessIdentity.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidOriginAccessIdentity = exports.InvalidOriginAccessIdentity || (exports.InvalidOriginAccessIdentity = {}));\nvar InvalidOriginKeepaliveTimeout;\n(function (InvalidOriginKeepaliveTimeout) {\n    InvalidOriginKeepaliveTimeout.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidOriginKeepaliveTimeout = exports.InvalidOriginKeepaliveTimeout || (exports.InvalidOriginKeepaliveTimeout = {}));\nvar InvalidOriginReadTimeout;\n(function (InvalidOriginReadTimeout) {\n    InvalidOriginReadTimeout.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidOriginReadTimeout = exports.InvalidOriginReadTimeout || (exports.InvalidOriginReadTimeout = {}));\nvar InvalidProtocolSettings;\n(function (InvalidProtocolSettings) {\n    InvalidProtocolSettings.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidProtocolSettings = exports.InvalidProtocolSettings || (exports.InvalidProtocolSettings = {}));\nvar InvalidQueryStringParameters;\n(function (InvalidQueryStringParameters) {\n    InvalidQueryStringParameters.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidQueryStringParameters = exports.InvalidQueryStringParameters || (exports.InvalidQueryStringParameters = {}));\nvar InvalidRelativePath;\n(function (InvalidRelativePath) {\n    InvalidRelativePath.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidRelativePath = exports.InvalidRelativePath || (exports.InvalidRelativePath = {}));\nvar InvalidRequiredProtocol;\n(function (InvalidRequiredProtocol) {\n    InvalidRequiredProtocol.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidRequiredProtocol = exports.InvalidRequiredProtocol || (exports.InvalidRequiredProtocol = {}));\nvar InvalidResponseCode;\n(function (InvalidResponseCode) {\n    InvalidResponseCode.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidResponseCode = exports.InvalidResponseCode || (exports.InvalidResponseCode = {}));\nvar InvalidTTLOrder;\n(function (InvalidTTLOrder) {\n    InvalidTTLOrder.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidTTLOrder = exports.InvalidTTLOrder || (exports.InvalidTTLOrder = {}));\nvar InvalidViewerCertificate;\n(function (InvalidViewerCertificate) {\n    InvalidViewerCertificate.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidViewerCertificate = exports.InvalidViewerCertificate || (exports.InvalidViewerCertificate = {}));\nvar InvalidWebACLId;\n(function (InvalidWebACLId) {\n    InvalidWebACLId.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidWebACLId = exports.InvalidWebACLId || (exports.InvalidWebACLId = {}));\nvar NoSuchCachePolicy;\n(function (NoSuchCachePolicy) {\n    NoSuchCachePolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchCachePolicy = exports.NoSuchCachePolicy || (exports.NoSuchCachePolicy = {}));\nvar NoSuchFieldLevelEncryptionConfig;\n(function (NoSuchFieldLevelEncryptionConfig) {\n    NoSuchFieldLevelEncryptionConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchFieldLevelEncryptionConfig = exports.NoSuchFieldLevelEncryptionConfig || (exports.NoSuchFieldLevelEncryptionConfig = {}));\nvar NoSuchOrigin;\n(function (NoSuchOrigin) {\n    NoSuchOrigin.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchOrigin = exports.NoSuchOrigin || (exports.NoSuchOrigin = {}));\nvar NoSuchOriginRequestPolicy;\n(function (NoSuchOriginRequestPolicy) {\n    NoSuchOriginRequestPolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchOriginRequestPolicy = exports.NoSuchOriginRequestPolicy || (exports.NoSuchOriginRequestPolicy = {}));\nvar NoSuchRealtimeLogConfig;\n(function (NoSuchRealtimeLogConfig) {\n    NoSuchRealtimeLogConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchRealtimeLogConfig = exports.NoSuchRealtimeLogConfig || (exports.NoSuchRealtimeLogConfig = {}));\nvar NoSuchResponseHeadersPolicy;\n(function (NoSuchResponseHeadersPolicy) {\n    NoSuchResponseHeadersPolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchResponseHeadersPolicy = exports.NoSuchResponseHeadersPolicy || (exports.NoSuchResponseHeadersPolicy = {}));\nvar RealtimeLogConfigOwnerMismatch;\n(function (RealtimeLogConfigOwnerMismatch) {\n    RealtimeLogConfigOwnerMismatch.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(RealtimeLogConfigOwnerMismatch = exports.RealtimeLogConfigOwnerMismatch || (exports.RealtimeLogConfigOwnerMismatch = {}));\nvar TooManyCacheBehaviors;\n(function (TooManyCacheBehaviors) {\n    TooManyCacheBehaviors.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyCacheBehaviors = exports.TooManyCacheBehaviors || (exports.TooManyCacheBehaviors = {}));\nvar TooManyCertificates;\n(function (TooManyCertificates) {\n    TooManyCertificates.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyCertificates = exports.TooManyCertificates || (exports.TooManyCertificates = {}));\nvar TooManyCookieNamesInWhiteList;\n(function (TooManyCookieNamesInWhiteList) {\n    TooManyCookieNamesInWhiteList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyCookieNamesInWhiteList = exports.TooManyCookieNamesInWhiteList || (exports.TooManyCookieNamesInWhiteList = {}));\nvar TooManyDistributions;\n(function (TooManyDistributions) {\n    TooManyDistributions.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyDistributions = exports.TooManyDistributions || (exports.TooManyDistributions = {}));\nvar TooManyDistributionsAssociatedToCachePolicy;\n(function (TooManyDistributionsAssociatedToCachePolicy) {\n    TooManyDistributionsAssociatedToCachePolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyDistributionsAssociatedToCachePolicy = exports.TooManyDistributionsAssociatedToCachePolicy || (exports.TooManyDistributionsAssociatedToCachePolicy = {}));\nvar TooManyDistributionsAssociatedToFieldLevelEncryptionConfig;\n(function (TooManyDistributionsAssociatedToFieldLevelEncryptionConfig) {\n    TooManyDistributionsAssociatedToFieldLevelEncryptionConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyDistributionsAssociatedToFieldLevelEncryptionConfig = exports.TooManyDistributionsAssociatedToFieldLevelEncryptionConfig || (exports.TooManyDistributionsAssociatedToFieldLevelEncryptionConfig = {}));\nvar TooManyDistributionsAssociatedToKeyGroup;\n(function (TooManyDistributionsAssociatedToKeyGroup) {\n    TooManyDistributionsAssociatedToKeyGroup.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyDistributionsAssociatedToKeyGroup = exports.TooManyDistributionsAssociatedToKeyGroup || (exports.TooManyDistributionsAssociatedToKeyGroup = {}));\nvar TooManyDistributionsAssociatedToOriginRequestPolicy;\n(function (TooManyDistributionsAssociatedToOriginRequestPolicy) {\n    TooManyDistributionsAssociatedToOriginRequestPolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyDistributionsAssociatedToOriginRequestPolicy = exports.TooManyDistributionsAssociatedToOriginRequestPolicy || (exports.TooManyDistributionsAssociatedToOriginRequestPolicy = {}));\nvar TooManyDistributionsAssociatedToResponseHeadersPolicy;\n(function (TooManyDistributionsAssociatedToResponseHeadersPolicy) {\n    TooManyDistributionsAssociatedToResponseHeadersPolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyDistributionsAssociatedToResponseHeadersPolicy = exports.TooManyDistributionsAssociatedToResponseHeadersPolicy || (exports.TooManyDistributionsAssociatedToResponseHeadersPolicy = {}));\nvar TooManyDistributionsWithFunctionAssociations;\n(function (TooManyDistributionsWithFunctionAssociations) {\n    TooManyDistributionsWithFunctionAssociations.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyDistributionsWithFunctionAssociations = exports.TooManyDistributionsWithFunctionAssociations || (exports.TooManyDistributionsWithFunctionAssociations = {}));\nvar TooManyDistributionsWithLambdaAssociations;\n(function (TooManyDistributionsWithLambdaAssociations) {\n    TooManyDistributionsWithLambdaAssociations.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyDistributionsWithLambdaAssociations = exports.TooManyDistributionsWithLambdaAssociations || (exports.TooManyDistributionsWithLambdaAssociations = {}));\nvar TooManyDistributionsWithSingleFunctionARN;\n(function (TooManyDistributionsWithSingleFunctionARN) {\n    TooManyDistributionsWithSingleFunctionARN.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyDistributionsWithSingleFunctionARN = exports.TooManyDistributionsWithSingleFunctionARN || (exports.TooManyDistributionsWithSingleFunctionARN = {}));\nvar TooManyFunctionAssociations;\n(function (TooManyFunctionAssociations) {\n    TooManyFunctionAssociations.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyFunctionAssociations = exports.TooManyFunctionAssociations || (exports.TooManyFunctionAssociations = {}));\nvar TooManyHeadersInForwardedValues;\n(function (TooManyHeadersInForwardedValues) {\n    TooManyHeadersInForwardedValues.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyHeadersInForwardedValues = exports.TooManyHeadersInForwardedValues || (exports.TooManyHeadersInForwardedValues = {}));\nvar TooManyKeyGroupsAssociatedToDistribution;\n(function (TooManyKeyGroupsAssociatedToDistribution) {\n    TooManyKeyGroupsAssociatedToDistribution.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyKeyGroupsAssociatedToDistribution = exports.TooManyKeyGroupsAssociatedToDistribution || (exports.TooManyKeyGroupsAssociatedToDistribution = {}));\nvar TooManyLambdaFunctionAssociations;\n(function (TooManyLambdaFunctionAssociations) {\n    TooManyLambdaFunctionAssociations.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyLambdaFunctionAssociations = exports.TooManyLambdaFunctionAssociations || (exports.TooManyLambdaFunctionAssociations = {}));\nvar TooManyOriginCustomHeaders;\n(function (TooManyOriginCustomHeaders) {\n    TooManyOriginCustomHeaders.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyOriginCustomHeaders = exports.TooManyOriginCustomHeaders || (exports.TooManyOriginCustomHeaders = {}));\nvar TooManyOriginGroupsPerDistribution;\n(function (TooManyOriginGroupsPerDistribution) {\n    TooManyOriginGroupsPerDistribution.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyOriginGroupsPerDistribution = exports.TooManyOriginGroupsPerDistribution || (exports.TooManyOriginGroupsPerDistribution = {}));\nvar TooManyOrigins;\n(function (TooManyOrigins) {\n    TooManyOrigins.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyOrigins = exports.TooManyOrigins || (exports.TooManyOrigins = {}));\nvar TooManyQueryStringParameters;\n(function (TooManyQueryStringParameters) {\n    TooManyQueryStringParameters.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyQueryStringParameters = exports.TooManyQueryStringParameters || (exports.TooManyQueryStringParameters = {}));\nvar TooManyTrustedSigners;\n(function (TooManyTrustedSigners) {\n    TooManyTrustedSigners.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyTrustedSigners = exports.TooManyTrustedSigners || (exports.TooManyTrustedSigners = {}));\nvar TrustedKeyGroupDoesNotExist;\n(function (TrustedKeyGroupDoesNotExist) {\n    TrustedKeyGroupDoesNotExist.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TrustedKeyGroupDoesNotExist = exports.TrustedKeyGroupDoesNotExist || (exports.TrustedKeyGroupDoesNotExist = {}));\nvar TrustedSignerDoesNotExist;\n(function (TrustedSignerDoesNotExist) {\n    TrustedSignerDoesNotExist.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TrustedSignerDoesNotExist = exports.TrustedSignerDoesNotExist || (exports.TrustedSignerDoesNotExist = {}));\nvar Tag;\n(function (Tag) {\n    Tag.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Tag = exports.Tag || (exports.Tag = {}));\nvar Tags;\n(function (Tags) {\n    Tags.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Tags = exports.Tags || (exports.Tags = {}));\nvar DistributionConfigWithTags;\n(function (DistributionConfigWithTags) {\n    DistributionConfigWithTags.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.DistributionConfig && {\n            DistributionConfig: DistributionConfig.filterSensitiveLog(obj.DistributionConfig),\n        }),\n    });\n})(DistributionConfigWithTags = exports.DistributionConfigWithTags || (exports.DistributionConfigWithTags = {}));\nvar CreateDistributionWithTagsRequest;\n(function (CreateDistributionWithTagsRequest) {\n    CreateDistributionWithTagsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.DistributionConfigWithTags && {\n            DistributionConfigWithTags: DistributionConfigWithTags.filterSensitiveLog(obj.DistributionConfigWithTags),\n        }),\n    });\n})(CreateDistributionWithTagsRequest = exports.CreateDistributionWithTagsRequest || (exports.CreateDistributionWithTagsRequest = {}));\nvar CreateDistributionWithTagsResult;\n(function (CreateDistributionWithTagsResult) {\n    CreateDistributionWithTagsResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Distribution && { Distribution: Distribution.filterSensitiveLog(obj.Distribution) }),\n    });\n})(CreateDistributionWithTagsResult = exports.CreateDistributionWithTagsResult || (exports.CreateDistributionWithTagsResult = {}));\nvar InvalidTagging;\n(function (InvalidTagging) {\n    InvalidTagging.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidTagging = exports.InvalidTagging || (exports.InvalidTagging = {}));\nvar ContentTypeProfile;\n(function (ContentTypeProfile) {\n    ContentTypeProfile.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ContentTypeProfile = exports.ContentTypeProfile || (exports.ContentTypeProfile = {}));\nvar ContentTypeProfiles;\n(function (ContentTypeProfiles) {\n    ContentTypeProfiles.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ContentTypeProfiles = exports.ContentTypeProfiles || (exports.ContentTypeProfiles = {}));\nvar ContentTypeProfileConfig;\n(function (ContentTypeProfileConfig) {\n    ContentTypeProfileConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ContentTypeProfileConfig = exports.ContentTypeProfileConfig || (exports.ContentTypeProfileConfig = {}));\nvar QueryArgProfile;\n(function (QueryArgProfile) {\n    QueryArgProfile.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(QueryArgProfile = exports.QueryArgProfile || (exports.QueryArgProfile = {}));\nvar QueryArgProfiles;\n(function (QueryArgProfiles) {\n    QueryArgProfiles.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(QueryArgProfiles = exports.QueryArgProfiles || (exports.QueryArgProfiles = {}));\nvar QueryArgProfileConfig;\n(function (QueryArgProfileConfig) {\n    QueryArgProfileConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(QueryArgProfileConfig = exports.QueryArgProfileConfig || (exports.QueryArgProfileConfig = {}));\nvar FieldLevelEncryptionConfig;\n(function (FieldLevelEncryptionConfig) {\n    FieldLevelEncryptionConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FieldLevelEncryptionConfig = exports.FieldLevelEncryptionConfig || (exports.FieldLevelEncryptionConfig = {}));\nvar CreateFieldLevelEncryptionConfigRequest;\n(function (CreateFieldLevelEncryptionConfigRequest) {\n    CreateFieldLevelEncryptionConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateFieldLevelEncryptionConfigRequest = exports.CreateFieldLevelEncryptionConfigRequest || (exports.CreateFieldLevelEncryptionConfigRequest = {}));\nvar FieldLevelEncryption;\n(function (FieldLevelEncryption) {\n    FieldLevelEncryption.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FieldLevelEncryption = exports.FieldLevelEncryption || (exports.FieldLevelEncryption = {}));\nvar CreateFieldLevelEncryptionConfigResult;\n(function (CreateFieldLevelEncryptionConfigResult) {\n    CreateFieldLevelEncryptionConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateFieldLevelEncryptionConfigResult = exports.CreateFieldLevelEncryptionConfigResult || (exports.CreateFieldLevelEncryptionConfigResult = {}));\nvar FieldLevelEncryptionConfigAlreadyExists;\n(function (FieldLevelEncryptionConfigAlreadyExists) {\n    FieldLevelEncryptionConfigAlreadyExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FieldLevelEncryptionConfigAlreadyExists = exports.FieldLevelEncryptionConfigAlreadyExists || (exports.FieldLevelEncryptionConfigAlreadyExists = {}));\nvar NoSuchFieldLevelEncryptionProfile;\n(function (NoSuchFieldLevelEncryptionProfile) {\n    NoSuchFieldLevelEncryptionProfile.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchFieldLevelEncryptionProfile = exports.NoSuchFieldLevelEncryptionProfile || (exports.NoSuchFieldLevelEncryptionProfile = {}));\nvar QueryArgProfileEmpty;\n(function (QueryArgProfileEmpty) {\n    QueryArgProfileEmpty.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(QueryArgProfileEmpty = exports.QueryArgProfileEmpty || (exports.QueryArgProfileEmpty = {}));\nvar TooManyFieldLevelEncryptionConfigs;\n(function (TooManyFieldLevelEncryptionConfigs) {\n    TooManyFieldLevelEncryptionConfigs.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyFieldLevelEncryptionConfigs = exports.TooManyFieldLevelEncryptionConfigs || (exports.TooManyFieldLevelEncryptionConfigs = {}));\nvar TooManyFieldLevelEncryptionContentTypeProfiles;\n(function (TooManyFieldLevelEncryptionContentTypeProfiles) {\n    TooManyFieldLevelEncryptionContentTypeProfiles.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyFieldLevelEncryptionContentTypeProfiles = exports.TooManyFieldLevelEncryptionContentTypeProfiles || (exports.TooManyFieldLevelEncryptionContentTypeProfiles = {}));\nvar TooManyFieldLevelEncryptionQueryArgProfiles;\n(function (TooManyFieldLevelEncryptionQueryArgProfiles) {\n    TooManyFieldLevelEncryptionQueryArgProfiles.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyFieldLevelEncryptionQueryArgProfiles = exports.TooManyFieldLevelEncryptionQueryArgProfiles || (exports.TooManyFieldLevelEncryptionQueryArgProfiles = {}));\nvar FieldPatterns;\n(function (FieldPatterns) {\n    FieldPatterns.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FieldPatterns = exports.FieldPatterns || (exports.FieldPatterns = {}));\nvar EncryptionEntity;\n(function (EncryptionEntity) {\n    EncryptionEntity.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(EncryptionEntity = exports.EncryptionEntity || (exports.EncryptionEntity = {}));\nvar EncryptionEntities;\n(function (EncryptionEntities) {\n    EncryptionEntities.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(EncryptionEntities = exports.EncryptionEntities || (exports.EncryptionEntities = {}));\nvar FieldLevelEncryptionProfileConfig;\n(function (FieldLevelEncryptionProfileConfig) {\n    FieldLevelEncryptionProfileConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FieldLevelEncryptionProfileConfig = exports.FieldLevelEncryptionProfileConfig || (exports.FieldLevelEncryptionProfileConfig = {}));\nvar CreateFieldLevelEncryptionProfileRequest;\n(function (CreateFieldLevelEncryptionProfileRequest) {\n    CreateFieldLevelEncryptionProfileRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateFieldLevelEncryptionProfileRequest = exports.CreateFieldLevelEncryptionProfileRequest || (exports.CreateFieldLevelEncryptionProfileRequest = {}));\nvar FieldLevelEncryptionProfile;\n(function (FieldLevelEncryptionProfile) {\n    FieldLevelEncryptionProfile.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FieldLevelEncryptionProfile = exports.FieldLevelEncryptionProfile || (exports.FieldLevelEncryptionProfile = {}));\nvar CreateFieldLevelEncryptionProfileResult;\n(function (CreateFieldLevelEncryptionProfileResult) {\n    CreateFieldLevelEncryptionProfileResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateFieldLevelEncryptionProfileResult = exports.CreateFieldLevelEncryptionProfileResult || (exports.CreateFieldLevelEncryptionProfileResult = {}));\nvar FieldLevelEncryptionProfileAlreadyExists;\n(function (FieldLevelEncryptionProfileAlreadyExists) {\n    FieldLevelEncryptionProfileAlreadyExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FieldLevelEncryptionProfileAlreadyExists = exports.FieldLevelEncryptionProfileAlreadyExists || (exports.FieldLevelEncryptionProfileAlreadyExists = {}));\nvar FieldLevelEncryptionProfileSizeExceeded;\n(function (FieldLevelEncryptionProfileSizeExceeded) {\n    FieldLevelEncryptionProfileSizeExceeded.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FieldLevelEncryptionProfileSizeExceeded = exports.FieldLevelEncryptionProfileSizeExceeded || (exports.FieldLevelEncryptionProfileSizeExceeded = {}));\nvar NoSuchPublicKey;\n(function (NoSuchPublicKey) {\n    NoSuchPublicKey.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchPublicKey = exports.NoSuchPublicKey || (exports.NoSuchPublicKey = {}));\nvar TooManyFieldLevelEncryptionEncryptionEntities;\n(function (TooManyFieldLevelEncryptionEncryptionEntities) {\n    TooManyFieldLevelEncryptionEncryptionEntities.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyFieldLevelEncryptionEncryptionEntities = exports.TooManyFieldLevelEncryptionEncryptionEntities || (exports.TooManyFieldLevelEncryptionEncryptionEntities = {}));\nvar TooManyFieldLevelEncryptionFieldPatterns;\n(function (TooManyFieldLevelEncryptionFieldPatterns) {\n    TooManyFieldLevelEncryptionFieldPatterns.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyFieldLevelEncryptionFieldPatterns = exports.TooManyFieldLevelEncryptionFieldPatterns || (exports.TooManyFieldLevelEncryptionFieldPatterns = {}));\nvar TooManyFieldLevelEncryptionProfiles;\n(function (TooManyFieldLevelEncryptionProfiles) {\n    TooManyFieldLevelEncryptionProfiles.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyFieldLevelEncryptionProfiles = exports.TooManyFieldLevelEncryptionProfiles || (exports.TooManyFieldLevelEncryptionProfiles = {}));\nvar FunctionRuntime;\n(function (FunctionRuntime) {\n    FunctionRuntime[\"cloudfront_js_1_0\"] = \"cloudfront-js-1.0\";\n})(FunctionRuntime = exports.FunctionRuntime || (exports.FunctionRuntime = {}));\nvar FunctionConfig;\n(function (FunctionConfig) {\n    FunctionConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FunctionConfig = exports.FunctionConfig || (exports.FunctionConfig = {}));\nvar CreateFunctionRequest;\n(function (CreateFunctionRequest) {\n    CreateFunctionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.FunctionCode && { FunctionCode: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(CreateFunctionRequest = exports.CreateFunctionRequest || (exports.CreateFunctionRequest = {}));\nvar FunctionStage;\n(function (FunctionStage) {\n    FunctionStage[\"DEVELOPMENT\"] = \"DEVELOPMENT\";\n    FunctionStage[\"LIVE\"] = \"LIVE\";\n})(FunctionStage = exports.FunctionStage || (exports.FunctionStage = {}));\nvar FunctionMetadata;\n(function (FunctionMetadata) {\n    FunctionMetadata.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FunctionMetadata = exports.FunctionMetadata || (exports.FunctionMetadata = {}));\nvar FunctionSummary;\n(function (FunctionSummary) {\n    FunctionSummary.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FunctionSummary = exports.FunctionSummary || (exports.FunctionSummary = {}));\nvar CreateFunctionResult;\n(function (CreateFunctionResult) {\n    CreateFunctionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateFunctionResult = exports.CreateFunctionResult || (exports.CreateFunctionResult = {}));\nvar FunctionAlreadyExists;\n(function (FunctionAlreadyExists) {\n    FunctionAlreadyExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FunctionAlreadyExists = exports.FunctionAlreadyExists || (exports.FunctionAlreadyExists = {}));\nvar FunctionSizeLimitExceeded;\n(function (FunctionSizeLimitExceeded) {\n    FunctionSizeLimitExceeded.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FunctionSizeLimitExceeded = exports.FunctionSizeLimitExceeded || (exports.FunctionSizeLimitExceeded = {}));\nvar TooManyFunctions;\n(function (TooManyFunctions) {\n    TooManyFunctions.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyFunctions = exports.TooManyFunctions || (exports.TooManyFunctions = {}));\nvar UnsupportedOperation;\n(function (UnsupportedOperation) {\n    UnsupportedOperation.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UnsupportedOperation = exports.UnsupportedOperation || (exports.UnsupportedOperation = {}));\nvar Paths;\n(function (Paths) {\n    Paths.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Paths = exports.Paths || (exports.Paths = {}));\nvar InvalidationBatch;\n(function (InvalidationBatch) {\n    InvalidationBatch.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidationBatch = exports.InvalidationBatch || (exports.InvalidationBatch = {}));\nvar CreateInvalidationRequest;\n(function (CreateInvalidationRequest) {\n    CreateInvalidationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateInvalidationRequest = exports.CreateInvalidationRequest || (exports.CreateInvalidationRequest = {}));\nvar Invalidation;\n(function (Invalidation) {\n    Invalidation.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Invalidation = exports.Invalidation || (exports.Invalidation = {}));\nvar CreateInvalidationResult;\n(function (CreateInvalidationResult) {\n    CreateInvalidationResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateInvalidationResult = exports.CreateInvalidationResult || (exports.CreateInvalidationResult = {}));\nvar TooManyInvalidationsInProgress;\n(function (TooManyInvalidationsInProgress) {\n    TooManyInvalidationsInProgress.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyInvalidationsInProgress = exports.TooManyInvalidationsInProgress || (exports.TooManyInvalidationsInProgress = {}));\nvar KeyGroupConfig;\n(function (KeyGroupConfig) {\n    KeyGroupConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(KeyGroupConfig = exports.KeyGroupConfig || (exports.KeyGroupConfig = {}));\nvar CreateKeyGroupRequest;\n(function (CreateKeyGroupRequest) {\n    CreateKeyGroupRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateKeyGroupRequest = exports.CreateKeyGroupRequest || (exports.CreateKeyGroupRequest = {}));\nvar KeyGroup;\n(function (KeyGroup) {\n    KeyGroup.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(KeyGroup = exports.KeyGroup || (exports.KeyGroup = {}));\nvar CreateKeyGroupResult;\n(function (CreateKeyGroupResult) {\n    CreateKeyGroupResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateKeyGroupResult = exports.CreateKeyGroupResult || (exports.CreateKeyGroupResult = {}));\nvar KeyGroupAlreadyExists;\n(function (KeyGroupAlreadyExists) {\n    KeyGroupAlreadyExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(KeyGroupAlreadyExists = exports.KeyGroupAlreadyExists || (exports.KeyGroupAlreadyExists = {}));\nvar TooManyKeyGroups;\n(function (TooManyKeyGroups) {\n    TooManyKeyGroups.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyKeyGroups = exports.TooManyKeyGroups || (exports.TooManyKeyGroups = {}));\nvar TooManyPublicKeysInKeyGroup;\n(function (TooManyPublicKeysInKeyGroup) {\n    TooManyPublicKeysInKeyGroup.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyPublicKeysInKeyGroup = exports.TooManyPublicKeysInKeyGroup || (exports.TooManyPublicKeysInKeyGroup = {}));\nvar RealtimeMetricsSubscriptionStatus;\n(function (RealtimeMetricsSubscriptionStatus) {\n    RealtimeMetricsSubscriptionStatus[\"Disabled\"] = \"Disabled\";\n    RealtimeMetricsSubscriptionStatus[\"Enabled\"] = \"Enabled\";\n})(RealtimeMetricsSubscriptionStatus = exports.RealtimeMetricsSubscriptionStatus || (exports.RealtimeMetricsSubscriptionStatus = {}));\nvar RealtimeMetricsSubscriptionConfig;\n(function (RealtimeMetricsSubscriptionConfig) {\n    RealtimeMetricsSubscriptionConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(RealtimeMetricsSubscriptionConfig = exports.RealtimeMetricsSubscriptionConfig || (exports.RealtimeMetricsSubscriptionConfig = {}));\nvar MonitoringSubscription;\n(function (MonitoringSubscription) {\n    MonitoringSubscription.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(MonitoringSubscription = exports.MonitoringSubscription || (exports.MonitoringSubscription = {}));\nvar CreateMonitoringSubscriptionRequest;\n(function (CreateMonitoringSubscriptionRequest) {\n    CreateMonitoringSubscriptionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateMonitoringSubscriptionRequest = exports.CreateMonitoringSubscriptionRequest || (exports.CreateMonitoringSubscriptionRequest = {}));\nvar CreateMonitoringSubscriptionResult;\n(function (CreateMonitoringSubscriptionResult) {\n    CreateMonitoringSubscriptionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateMonitoringSubscriptionResult = exports.CreateMonitoringSubscriptionResult || (exports.CreateMonitoringSubscriptionResult = {}));\nvar OriginRequestPolicyCookiesConfig;\n(function (OriginRequestPolicyCookiesConfig) {\n    OriginRequestPolicyCookiesConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginRequestPolicyCookiesConfig = exports.OriginRequestPolicyCookiesConfig || (exports.OriginRequestPolicyCookiesConfig = {}));\nvar OriginRequestPolicyHeadersConfig;\n(function (OriginRequestPolicyHeadersConfig) {\n    OriginRequestPolicyHeadersConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginRequestPolicyHeadersConfig = exports.OriginRequestPolicyHeadersConfig || (exports.OriginRequestPolicyHeadersConfig = {}));\nvar OriginRequestPolicyQueryStringsConfig;\n(function (OriginRequestPolicyQueryStringsConfig) {\n    OriginRequestPolicyQueryStringsConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginRequestPolicyQueryStringsConfig = exports.OriginRequestPolicyQueryStringsConfig || (exports.OriginRequestPolicyQueryStringsConfig = {}));\nvar OriginRequestPolicyConfig;\n(function (OriginRequestPolicyConfig) {\n    OriginRequestPolicyConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginRequestPolicyConfig = exports.OriginRequestPolicyConfig || (exports.OriginRequestPolicyConfig = {}));\nvar CreateOriginRequestPolicyRequest;\n(function (CreateOriginRequestPolicyRequest) {\n    CreateOriginRequestPolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateOriginRequestPolicyRequest = exports.CreateOriginRequestPolicyRequest || (exports.CreateOriginRequestPolicyRequest = {}));\nvar OriginRequestPolicy;\n(function (OriginRequestPolicy) {\n    OriginRequestPolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginRequestPolicy = exports.OriginRequestPolicy || (exports.OriginRequestPolicy = {}));\nvar CreateOriginRequestPolicyResult;\n(function (CreateOriginRequestPolicyResult) {\n    CreateOriginRequestPolicyResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateOriginRequestPolicyResult = exports.CreateOriginRequestPolicyResult || (exports.CreateOriginRequestPolicyResult = {}));\nvar OriginRequestPolicyAlreadyExists;\n(function (OriginRequestPolicyAlreadyExists) {\n    OriginRequestPolicyAlreadyExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginRequestPolicyAlreadyExists = exports.OriginRequestPolicyAlreadyExists || (exports.OriginRequestPolicyAlreadyExists = {}));\nvar TooManyCookiesInOriginRequestPolicy;\n(function (TooManyCookiesInOriginRequestPolicy) {\n    TooManyCookiesInOriginRequestPolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyCookiesInOriginRequestPolicy = exports.TooManyCookiesInOriginRequestPolicy || (exports.TooManyCookiesInOriginRequestPolicy = {}));\nvar TooManyHeadersInOriginRequestPolicy;\n(function (TooManyHeadersInOriginRequestPolicy) {\n    TooManyHeadersInOriginRequestPolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyHeadersInOriginRequestPolicy = exports.TooManyHeadersInOriginRequestPolicy || (exports.TooManyHeadersInOriginRequestPolicy = {}));\nvar TooManyOriginRequestPolicies;\n(function (TooManyOriginRequestPolicies) {\n    TooManyOriginRequestPolicies.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyOriginRequestPolicies = exports.TooManyOriginRequestPolicies || (exports.TooManyOriginRequestPolicies = {}));\nvar TooManyQueryStringsInOriginRequestPolicy;\n(function (TooManyQueryStringsInOriginRequestPolicy) {\n    TooManyQueryStringsInOriginRequestPolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyQueryStringsInOriginRequestPolicy = exports.TooManyQueryStringsInOriginRequestPolicy || (exports.TooManyQueryStringsInOriginRequestPolicy = {}));\nvar PublicKeyConfig;\n(function (PublicKeyConfig) {\n    PublicKeyConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PublicKeyConfig = exports.PublicKeyConfig || (exports.PublicKeyConfig = {}));\nvar CreatePublicKeyRequest;\n(function (CreatePublicKeyRequest) {\n    CreatePublicKeyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreatePublicKeyRequest = exports.CreatePublicKeyRequest || (exports.CreatePublicKeyRequest = {}));\nvar PublicKey;\n(function (PublicKey) {\n    PublicKey.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PublicKey = exports.PublicKey || (exports.PublicKey = {}));\nvar CreatePublicKeyResult;\n(function (CreatePublicKeyResult) {\n    CreatePublicKeyResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreatePublicKeyResult = exports.CreatePublicKeyResult || (exports.CreatePublicKeyResult = {}));\nvar PublicKeyAlreadyExists;\n(function (PublicKeyAlreadyExists) {\n    PublicKeyAlreadyExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PublicKeyAlreadyExists = exports.PublicKeyAlreadyExists || (exports.PublicKeyAlreadyExists = {}));\nvar TooManyPublicKeys;\n(function (TooManyPublicKeys) {\n    TooManyPublicKeys.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyPublicKeys = exports.TooManyPublicKeys || (exports.TooManyPublicKeys = {}));\nvar KinesisStreamConfig;\n(function (KinesisStreamConfig) {\n    KinesisStreamConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(KinesisStreamConfig = exports.KinesisStreamConfig || (exports.KinesisStreamConfig = {}));\nvar EndPoint;\n(function (EndPoint) {\n    EndPoint.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(EndPoint = exports.EndPoint || (exports.EndPoint = {}));\nvar CreateRealtimeLogConfigRequest;\n(function (CreateRealtimeLogConfigRequest) {\n    CreateRealtimeLogConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateRealtimeLogConfigRequest = exports.CreateRealtimeLogConfigRequest || (exports.CreateRealtimeLogConfigRequest = {}));\nvar RealtimeLogConfig;\n(function (RealtimeLogConfig) {\n    RealtimeLogConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(RealtimeLogConfig = exports.RealtimeLogConfig || (exports.RealtimeLogConfig = {}));\nvar CreateRealtimeLogConfigResult;\n(function (CreateRealtimeLogConfigResult) {\n    CreateRealtimeLogConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateRealtimeLogConfigResult = exports.CreateRealtimeLogConfigResult || (exports.CreateRealtimeLogConfigResult = {}));\nvar RealtimeLogConfigAlreadyExists;\n(function (RealtimeLogConfigAlreadyExists) {\n    RealtimeLogConfigAlreadyExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(RealtimeLogConfigAlreadyExists = exports.RealtimeLogConfigAlreadyExists || (exports.RealtimeLogConfigAlreadyExists = {}));\nvar TooManyRealtimeLogConfigs;\n(function (TooManyRealtimeLogConfigs) {\n    TooManyRealtimeLogConfigs.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyRealtimeLogConfigs = exports.TooManyRealtimeLogConfigs || (exports.TooManyRealtimeLogConfigs = {}));\nvar ResponseHeadersPolicyAccessControlAllowHeaders;\n(function (ResponseHeadersPolicyAccessControlAllowHeaders) {\n    ResponseHeadersPolicyAccessControlAllowHeaders.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyAccessControlAllowHeaders = exports.ResponseHeadersPolicyAccessControlAllowHeaders || (exports.ResponseHeadersPolicyAccessControlAllowHeaders = {}));\nvar ResponseHeadersPolicyAccessControlAllowMethods;\n(function (ResponseHeadersPolicyAccessControlAllowMethods) {\n    ResponseHeadersPolicyAccessControlAllowMethods.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyAccessControlAllowMethods = exports.ResponseHeadersPolicyAccessControlAllowMethods || (exports.ResponseHeadersPolicyAccessControlAllowMethods = {}));\nvar ResponseHeadersPolicyAccessControlAllowOrigins;\n(function (ResponseHeadersPolicyAccessControlAllowOrigins) {\n    ResponseHeadersPolicyAccessControlAllowOrigins.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyAccessControlAllowOrigins = exports.ResponseHeadersPolicyAccessControlAllowOrigins || (exports.ResponseHeadersPolicyAccessControlAllowOrigins = {}));\nvar ResponseHeadersPolicyAccessControlExposeHeaders;\n(function (ResponseHeadersPolicyAccessControlExposeHeaders) {\n    ResponseHeadersPolicyAccessControlExposeHeaders.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyAccessControlExposeHeaders = exports.ResponseHeadersPolicyAccessControlExposeHeaders || (exports.ResponseHeadersPolicyAccessControlExposeHeaders = {}));\nvar ResponseHeadersPolicyCorsConfig;\n(function (ResponseHeadersPolicyCorsConfig) {\n    ResponseHeadersPolicyCorsConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyCorsConfig = exports.ResponseHeadersPolicyCorsConfig || (exports.ResponseHeadersPolicyCorsConfig = {}));\nvar ResponseHeadersPolicyCustomHeader;\n(function (ResponseHeadersPolicyCustomHeader) {\n    ResponseHeadersPolicyCustomHeader.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyCustomHeader = exports.ResponseHeadersPolicyCustomHeader || (exports.ResponseHeadersPolicyCustomHeader = {}));\nvar ResponseHeadersPolicyCustomHeadersConfig;\n(function (ResponseHeadersPolicyCustomHeadersConfig) {\n    ResponseHeadersPolicyCustomHeadersConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyCustomHeadersConfig = exports.ResponseHeadersPolicyCustomHeadersConfig || (exports.ResponseHeadersPolicyCustomHeadersConfig = {}));\nvar ResponseHeadersPolicyContentSecurityPolicy;\n(function (ResponseHeadersPolicyContentSecurityPolicy) {\n    ResponseHeadersPolicyContentSecurityPolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyContentSecurityPolicy = exports.ResponseHeadersPolicyContentSecurityPolicy || (exports.ResponseHeadersPolicyContentSecurityPolicy = {}));\nvar ResponseHeadersPolicyContentTypeOptions;\n(function (ResponseHeadersPolicyContentTypeOptions) {\n    ResponseHeadersPolicyContentTypeOptions.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyContentTypeOptions = exports.ResponseHeadersPolicyContentTypeOptions || (exports.ResponseHeadersPolicyContentTypeOptions = {}));\nvar FrameOptionsList;\n(function (FrameOptionsList) {\n    FrameOptionsList[\"DENY\"] = \"DENY\";\n    FrameOptionsList[\"SAMEORIGIN\"] = \"SAMEORIGIN\";\n})(FrameOptionsList = exports.FrameOptionsList || (exports.FrameOptionsList = {}));\nvar ResponseHeadersPolicyFrameOptions;\n(function (ResponseHeadersPolicyFrameOptions) {\n    ResponseHeadersPolicyFrameOptions.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyFrameOptions = exports.ResponseHeadersPolicyFrameOptions || (exports.ResponseHeadersPolicyFrameOptions = {}));\nvar ReferrerPolicyList;\n(function (ReferrerPolicyList) {\n    ReferrerPolicyList[\"no_referrer\"] = \"no-referrer\";\n    ReferrerPolicyList[\"no_referrer_when_downgrade\"] = \"no-referrer-when-downgrade\";\n    ReferrerPolicyList[\"origin\"] = \"origin\";\n    ReferrerPolicyList[\"origin_when_cross_origin\"] = \"origin-when-cross-origin\";\n    ReferrerPolicyList[\"same_origin\"] = \"same-origin\";\n    ReferrerPolicyList[\"strict_origin\"] = \"strict-origin\";\n    ReferrerPolicyList[\"strict_origin_when_cross_origin\"] = \"strict-origin-when-cross-origin\";\n    ReferrerPolicyList[\"unsafe_url\"] = \"unsafe-url\";\n})(ReferrerPolicyList = exports.ReferrerPolicyList || (exports.ReferrerPolicyList = {}));\nvar ResponseHeadersPolicyReferrerPolicy;\n(function (ResponseHeadersPolicyReferrerPolicy) {\n    ResponseHeadersPolicyReferrerPolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyReferrerPolicy = exports.ResponseHeadersPolicyReferrerPolicy || (exports.ResponseHeadersPolicyReferrerPolicy = {}));\nvar ResponseHeadersPolicyStrictTransportSecurity;\n(function (ResponseHeadersPolicyStrictTransportSecurity) {\n    ResponseHeadersPolicyStrictTransportSecurity.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyStrictTransportSecurity = exports.ResponseHeadersPolicyStrictTransportSecurity || (exports.ResponseHeadersPolicyStrictTransportSecurity = {}));\nvar ResponseHeadersPolicyXSSProtection;\n(function (ResponseHeadersPolicyXSSProtection) {\n    ResponseHeadersPolicyXSSProtection.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyXSSProtection = exports.ResponseHeadersPolicyXSSProtection || (exports.ResponseHeadersPolicyXSSProtection = {}));\nvar ResponseHeadersPolicySecurityHeadersConfig;\n(function (ResponseHeadersPolicySecurityHeadersConfig) {\n    ResponseHeadersPolicySecurityHeadersConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicySecurityHeadersConfig = exports.ResponseHeadersPolicySecurityHeadersConfig || (exports.ResponseHeadersPolicySecurityHeadersConfig = {}));\nvar ResponseHeadersPolicyConfig;\n(function (ResponseHeadersPolicyConfig) {\n    ResponseHeadersPolicyConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyConfig = exports.ResponseHeadersPolicyConfig || (exports.ResponseHeadersPolicyConfig = {}));\nvar CreateResponseHeadersPolicyRequest;\n(function (CreateResponseHeadersPolicyRequest) {\n    CreateResponseHeadersPolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateResponseHeadersPolicyRequest = exports.CreateResponseHeadersPolicyRequest || (exports.CreateResponseHeadersPolicyRequest = {}));\nvar ResponseHeadersPolicy;\n(function (ResponseHeadersPolicy) {\n    ResponseHeadersPolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicy = exports.ResponseHeadersPolicy || (exports.ResponseHeadersPolicy = {}));\nvar CreateResponseHeadersPolicyResult;\n(function (CreateResponseHeadersPolicyResult) {\n    CreateResponseHeadersPolicyResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateResponseHeadersPolicyResult = exports.CreateResponseHeadersPolicyResult || (exports.CreateResponseHeadersPolicyResult = {}));\nvar ResponseHeadersPolicyAlreadyExists;\n(function (ResponseHeadersPolicyAlreadyExists) {\n    ResponseHeadersPolicyAlreadyExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyAlreadyExists = exports.ResponseHeadersPolicyAlreadyExists || (exports.ResponseHeadersPolicyAlreadyExists = {}));\nvar TooManyCustomHeadersInResponseHeadersPolicy;\n(function (TooManyCustomHeadersInResponseHeadersPolicy) {\n    TooManyCustomHeadersInResponseHeadersPolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyCustomHeadersInResponseHeadersPolicy = exports.TooManyCustomHeadersInResponseHeadersPolicy || (exports.TooManyCustomHeadersInResponseHeadersPolicy = {}));\nvar TooManyResponseHeadersPolicies;\n(function (TooManyResponseHeadersPolicies) {\n    TooManyResponseHeadersPolicies.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyResponseHeadersPolicies = exports.TooManyResponseHeadersPolicies || (exports.TooManyResponseHeadersPolicies = {}));\nvar StreamingLoggingConfig;\n(function (StreamingLoggingConfig) {\n    StreamingLoggingConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(StreamingLoggingConfig = exports.StreamingLoggingConfig || (exports.StreamingLoggingConfig = {}));\nvar S3Origin;\n(function (S3Origin) {\n    S3Origin.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(S3Origin = exports.S3Origin || (exports.S3Origin = {}));\nvar StreamingDistributionConfig;\n(function (StreamingDistributionConfig) {\n    StreamingDistributionConfig.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(StreamingDistributionConfig = exports.StreamingDistributionConfig || (exports.StreamingDistributionConfig = {}));\nvar CreateStreamingDistributionRequest;\n(function (CreateStreamingDistributionRequest) {\n    CreateStreamingDistributionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateStreamingDistributionRequest = exports.CreateStreamingDistributionRequest || (exports.CreateStreamingDistributionRequest = {}));\nvar StreamingDistribution;\n(function (StreamingDistribution) {\n    StreamingDistribution.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(StreamingDistribution = exports.StreamingDistribution || (exports.StreamingDistribution = {}));\nvar CreateStreamingDistributionResult;\n(function (CreateStreamingDistributionResult) {\n    CreateStreamingDistributionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateStreamingDistributionResult = exports.CreateStreamingDistributionResult || (exports.CreateStreamingDistributionResult = {}));\nvar StreamingDistributionAlreadyExists;\n(function (StreamingDistributionAlreadyExists) {\n    StreamingDistributionAlreadyExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(StreamingDistributionAlreadyExists = exports.StreamingDistributionAlreadyExists || (exports.StreamingDistributionAlreadyExists = {}));\nvar TooManyStreamingDistributionCNAMEs;\n(function (TooManyStreamingDistributionCNAMEs) {\n    TooManyStreamingDistributionCNAMEs.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyStreamingDistributionCNAMEs = exports.TooManyStreamingDistributionCNAMEs || (exports.TooManyStreamingDistributionCNAMEs = {}));\nvar TooManyStreamingDistributions;\n(function (TooManyStreamingDistributions) {\n    TooManyStreamingDistributions.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyStreamingDistributions = exports.TooManyStreamingDistributions || (exports.TooManyStreamingDistributions = {}));\nvar StreamingDistributionConfigWithTags;\n(function (StreamingDistributionConfigWithTags) {\n    StreamingDistributionConfigWithTags.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(StreamingDistributionConfigWithTags = exports.StreamingDistributionConfigWithTags || (exports.StreamingDistributionConfigWithTags = {}));\nvar CreateStreamingDistributionWithTagsRequest;\n(function (CreateStreamingDistributionWithTagsRequest) {\n    CreateStreamingDistributionWithTagsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateStreamingDistributionWithTagsRequest = exports.CreateStreamingDistributionWithTagsRequest || (exports.CreateStreamingDistributionWithTagsRequest = {}));\nvar CreateStreamingDistributionWithTagsResult;\n(function (CreateStreamingDistributionWithTagsResult) {\n    CreateStreamingDistributionWithTagsResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateStreamingDistributionWithTagsResult = exports.CreateStreamingDistributionWithTagsResult || (exports.CreateStreamingDistributionWithTagsResult = {}));\nvar DeleteCachePolicyRequest;\n(function (DeleteCachePolicyRequest) {\n    DeleteCachePolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteCachePolicyRequest = exports.DeleteCachePolicyRequest || (exports.DeleteCachePolicyRequest = {}));\nvar IllegalDelete;\n(function (IllegalDelete) {\n    IllegalDelete.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(IllegalDelete = exports.IllegalDelete || (exports.IllegalDelete = {}));\nvar InvalidIfMatchVersion;\n(function (InvalidIfMatchVersion) {\n    InvalidIfMatchVersion.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidIfMatchVersion = exports.InvalidIfMatchVersion || (exports.InvalidIfMatchVersion = {}));\nvar PreconditionFailed;\n(function (PreconditionFailed) {\n    PreconditionFailed.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PreconditionFailed = exports.PreconditionFailed || (exports.PreconditionFailed = {}));\nvar CloudFrontOriginAccessIdentityInUse;\n(function (CloudFrontOriginAccessIdentityInUse) {\n    CloudFrontOriginAccessIdentityInUse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CloudFrontOriginAccessIdentityInUse = exports.CloudFrontOriginAccessIdentityInUse || (exports.CloudFrontOriginAccessIdentityInUse = {}));\nvar DeleteCloudFrontOriginAccessIdentityRequest;\n(function (DeleteCloudFrontOriginAccessIdentityRequest) {\n    DeleteCloudFrontOriginAccessIdentityRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteCloudFrontOriginAccessIdentityRequest = exports.DeleteCloudFrontOriginAccessIdentityRequest || (exports.DeleteCloudFrontOriginAccessIdentityRequest = {}));\nvar NoSuchCloudFrontOriginAccessIdentity;\n(function (NoSuchCloudFrontOriginAccessIdentity) {\n    NoSuchCloudFrontOriginAccessIdentity.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchCloudFrontOriginAccessIdentity = exports.NoSuchCloudFrontOriginAccessIdentity || (exports.NoSuchCloudFrontOriginAccessIdentity = {}));\nvar DeleteDistributionRequest;\n(function (DeleteDistributionRequest) {\n    DeleteDistributionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteDistributionRequest = exports.DeleteDistributionRequest || (exports.DeleteDistributionRequest = {}));\nvar DistributionNotDisabled;\n(function (DistributionNotDisabled) {\n    DistributionNotDisabled.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DistributionNotDisabled = exports.DistributionNotDisabled || (exports.DistributionNotDisabled = {}));\nvar DeleteFieldLevelEncryptionConfigRequest;\n(function (DeleteFieldLevelEncryptionConfigRequest) {\n    DeleteFieldLevelEncryptionConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteFieldLevelEncryptionConfigRequest = exports.DeleteFieldLevelEncryptionConfigRequest || (exports.DeleteFieldLevelEncryptionConfigRequest = {}));\nvar FieldLevelEncryptionConfigInUse;\n(function (FieldLevelEncryptionConfigInUse) {\n    FieldLevelEncryptionConfigInUse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FieldLevelEncryptionConfigInUse = exports.FieldLevelEncryptionConfigInUse || (exports.FieldLevelEncryptionConfigInUse = {}));\nvar DeleteFieldLevelEncryptionProfileRequest;\n(function (DeleteFieldLevelEncryptionProfileRequest) {\n    DeleteFieldLevelEncryptionProfileRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteFieldLevelEncryptionProfileRequest = exports.DeleteFieldLevelEncryptionProfileRequest || (exports.DeleteFieldLevelEncryptionProfileRequest = {}));\nvar FieldLevelEncryptionProfileInUse;\n(function (FieldLevelEncryptionProfileInUse) {\n    FieldLevelEncryptionProfileInUse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FieldLevelEncryptionProfileInUse = exports.FieldLevelEncryptionProfileInUse || (exports.FieldLevelEncryptionProfileInUse = {}));\nvar DeleteFunctionRequest;\n(function (DeleteFunctionRequest) {\n    DeleteFunctionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteFunctionRequest = exports.DeleteFunctionRequest || (exports.DeleteFunctionRequest = {}));\nvar FunctionInUse;\n(function (FunctionInUse) {\n    FunctionInUse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FunctionInUse = exports.FunctionInUse || (exports.FunctionInUse = {}));\nvar NoSuchFunctionExists;\n(function (NoSuchFunctionExists) {\n    NoSuchFunctionExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchFunctionExists = exports.NoSuchFunctionExists || (exports.NoSuchFunctionExists = {}));\nvar DeleteKeyGroupRequest;\n(function (DeleteKeyGroupRequest) {\n    DeleteKeyGroupRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteKeyGroupRequest = exports.DeleteKeyGroupRequest || (exports.DeleteKeyGroupRequest = {}));\nvar NoSuchResource;\n(function (NoSuchResource) {\n    NoSuchResource.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchResource = exports.NoSuchResource || (exports.NoSuchResource = {}));\nvar ResourceInUse;\n(function (ResourceInUse) {\n    ResourceInUse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResourceInUse = exports.ResourceInUse || (exports.ResourceInUse = {}));\nvar DeleteMonitoringSubscriptionRequest;\n(function (DeleteMonitoringSubscriptionRequest) {\n    DeleteMonitoringSubscriptionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteMonitoringSubscriptionRequest = exports.DeleteMonitoringSubscriptionRequest || (exports.DeleteMonitoringSubscriptionRequest = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetPublicKeyRequest = exports.GetOriginRequestPolicyConfigResult = exports.GetOriginRequestPolicyConfigRequest = exports.GetOriginRequestPolicyResult = exports.GetOriginRequestPolicyRequest = exports.GetMonitoringSubscriptionResult = exports.GetMonitoringSubscriptionRequest = exports.GetKeyGroupConfigResult = exports.GetKeyGroupConfigRequest = exports.GetKeyGroupResult = exports.GetKeyGroupRequest = exports.NoSuchInvalidation = exports.GetInvalidationResult = exports.GetInvalidationRequest = exports.GetFunctionResult = exports.GetFunctionRequest = exports.GetFieldLevelEncryptionProfileConfigResult = exports.GetFieldLevelEncryptionProfileConfigRequest = exports.GetFieldLevelEncryptionProfileResult = exports.GetFieldLevelEncryptionProfileRequest = exports.GetFieldLevelEncryptionConfigResult = exports.GetFieldLevelEncryptionConfigRequest = exports.GetFieldLevelEncryptionResult = exports.GetFieldLevelEncryptionRequest = exports.GetDistributionConfigResult = exports.GetDistributionConfigRequest = exports.GetDistributionResult = exports.GetDistributionRequest = exports.GetCloudFrontOriginAccessIdentityConfigResult = exports.GetCloudFrontOriginAccessIdentityConfigRequest = exports.GetCloudFrontOriginAccessIdentityResult = exports.GetCloudFrontOriginAccessIdentityRequest = exports.GetCachePolicyConfigResult = exports.GetCachePolicyConfigRequest = exports.GetCachePolicyResult = exports.GetCachePolicyRequest = exports.DescribeFunctionResult = exports.DescribeFunctionRequest = exports.StreamingDistributionNotDisabled = exports.NoSuchStreamingDistribution = exports.DeleteStreamingDistributionRequest = exports.ResponseHeadersPolicyInUse = exports.DeleteResponseHeadersPolicyRequest = exports.RealtimeLogConfigInUse = exports.DeleteRealtimeLogConfigRequest = exports.PublicKeyInUse = exports.DeletePublicKeyRequest = exports.OriginRequestPolicyInUse = exports.DeleteOriginRequestPolicyRequest = exports.DeleteMonitoringSubscriptionResult = void 0;\nexports.FunctionList = exports.ListFunctionsRequest = exports.ListFieldLevelEncryptionProfilesResult = exports.FieldLevelEncryptionProfileList = exports.FieldLevelEncryptionProfileSummary = exports.ListFieldLevelEncryptionProfilesRequest = exports.ListFieldLevelEncryptionConfigsResult = exports.FieldLevelEncryptionList = exports.FieldLevelEncryptionSummary = exports.ListFieldLevelEncryptionConfigsRequest = exports.ListDistributionsByWebACLIdResult = exports.ListDistributionsByWebACLIdRequest = exports.ListDistributionsByResponseHeadersPolicyIdResult = exports.ListDistributionsByResponseHeadersPolicyIdRequest = exports.ListDistributionsByRealtimeLogConfigResult = exports.ListDistributionsByRealtimeLogConfigRequest = exports.ListDistributionsByOriginRequestPolicyIdResult = exports.ListDistributionsByOriginRequestPolicyIdRequest = exports.ListDistributionsByKeyGroupResult = exports.ListDistributionsByKeyGroupRequest = exports.ListDistributionsByCachePolicyIdResult = exports.DistributionIdList = exports.ListDistributionsByCachePolicyIdRequest = exports.ListDistributionsResult = exports.DistributionList = exports.DistributionSummary = exports.ListDistributionsRequest = exports.ListConflictingAliasesResult = exports.ConflictingAliasesList = exports.ConflictingAlias = exports.ListConflictingAliasesRequest = exports.ListCloudFrontOriginAccessIdentitiesResult = exports.CloudFrontOriginAccessIdentityList = exports.CloudFrontOriginAccessIdentitySummary = exports.ListCloudFrontOriginAccessIdentitiesRequest = exports.ListCachePoliciesResult = exports.ListCachePoliciesRequest = exports.GetStreamingDistributionConfigResult = exports.GetStreamingDistributionConfigRequest = exports.GetStreamingDistributionResult = exports.GetStreamingDistributionRequest = exports.GetResponseHeadersPolicyConfigResult = exports.GetResponseHeadersPolicyConfigRequest = exports.GetResponseHeadersPolicyResult = exports.GetResponseHeadersPolicyRequest = exports.GetRealtimeLogConfigResult = exports.GetRealtimeLogConfigRequest = exports.GetPublicKeyConfigResult = exports.GetPublicKeyConfigRequest = exports.GetPublicKeyResult = void 0;\nexports.UpdateFieldLevelEncryptionProfileResult = exports.UpdateFieldLevelEncryptionProfileRequest = exports.UpdateFieldLevelEncryptionConfigResult = exports.UpdateFieldLevelEncryptionConfigRequest = exports.UpdateDistributionResult = exports.UpdateDistributionRequest = exports.UpdateCloudFrontOriginAccessIdentityResult = exports.UpdateCloudFrontOriginAccessIdentityRequest = exports.UpdateCachePolicyResult = exports.UpdateCachePolicyRequest = exports.UntagResourceRequest = exports.TagKeys = exports.TestFunctionResult = exports.TestResult = exports.TestFunctionRequest = exports.TestFunctionFailed = exports.TagResourceRequest = exports.PublishFunctionResult = exports.PublishFunctionRequest = exports.ListTagsForResourceResult = exports.ListTagsForResourceRequest = exports.ListStreamingDistributionsResult = exports.StreamingDistributionList = exports.StreamingDistributionSummary = exports.ListStreamingDistributionsRequest = exports.ListResponseHeadersPoliciesResult = exports.ResponseHeadersPolicyList = exports.ResponseHeadersPolicySummary = exports.ListResponseHeadersPoliciesRequest = exports.ResponseHeadersPolicyType = exports.ListRealtimeLogConfigsResult = exports.RealtimeLogConfigs = exports.ListRealtimeLogConfigsRequest = exports.ListPublicKeysResult = exports.PublicKeyList = exports.PublicKeySummary = exports.ListPublicKeysRequest = exports.ListOriginRequestPoliciesResult = exports.OriginRequestPolicyList = exports.OriginRequestPolicySummary = exports.ListOriginRequestPoliciesRequest = exports.ListKeyGroupsResult = exports.KeyGroupList = exports.KeyGroupSummary = exports.ListKeyGroupsRequest = exports.ListInvalidationsResult = exports.InvalidationList = exports.InvalidationSummary = exports.ListInvalidationsRequest = exports.ListFunctionsResult = void 0;\nexports.UpdateStreamingDistributionResult = exports.UpdateStreamingDistributionRequest = exports.UpdateResponseHeadersPolicyResult = exports.UpdateResponseHeadersPolicyRequest = exports.UpdateRealtimeLogConfigResult = exports.UpdateRealtimeLogConfigRequest = exports.UpdatePublicKeyResult = exports.UpdatePublicKeyRequest = exports.UpdateOriginRequestPolicyResult = exports.UpdateOriginRequestPolicyRequest = exports.UpdateKeyGroupResult = exports.UpdateKeyGroupRequest = exports.UpdateFunctionResult = exports.UpdateFunctionRequest = void 0;\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"./models_0\");\nvar DeleteMonitoringSubscriptionResult;\n(function (DeleteMonitoringSubscriptionResult) {\n    DeleteMonitoringSubscriptionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteMonitoringSubscriptionResult = exports.DeleteMonitoringSubscriptionResult || (exports.DeleteMonitoringSubscriptionResult = {}));\nvar DeleteOriginRequestPolicyRequest;\n(function (DeleteOriginRequestPolicyRequest) {\n    DeleteOriginRequestPolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteOriginRequestPolicyRequest = exports.DeleteOriginRequestPolicyRequest || (exports.DeleteOriginRequestPolicyRequest = {}));\nvar OriginRequestPolicyInUse;\n(function (OriginRequestPolicyInUse) {\n    OriginRequestPolicyInUse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginRequestPolicyInUse = exports.OriginRequestPolicyInUse || (exports.OriginRequestPolicyInUse = {}));\nvar DeletePublicKeyRequest;\n(function (DeletePublicKeyRequest) {\n    DeletePublicKeyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeletePublicKeyRequest = exports.DeletePublicKeyRequest || (exports.DeletePublicKeyRequest = {}));\nvar PublicKeyInUse;\n(function (PublicKeyInUse) {\n    PublicKeyInUse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PublicKeyInUse = exports.PublicKeyInUse || (exports.PublicKeyInUse = {}));\nvar DeleteRealtimeLogConfigRequest;\n(function (DeleteRealtimeLogConfigRequest) {\n    DeleteRealtimeLogConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteRealtimeLogConfigRequest = exports.DeleteRealtimeLogConfigRequest || (exports.DeleteRealtimeLogConfigRequest = {}));\nvar RealtimeLogConfigInUse;\n(function (RealtimeLogConfigInUse) {\n    RealtimeLogConfigInUse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(RealtimeLogConfigInUse = exports.RealtimeLogConfigInUse || (exports.RealtimeLogConfigInUse = {}));\nvar DeleteResponseHeadersPolicyRequest;\n(function (DeleteResponseHeadersPolicyRequest) {\n    DeleteResponseHeadersPolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteResponseHeadersPolicyRequest = exports.DeleteResponseHeadersPolicyRequest || (exports.DeleteResponseHeadersPolicyRequest = {}));\nvar ResponseHeadersPolicyInUse;\n(function (ResponseHeadersPolicyInUse) {\n    ResponseHeadersPolicyInUse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyInUse = exports.ResponseHeadersPolicyInUse || (exports.ResponseHeadersPolicyInUse = {}));\nvar DeleteStreamingDistributionRequest;\n(function (DeleteStreamingDistributionRequest) {\n    DeleteStreamingDistributionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteStreamingDistributionRequest = exports.DeleteStreamingDistributionRequest || (exports.DeleteStreamingDistributionRequest = {}));\nvar NoSuchStreamingDistribution;\n(function (NoSuchStreamingDistribution) {\n    NoSuchStreamingDistribution.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchStreamingDistribution = exports.NoSuchStreamingDistribution || (exports.NoSuchStreamingDistribution = {}));\nvar StreamingDistributionNotDisabled;\n(function (StreamingDistributionNotDisabled) {\n    StreamingDistributionNotDisabled.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(StreamingDistributionNotDisabled = exports.StreamingDistributionNotDisabled || (exports.StreamingDistributionNotDisabled = {}));\nvar DescribeFunctionRequest;\n(function (DescribeFunctionRequest) {\n    DescribeFunctionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DescribeFunctionRequest = exports.DescribeFunctionRequest || (exports.DescribeFunctionRequest = {}));\nvar DescribeFunctionResult;\n(function (DescribeFunctionResult) {\n    DescribeFunctionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DescribeFunctionResult = exports.DescribeFunctionResult || (exports.DescribeFunctionResult = {}));\nvar GetCachePolicyRequest;\n(function (GetCachePolicyRequest) {\n    GetCachePolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetCachePolicyRequest = exports.GetCachePolicyRequest || (exports.GetCachePolicyRequest = {}));\nvar GetCachePolicyResult;\n(function (GetCachePolicyResult) {\n    GetCachePolicyResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetCachePolicyResult = exports.GetCachePolicyResult || (exports.GetCachePolicyResult = {}));\nvar GetCachePolicyConfigRequest;\n(function (GetCachePolicyConfigRequest) {\n    GetCachePolicyConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetCachePolicyConfigRequest = exports.GetCachePolicyConfigRequest || (exports.GetCachePolicyConfigRequest = {}));\nvar GetCachePolicyConfigResult;\n(function (GetCachePolicyConfigResult) {\n    GetCachePolicyConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetCachePolicyConfigResult = exports.GetCachePolicyConfigResult || (exports.GetCachePolicyConfigResult = {}));\nvar GetCloudFrontOriginAccessIdentityRequest;\n(function (GetCloudFrontOriginAccessIdentityRequest) {\n    GetCloudFrontOriginAccessIdentityRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetCloudFrontOriginAccessIdentityRequest = exports.GetCloudFrontOriginAccessIdentityRequest || (exports.GetCloudFrontOriginAccessIdentityRequest = {}));\nvar GetCloudFrontOriginAccessIdentityResult;\n(function (GetCloudFrontOriginAccessIdentityResult) {\n    GetCloudFrontOriginAccessIdentityResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetCloudFrontOriginAccessIdentityResult = exports.GetCloudFrontOriginAccessIdentityResult || (exports.GetCloudFrontOriginAccessIdentityResult = {}));\nvar GetCloudFrontOriginAccessIdentityConfigRequest;\n(function (GetCloudFrontOriginAccessIdentityConfigRequest) {\n    GetCloudFrontOriginAccessIdentityConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetCloudFrontOriginAccessIdentityConfigRequest = exports.GetCloudFrontOriginAccessIdentityConfigRequest || (exports.GetCloudFrontOriginAccessIdentityConfigRequest = {}));\nvar GetCloudFrontOriginAccessIdentityConfigResult;\n(function (GetCloudFrontOriginAccessIdentityConfigResult) {\n    GetCloudFrontOriginAccessIdentityConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetCloudFrontOriginAccessIdentityConfigResult = exports.GetCloudFrontOriginAccessIdentityConfigResult || (exports.GetCloudFrontOriginAccessIdentityConfigResult = {}));\nvar GetDistributionRequest;\n(function (GetDistributionRequest) {\n    GetDistributionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetDistributionRequest = exports.GetDistributionRequest || (exports.GetDistributionRequest = {}));\nvar GetDistributionResult;\n(function (GetDistributionResult) {\n    GetDistributionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Distribution && { Distribution: models_0_1.Distribution.filterSensitiveLog(obj.Distribution) }),\n    });\n})(GetDistributionResult = exports.GetDistributionResult || (exports.GetDistributionResult = {}));\nvar GetDistributionConfigRequest;\n(function (GetDistributionConfigRequest) {\n    GetDistributionConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetDistributionConfigRequest = exports.GetDistributionConfigRequest || (exports.GetDistributionConfigRequest = {}));\nvar GetDistributionConfigResult;\n(function (GetDistributionConfigResult) {\n    GetDistributionConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.DistributionConfig && {\n            DistributionConfig: models_0_1.DistributionConfig.filterSensitiveLog(obj.DistributionConfig),\n        }),\n    });\n})(GetDistributionConfigResult = exports.GetDistributionConfigResult || (exports.GetDistributionConfigResult = {}));\nvar GetFieldLevelEncryptionRequest;\n(function (GetFieldLevelEncryptionRequest) {\n    GetFieldLevelEncryptionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetFieldLevelEncryptionRequest = exports.GetFieldLevelEncryptionRequest || (exports.GetFieldLevelEncryptionRequest = {}));\nvar GetFieldLevelEncryptionResult;\n(function (GetFieldLevelEncryptionResult) {\n    GetFieldLevelEncryptionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetFieldLevelEncryptionResult = exports.GetFieldLevelEncryptionResult || (exports.GetFieldLevelEncryptionResult = {}));\nvar GetFieldLevelEncryptionConfigRequest;\n(function (GetFieldLevelEncryptionConfigRequest) {\n    GetFieldLevelEncryptionConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetFieldLevelEncryptionConfigRequest = exports.GetFieldLevelEncryptionConfigRequest || (exports.GetFieldLevelEncryptionConfigRequest = {}));\nvar GetFieldLevelEncryptionConfigResult;\n(function (GetFieldLevelEncryptionConfigResult) {\n    GetFieldLevelEncryptionConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetFieldLevelEncryptionConfigResult = exports.GetFieldLevelEncryptionConfigResult || (exports.GetFieldLevelEncryptionConfigResult = {}));\nvar GetFieldLevelEncryptionProfileRequest;\n(function (GetFieldLevelEncryptionProfileRequest) {\n    GetFieldLevelEncryptionProfileRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetFieldLevelEncryptionProfileRequest = exports.GetFieldLevelEncryptionProfileRequest || (exports.GetFieldLevelEncryptionProfileRequest = {}));\nvar GetFieldLevelEncryptionProfileResult;\n(function (GetFieldLevelEncryptionProfileResult) {\n    GetFieldLevelEncryptionProfileResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetFieldLevelEncryptionProfileResult = exports.GetFieldLevelEncryptionProfileResult || (exports.GetFieldLevelEncryptionProfileResult = {}));\nvar GetFieldLevelEncryptionProfileConfigRequest;\n(function (GetFieldLevelEncryptionProfileConfigRequest) {\n    GetFieldLevelEncryptionProfileConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetFieldLevelEncryptionProfileConfigRequest = exports.GetFieldLevelEncryptionProfileConfigRequest || (exports.GetFieldLevelEncryptionProfileConfigRequest = {}));\nvar GetFieldLevelEncryptionProfileConfigResult;\n(function (GetFieldLevelEncryptionProfileConfigResult) {\n    GetFieldLevelEncryptionProfileConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetFieldLevelEncryptionProfileConfigResult = exports.GetFieldLevelEncryptionProfileConfigResult || (exports.GetFieldLevelEncryptionProfileConfigResult = {}));\nvar GetFunctionRequest;\n(function (GetFunctionRequest) {\n    GetFunctionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetFunctionRequest = exports.GetFunctionRequest || (exports.GetFunctionRequest = {}));\nvar GetFunctionResult;\n(function (GetFunctionResult) {\n    GetFunctionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.FunctionCode && { FunctionCode: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(GetFunctionResult = exports.GetFunctionResult || (exports.GetFunctionResult = {}));\nvar GetInvalidationRequest;\n(function (GetInvalidationRequest) {\n    GetInvalidationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetInvalidationRequest = exports.GetInvalidationRequest || (exports.GetInvalidationRequest = {}));\nvar GetInvalidationResult;\n(function (GetInvalidationResult) {\n    GetInvalidationResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetInvalidationResult = exports.GetInvalidationResult || (exports.GetInvalidationResult = {}));\nvar NoSuchInvalidation;\n(function (NoSuchInvalidation) {\n    NoSuchInvalidation.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchInvalidation = exports.NoSuchInvalidation || (exports.NoSuchInvalidation = {}));\nvar GetKeyGroupRequest;\n(function (GetKeyGroupRequest) {\n    GetKeyGroupRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetKeyGroupRequest = exports.GetKeyGroupRequest || (exports.GetKeyGroupRequest = {}));\nvar GetKeyGroupResult;\n(function (GetKeyGroupResult) {\n    GetKeyGroupResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetKeyGroupResult = exports.GetKeyGroupResult || (exports.GetKeyGroupResult = {}));\nvar GetKeyGroupConfigRequest;\n(function (GetKeyGroupConfigRequest) {\n    GetKeyGroupConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetKeyGroupConfigRequest = exports.GetKeyGroupConfigRequest || (exports.GetKeyGroupConfigRequest = {}));\nvar GetKeyGroupConfigResult;\n(function (GetKeyGroupConfigResult) {\n    GetKeyGroupConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetKeyGroupConfigResult = exports.GetKeyGroupConfigResult || (exports.GetKeyGroupConfigResult = {}));\nvar GetMonitoringSubscriptionRequest;\n(function (GetMonitoringSubscriptionRequest) {\n    GetMonitoringSubscriptionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetMonitoringSubscriptionRequest = exports.GetMonitoringSubscriptionRequest || (exports.GetMonitoringSubscriptionRequest = {}));\nvar GetMonitoringSubscriptionResult;\n(function (GetMonitoringSubscriptionResult) {\n    GetMonitoringSubscriptionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetMonitoringSubscriptionResult = exports.GetMonitoringSubscriptionResult || (exports.GetMonitoringSubscriptionResult = {}));\nvar GetOriginRequestPolicyRequest;\n(function (GetOriginRequestPolicyRequest) {\n    GetOriginRequestPolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetOriginRequestPolicyRequest = exports.GetOriginRequestPolicyRequest || (exports.GetOriginRequestPolicyRequest = {}));\nvar GetOriginRequestPolicyResult;\n(function (GetOriginRequestPolicyResult) {\n    GetOriginRequestPolicyResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetOriginRequestPolicyResult = exports.GetOriginRequestPolicyResult || (exports.GetOriginRequestPolicyResult = {}));\nvar GetOriginRequestPolicyConfigRequest;\n(function (GetOriginRequestPolicyConfigRequest) {\n    GetOriginRequestPolicyConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetOriginRequestPolicyConfigRequest = exports.GetOriginRequestPolicyConfigRequest || (exports.GetOriginRequestPolicyConfigRequest = {}));\nvar GetOriginRequestPolicyConfigResult;\n(function (GetOriginRequestPolicyConfigResult) {\n    GetOriginRequestPolicyConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetOriginRequestPolicyConfigResult = exports.GetOriginRequestPolicyConfigResult || (exports.GetOriginRequestPolicyConfigResult = {}));\nvar GetPublicKeyRequest;\n(function (GetPublicKeyRequest) {\n    GetPublicKeyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetPublicKeyRequest = exports.GetPublicKeyRequest || (exports.GetPublicKeyRequest = {}));\nvar GetPublicKeyResult;\n(function (GetPublicKeyResult) {\n    GetPublicKeyResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetPublicKeyResult = exports.GetPublicKeyResult || (exports.GetPublicKeyResult = {}));\nvar GetPublicKeyConfigRequest;\n(function (GetPublicKeyConfigRequest) {\n    GetPublicKeyConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetPublicKeyConfigRequest = exports.GetPublicKeyConfigRequest || (exports.GetPublicKeyConfigRequest = {}));\nvar GetPublicKeyConfigResult;\n(function (GetPublicKeyConfigResult) {\n    GetPublicKeyConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetPublicKeyConfigResult = exports.GetPublicKeyConfigResult || (exports.GetPublicKeyConfigResult = {}));\nvar GetRealtimeLogConfigRequest;\n(function (GetRealtimeLogConfigRequest) {\n    GetRealtimeLogConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetRealtimeLogConfigRequest = exports.GetRealtimeLogConfigRequest || (exports.GetRealtimeLogConfigRequest = {}));\nvar GetRealtimeLogConfigResult;\n(function (GetRealtimeLogConfigResult) {\n    GetRealtimeLogConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetRealtimeLogConfigResult = exports.GetRealtimeLogConfigResult || (exports.GetRealtimeLogConfigResult = {}));\nvar GetResponseHeadersPolicyRequest;\n(function (GetResponseHeadersPolicyRequest) {\n    GetResponseHeadersPolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetResponseHeadersPolicyRequest = exports.GetResponseHeadersPolicyRequest || (exports.GetResponseHeadersPolicyRequest = {}));\nvar GetResponseHeadersPolicyResult;\n(function (GetResponseHeadersPolicyResult) {\n    GetResponseHeadersPolicyResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetResponseHeadersPolicyResult = exports.GetResponseHeadersPolicyResult || (exports.GetResponseHeadersPolicyResult = {}));\nvar GetResponseHeadersPolicyConfigRequest;\n(function (GetResponseHeadersPolicyConfigRequest) {\n    GetResponseHeadersPolicyConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetResponseHeadersPolicyConfigRequest = exports.GetResponseHeadersPolicyConfigRequest || (exports.GetResponseHeadersPolicyConfigRequest = {}));\nvar GetResponseHeadersPolicyConfigResult;\n(function (GetResponseHeadersPolicyConfigResult) {\n    GetResponseHeadersPolicyConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetResponseHeadersPolicyConfigResult = exports.GetResponseHeadersPolicyConfigResult || (exports.GetResponseHeadersPolicyConfigResult = {}));\nvar GetStreamingDistributionRequest;\n(function (GetStreamingDistributionRequest) {\n    GetStreamingDistributionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetStreamingDistributionRequest = exports.GetStreamingDistributionRequest || (exports.GetStreamingDistributionRequest = {}));\nvar GetStreamingDistributionResult;\n(function (GetStreamingDistributionResult) {\n    GetStreamingDistributionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetStreamingDistributionResult = exports.GetStreamingDistributionResult || (exports.GetStreamingDistributionResult = {}));\nvar GetStreamingDistributionConfigRequest;\n(function (GetStreamingDistributionConfigRequest) {\n    GetStreamingDistributionConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetStreamingDistributionConfigRequest = exports.GetStreamingDistributionConfigRequest || (exports.GetStreamingDistributionConfigRequest = {}));\nvar GetStreamingDistributionConfigResult;\n(function (GetStreamingDistributionConfigResult) {\n    GetStreamingDistributionConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetStreamingDistributionConfigResult = exports.GetStreamingDistributionConfigResult || (exports.GetStreamingDistributionConfigResult = {}));\nvar ListCachePoliciesRequest;\n(function (ListCachePoliciesRequest) {\n    ListCachePoliciesRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListCachePoliciesRequest = exports.ListCachePoliciesRequest || (exports.ListCachePoliciesRequest = {}));\nvar ListCachePoliciesResult;\n(function (ListCachePoliciesResult) {\n    ListCachePoliciesResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListCachePoliciesResult = exports.ListCachePoliciesResult || (exports.ListCachePoliciesResult = {}));\nvar ListCloudFrontOriginAccessIdentitiesRequest;\n(function (ListCloudFrontOriginAccessIdentitiesRequest) {\n    ListCloudFrontOriginAccessIdentitiesRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListCloudFrontOriginAccessIdentitiesRequest = exports.ListCloudFrontOriginAccessIdentitiesRequest || (exports.ListCloudFrontOriginAccessIdentitiesRequest = {}));\nvar CloudFrontOriginAccessIdentitySummary;\n(function (CloudFrontOriginAccessIdentitySummary) {\n    CloudFrontOriginAccessIdentitySummary.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CloudFrontOriginAccessIdentitySummary = exports.CloudFrontOriginAccessIdentitySummary || (exports.CloudFrontOriginAccessIdentitySummary = {}));\nvar CloudFrontOriginAccessIdentityList;\n(function (CloudFrontOriginAccessIdentityList) {\n    CloudFrontOriginAccessIdentityList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CloudFrontOriginAccessIdentityList = exports.CloudFrontOriginAccessIdentityList || (exports.CloudFrontOriginAccessIdentityList = {}));\nvar ListCloudFrontOriginAccessIdentitiesResult;\n(function (ListCloudFrontOriginAccessIdentitiesResult) {\n    ListCloudFrontOriginAccessIdentitiesResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListCloudFrontOriginAccessIdentitiesResult = exports.ListCloudFrontOriginAccessIdentitiesResult || (exports.ListCloudFrontOriginAccessIdentitiesResult = {}));\nvar ListConflictingAliasesRequest;\n(function (ListConflictingAliasesRequest) {\n    ListConflictingAliasesRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListConflictingAliasesRequest = exports.ListConflictingAliasesRequest || (exports.ListConflictingAliasesRequest = {}));\nvar ConflictingAlias;\n(function (ConflictingAlias) {\n    ConflictingAlias.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ConflictingAlias = exports.ConflictingAlias || (exports.ConflictingAlias = {}));\nvar ConflictingAliasesList;\n(function (ConflictingAliasesList) {\n    ConflictingAliasesList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ConflictingAliasesList = exports.ConflictingAliasesList || (exports.ConflictingAliasesList = {}));\nvar ListConflictingAliasesResult;\n(function (ListConflictingAliasesResult) {\n    ListConflictingAliasesResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListConflictingAliasesResult = exports.ListConflictingAliasesResult || (exports.ListConflictingAliasesResult = {}));\nvar ListDistributionsRequest;\n(function (ListDistributionsRequest) {\n    ListDistributionsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListDistributionsRequest = exports.ListDistributionsRequest || (exports.ListDistributionsRequest = {}));\nvar DistributionSummary;\n(function (DistributionSummary) {\n    DistributionSummary.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DistributionSummary = exports.DistributionSummary || (exports.DistributionSummary = {}));\nvar DistributionList;\n(function (DistributionList) {\n    DistributionList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DistributionList = exports.DistributionList || (exports.DistributionList = {}));\nvar ListDistributionsResult;\n(function (ListDistributionsResult) {\n    ListDistributionsResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListDistributionsResult = exports.ListDistributionsResult || (exports.ListDistributionsResult = {}));\nvar ListDistributionsByCachePolicyIdRequest;\n(function (ListDistributionsByCachePolicyIdRequest) {\n    ListDistributionsByCachePolicyIdRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListDistributionsByCachePolicyIdRequest = exports.ListDistributionsByCachePolicyIdRequest || (exports.ListDistributionsByCachePolicyIdRequest = {}));\nvar DistributionIdList;\n(function (DistributionIdList) {\n    DistributionIdList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DistributionIdList = exports.DistributionIdList || (exports.DistributionIdList = {}));\nvar ListDistributionsByCachePolicyIdResult;\n(function (ListDistributionsByCachePolicyIdResult) {\n    ListDistributionsByCachePolicyIdResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListDistributionsByCachePolicyIdResult = exports.ListDistributionsByCachePolicyIdResult || (exports.ListDistributionsByCachePolicyIdResult = {}));\nvar ListDistributionsByKeyGroupRequest;\n(function (ListDistributionsByKeyGroupRequest) {\n    ListDistributionsByKeyGroupRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListDistributionsByKeyGroupRequest = exports.ListDistributionsByKeyGroupRequest || (exports.ListDistributionsByKeyGroupRequest = {}));\nvar ListDistributionsByKeyGroupResult;\n(function (ListDistributionsByKeyGroupResult) {\n    ListDistributionsByKeyGroupResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListDistributionsByKeyGroupResult = exports.ListDistributionsByKeyGroupResult || (exports.ListDistributionsByKeyGroupResult = {}));\nvar ListDistributionsByOriginRequestPolicyIdRequest;\n(function (ListDistributionsByOriginRequestPolicyIdRequest) {\n    ListDistributionsByOriginRequestPolicyIdRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListDistributionsByOriginRequestPolicyIdRequest = exports.ListDistributionsByOriginRequestPolicyIdRequest || (exports.ListDistributionsByOriginRequestPolicyIdRequest = {}));\nvar ListDistributionsByOriginRequestPolicyIdResult;\n(function (ListDistributionsByOriginRequestPolicyIdResult) {\n    ListDistributionsByOriginRequestPolicyIdResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListDistributionsByOriginRequestPolicyIdResult = exports.ListDistributionsByOriginRequestPolicyIdResult || (exports.ListDistributionsByOriginRequestPolicyIdResult = {}));\nvar ListDistributionsByRealtimeLogConfigRequest;\n(function (ListDistributionsByRealtimeLogConfigRequest) {\n    ListDistributionsByRealtimeLogConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListDistributionsByRealtimeLogConfigRequest = exports.ListDistributionsByRealtimeLogConfigRequest || (exports.ListDistributionsByRealtimeLogConfigRequest = {}));\nvar ListDistributionsByRealtimeLogConfigResult;\n(function (ListDistributionsByRealtimeLogConfigResult) {\n    ListDistributionsByRealtimeLogConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListDistributionsByRealtimeLogConfigResult = exports.ListDistributionsByRealtimeLogConfigResult || (exports.ListDistributionsByRealtimeLogConfigResult = {}));\nvar ListDistributionsByResponseHeadersPolicyIdRequest;\n(function (ListDistributionsByResponseHeadersPolicyIdRequest) {\n    ListDistributionsByResponseHeadersPolicyIdRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListDistributionsByResponseHeadersPolicyIdRequest = exports.ListDistributionsByResponseHeadersPolicyIdRequest || (exports.ListDistributionsByResponseHeadersPolicyIdRequest = {}));\nvar ListDistributionsByResponseHeadersPolicyIdResult;\n(function (ListDistributionsByResponseHeadersPolicyIdResult) {\n    ListDistributionsByResponseHeadersPolicyIdResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListDistributionsByResponseHeadersPolicyIdResult = exports.ListDistributionsByResponseHeadersPolicyIdResult || (exports.ListDistributionsByResponseHeadersPolicyIdResult = {}));\nvar ListDistributionsByWebACLIdRequest;\n(function (ListDistributionsByWebACLIdRequest) {\n    ListDistributionsByWebACLIdRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListDistributionsByWebACLIdRequest = exports.ListDistributionsByWebACLIdRequest || (exports.ListDistributionsByWebACLIdRequest = {}));\nvar ListDistributionsByWebACLIdResult;\n(function (ListDistributionsByWebACLIdResult) {\n    ListDistributionsByWebACLIdResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListDistributionsByWebACLIdResult = exports.ListDistributionsByWebACLIdResult || (exports.ListDistributionsByWebACLIdResult = {}));\nvar ListFieldLevelEncryptionConfigsRequest;\n(function (ListFieldLevelEncryptionConfigsRequest) {\n    ListFieldLevelEncryptionConfigsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListFieldLevelEncryptionConfigsRequest = exports.ListFieldLevelEncryptionConfigsRequest || (exports.ListFieldLevelEncryptionConfigsRequest = {}));\nvar FieldLevelEncryptionSummary;\n(function (FieldLevelEncryptionSummary) {\n    FieldLevelEncryptionSummary.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FieldLevelEncryptionSummary = exports.FieldLevelEncryptionSummary || (exports.FieldLevelEncryptionSummary = {}));\nvar FieldLevelEncryptionList;\n(function (FieldLevelEncryptionList) {\n    FieldLevelEncryptionList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FieldLevelEncryptionList = exports.FieldLevelEncryptionList || (exports.FieldLevelEncryptionList = {}));\nvar ListFieldLevelEncryptionConfigsResult;\n(function (ListFieldLevelEncryptionConfigsResult) {\n    ListFieldLevelEncryptionConfigsResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListFieldLevelEncryptionConfigsResult = exports.ListFieldLevelEncryptionConfigsResult || (exports.ListFieldLevelEncryptionConfigsResult = {}));\nvar ListFieldLevelEncryptionProfilesRequest;\n(function (ListFieldLevelEncryptionProfilesRequest) {\n    ListFieldLevelEncryptionProfilesRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListFieldLevelEncryptionProfilesRequest = exports.ListFieldLevelEncryptionProfilesRequest || (exports.ListFieldLevelEncryptionProfilesRequest = {}));\nvar FieldLevelEncryptionProfileSummary;\n(function (FieldLevelEncryptionProfileSummary) {\n    FieldLevelEncryptionProfileSummary.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FieldLevelEncryptionProfileSummary = exports.FieldLevelEncryptionProfileSummary || (exports.FieldLevelEncryptionProfileSummary = {}));\nvar FieldLevelEncryptionProfileList;\n(function (FieldLevelEncryptionProfileList) {\n    FieldLevelEncryptionProfileList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FieldLevelEncryptionProfileList = exports.FieldLevelEncryptionProfileList || (exports.FieldLevelEncryptionProfileList = {}));\nvar ListFieldLevelEncryptionProfilesResult;\n(function (ListFieldLevelEncryptionProfilesResult) {\n    ListFieldLevelEncryptionProfilesResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListFieldLevelEncryptionProfilesResult = exports.ListFieldLevelEncryptionProfilesResult || (exports.ListFieldLevelEncryptionProfilesResult = {}));\nvar ListFunctionsRequest;\n(function (ListFunctionsRequest) {\n    ListFunctionsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListFunctionsRequest = exports.ListFunctionsRequest || (exports.ListFunctionsRequest = {}));\nvar FunctionList;\n(function (FunctionList) {\n    FunctionList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FunctionList = exports.FunctionList || (exports.FunctionList = {}));\nvar ListFunctionsResult;\n(function (ListFunctionsResult) {\n    ListFunctionsResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListFunctionsResult = exports.ListFunctionsResult || (exports.ListFunctionsResult = {}));\nvar ListInvalidationsRequest;\n(function (ListInvalidationsRequest) {\n    ListInvalidationsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListInvalidationsRequest = exports.ListInvalidationsRequest || (exports.ListInvalidationsRequest = {}));\nvar InvalidationSummary;\n(function (InvalidationSummary) {\n    InvalidationSummary.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidationSummary = exports.InvalidationSummary || (exports.InvalidationSummary = {}));\nvar InvalidationList;\n(function (InvalidationList) {\n    InvalidationList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidationList = exports.InvalidationList || (exports.InvalidationList = {}));\nvar ListInvalidationsResult;\n(function (ListInvalidationsResult) {\n    ListInvalidationsResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListInvalidationsResult = exports.ListInvalidationsResult || (exports.ListInvalidationsResult = {}));\nvar ListKeyGroupsRequest;\n(function (ListKeyGroupsRequest) {\n    ListKeyGroupsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListKeyGroupsRequest = exports.ListKeyGroupsRequest || (exports.ListKeyGroupsRequest = {}));\nvar KeyGroupSummary;\n(function (KeyGroupSummary) {\n    KeyGroupSummary.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(KeyGroupSummary = exports.KeyGroupSummary || (exports.KeyGroupSummary = {}));\nvar KeyGroupList;\n(function (KeyGroupList) {\n    KeyGroupList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(KeyGroupList = exports.KeyGroupList || (exports.KeyGroupList = {}));\nvar ListKeyGroupsResult;\n(function (ListKeyGroupsResult) {\n    ListKeyGroupsResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListKeyGroupsResult = exports.ListKeyGroupsResult || (exports.ListKeyGroupsResult = {}));\nvar ListOriginRequestPoliciesRequest;\n(function (ListOriginRequestPoliciesRequest) {\n    ListOriginRequestPoliciesRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListOriginRequestPoliciesRequest = exports.ListOriginRequestPoliciesRequest || (exports.ListOriginRequestPoliciesRequest = {}));\nvar OriginRequestPolicySummary;\n(function (OriginRequestPolicySummary) {\n    OriginRequestPolicySummary.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginRequestPolicySummary = exports.OriginRequestPolicySummary || (exports.OriginRequestPolicySummary = {}));\nvar OriginRequestPolicyList;\n(function (OriginRequestPolicyList) {\n    OriginRequestPolicyList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OriginRequestPolicyList = exports.OriginRequestPolicyList || (exports.OriginRequestPolicyList = {}));\nvar ListOriginRequestPoliciesResult;\n(function (ListOriginRequestPoliciesResult) {\n    ListOriginRequestPoliciesResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListOriginRequestPoliciesResult = exports.ListOriginRequestPoliciesResult || (exports.ListOriginRequestPoliciesResult = {}));\nvar ListPublicKeysRequest;\n(function (ListPublicKeysRequest) {\n    ListPublicKeysRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListPublicKeysRequest = exports.ListPublicKeysRequest || (exports.ListPublicKeysRequest = {}));\nvar PublicKeySummary;\n(function (PublicKeySummary) {\n    PublicKeySummary.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PublicKeySummary = exports.PublicKeySummary || (exports.PublicKeySummary = {}));\nvar PublicKeyList;\n(function (PublicKeyList) {\n    PublicKeyList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PublicKeyList = exports.PublicKeyList || (exports.PublicKeyList = {}));\nvar ListPublicKeysResult;\n(function (ListPublicKeysResult) {\n    ListPublicKeysResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListPublicKeysResult = exports.ListPublicKeysResult || (exports.ListPublicKeysResult = {}));\nvar ListRealtimeLogConfigsRequest;\n(function (ListRealtimeLogConfigsRequest) {\n    ListRealtimeLogConfigsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListRealtimeLogConfigsRequest = exports.ListRealtimeLogConfigsRequest || (exports.ListRealtimeLogConfigsRequest = {}));\nvar RealtimeLogConfigs;\n(function (RealtimeLogConfigs) {\n    RealtimeLogConfigs.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(RealtimeLogConfigs = exports.RealtimeLogConfigs || (exports.RealtimeLogConfigs = {}));\nvar ListRealtimeLogConfigsResult;\n(function (ListRealtimeLogConfigsResult) {\n    ListRealtimeLogConfigsResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListRealtimeLogConfigsResult = exports.ListRealtimeLogConfigsResult || (exports.ListRealtimeLogConfigsResult = {}));\nvar ResponseHeadersPolicyType;\n(function (ResponseHeadersPolicyType) {\n    ResponseHeadersPolicyType[\"custom\"] = \"custom\";\n    ResponseHeadersPolicyType[\"managed\"] = \"managed\";\n})(ResponseHeadersPolicyType = exports.ResponseHeadersPolicyType || (exports.ResponseHeadersPolicyType = {}));\nvar ListResponseHeadersPoliciesRequest;\n(function (ListResponseHeadersPoliciesRequest) {\n    ListResponseHeadersPoliciesRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListResponseHeadersPoliciesRequest = exports.ListResponseHeadersPoliciesRequest || (exports.ListResponseHeadersPoliciesRequest = {}));\nvar ResponseHeadersPolicySummary;\n(function (ResponseHeadersPolicySummary) {\n    ResponseHeadersPolicySummary.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicySummary = exports.ResponseHeadersPolicySummary || (exports.ResponseHeadersPolicySummary = {}));\nvar ResponseHeadersPolicyList;\n(function (ResponseHeadersPolicyList) {\n    ResponseHeadersPolicyList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResponseHeadersPolicyList = exports.ResponseHeadersPolicyList || (exports.ResponseHeadersPolicyList = {}));\nvar ListResponseHeadersPoliciesResult;\n(function (ListResponseHeadersPoliciesResult) {\n    ListResponseHeadersPoliciesResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListResponseHeadersPoliciesResult = exports.ListResponseHeadersPoliciesResult || (exports.ListResponseHeadersPoliciesResult = {}));\nvar ListStreamingDistributionsRequest;\n(function (ListStreamingDistributionsRequest) {\n    ListStreamingDistributionsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListStreamingDistributionsRequest = exports.ListStreamingDistributionsRequest || (exports.ListStreamingDistributionsRequest = {}));\nvar StreamingDistributionSummary;\n(function (StreamingDistributionSummary) {\n    StreamingDistributionSummary.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(StreamingDistributionSummary = exports.StreamingDistributionSummary || (exports.StreamingDistributionSummary = {}));\nvar StreamingDistributionList;\n(function (StreamingDistributionList) {\n    StreamingDistributionList.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(StreamingDistributionList = exports.StreamingDistributionList || (exports.StreamingDistributionList = {}));\nvar ListStreamingDistributionsResult;\n(function (ListStreamingDistributionsResult) {\n    ListStreamingDistributionsResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListStreamingDistributionsResult = exports.ListStreamingDistributionsResult || (exports.ListStreamingDistributionsResult = {}));\nvar ListTagsForResourceRequest;\n(function (ListTagsForResourceRequest) {\n    ListTagsForResourceRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListTagsForResourceRequest = exports.ListTagsForResourceRequest || (exports.ListTagsForResourceRequest = {}));\nvar ListTagsForResourceResult;\n(function (ListTagsForResourceResult) {\n    ListTagsForResourceResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListTagsForResourceResult = exports.ListTagsForResourceResult || (exports.ListTagsForResourceResult = {}));\nvar PublishFunctionRequest;\n(function (PublishFunctionRequest) {\n    PublishFunctionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PublishFunctionRequest = exports.PublishFunctionRequest || (exports.PublishFunctionRequest = {}));\nvar PublishFunctionResult;\n(function (PublishFunctionResult) {\n    PublishFunctionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PublishFunctionResult = exports.PublishFunctionResult || (exports.PublishFunctionResult = {}));\nvar TagResourceRequest;\n(function (TagResourceRequest) {\n    TagResourceRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TagResourceRequest = exports.TagResourceRequest || (exports.TagResourceRequest = {}));\nvar TestFunctionFailed;\n(function (TestFunctionFailed) {\n    TestFunctionFailed.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TestFunctionFailed = exports.TestFunctionFailed || (exports.TestFunctionFailed = {}));\nvar TestFunctionRequest;\n(function (TestFunctionRequest) {\n    TestFunctionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.EventObject && { EventObject: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(TestFunctionRequest = exports.TestFunctionRequest || (exports.TestFunctionRequest = {}));\nvar TestResult;\n(function (TestResult) {\n    TestResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.FunctionExecutionLogs && { FunctionExecutionLogs: smithy_client_1.SENSITIVE_STRING }),\n        ...(obj.FunctionErrorMessage && { FunctionErrorMessage: smithy_client_1.SENSITIVE_STRING }),\n        ...(obj.FunctionOutput && { FunctionOutput: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(TestResult = exports.TestResult || (exports.TestResult = {}));\nvar TestFunctionResult;\n(function (TestFunctionResult) {\n    TestFunctionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.TestResult && { TestResult: TestResult.filterSensitiveLog(obj.TestResult) }),\n    });\n})(TestFunctionResult = exports.TestFunctionResult || (exports.TestFunctionResult = {}));\nvar TagKeys;\n(function (TagKeys) {\n    TagKeys.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TagKeys = exports.TagKeys || (exports.TagKeys = {}));\nvar UntagResourceRequest;\n(function (UntagResourceRequest) {\n    UntagResourceRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UntagResourceRequest = exports.UntagResourceRequest || (exports.UntagResourceRequest = {}));\nvar UpdateCachePolicyRequest;\n(function (UpdateCachePolicyRequest) {\n    UpdateCachePolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateCachePolicyRequest = exports.UpdateCachePolicyRequest || (exports.UpdateCachePolicyRequest = {}));\nvar UpdateCachePolicyResult;\n(function (UpdateCachePolicyResult) {\n    UpdateCachePolicyResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateCachePolicyResult = exports.UpdateCachePolicyResult || (exports.UpdateCachePolicyResult = {}));\nvar UpdateCloudFrontOriginAccessIdentityRequest;\n(function (UpdateCloudFrontOriginAccessIdentityRequest) {\n    UpdateCloudFrontOriginAccessIdentityRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateCloudFrontOriginAccessIdentityRequest = exports.UpdateCloudFrontOriginAccessIdentityRequest || (exports.UpdateCloudFrontOriginAccessIdentityRequest = {}));\nvar UpdateCloudFrontOriginAccessIdentityResult;\n(function (UpdateCloudFrontOriginAccessIdentityResult) {\n    UpdateCloudFrontOriginAccessIdentityResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateCloudFrontOriginAccessIdentityResult = exports.UpdateCloudFrontOriginAccessIdentityResult || (exports.UpdateCloudFrontOriginAccessIdentityResult = {}));\nvar UpdateDistributionRequest;\n(function (UpdateDistributionRequest) {\n    UpdateDistributionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.DistributionConfig && {\n            DistributionConfig: models_0_1.DistributionConfig.filterSensitiveLog(obj.DistributionConfig),\n        }),\n    });\n})(UpdateDistributionRequest = exports.UpdateDistributionRequest || (exports.UpdateDistributionRequest = {}));\nvar UpdateDistributionResult;\n(function (UpdateDistributionResult) {\n    UpdateDistributionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Distribution && { Distribution: models_0_1.Distribution.filterSensitiveLog(obj.Distribution) }),\n    });\n})(UpdateDistributionResult = exports.UpdateDistributionResult || (exports.UpdateDistributionResult = {}));\nvar UpdateFieldLevelEncryptionConfigRequest;\n(function (UpdateFieldLevelEncryptionConfigRequest) {\n    UpdateFieldLevelEncryptionConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateFieldLevelEncryptionConfigRequest = exports.UpdateFieldLevelEncryptionConfigRequest || (exports.UpdateFieldLevelEncryptionConfigRequest = {}));\nvar UpdateFieldLevelEncryptionConfigResult;\n(function (UpdateFieldLevelEncryptionConfigResult) {\n    UpdateFieldLevelEncryptionConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateFieldLevelEncryptionConfigResult = exports.UpdateFieldLevelEncryptionConfigResult || (exports.UpdateFieldLevelEncryptionConfigResult = {}));\nvar UpdateFieldLevelEncryptionProfileRequest;\n(function (UpdateFieldLevelEncryptionProfileRequest) {\n    UpdateFieldLevelEncryptionProfileRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateFieldLevelEncryptionProfileRequest = exports.UpdateFieldLevelEncryptionProfileRequest || (exports.UpdateFieldLevelEncryptionProfileRequest = {}));\nvar UpdateFieldLevelEncryptionProfileResult;\n(function (UpdateFieldLevelEncryptionProfileResult) {\n    UpdateFieldLevelEncryptionProfileResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateFieldLevelEncryptionProfileResult = exports.UpdateFieldLevelEncryptionProfileResult || (exports.UpdateFieldLevelEncryptionProfileResult = {}));\nvar UpdateFunctionRequest;\n(function (UpdateFunctionRequest) {\n    UpdateFunctionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.FunctionCode && { FunctionCode: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(UpdateFunctionRequest = exports.UpdateFunctionRequest || (exports.UpdateFunctionRequest = {}));\nvar UpdateFunctionResult;\n(function (UpdateFunctionResult) {\n    UpdateFunctionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateFunctionResult = exports.UpdateFunctionResult || (exports.UpdateFunctionResult = {}));\nvar UpdateKeyGroupRequest;\n(function (UpdateKeyGroupRequest) {\n    UpdateKeyGroupRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateKeyGroupRequest = exports.UpdateKeyGroupRequest || (exports.UpdateKeyGroupRequest = {}));\nvar UpdateKeyGroupResult;\n(function (UpdateKeyGroupResult) {\n    UpdateKeyGroupResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateKeyGroupResult = exports.UpdateKeyGroupResult || (exports.UpdateKeyGroupResult = {}));\nvar UpdateOriginRequestPolicyRequest;\n(function (UpdateOriginRequestPolicyRequest) {\n    UpdateOriginRequestPolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateOriginRequestPolicyRequest = exports.UpdateOriginRequestPolicyRequest || (exports.UpdateOriginRequestPolicyRequest = {}));\nvar UpdateOriginRequestPolicyResult;\n(function (UpdateOriginRequestPolicyResult) {\n    UpdateOriginRequestPolicyResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateOriginRequestPolicyResult = exports.UpdateOriginRequestPolicyResult || (exports.UpdateOriginRequestPolicyResult = {}));\nvar UpdatePublicKeyRequest;\n(function (UpdatePublicKeyRequest) {\n    UpdatePublicKeyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdatePublicKeyRequest = exports.UpdatePublicKeyRequest || (exports.UpdatePublicKeyRequest = {}));\nvar UpdatePublicKeyResult;\n(function (UpdatePublicKeyResult) {\n    UpdatePublicKeyResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdatePublicKeyResult = exports.UpdatePublicKeyResult || (exports.UpdatePublicKeyResult = {}));\nvar UpdateRealtimeLogConfigRequest;\n(function (UpdateRealtimeLogConfigRequest) {\n    UpdateRealtimeLogConfigRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateRealtimeLogConfigRequest = exports.UpdateRealtimeLogConfigRequest || (exports.UpdateRealtimeLogConfigRequest = {}));\nvar UpdateRealtimeLogConfigResult;\n(function (UpdateRealtimeLogConfigResult) {\n    UpdateRealtimeLogConfigResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateRealtimeLogConfigResult = exports.UpdateRealtimeLogConfigResult || (exports.UpdateRealtimeLogConfigResult = {}));\nvar UpdateResponseHeadersPolicyRequest;\n(function (UpdateResponseHeadersPolicyRequest) {\n    UpdateResponseHeadersPolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateResponseHeadersPolicyRequest = exports.UpdateResponseHeadersPolicyRequest || (exports.UpdateResponseHeadersPolicyRequest = {}));\nvar UpdateResponseHeadersPolicyResult;\n(function (UpdateResponseHeadersPolicyResult) {\n    UpdateResponseHeadersPolicyResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateResponseHeadersPolicyResult = exports.UpdateResponseHeadersPolicyResult || (exports.UpdateResponseHeadersPolicyResult = {}));\nvar UpdateStreamingDistributionRequest;\n(function (UpdateStreamingDistributionRequest) {\n    UpdateStreamingDistributionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateStreamingDistributionRequest = exports.UpdateStreamingDistributionRequest || (exports.UpdateStreamingDistributionRequest = {}));\nvar UpdateStreamingDistributionResult;\n(function (UpdateStreamingDistributionResult) {\n    UpdateStreamingDistributionResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UpdateStreamingDistributionResult = exports.UpdateStreamingDistributionResult || (exports.UpdateStreamingDistributionResult = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paginateListCloudFrontOriginAccessIdentities = void 0;\nconst CloudFront_1 = require(\"../CloudFront\");\nconst CloudFrontClient_1 = require(\"../CloudFrontClient\");\nconst ListCloudFrontOriginAccessIdentitiesCommand_1 = require(\"../commands/ListCloudFrontOriginAccessIdentitiesCommand\");\nconst makePagedClientRequest = async (client, input, ...args) => {\n    return await client.send(new ListCloudFrontOriginAccessIdentitiesCommand_1.ListCloudFrontOriginAccessIdentitiesCommand(input), ...args);\n};\nconst makePagedRequest = async (client, input, ...args) => {\n    return await client.listCloudFrontOriginAccessIdentities(input, ...args);\n};\nasync function* paginateListCloudFrontOriginAccessIdentities(config, input, ...additionalArguments) {\n    let token = config.startingToken || undefined;\n    let hasNext = true;\n    let page;\n    while (hasNext) {\n        input.Marker = token;\n        input[\"MaxItems\"] = config.pageSize;\n        if (config.client instanceof CloudFront_1.CloudFront) {\n            page = await makePagedRequest(config.client, input, ...additionalArguments);\n        }\n        else if (config.client instanceof CloudFrontClient_1.CloudFrontClient) {\n            page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n        }\n        else {\n            throw new Error(\"Invalid client, expected CloudFront | CloudFrontClient\");\n        }\n        yield page;\n        token = page.CloudFrontOriginAccessIdentityList.NextMarker;\n        hasNext = !!token;\n    }\n    return undefined;\n}\nexports.paginateListCloudFrontOriginAccessIdentities = paginateListCloudFrontOriginAccessIdentities;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paginateListDistributions = void 0;\nconst CloudFront_1 = require(\"../CloudFront\");\nconst CloudFrontClient_1 = require(\"../CloudFrontClient\");\nconst ListDistributionsCommand_1 = require(\"../commands/ListDistributionsCommand\");\nconst makePagedClientRequest = async (client, input, ...args) => {\n    return await client.send(new ListDistributionsCommand_1.ListDistributionsCommand(input), ...args);\n};\nconst makePagedRequest = async (client, input, ...args) => {\n    return await client.listDistributions(input, ...args);\n};\nasync function* paginateListDistributions(config, input, ...additionalArguments) {\n    let token = config.startingToken || undefined;\n    let hasNext = true;\n    let page;\n    while (hasNext) {\n        input.Marker = token;\n        input[\"MaxItems\"] = config.pageSize;\n        if (config.client instanceof CloudFront_1.CloudFront) {\n            page = await makePagedRequest(config.client, input, ...additionalArguments);\n        }\n        else if (config.client instanceof CloudFrontClient_1.CloudFrontClient) {\n            page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n        }\n        else {\n            throw new Error(\"Invalid client, expected CloudFront | CloudFrontClient\");\n        }\n        yield page;\n        token = page.DistributionList.NextMarker;\n        hasNext = !!token;\n    }\n    return undefined;\n}\nexports.paginateListDistributions = paginateListDistributions;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paginateListInvalidations = void 0;\nconst CloudFront_1 = require(\"../CloudFront\");\nconst CloudFrontClient_1 = require(\"../CloudFrontClient\");\nconst ListInvalidationsCommand_1 = require(\"../commands/ListInvalidationsCommand\");\nconst makePagedClientRequest = async (client, input, ...args) => {\n    return await client.send(new ListInvalidationsCommand_1.ListInvalidationsCommand(input), ...args);\n};\nconst makePagedRequest = async (client, input, ...args) => {\n    return await client.listInvalidations(input, ...args);\n};\nasync function* paginateListInvalidations(config, input, ...additionalArguments) {\n    let token = config.startingToken || undefined;\n    let hasNext = true;\n    let page;\n    while (hasNext) {\n        input.Marker = token;\n        input[\"MaxItems\"] = config.pageSize;\n        if (config.client instanceof CloudFront_1.CloudFront) {\n            page = await makePagedRequest(config.client, input, ...additionalArguments);\n        }\n        else if (config.client instanceof CloudFrontClient_1.CloudFrontClient) {\n            page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n        }\n        else {\n            throw new Error(\"Invalid client, expected CloudFront | CloudFrontClient\");\n        }\n        yield page;\n        token = page.InvalidationList.NextMarker;\n        hasNext = !!token;\n    }\n    return undefined;\n}\nexports.paginateListInvalidations = paginateListInvalidations;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paginateListStreamingDistributions = void 0;\nconst CloudFront_1 = require(\"../CloudFront\");\nconst CloudFrontClient_1 = require(\"../CloudFrontClient\");\nconst ListStreamingDistributionsCommand_1 = require(\"../commands/ListStreamingDistributionsCommand\");\nconst makePagedClientRequest = async (client, input, ...args) => {\n    return await client.send(new ListStreamingDistributionsCommand_1.ListStreamingDistributionsCommand(input), ...args);\n};\nconst makePagedRequest = async (client, input, ...args) => {\n    return await client.listStreamingDistributions(input, ...args);\n};\nasync function* paginateListStreamingDistributions(config, input, ...additionalArguments) {\n    let token = config.startingToken || undefined;\n    let hasNext = true;\n    let page;\n    while (hasNext) {\n        input.Marker = token;\n        input[\"MaxItems\"] = config.pageSize;\n        if (config.client instanceof CloudFront_1.CloudFront) {\n            page = await makePagedRequest(config.client, input, ...additionalArguments);\n        }\n        else if (config.client instanceof CloudFrontClient_1.CloudFrontClient) {\n            page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n        }\n        else {\n            throw new Error(\"Invalid client, expected CloudFront | CloudFrontClient\");\n        }\n        yield page;\n        token = page.StreamingDistributionList.NextMarker;\n        hasNext = !!token;\n    }\n    return undefined;\n}\nexports.paginateListStreamingDistributions = paginateListStreamingDistributions;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./Interfaces\"), exports);\ntslib_1.__exportStar(require(\"./ListCloudFrontOriginAccessIdentitiesPaginator\"), exports);\ntslib_1.__exportStar(require(\"./ListDistributionsPaginator\"), exports);\ntslib_1.__exportStar(require(\"./ListInvalidationsPaginator\"), exports);\ntslib_1.__exportStar(require(\"./ListStreamingDistributionsPaginator\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeAws_restXmlGetPublicKeyConfigCommand = exports.serializeAws_restXmlGetPublicKeyCommand = exports.serializeAws_restXmlGetOriginRequestPolicyConfigCommand = exports.serializeAws_restXmlGetOriginRequestPolicyCommand = exports.serializeAws_restXmlGetMonitoringSubscriptionCommand = exports.serializeAws_restXmlGetKeyGroupConfigCommand = exports.serializeAws_restXmlGetKeyGroupCommand = exports.serializeAws_restXmlGetInvalidationCommand = exports.serializeAws_restXmlGetFunctionCommand = exports.serializeAws_restXmlGetFieldLevelEncryptionProfileConfigCommand = exports.serializeAws_restXmlGetFieldLevelEncryptionProfileCommand = exports.serializeAws_restXmlGetFieldLevelEncryptionConfigCommand = exports.serializeAws_restXmlGetFieldLevelEncryptionCommand = exports.serializeAws_restXmlGetDistributionConfigCommand = exports.serializeAws_restXmlGetDistributionCommand = exports.serializeAws_restXmlGetCloudFrontOriginAccessIdentityConfigCommand = exports.serializeAws_restXmlGetCloudFrontOriginAccessIdentityCommand = exports.serializeAws_restXmlGetCachePolicyConfigCommand = exports.serializeAws_restXmlGetCachePolicyCommand = exports.serializeAws_restXmlDescribeFunctionCommand = exports.serializeAws_restXmlDeleteStreamingDistributionCommand = exports.serializeAws_restXmlDeleteResponseHeadersPolicyCommand = exports.serializeAws_restXmlDeleteRealtimeLogConfigCommand = exports.serializeAws_restXmlDeletePublicKeyCommand = exports.serializeAws_restXmlDeleteOriginRequestPolicyCommand = exports.serializeAws_restXmlDeleteMonitoringSubscriptionCommand = exports.serializeAws_restXmlDeleteKeyGroupCommand = exports.serializeAws_restXmlDeleteFunctionCommand = exports.serializeAws_restXmlDeleteFieldLevelEncryptionProfileCommand = exports.serializeAws_restXmlDeleteFieldLevelEncryptionConfigCommand = exports.serializeAws_restXmlDeleteDistributionCommand = exports.serializeAws_restXmlDeleteCloudFrontOriginAccessIdentityCommand = exports.serializeAws_restXmlDeleteCachePolicyCommand = exports.serializeAws_restXmlCreateStreamingDistributionWithTagsCommand = exports.serializeAws_restXmlCreateStreamingDistributionCommand = exports.serializeAws_restXmlCreateResponseHeadersPolicyCommand = exports.serializeAws_restXmlCreateRealtimeLogConfigCommand = exports.serializeAws_restXmlCreatePublicKeyCommand = exports.serializeAws_restXmlCreateOriginRequestPolicyCommand = exports.serializeAws_restXmlCreateMonitoringSubscriptionCommand = exports.serializeAws_restXmlCreateKeyGroupCommand = exports.serializeAws_restXmlCreateInvalidationCommand = exports.serializeAws_restXmlCreateFunctionCommand = exports.serializeAws_restXmlCreateFieldLevelEncryptionProfileCommand = exports.serializeAws_restXmlCreateFieldLevelEncryptionConfigCommand = exports.serializeAws_restXmlCreateDistributionWithTagsCommand = exports.serializeAws_restXmlCreateDistributionCommand = exports.serializeAws_restXmlCreateCloudFrontOriginAccessIdentityCommand = exports.serializeAws_restXmlCreateCachePolicyCommand = exports.serializeAws_restXmlAssociateAliasCommand = void 0;\nexports.deserializeAws_restXmlCreateFunctionCommand = exports.deserializeAws_restXmlCreateFieldLevelEncryptionProfileCommand = exports.deserializeAws_restXmlCreateFieldLevelEncryptionConfigCommand = exports.deserializeAws_restXmlCreateDistributionWithTagsCommand = exports.deserializeAws_restXmlCreateDistributionCommand = exports.deserializeAws_restXmlCreateCloudFrontOriginAccessIdentityCommand = exports.deserializeAws_restXmlCreateCachePolicyCommand = exports.deserializeAws_restXmlAssociateAliasCommand = exports.serializeAws_restXmlUpdateStreamingDistributionCommand = exports.serializeAws_restXmlUpdateResponseHeadersPolicyCommand = exports.serializeAws_restXmlUpdateRealtimeLogConfigCommand = exports.serializeAws_restXmlUpdatePublicKeyCommand = exports.serializeAws_restXmlUpdateOriginRequestPolicyCommand = exports.serializeAws_restXmlUpdateKeyGroupCommand = exports.serializeAws_restXmlUpdateFunctionCommand = exports.serializeAws_restXmlUpdateFieldLevelEncryptionProfileCommand = exports.serializeAws_restXmlUpdateFieldLevelEncryptionConfigCommand = exports.serializeAws_restXmlUpdateDistributionCommand = exports.serializeAws_restXmlUpdateCloudFrontOriginAccessIdentityCommand = exports.serializeAws_restXmlUpdateCachePolicyCommand = exports.serializeAws_restXmlUntagResourceCommand = exports.serializeAws_restXmlTestFunctionCommand = exports.serializeAws_restXmlTagResourceCommand = exports.serializeAws_restXmlPublishFunctionCommand = exports.serializeAws_restXmlListTagsForResourceCommand = exports.serializeAws_restXmlListStreamingDistributionsCommand = exports.serializeAws_restXmlListResponseHeadersPoliciesCommand = exports.serializeAws_restXmlListRealtimeLogConfigsCommand = exports.serializeAws_restXmlListPublicKeysCommand = exports.serializeAws_restXmlListOriginRequestPoliciesCommand = exports.serializeAws_restXmlListKeyGroupsCommand = exports.serializeAws_restXmlListInvalidationsCommand = exports.serializeAws_restXmlListFunctionsCommand = exports.serializeAws_restXmlListFieldLevelEncryptionProfilesCommand = exports.serializeAws_restXmlListFieldLevelEncryptionConfigsCommand = exports.serializeAws_restXmlListDistributionsByWebACLIdCommand = exports.serializeAws_restXmlListDistributionsByResponseHeadersPolicyIdCommand = exports.serializeAws_restXmlListDistributionsByRealtimeLogConfigCommand = exports.serializeAws_restXmlListDistributionsByOriginRequestPolicyIdCommand = exports.serializeAws_restXmlListDistributionsByKeyGroupCommand = exports.serializeAws_restXmlListDistributionsByCachePolicyIdCommand = exports.serializeAws_restXmlListDistributionsCommand = exports.serializeAws_restXmlListConflictingAliasesCommand = exports.serializeAws_restXmlListCloudFrontOriginAccessIdentitiesCommand = exports.serializeAws_restXmlListCachePoliciesCommand = exports.serializeAws_restXmlGetStreamingDistributionConfigCommand = exports.serializeAws_restXmlGetStreamingDistributionCommand = exports.serializeAws_restXmlGetResponseHeadersPolicyConfigCommand = exports.serializeAws_restXmlGetResponseHeadersPolicyCommand = exports.serializeAws_restXmlGetRealtimeLogConfigCommand = void 0;\nexports.deserializeAws_restXmlListConflictingAliasesCommand = exports.deserializeAws_restXmlListCloudFrontOriginAccessIdentitiesCommand = exports.deserializeAws_restXmlListCachePoliciesCommand = exports.deserializeAws_restXmlGetStreamingDistributionConfigCommand = exports.deserializeAws_restXmlGetStreamingDistributionCommand = exports.deserializeAws_restXmlGetResponseHeadersPolicyConfigCommand = exports.deserializeAws_restXmlGetResponseHeadersPolicyCommand = exports.deserializeAws_restXmlGetRealtimeLogConfigCommand = exports.deserializeAws_restXmlGetPublicKeyConfigCommand = exports.deserializeAws_restXmlGetPublicKeyCommand = exports.deserializeAws_restXmlGetOriginRequestPolicyConfigCommand = exports.deserializeAws_restXmlGetOriginRequestPolicyCommand = exports.deserializeAws_restXmlGetMonitoringSubscriptionCommand = exports.deserializeAws_restXmlGetKeyGroupConfigCommand = exports.deserializeAws_restXmlGetKeyGroupCommand = exports.deserializeAws_restXmlGetInvalidationCommand = exports.deserializeAws_restXmlGetFunctionCommand = exports.deserializeAws_restXmlGetFieldLevelEncryptionProfileConfigCommand = exports.deserializeAws_restXmlGetFieldLevelEncryptionProfileCommand = exports.deserializeAws_restXmlGetFieldLevelEncryptionConfigCommand = exports.deserializeAws_restXmlGetFieldLevelEncryptionCommand = exports.deserializeAws_restXmlGetDistributionConfigCommand = exports.deserializeAws_restXmlGetDistributionCommand = exports.deserializeAws_restXmlGetCloudFrontOriginAccessIdentityConfigCommand = exports.deserializeAws_restXmlGetCloudFrontOriginAccessIdentityCommand = exports.deserializeAws_restXmlGetCachePolicyConfigCommand = exports.deserializeAws_restXmlGetCachePolicyCommand = exports.deserializeAws_restXmlDescribeFunctionCommand = exports.deserializeAws_restXmlDeleteStreamingDistributionCommand = exports.deserializeAws_restXmlDeleteResponseHeadersPolicyCommand = exports.deserializeAws_restXmlDeleteRealtimeLogConfigCommand = exports.deserializeAws_restXmlDeletePublicKeyCommand = exports.deserializeAws_restXmlDeleteOriginRequestPolicyCommand = exports.deserializeAws_restXmlDeleteMonitoringSubscriptionCommand = exports.deserializeAws_restXmlDeleteKeyGroupCommand = exports.deserializeAws_restXmlDeleteFunctionCommand = exports.deserializeAws_restXmlDeleteFieldLevelEncryptionProfileCommand = exports.deserializeAws_restXmlDeleteFieldLevelEncryptionConfigCommand = exports.deserializeAws_restXmlDeleteDistributionCommand = exports.deserializeAws_restXmlDeleteCloudFrontOriginAccessIdentityCommand = exports.deserializeAws_restXmlDeleteCachePolicyCommand = exports.deserializeAws_restXmlCreateStreamingDistributionWithTagsCommand = exports.deserializeAws_restXmlCreateStreamingDistributionCommand = exports.deserializeAws_restXmlCreateResponseHeadersPolicyCommand = exports.deserializeAws_restXmlCreateRealtimeLogConfigCommand = exports.deserializeAws_restXmlCreatePublicKeyCommand = exports.deserializeAws_restXmlCreateOriginRequestPolicyCommand = exports.deserializeAws_restXmlCreateMonitoringSubscriptionCommand = exports.deserializeAws_restXmlCreateKeyGroupCommand = exports.deserializeAws_restXmlCreateInvalidationCommand = void 0;\nexports.deserializeAws_restXmlUpdateStreamingDistributionCommand = exports.deserializeAws_restXmlUpdateResponseHeadersPolicyCommand = exports.deserializeAws_restXmlUpdateRealtimeLogConfigCommand = exports.deserializeAws_restXmlUpdatePublicKeyCommand = exports.deserializeAws_restXmlUpdateOriginRequestPolicyCommand = exports.deserializeAws_restXmlUpdateKeyGroupCommand = exports.deserializeAws_restXmlUpdateFunctionCommand = exports.deserializeAws_restXmlUpdateFieldLevelEncryptionProfileCommand = exports.deserializeAws_restXmlUpdateFieldLevelEncryptionConfigCommand = exports.deserializeAws_restXmlUpdateDistributionCommand = exports.deserializeAws_restXmlUpdateCloudFrontOriginAccessIdentityCommand = exports.deserializeAws_restXmlUpdateCachePolicyCommand = exports.deserializeAws_restXmlUntagResourceCommand = exports.deserializeAws_restXmlTestFunctionCommand = exports.deserializeAws_restXmlTagResourceCommand = exports.deserializeAws_restXmlPublishFunctionCommand = exports.deserializeAws_restXmlListTagsForResourceCommand = exports.deserializeAws_restXmlListStreamingDistributionsCommand = exports.deserializeAws_restXmlListResponseHeadersPoliciesCommand = exports.deserializeAws_restXmlListRealtimeLogConfigsCommand = exports.deserializeAws_restXmlListPublicKeysCommand = exports.deserializeAws_restXmlListOriginRequestPoliciesCommand = exports.deserializeAws_restXmlListKeyGroupsCommand = exports.deserializeAws_restXmlListInvalidationsCommand = exports.deserializeAws_restXmlListFunctionsCommand = exports.deserializeAws_restXmlListFieldLevelEncryptionProfilesCommand = exports.deserializeAws_restXmlListFieldLevelEncryptionConfigsCommand = exports.deserializeAws_restXmlListDistributionsByWebACLIdCommand = exports.deserializeAws_restXmlListDistributionsByResponseHeadersPolicyIdCommand = exports.deserializeAws_restXmlListDistributionsByRealtimeLogConfigCommand = exports.deserializeAws_restXmlListDistributionsByOriginRequestPolicyIdCommand = exports.deserializeAws_restXmlListDistributionsByKeyGroupCommand = exports.deserializeAws_restXmlListDistributionsByCachePolicyIdCommand = exports.deserializeAws_restXmlListDistributionsCommand = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst xml_builder_1 = require(\"@aws-sdk/xml-builder\");\nconst entities_1 = require(\"entities\");\nconst fast_xml_parser_1 = require(\"fast-xml-parser\");\nconst serializeAws_restXmlAssociateAliasCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/distribution/{TargetDistributionId}/associate-alias\";\n    if (input.TargetDistributionId !== undefined) {\n        const labelValue = input.TargetDistributionId;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: TargetDistributionId.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{TargetDistributionId}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: TargetDistributionId.\");\n    }\n    const query = {\n        ...(input.Alias !== undefined && { Alias: input.Alias }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlAssociateAliasCommand = serializeAws_restXmlAssociateAliasCommand;\nconst serializeAws_restXmlCreateCachePolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/cache-policy\";\n    let body;\n    if (input.CachePolicyConfig !== undefined) {\n        body = serializeAws_restXmlCachePolicyConfig(input.CachePolicyConfig, context);\n    }\n    let contents;\n    if (input.CachePolicyConfig !== undefined) {\n        contents = serializeAws_restXmlCachePolicyConfig(input.CachePolicyConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateCachePolicyCommand = serializeAws_restXmlCreateCachePolicyCommand;\nconst serializeAws_restXmlCreateCloudFrontOriginAccessIdentityCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/origin-access-identity/cloudfront\";\n    let body;\n    if (input.CloudFrontOriginAccessIdentityConfig !== undefined) {\n        body = serializeAws_restXmlCloudFrontOriginAccessIdentityConfig(input.CloudFrontOriginAccessIdentityConfig, context);\n    }\n    let contents;\n    if (input.CloudFrontOriginAccessIdentityConfig !== undefined) {\n        contents = serializeAws_restXmlCloudFrontOriginAccessIdentityConfig(input.CloudFrontOriginAccessIdentityConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateCloudFrontOriginAccessIdentityCommand = serializeAws_restXmlCreateCloudFrontOriginAccessIdentityCommand;\nconst serializeAws_restXmlCreateDistributionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/distribution\";\n    let body;\n    if (input.DistributionConfig !== undefined) {\n        body = serializeAws_restXmlDistributionConfig(input.DistributionConfig, context);\n    }\n    let contents;\n    if (input.DistributionConfig !== undefined) {\n        contents = serializeAws_restXmlDistributionConfig(input.DistributionConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateDistributionCommand = serializeAws_restXmlCreateDistributionCommand;\nconst serializeAws_restXmlCreateDistributionWithTagsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/distribution\";\n    const query = {\n        WithTags: \"\",\n    };\n    let body;\n    if (input.DistributionConfigWithTags !== undefined) {\n        body = serializeAws_restXmlDistributionConfigWithTags(input.DistributionConfigWithTags, context);\n    }\n    let contents;\n    if (input.DistributionConfigWithTags !== undefined) {\n        contents = serializeAws_restXmlDistributionConfigWithTags(input.DistributionConfigWithTags, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateDistributionWithTagsCommand = serializeAws_restXmlCreateDistributionWithTagsCommand;\nconst serializeAws_restXmlCreateFieldLevelEncryptionConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/field-level-encryption\";\n    let body;\n    if (input.FieldLevelEncryptionConfig !== undefined) {\n        body = serializeAws_restXmlFieldLevelEncryptionConfig(input.FieldLevelEncryptionConfig, context);\n    }\n    let contents;\n    if (input.FieldLevelEncryptionConfig !== undefined) {\n        contents = serializeAws_restXmlFieldLevelEncryptionConfig(input.FieldLevelEncryptionConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateFieldLevelEncryptionConfigCommand = serializeAws_restXmlCreateFieldLevelEncryptionConfigCommand;\nconst serializeAws_restXmlCreateFieldLevelEncryptionProfileCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/field-level-encryption-profile\";\n    let body;\n    if (input.FieldLevelEncryptionProfileConfig !== undefined) {\n        body = serializeAws_restXmlFieldLevelEncryptionProfileConfig(input.FieldLevelEncryptionProfileConfig, context);\n    }\n    let contents;\n    if (input.FieldLevelEncryptionProfileConfig !== undefined) {\n        contents = serializeAws_restXmlFieldLevelEncryptionProfileConfig(input.FieldLevelEncryptionProfileConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateFieldLevelEncryptionProfileCommand = serializeAws_restXmlCreateFieldLevelEncryptionProfileCommand;\nconst serializeAws_restXmlCreateFunctionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/function\";\n    let body;\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    const bodyNode = new xml_builder_1.XmlNode(\"CreateFunctionRequest\");\n    bodyNode.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n    if (input.FunctionCode !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"FunctionBlob\")\n            .addChildNode(new xml_builder_1.XmlText(context.base64Encoder(input.FunctionCode)))\n            .withName(\"FunctionCode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FunctionConfig !== undefined) {\n        const node = serializeAws_restXmlFunctionConfig(input.FunctionConfig, context).withName(\"FunctionConfig\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Name !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"FunctionName\").addChildNode(new xml_builder_1.XmlText(input.Name)).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    body += bodyNode.toString();\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateFunctionCommand = serializeAws_restXmlCreateFunctionCommand;\nconst serializeAws_restXmlCreateInvalidationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/distribution/{DistributionId}/invalidation\";\n    if (input.DistributionId !== undefined) {\n        const labelValue = input.DistributionId;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: DistributionId.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{DistributionId}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: DistributionId.\");\n    }\n    let body;\n    if (input.InvalidationBatch !== undefined) {\n        body = serializeAws_restXmlInvalidationBatch(input.InvalidationBatch, context);\n    }\n    let contents;\n    if (input.InvalidationBatch !== undefined) {\n        contents = serializeAws_restXmlInvalidationBatch(input.InvalidationBatch, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateInvalidationCommand = serializeAws_restXmlCreateInvalidationCommand;\nconst serializeAws_restXmlCreateKeyGroupCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/key-group\";\n    let body;\n    if (input.KeyGroupConfig !== undefined) {\n        body = serializeAws_restXmlKeyGroupConfig(input.KeyGroupConfig, context);\n    }\n    let contents;\n    if (input.KeyGroupConfig !== undefined) {\n        contents = serializeAws_restXmlKeyGroupConfig(input.KeyGroupConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateKeyGroupCommand = serializeAws_restXmlCreateKeyGroupCommand;\nconst serializeAws_restXmlCreateMonitoringSubscriptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/distributions/{DistributionId}/monitoring-subscription\";\n    if (input.DistributionId !== undefined) {\n        const labelValue = input.DistributionId;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: DistributionId.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{DistributionId}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: DistributionId.\");\n    }\n    let body;\n    if (input.MonitoringSubscription !== undefined) {\n        body = serializeAws_restXmlMonitoringSubscription(input.MonitoringSubscription, context);\n    }\n    let contents;\n    if (input.MonitoringSubscription !== undefined) {\n        contents = serializeAws_restXmlMonitoringSubscription(input.MonitoringSubscription, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateMonitoringSubscriptionCommand = serializeAws_restXmlCreateMonitoringSubscriptionCommand;\nconst serializeAws_restXmlCreateOriginRequestPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/origin-request-policy\";\n    let body;\n    if (input.OriginRequestPolicyConfig !== undefined) {\n        body = serializeAws_restXmlOriginRequestPolicyConfig(input.OriginRequestPolicyConfig, context);\n    }\n    let contents;\n    if (input.OriginRequestPolicyConfig !== undefined) {\n        contents = serializeAws_restXmlOriginRequestPolicyConfig(input.OriginRequestPolicyConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateOriginRequestPolicyCommand = serializeAws_restXmlCreateOriginRequestPolicyCommand;\nconst serializeAws_restXmlCreatePublicKeyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/public-key\";\n    let body;\n    if (input.PublicKeyConfig !== undefined) {\n        body = serializeAws_restXmlPublicKeyConfig(input.PublicKeyConfig, context);\n    }\n    let contents;\n    if (input.PublicKeyConfig !== undefined) {\n        contents = serializeAws_restXmlPublicKeyConfig(input.PublicKeyConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreatePublicKeyCommand = serializeAws_restXmlCreatePublicKeyCommand;\nconst serializeAws_restXmlCreateRealtimeLogConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/realtime-log-config\";\n    let body;\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    const bodyNode = new xml_builder_1.XmlNode(\"CreateRealtimeLogConfigRequest\");\n    bodyNode.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n    if (input.EndPoints !== undefined) {\n        const nodes = serializeAws_restXmlEndPointList(input.EndPoints, context);\n        const containerNode = new xml_builder_1.XmlNode(\"EndPoints\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Fields !== undefined) {\n        const nodes = serializeAws_restXmlFieldList(input.Fields, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Fields\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Name !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Name)).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SamplingRate !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"long\").addChildNode(new xml_builder_1.XmlText(String(input.SamplingRate))).withName(\"SamplingRate\");\n        bodyNode.addChildNode(node);\n    }\n    body += bodyNode.toString();\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateRealtimeLogConfigCommand = serializeAws_restXmlCreateRealtimeLogConfigCommand;\nconst serializeAws_restXmlCreateResponseHeadersPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/response-headers-policy\";\n    let body;\n    if (input.ResponseHeadersPolicyConfig !== undefined) {\n        body = serializeAws_restXmlResponseHeadersPolicyConfig(input.ResponseHeadersPolicyConfig, context);\n    }\n    let contents;\n    if (input.ResponseHeadersPolicyConfig !== undefined) {\n        contents = serializeAws_restXmlResponseHeadersPolicyConfig(input.ResponseHeadersPolicyConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateResponseHeadersPolicyCommand = serializeAws_restXmlCreateResponseHeadersPolicyCommand;\nconst serializeAws_restXmlCreateStreamingDistributionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/streaming-distribution\";\n    let body;\n    if (input.StreamingDistributionConfig !== undefined) {\n        body = serializeAws_restXmlStreamingDistributionConfig(input.StreamingDistributionConfig, context);\n    }\n    let contents;\n    if (input.StreamingDistributionConfig !== undefined) {\n        contents = serializeAws_restXmlStreamingDistributionConfig(input.StreamingDistributionConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateStreamingDistributionCommand = serializeAws_restXmlCreateStreamingDistributionCommand;\nconst serializeAws_restXmlCreateStreamingDistributionWithTagsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/streaming-distribution\";\n    const query = {\n        WithTags: \"\",\n    };\n    let body;\n    if (input.StreamingDistributionConfigWithTags !== undefined) {\n        body = serializeAws_restXmlStreamingDistributionConfigWithTags(input.StreamingDistributionConfigWithTags, context);\n    }\n    let contents;\n    if (input.StreamingDistributionConfigWithTags !== undefined) {\n        contents = serializeAws_restXmlStreamingDistributionConfigWithTags(input.StreamingDistributionConfigWithTags, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateStreamingDistributionWithTagsCommand = serializeAws_restXmlCreateStreamingDistributionWithTagsCommand;\nconst serializeAws_restXmlDeleteCachePolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/cache-policy/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteCachePolicyCommand = serializeAws_restXmlDeleteCachePolicyCommand;\nconst serializeAws_restXmlDeleteCloudFrontOriginAccessIdentityCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/origin-access-identity/cloudfront/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteCloudFrontOriginAccessIdentityCommand = serializeAws_restXmlDeleteCloudFrontOriginAccessIdentityCommand;\nconst serializeAws_restXmlDeleteDistributionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/distribution/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteDistributionCommand = serializeAws_restXmlDeleteDistributionCommand;\nconst serializeAws_restXmlDeleteFieldLevelEncryptionConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/field-level-encryption/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteFieldLevelEncryptionConfigCommand = serializeAws_restXmlDeleteFieldLevelEncryptionConfigCommand;\nconst serializeAws_restXmlDeleteFieldLevelEncryptionProfileCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/field-level-encryption-profile/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteFieldLevelEncryptionProfileCommand = serializeAws_restXmlDeleteFieldLevelEncryptionProfileCommand;\nconst serializeAws_restXmlDeleteFunctionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/function/{Name}\";\n    if (input.Name !== undefined) {\n        const labelValue = input.Name;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Name.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Name}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Name.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteFunctionCommand = serializeAws_restXmlDeleteFunctionCommand;\nconst serializeAws_restXmlDeleteKeyGroupCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/key-group/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteKeyGroupCommand = serializeAws_restXmlDeleteKeyGroupCommand;\nconst serializeAws_restXmlDeleteMonitoringSubscriptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/distributions/{DistributionId}/monitoring-subscription\";\n    if (input.DistributionId !== undefined) {\n        const labelValue = input.DistributionId;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: DistributionId.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{DistributionId}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: DistributionId.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteMonitoringSubscriptionCommand = serializeAws_restXmlDeleteMonitoringSubscriptionCommand;\nconst serializeAws_restXmlDeleteOriginRequestPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/origin-request-policy/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteOriginRequestPolicyCommand = serializeAws_restXmlDeleteOriginRequestPolicyCommand;\nconst serializeAws_restXmlDeletePublicKeyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/public-key/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeletePublicKeyCommand = serializeAws_restXmlDeletePublicKeyCommand;\nconst serializeAws_restXmlDeleteRealtimeLogConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/delete-realtime-log-config\";\n    let body;\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    const bodyNode = new xml_builder_1.XmlNode(\"DeleteRealtimeLogConfigRequest\");\n    bodyNode.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n    if (input.ARN !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.ARN)).withName(\"ARN\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Name !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Name)).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    body += bodyNode.toString();\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteRealtimeLogConfigCommand = serializeAws_restXmlDeleteRealtimeLogConfigCommand;\nconst serializeAws_restXmlDeleteResponseHeadersPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/response-headers-policy/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteResponseHeadersPolicyCommand = serializeAws_restXmlDeleteResponseHeadersPolicyCommand;\nconst serializeAws_restXmlDeleteStreamingDistributionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/streaming-distribution/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteStreamingDistributionCommand = serializeAws_restXmlDeleteStreamingDistributionCommand;\nconst serializeAws_restXmlDescribeFunctionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/function/{Name}/describe\";\n    if (input.Name !== undefined) {\n        const labelValue = input.Name;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Name.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Name}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Name.\");\n    }\n    const query = {\n        ...(input.Stage !== undefined && { Stage: input.Stage }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDescribeFunctionCommand = serializeAws_restXmlDescribeFunctionCommand;\nconst serializeAws_restXmlGetCachePolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/cache-policy/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetCachePolicyCommand = serializeAws_restXmlGetCachePolicyCommand;\nconst serializeAws_restXmlGetCachePolicyConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/cache-policy/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetCachePolicyConfigCommand = serializeAws_restXmlGetCachePolicyConfigCommand;\nconst serializeAws_restXmlGetCloudFrontOriginAccessIdentityCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/origin-access-identity/cloudfront/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetCloudFrontOriginAccessIdentityCommand = serializeAws_restXmlGetCloudFrontOriginAccessIdentityCommand;\nconst serializeAws_restXmlGetCloudFrontOriginAccessIdentityConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/origin-access-identity/cloudfront/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetCloudFrontOriginAccessIdentityConfigCommand = serializeAws_restXmlGetCloudFrontOriginAccessIdentityConfigCommand;\nconst serializeAws_restXmlGetDistributionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/distribution/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetDistributionCommand = serializeAws_restXmlGetDistributionCommand;\nconst serializeAws_restXmlGetDistributionConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/distribution/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetDistributionConfigCommand = serializeAws_restXmlGetDistributionConfigCommand;\nconst serializeAws_restXmlGetFieldLevelEncryptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/field-level-encryption/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetFieldLevelEncryptionCommand = serializeAws_restXmlGetFieldLevelEncryptionCommand;\nconst serializeAws_restXmlGetFieldLevelEncryptionConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/field-level-encryption/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetFieldLevelEncryptionConfigCommand = serializeAws_restXmlGetFieldLevelEncryptionConfigCommand;\nconst serializeAws_restXmlGetFieldLevelEncryptionProfileCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/field-level-encryption-profile/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetFieldLevelEncryptionProfileCommand = serializeAws_restXmlGetFieldLevelEncryptionProfileCommand;\nconst serializeAws_restXmlGetFieldLevelEncryptionProfileConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/field-level-encryption-profile/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetFieldLevelEncryptionProfileConfigCommand = serializeAws_restXmlGetFieldLevelEncryptionProfileConfigCommand;\nconst serializeAws_restXmlGetFunctionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/function/{Name}\";\n    if (input.Name !== undefined) {\n        const labelValue = input.Name;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Name.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Name}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Name.\");\n    }\n    const query = {\n        ...(input.Stage !== undefined && { Stage: input.Stage }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetFunctionCommand = serializeAws_restXmlGetFunctionCommand;\nconst serializeAws_restXmlGetInvalidationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/distribution/{DistributionId}/invalidation/{Id}\";\n    if (input.DistributionId !== undefined) {\n        const labelValue = input.DistributionId;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: DistributionId.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{DistributionId}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: DistributionId.\");\n    }\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetInvalidationCommand = serializeAws_restXmlGetInvalidationCommand;\nconst serializeAws_restXmlGetKeyGroupCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/key-group/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetKeyGroupCommand = serializeAws_restXmlGetKeyGroupCommand;\nconst serializeAws_restXmlGetKeyGroupConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/key-group/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetKeyGroupConfigCommand = serializeAws_restXmlGetKeyGroupConfigCommand;\nconst serializeAws_restXmlGetMonitoringSubscriptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/distributions/{DistributionId}/monitoring-subscription\";\n    if (input.DistributionId !== undefined) {\n        const labelValue = input.DistributionId;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: DistributionId.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{DistributionId}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: DistributionId.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetMonitoringSubscriptionCommand = serializeAws_restXmlGetMonitoringSubscriptionCommand;\nconst serializeAws_restXmlGetOriginRequestPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/origin-request-policy/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetOriginRequestPolicyCommand = serializeAws_restXmlGetOriginRequestPolicyCommand;\nconst serializeAws_restXmlGetOriginRequestPolicyConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/origin-request-policy/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetOriginRequestPolicyConfigCommand = serializeAws_restXmlGetOriginRequestPolicyConfigCommand;\nconst serializeAws_restXmlGetPublicKeyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/public-key/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetPublicKeyCommand = serializeAws_restXmlGetPublicKeyCommand;\nconst serializeAws_restXmlGetPublicKeyConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/public-key/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetPublicKeyConfigCommand = serializeAws_restXmlGetPublicKeyConfigCommand;\nconst serializeAws_restXmlGetRealtimeLogConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/get-realtime-log-config\";\n    let body;\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    const bodyNode = new xml_builder_1.XmlNode(\"GetRealtimeLogConfigRequest\");\n    bodyNode.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n    if (input.ARN !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.ARN)).withName(\"ARN\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Name !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Name)).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    body += bodyNode.toString();\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetRealtimeLogConfigCommand = serializeAws_restXmlGetRealtimeLogConfigCommand;\nconst serializeAws_restXmlGetResponseHeadersPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/response-headers-policy/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetResponseHeadersPolicyCommand = serializeAws_restXmlGetResponseHeadersPolicyCommand;\nconst serializeAws_restXmlGetResponseHeadersPolicyConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/response-headers-policy/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetResponseHeadersPolicyConfigCommand = serializeAws_restXmlGetResponseHeadersPolicyConfigCommand;\nconst serializeAws_restXmlGetStreamingDistributionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/streaming-distribution/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetStreamingDistributionCommand = serializeAws_restXmlGetStreamingDistributionCommand;\nconst serializeAws_restXmlGetStreamingDistributionConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/streaming-distribution/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetStreamingDistributionConfigCommand = serializeAws_restXmlGetStreamingDistributionConfigCommand;\nconst serializeAws_restXmlListCachePoliciesCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/cache-policy\";\n    const query = {\n        ...(input.Type !== undefined && { Type: input.Type }),\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListCachePoliciesCommand = serializeAws_restXmlListCachePoliciesCommand;\nconst serializeAws_restXmlListCloudFrontOriginAccessIdentitiesCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/origin-access-identity/cloudfront\";\n    const query = {\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListCloudFrontOriginAccessIdentitiesCommand = serializeAws_restXmlListCloudFrontOriginAccessIdentitiesCommand;\nconst serializeAws_restXmlListConflictingAliasesCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/conflicting-alias\";\n    const query = {\n        ...(input.DistributionId !== undefined && { DistributionId: input.DistributionId }),\n        ...(input.Alias !== undefined && { Alias: input.Alias }),\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListConflictingAliasesCommand = serializeAws_restXmlListConflictingAliasesCommand;\nconst serializeAws_restXmlListDistributionsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/distribution\";\n    const query = {\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListDistributionsCommand = serializeAws_restXmlListDistributionsCommand;\nconst serializeAws_restXmlListDistributionsByCachePolicyIdCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/distributionsByCachePolicyId/{CachePolicyId}\";\n    if (input.CachePolicyId !== undefined) {\n        const labelValue = input.CachePolicyId;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: CachePolicyId.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{CachePolicyId}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: CachePolicyId.\");\n    }\n    const query = {\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListDistributionsByCachePolicyIdCommand = serializeAws_restXmlListDistributionsByCachePolicyIdCommand;\nconst serializeAws_restXmlListDistributionsByKeyGroupCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/distributionsByKeyGroupId/{KeyGroupId}\";\n    if (input.KeyGroupId !== undefined) {\n        const labelValue = input.KeyGroupId;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: KeyGroupId.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{KeyGroupId}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: KeyGroupId.\");\n    }\n    const query = {\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListDistributionsByKeyGroupCommand = serializeAws_restXmlListDistributionsByKeyGroupCommand;\nconst serializeAws_restXmlListDistributionsByOriginRequestPolicyIdCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/distributionsByOriginRequestPolicyId/{OriginRequestPolicyId}\";\n    if (input.OriginRequestPolicyId !== undefined) {\n        const labelValue = input.OriginRequestPolicyId;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: OriginRequestPolicyId.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{OriginRequestPolicyId}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: OriginRequestPolicyId.\");\n    }\n    const query = {\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListDistributionsByOriginRequestPolicyIdCommand = serializeAws_restXmlListDistributionsByOriginRequestPolicyIdCommand;\nconst serializeAws_restXmlListDistributionsByRealtimeLogConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/distributionsByRealtimeLogConfig\";\n    let body;\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    const bodyNode = new xml_builder_1.XmlNode(\"ListDistributionsByRealtimeLogConfigRequest\");\n    bodyNode.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n    if (input.Marker !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Marker)).withName(\"Marker\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.MaxItems !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"Integer\").addChildNode(new xml_builder_1.XmlText(String(input.MaxItems))).withName(\"MaxItems\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RealtimeLogConfigArn !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.RealtimeLogConfigArn))\n            .withName(\"RealtimeLogConfigArn\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RealtimeLogConfigName !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.RealtimeLogConfigName))\n            .withName(\"RealtimeLogConfigName\");\n        bodyNode.addChildNode(node);\n    }\n    body += bodyNode.toString();\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlListDistributionsByRealtimeLogConfigCommand = serializeAws_restXmlListDistributionsByRealtimeLogConfigCommand;\nconst serializeAws_restXmlListDistributionsByResponseHeadersPolicyIdCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/distributionsByResponseHeadersPolicyId/{ResponseHeadersPolicyId}\";\n    if (input.ResponseHeadersPolicyId !== undefined) {\n        const labelValue = input.ResponseHeadersPolicyId;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: ResponseHeadersPolicyId.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{ResponseHeadersPolicyId}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: ResponseHeadersPolicyId.\");\n    }\n    const query = {\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListDistributionsByResponseHeadersPolicyIdCommand = serializeAws_restXmlListDistributionsByResponseHeadersPolicyIdCommand;\nconst serializeAws_restXmlListDistributionsByWebACLIdCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/distributionsByWebACLId/{WebACLId}\";\n    if (input.WebACLId !== undefined) {\n        const labelValue = input.WebACLId;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: WebACLId.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{WebACLId}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: WebACLId.\");\n    }\n    const query = {\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListDistributionsByWebACLIdCommand = serializeAws_restXmlListDistributionsByWebACLIdCommand;\nconst serializeAws_restXmlListFieldLevelEncryptionConfigsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/field-level-encryption\";\n    const query = {\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListFieldLevelEncryptionConfigsCommand = serializeAws_restXmlListFieldLevelEncryptionConfigsCommand;\nconst serializeAws_restXmlListFieldLevelEncryptionProfilesCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/field-level-encryption-profile\";\n    const query = {\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListFieldLevelEncryptionProfilesCommand = serializeAws_restXmlListFieldLevelEncryptionProfilesCommand;\nconst serializeAws_restXmlListFunctionsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/function\";\n    const query = {\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n        ...(input.Stage !== undefined && { Stage: input.Stage }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListFunctionsCommand = serializeAws_restXmlListFunctionsCommand;\nconst serializeAws_restXmlListInvalidationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/distribution/{DistributionId}/invalidation\";\n    if (input.DistributionId !== undefined) {\n        const labelValue = input.DistributionId;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: DistributionId.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{DistributionId}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: DistributionId.\");\n    }\n    const query = {\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListInvalidationsCommand = serializeAws_restXmlListInvalidationsCommand;\nconst serializeAws_restXmlListKeyGroupsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/key-group\";\n    const query = {\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListKeyGroupsCommand = serializeAws_restXmlListKeyGroupsCommand;\nconst serializeAws_restXmlListOriginRequestPoliciesCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/origin-request-policy\";\n    const query = {\n        ...(input.Type !== undefined && { Type: input.Type }),\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListOriginRequestPoliciesCommand = serializeAws_restXmlListOriginRequestPoliciesCommand;\nconst serializeAws_restXmlListPublicKeysCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/public-key\";\n    const query = {\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListPublicKeysCommand = serializeAws_restXmlListPublicKeysCommand;\nconst serializeAws_restXmlListRealtimeLogConfigsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/realtime-log-config\";\n    const query = {\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListRealtimeLogConfigsCommand = serializeAws_restXmlListRealtimeLogConfigsCommand;\nconst serializeAws_restXmlListResponseHeadersPoliciesCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/response-headers-policy\";\n    const query = {\n        ...(input.Type !== undefined && { Type: input.Type }),\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListResponseHeadersPoliciesCommand = serializeAws_restXmlListResponseHeadersPoliciesCommand;\nconst serializeAws_restXmlListStreamingDistributionsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/streaming-distribution\";\n    const query = {\n        ...(input.Marker !== undefined && { Marker: input.Marker }),\n        ...(input.MaxItems !== undefined && { MaxItems: input.MaxItems.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListStreamingDistributionsCommand = serializeAws_restXmlListStreamingDistributionsCommand;\nconst serializeAws_restXmlListTagsForResourceCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/tagging\";\n    const query = {\n        ...(input.Resource !== undefined && { Resource: input.Resource }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListTagsForResourceCommand = serializeAws_restXmlListTagsForResourceCommand;\nconst serializeAws_restXmlPublishFunctionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/function/{Name}/publish\";\n    if (input.Name !== undefined) {\n        const labelValue = input.Name;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Name.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Name}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Name.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlPublishFunctionCommand = serializeAws_restXmlPublishFunctionCommand;\nconst serializeAws_restXmlTagResourceCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/tagging\";\n    const query = {\n        Operation: \"Tag\",\n        ...(input.Resource !== undefined && { Resource: input.Resource }),\n    };\n    let body;\n    if (input.Tags !== undefined) {\n        body = serializeAws_restXmlTags(input.Tags, context);\n    }\n    let contents;\n    if (input.Tags !== undefined) {\n        contents = serializeAws_restXmlTags(input.Tags, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlTagResourceCommand = serializeAws_restXmlTagResourceCommand;\nconst serializeAws_restXmlTestFunctionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/function/{Name}/test\";\n    if (input.Name !== undefined) {\n        const labelValue = input.Name;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Name.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Name}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Name.\");\n    }\n    let body;\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    const bodyNode = new xml_builder_1.XmlNode(\"TestFunctionRequest\");\n    bodyNode.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n    if (input.EventObject !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"FunctionEventObject\")\n            .addChildNode(new xml_builder_1.XmlText(context.base64Encoder(input.EventObject)))\n            .withName(\"EventObject\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Stage !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"FunctionStage\").addChildNode(new xml_builder_1.XmlText(input.Stage)).withName(\"Stage\");\n        bodyNode.addChildNode(node);\n    }\n    body += bodyNode.toString();\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlTestFunctionCommand = serializeAws_restXmlTestFunctionCommand;\nconst serializeAws_restXmlUntagResourceCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/tagging\";\n    const query = {\n        Operation: \"Untag\",\n        ...(input.Resource !== undefined && { Resource: input.Resource }),\n    };\n    let body;\n    if (input.TagKeys !== undefined) {\n        body = serializeAws_restXmlTagKeys(input.TagKeys, context);\n    }\n    let contents;\n    if (input.TagKeys !== undefined) {\n        contents = serializeAws_restXmlTagKeys(input.TagKeys, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlUntagResourceCommand = serializeAws_restXmlUntagResourceCommand;\nconst serializeAws_restXmlUpdateCachePolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/cache-policy/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    if (input.CachePolicyConfig !== undefined) {\n        body = serializeAws_restXmlCachePolicyConfig(input.CachePolicyConfig, context);\n    }\n    let contents;\n    if (input.CachePolicyConfig !== undefined) {\n        contents = serializeAws_restXmlCachePolicyConfig(input.CachePolicyConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlUpdateCachePolicyCommand = serializeAws_restXmlUpdateCachePolicyCommand;\nconst serializeAws_restXmlUpdateCloudFrontOriginAccessIdentityCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/origin-access-identity/cloudfront/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    if (input.CloudFrontOriginAccessIdentityConfig !== undefined) {\n        body = serializeAws_restXmlCloudFrontOriginAccessIdentityConfig(input.CloudFrontOriginAccessIdentityConfig, context);\n    }\n    let contents;\n    if (input.CloudFrontOriginAccessIdentityConfig !== undefined) {\n        contents = serializeAws_restXmlCloudFrontOriginAccessIdentityConfig(input.CloudFrontOriginAccessIdentityConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlUpdateCloudFrontOriginAccessIdentityCommand = serializeAws_restXmlUpdateCloudFrontOriginAccessIdentityCommand;\nconst serializeAws_restXmlUpdateDistributionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/distribution/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    if (input.DistributionConfig !== undefined) {\n        body = serializeAws_restXmlDistributionConfig(input.DistributionConfig, context);\n    }\n    let contents;\n    if (input.DistributionConfig !== undefined) {\n        contents = serializeAws_restXmlDistributionConfig(input.DistributionConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlUpdateDistributionCommand = serializeAws_restXmlUpdateDistributionCommand;\nconst serializeAws_restXmlUpdateFieldLevelEncryptionConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/field-level-encryption/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    if (input.FieldLevelEncryptionConfig !== undefined) {\n        body = serializeAws_restXmlFieldLevelEncryptionConfig(input.FieldLevelEncryptionConfig, context);\n    }\n    let contents;\n    if (input.FieldLevelEncryptionConfig !== undefined) {\n        contents = serializeAws_restXmlFieldLevelEncryptionConfig(input.FieldLevelEncryptionConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlUpdateFieldLevelEncryptionConfigCommand = serializeAws_restXmlUpdateFieldLevelEncryptionConfigCommand;\nconst serializeAws_restXmlUpdateFieldLevelEncryptionProfileCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/field-level-encryption-profile/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    if (input.FieldLevelEncryptionProfileConfig !== undefined) {\n        body = serializeAws_restXmlFieldLevelEncryptionProfileConfig(input.FieldLevelEncryptionProfileConfig, context);\n    }\n    let contents;\n    if (input.FieldLevelEncryptionProfileConfig !== undefined) {\n        contents = serializeAws_restXmlFieldLevelEncryptionProfileConfig(input.FieldLevelEncryptionProfileConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlUpdateFieldLevelEncryptionProfileCommand = serializeAws_restXmlUpdateFieldLevelEncryptionProfileCommand;\nconst serializeAws_restXmlUpdateFunctionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/function/{Name}\";\n    if (input.Name !== undefined) {\n        const labelValue = input.Name;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Name.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Name}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Name.\");\n    }\n    let body;\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    const bodyNode = new xml_builder_1.XmlNode(\"UpdateFunctionRequest\");\n    bodyNode.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n    if (input.FunctionCode !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"FunctionBlob\")\n            .addChildNode(new xml_builder_1.XmlText(context.base64Encoder(input.FunctionCode)))\n            .withName(\"FunctionCode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FunctionConfig !== undefined) {\n        const node = serializeAws_restXmlFunctionConfig(input.FunctionConfig, context).withName(\"FunctionConfig\");\n        bodyNode.addChildNode(node);\n    }\n    body += bodyNode.toString();\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlUpdateFunctionCommand = serializeAws_restXmlUpdateFunctionCommand;\nconst serializeAws_restXmlUpdateKeyGroupCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/key-group/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    if (input.KeyGroupConfig !== undefined) {\n        body = serializeAws_restXmlKeyGroupConfig(input.KeyGroupConfig, context);\n    }\n    let contents;\n    if (input.KeyGroupConfig !== undefined) {\n        contents = serializeAws_restXmlKeyGroupConfig(input.KeyGroupConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlUpdateKeyGroupCommand = serializeAws_restXmlUpdateKeyGroupCommand;\nconst serializeAws_restXmlUpdateOriginRequestPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/origin-request-policy/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    if (input.OriginRequestPolicyConfig !== undefined) {\n        body = serializeAws_restXmlOriginRequestPolicyConfig(input.OriginRequestPolicyConfig, context);\n    }\n    let contents;\n    if (input.OriginRequestPolicyConfig !== undefined) {\n        contents = serializeAws_restXmlOriginRequestPolicyConfig(input.OriginRequestPolicyConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlUpdateOriginRequestPolicyCommand = serializeAws_restXmlUpdateOriginRequestPolicyCommand;\nconst serializeAws_restXmlUpdatePublicKeyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/public-key/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    if (input.PublicKeyConfig !== undefined) {\n        body = serializeAws_restXmlPublicKeyConfig(input.PublicKeyConfig, context);\n    }\n    let contents;\n    if (input.PublicKeyConfig !== undefined) {\n        contents = serializeAws_restXmlPublicKeyConfig(input.PublicKeyConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlUpdatePublicKeyCommand = serializeAws_restXmlUpdatePublicKeyCommand;\nconst serializeAws_restXmlUpdateRealtimeLogConfigCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/realtime-log-config\";\n    let body;\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    const bodyNode = new xml_builder_1.XmlNode(\"UpdateRealtimeLogConfigRequest\");\n    bodyNode.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n    if (input.ARN !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.ARN)).withName(\"ARN\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EndPoints !== undefined) {\n        const nodes = serializeAws_restXmlEndPointList(input.EndPoints, context);\n        const containerNode = new xml_builder_1.XmlNode(\"EndPoints\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Fields !== undefined) {\n        const nodes = serializeAws_restXmlFieldList(input.Fields, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Fields\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Name !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Name)).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SamplingRate !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"long\").addChildNode(new xml_builder_1.XmlText(String(input.SamplingRate))).withName(\"SamplingRate\");\n        bodyNode.addChildNode(node);\n    }\n    body += bodyNode.toString();\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlUpdateRealtimeLogConfigCommand = serializeAws_restXmlUpdateRealtimeLogConfigCommand;\nconst serializeAws_restXmlUpdateResponseHeadersPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/2020-05-31/response-headers-policy/{Id}\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    if (input.ResponseHeadersPolicyConfig !== undefined) {\n        body = serializeAws_restXmlResponseHeadersPolicyConfig(input.ResponseHeadersPolicyConfig, context);\n    }\n    let contents;\n    if (input.ResponseHeadersPolicyConfig !== undefined) {\n        contents = serializeAws_restXmlResponseHeadersPolicyConfig(input.ResponseHeadersPolicyConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlUpdateResponseHeadersPolicyCommand = serializeAws_restXmlUpdateResponseHeadersPolicyCommand;\nconst serializeAws_restXmlUpdateStreamingDistributionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` +\n        \"/2020-05-31/streaming-distribution/{Id}/config\";\n    if (input.Id !== undefined) {\n        const labelValue = input.Id;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Id.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Id}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Id.\");\n    }\n    let body;\n    if (input.StreamingDistributionConfig !== undefined) {\n        body = serializeAws_restXmlStreamingDistributionConfig(input.StreamingDistributionConfig, context);\n    }\n    let contents;\n    if (input.StreamingDistributionConfig !== undefined) {\n        contents = serializeAws_restXmlStreamingDistributionConfig(input.StreamingDistributionConfig, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://cloudfront.amazonaws.com/doc/2020-05-31/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlUpdateStreamingDistributionCommand = serializeAws_restXmlUpdateStreamingDistributionCommand;\nconst deserializeAws_restXmlAssociateAliasCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlAssociateAliasCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlAssociateAliasCommand = deserializeAws_restXmlAssociateAliasCommand;\nconst deserializeAws_restXmlAssociateAliasCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalUpdate\":\n        case \"com.amazonaws.cloudfront#IllegalUpdate\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalUpdateResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionCNAMEs\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionCNAMEs\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionCNAMEsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateCachePolicyCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateCachePolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        CachePolicy: undefined,\n        ETag: undefined,\n        Location: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.CachePolicy = deserializeAws_restXmlCachePolicy(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateCachePolicyCommand = deserializeAws_restXmlCreateCachePolicyCommand;\nconst deserializeAws_restXmlCreateCachePolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"CachePolicyAlreadyExists\":\n        case \"com.amazonaws.cloudfront#CachePolicyAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlCachePolicyAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCachePolicies\":\n        case \"com.amazonaws.cloudfront#TooManyCachePolicies\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCachePoliciesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCookiesInCachePolicy\":\n        case \"com.amazonaws.cloudfront#TooManyCookiesInCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCookiesInCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyHeadersInCachePolicy\":\n        case \"com.amazonaws.cloudfront#TooManyHeadersInCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyHeadersInCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyQueryStringsInCachePolicy\":\n        case \"com.amazonaws.cloudfront#TooManyQueryStringsInCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyQueryStringsInCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateCloudFrontOriginAccessIdentityCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateCloudFrontOriginAccessIdentityCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        CloudFrontOriginAccessIdentity: undefined,\n        ETag: undefined,\n        Location: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.CloudFrontOriginAccessIdentity = deserializeAws_restXmlCloudFrontOriginAccessIdentity(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateCloudFrontOriginAccessIdentityCommand = deserializeAws_restXmlCreateCloudFrontOriginAccessIdentityCommand;\nconst deserializeAws_restXmlCreateCloudFrontOriginAccessIdentityCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"CloudFrontOriginAccessIdentityAlreadyExists\":\n        case \"com.amazonaws.cloudfront#CloudFrontOriginAccessIdentityAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlCloudFrontOriginAccessIdentityAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"MissingBody\":\n        case \"com.amazonaws.cloudfront#MissingBody\":\n            response = {\n                ...(await deserializeAws_restXmlMissingBodyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCloudFrontOriginAccessIdentities\":\n        case \"com.amazonaws.cloudfront#TooManyCloudFrontOriginAccessIdentities\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCloudFrontOriginAccessIdentitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateDistributionCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateDistributionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Distribution: undefined,\n        ETag: undefined,\n        Location: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.Distribution = deserializeAws_restXmlDistribution(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateDistributionCommand = deserializeAws_restXmlCreateDistributionCommand;\nconst deserializeAws_restXmlCreateDistributionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"CNAMEAlreadyExists\":\n        case \"com.amazonaws.cloudfront#CNAMEAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlCNAMEAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"DistributionAlreadyExists\":\n        case \"com.amazonaws.cloudfront#DistributionAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlDistributionAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior\":\n        case \"com.amazonaws.cloudfront#IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalFieldLevelEncryptionConfigAssociationWithCacheBehaviorResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidDefaultRootObject\":\n        case \"com.amazonaws.cloudfront#InvalidDefaultRootObject\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidDefaultRootObjectResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidErrorCode\":\n        case \"com.amazonaws.cloudfront#InvalidErrorCode\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidErrorCodeResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidForwardCookies\":\n        case \"com.amazonaws.cloudfront#InvalidForwardCookies\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidForwardCookiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidFunctionAssociation\":\n        case \"com.amazonaws.cloudfront#InvalidFunctionAssociation\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidFunctionAssociationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidGeoRestrictionParameter\":\n        case \"com.amazonaws.cloudfront#InvalidGeoRestrictionParameter\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidGeoRestrictionParameterResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidHeadersForS3Origin\":\n        case \"com.amazonaws.cloudfront#InvalidHeadersForS3Origin\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidHeadersForS3OriginResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidLambdaFunctionAssociation\":\n        case \"com.amazonaws.cloudfront#InvalidLambdaFunctionAssociation\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidLambdaFunctionAssociationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidLocationCode\":\n        case \"com.amazonaws.cloudfront#InvalidLocationCode\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidLocationCodeResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidMinimumProtocolVersion\":\n        case \"com.amazonaws.cloudfront#InvalidMinimumProtocolVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidMinimumProtocolVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOrigin\":\n        case \"com.amazonaws.cloudfront#InvalidOrigin\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOriginAccessIdentity\":\n        case \"com.amazonaws.cloudfront#InvalidOriginAccessIdentity\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginAccessIdentityResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOriginKeepaliveTimeout\":\n        case \"com.amazonaws.cloudfront#InvalidOriginKeepaliveTimeout\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginKeepaliveTimeoutResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOriginReadTimeout\":\n        case \"com.amazonaws.cloudfront#InvalidOriginReadTimeout\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginReadTimeoutResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidProtocolSettings\":\n        case \"com.amazonaws.cloudfront#InvalidProtocolSettings\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidProtocolSettingsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidQueryStringParameters\":\n        case \"com.amazonaws.cloudfront#InvalidQueryStringParameters\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidQueryStringParametersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidRelativePath\":\n        case \"com.amazonaws.cloudfront#InvalidRelativePath\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidRelativePathResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidRequiredProtocol\":\n        case \"com.amazonaws.cloudfront#InvalidRequiredProtocol\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidRequiredProtocolResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidResponseCode\":\n        case \"com.amazonaws.cloudfront#InvalidResponseCode\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidResponseCodeResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidTTLOrder\":\n        case \"com.amazonaws.cloudfront#InvalidTTLOrder\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidTTLOrderResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidViewerCertificate\":\n        case \"com.amazonaws.cloudfront#InvalidViewerCertificate\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidViewerCertificateResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidWebACLId\":\n        case \"com.amazonaws.cloudfront#InvalidWebACLId\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidWebACLIdResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"MissingBody\":\n        case \"com.amazonaws.cloudfront#MissingBody\":\n            response = {\n                ...(await deserializeAws_restXmlMissingBodyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchCachePolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFieldLevelEncryptionConfig\":\n        case \"com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionConfig\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFieldLevelEncryptionConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchOrigin\":\n        case \"com.amazonaws.cloudfront#NoSuchOrigin\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchOriginResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchRealtimeLogConfig\":\n        case \"com.amazonaws.cloudfront#NoSuchRealtimeLogConfig\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchRealtimeLogConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResponseHeadersPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchResponseHeadersPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResponseHeadersPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"RealtimeLogConfigOwnerMismatch\":\n        case \"com.amazonaws.cloudfront#RealtimeLogConfigOwnerMismatch\":\n            response = {\n                ...(await deserializeAws_restXmlRealtimeLogConfigOwnerMismatchResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCacheBehaviors\":\n        case \"com.amazonaws.cloudfront#TooManyCacheBehaviors\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCacheBehaviorsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCertificates\":\n        case \"com.amazonaws.cloudfront#TooManyCertificates\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCertificatesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCookieNamesInWhiteList\":\n        case \"com.amazonaws.cloudfront#TooManyCookieNamesInWhiteList\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCookieNamesInWhiteListResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionCNAMEs\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionCNAMEs\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionCNAMEsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributions\":\n        case \"com.amazonaws.cloudfront#TooManyDistributions\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToCachePolicy\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToFieldLevelEncryptionConfig\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToFieldLevelEncryptionConfig\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToFieldLevelEncryptionConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToKeyGroup\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToKeyGroup\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToKeyGroupResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToResponseHeadersPolicy\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToResponseHeadersPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToResponseHeadersPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsWithFunctionAssociations\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsWithFunctionAssociations\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsWithFunctionAssociationsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsWithLambdaAssociations\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsWithLambdaAssociations\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsWithLambdaAssociationsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsWithSingleFunctionARN\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsWithSingleFunctionARN\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsWithSingleFunctionARNResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyFunctionAssociations\":\n        case \"com.amazonaws.cloudfront#TooManyFunctionAssociations\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyFunctionAssociationsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyHeadersInForwardedValues\":\n        case \"com.amazonaws.cloudfront#TooManyHeadersInForwardedValues\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyHeadersInForwardedValuesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyKeyGroupsAssociatedToDistribution\":\n        case \"com.amazonaws.cloudfront#TooManyKeyGroupsAssociatedToDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyKeyGroupsAssociatedToDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyLambdaFunctionAssociations\":\n        case \"com.amazonaws.cloudfront#TooManyLambdaFunctionAssociations\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyLambdaFunctionAssociationsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyOriginCustomHeaders\":\n        case \"com.amazonaws.cloudfront#TooManyOriginCustomHeaders\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyOriginCustomHeadersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyOriginGroupsPerDistribution\":\n        case \"com.amazonaws.cloudfront#TooManyOriginGroupsPerDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyOriginGroupsPerDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyOrigins\":\n        case \"com.amazonaws.cloudfront#TooManyOrigins\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyOriginsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyQueryStringParameters\":\n        case \"com.amazonaws.cloudfront#TooManyQueryStringParameters\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyQueryStringParametersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyTrustedSigners\":\n        case \"com.amazonaws.cloudfront#TooManyTrustedSigners\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyTrustedSignersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TrustedKeyGroupDoesNotExist\":\n        case \"com.amazonaws.cloudfront#TrustedKeyGroupDoesNotExist\":\n            response = {\n                ...(await deserializeAws_restXmlTrustedKeyGroupDoesNotExistResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TrustedSignerDoesNotExist\":\n        case \"com.amazonaws.cloudfront#TrustedSignerDoesNotExist\":\n            response = {\n                ...(await deserializeAws_restXmlTrustedSignerDoesNotExistResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateDistributionWithTagsCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateDistributionWithTagsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Distribution: undefined,\n        ETag: undefined,\n        Location: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.Distribution = deserializeAws_restXmlDistribution(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateDistributionWithTagsCommand = deserializeAws_restXmlCreateDistributionWithTagsCommand;\nconst deserializeAws_restXmlCreateDistributionWithTagsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"CNAMEAlreadyExists\":\n        case \"com.amazonaws.cloudfront#CNAMEAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlCNAMEAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"DistributionAlreadyExists\":\n        case \"com.amazonaws.cloudfront#DistributionAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlDistributionAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior\":\n        case \"com.amazonaws.cloudfront#IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalFieldLevelEncryptionConfigAssociationWithCacheBehaviorResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidDefaultRootObject\":\n        case \"com.amazonaws.cloudfront#InvalidDefaultRootObject\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidDefaultRootObjectResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidErrorCode\":\n        case \"com.amazonaws.cloudfront#InvalidErrorCode\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidErrorCodeResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidForwardCookies\":\n        case \"com.amazonaws.cloudfront#InvalidForwardCookies\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidForwardCookiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidFunctionAssociation\":\n        case \"com.amazonaws.cloudfront#InvalidFunctionAssociation\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidFunctionAssociationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidGeoRestrictionParameter\":\n        case \"com.amazonaws.cloudfront#InvalidGeoRestrictionParameter\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidGeoRestrictionParameterResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidHeadersForS3Origin\":\n        case \"com.amazonaws.cloudfront#InvalidHeadersForS3Origin\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidHeadersForS3OriginResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidLambdaFunctionAssociation\":\n        case \"com.amazonaws.cloudfront#InvalidLambdaFunctionAssociation\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidLambdaFunctionAssociationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidLocationCode\":\n        case \"com.amazonaws.cloudfront#InvalidLocationCode\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidLocationCodeResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidMinimumProtocolVersion\":\n        case \"com.amazonaws.cloudfront#InvalidMinimumProtocolVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidMinimumProtocolVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOrigin\":\n        case \"com.amazonaws.cloudfront#InvalidOrigin\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOriginAccessIdentity\":\n        case \"com.amazonaws.cloudfront#InvalidOriginAccessIdentity\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginAccessIdentityResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOriginKeepaliveTimeout\":\n        case \"com.amazonaws.cloudfront#InvalidOriginKeepaliveTimeout\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginKeepaliveTimeoutResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOriginReadTimeout\":\n        case \"com.amazonaws.cloudfront#InvalidOriginReadTimeout\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginReadTimeoutResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidProtocolSettings\":\n        case \"com.amazonaws.cloudfront#InvalidProtocolSettings\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidProtocolSettingsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidQueryStringParameters\":\n        case \"com.amazonaws.cloudfront#InvalidQueryStringParameters\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidQueryStringParametersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidRelativePath\":\n        case \"com.amazonaws.cloudfront#InvalidRelativePath\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidRelativePathResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidRequiredProtocol\":\n        case \"com.amazonaws.cloudfront#InvalidRequiredProtocol\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidRequiredProtocolResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidResponseCode\":\n        case \"com.amazonaws.cloudfront#InvalidResponseCode\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidResponseCodeResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidTagging\":\n        case \"com.amazonaws.cloudfront#InvalidTagging\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidTaggingResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidTTLOrder\":\n        case \"com.amazonaws.cloudfront#InvalidTTLOrder\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidTTLOrderResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidViewerCertificate\":\n        case \"com.amazonaws.cloudfront#InvalidViewerCertificate\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidViewerCertificateResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidWebACLId\":\n        case \"com.amazonaws.cloudfront#InvalidWebACLId\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidWebACLIdResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"MissingBody\":\n        case \"com.amazonaws.cloudfront#MissingBody\":\n            response = {\n                ...(await deserializeAws_restXmlMissingBodyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchCachePolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFieldLevelEncryptionConfig\":\n        case \"com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionConfig\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFieldLevelEncryptionConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchOrigin\":\n        case \"com.amazonaws.cloudfront#NoSuchOrigin\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchOriginResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchRealtimeLogConfig\":\n        case \"com.amazonaws.cloudfront#NoSuchRealtimeLogConfig\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchRealtimeLogConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResponseHeadersPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchResponseHeadersPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResponseHeadersPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"RealtimeLogConfigOwnerMismatch\":\n        case \"com.amazonaws.cloudfront#RealtimeLogConfigOwnerMismatch\":\n            response = {\n                ...(await deserializeAws_restXmlRealtimeLogConfigOwnerMismatchResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCacheBehaviors\":\n        case \"com.amazonaws.cloudfront#TooManyCacheBehaviors\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCacheBehaviorsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCertificates\":\n        case \"com.amazonaws.cloudfront#TooManyCertificates\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCertificatesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCookieNamesInWhiteList\":\n        case \"com.amazonaws.cloudfront#TooManyCookieNamesInWhiteList\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCookieNamesInWhiteListResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionCNAMEs\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionCNAMEs\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionCNAMEsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributions\":\n        case \"com.amazonaws.cloudfront#TooManyDistributions\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToCachePolicy\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToFieldLevelEncryptionConfig\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToFieldLevelEncryptionConfig\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToFieldLevelEncryptionConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToKeyGroup\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToKeyGroup\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToKeyGroupResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToResponseHeadersPolicy\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToResponseHeadersPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToResponseHeadersPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsWithFunctionAssociations\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsWithFunctionAssociations\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsWithFunctionAssociationsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsWithLambdaAssociations\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsWithLambdaAssociations\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsWithLambdaAssociationsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsWithSingleFunctionARN\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsWithSingleFunctionARN\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsWithSingleFunctionARNResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyFunctionAssociations\":\n        case \"com.amazonaws.cloudfront#TooManyFunctionAssociations\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyFunctionAssociationsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyHeadersInForwardedValues\":\n        case \"com.amazonaws.cloudfront#TooManyHeadersInForwardedValues\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyHeadersInForwardedValuesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyKeyGroupsAssociatedToDistribution\":\n        case \"com.amazonaws.cloudfront#TooManyKeyGroupsAssociatedToDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyKeyGroupsAssociatedToDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyLambdaFunctionAssociations\":\n        case \"com.amazonaws.cloudfront#TooManyLambdaFunctionAssociations\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyLambdaFunctionAssociationsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyOriginCustomHeaders\":\n        case \"com.amazonaws.cloudfront#TooManyOriginCustomHeaders\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyOriginCustomHeadersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyOriginGroupsPerDistribution\":\n        case \"com.amazonaws.cloudfront#TooManyOriginGroupsPerDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyOriginGroupsPerDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyOrigins\":\n        case \"com.amazonaws.cloudfront#TooManyOrigins\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyOriginsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyQueryStringParameters\":\n        case \"com.amazonaws.cloudfront#TooManyQueryStringParameters\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyQueryStringParametersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyTrustedSigners\":\n        case \"com.amazonaws.cloudfront#TooManyTrustedSigners\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyTrustedSignersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TrustedKeyGroupDoesNotExist\":\n        case \"com.amazonaws.cloudfront#TrustedKeyGroupDoesNotExist\":\n            response = {\n                ...(await deserializeAws_restXmlTrustedKeyGroupDoesNotExistResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TrustedSignerDoesNotExist\":\n        case \"com.amazonaws.cloudfront#TrustedSignerDoesNotExist\":\n            response = {\n                ...(await deserializeAws_restXmlTrustedSignerDoesNotExistResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateFieldLevelEncryptionConfigCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateFieldLevelEncryptionConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        FieldLevelEncryption: undefined,\n        Location: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FieldLevelEncryption = deserializeAws_restXmlFieldLevelEncryption(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateFieldLevelEncryptionConfigCommand = deserializeAws_restXmlCreateFieldLevelEncryptionConfigCommand;\nconst deserializeAws_restXmlCreateFieldLevelEncryptionConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"FieldLevelEncryptionConfigAlreadyExists\":\n        case \"com.amazonaws.cloudfront#FieldLevelEncryptionConfigAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlFieldLevelEncryptionConfigAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFieldLevelEncryptionProfile\":\n        case \"com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionProfile\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFieldLevelEncryptionProfileResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"QueryArgProfileEmpty\":\n        case \"com.amazonaws.cloudfront#QueryArgProfileEmpty\":\n            response = {\n                ...(await deserializeAws_restXmlQueryArgProfileEmptyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyFieldLevelEncryptionConfigs\":\n        case \"com.amazonaws.cloudfront#TooManyFieldLevelEncryptionConfigs\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyFieldLevelEncryptionConfigsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyFieldLevelEncryptionContentTypeProfiles\":\n        case \"com.amazonaws.cloudfront#TooManyFieldLevelEncryptionContentTypeProfiles\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyFieldLevelEncryptionContentTypeProfilesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyFieldLevelEncryptionQueryArgProfiles\":\n        case \"com.amazonaws.cloudfront#TooManyFieldLevelEncryptionQueryArgProfiles\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyFieldLevelEncryptionQueryArgProfilesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateFieldLevelEncryptionProfileCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateFieldLevelEncryptionProfileCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        FieldLevelEncryptionProfile: undefined,\n        Location: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FieldLevelEncryptionProfile = deserializeAws_restXmlFieldLevelEncryptionProfile(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateFieldLevelEncryptionProfileCommand = deserializeAws_restXmlCreateFieldLevelEncryptionProfileCommand;\nconst deserializeAws_restXmlCreateFieldLevelEncryptionProfileCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"FieldLevelEncryptionProfileAlreadyExists\":\n        case \"com.amazonaws.cloudfront#FieldLevelEncryptionProfileAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlFieldLevelEncryptionProfileAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"FieldLevelEncryptionProfileSizeExceeded\":\n        case \"com.amazonaws.cloudfront#FieldLevelEncryptionProfileSizeExceeded\":\n            response = {\n                ...(await deserializeAws_restXmlFieldLevelEncryptionProfileSizeExceededResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchPublicKey\":\n        case \"com.amazonaws.cloudfront#NoSuchPublicKey\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchPublicKeyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyFieldLevelEncryptionEncryptionEntities\":\n        case \"com.amazonaws.cloudfront#TooManyFieldLevelEncryptionEncryptionEntities\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyFieldLevelEncryptionEncryptionEntitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyFieldLevelEncryptionFieldPatterns\":\n        case \"com.amazonaws.cloudfront#TooManyFieldLevelEncryptionFieldPatterns\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyFieldLevelEncryptionFieldPatternsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyFieldLevelEncryptionProfiles\":\n        case \"com.amazonaws.cloudfront#TooManyFieldLevelEncryptionProfiles\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyFieldLevelEncryptionProfilesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateFunctionCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateFunctionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        FunctionSummary: undefined,\n        Location: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FunctionSummary = deserializeAws_restXmlFunctionSummary(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateFunctionCommand = deserializeAws_restXmlCreateFunctionCommand;\nconst deserializeAws_restXmlCreateFunctionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"FunctionAlreadyExists\":\n        case \"com.amazonaws.cloudfront#FunctionAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlFunctionAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"FunctionSizeLimitExceeded\":\n        case \"com.amazonaws.cloudfront#FunctionSizeLimitExceeded\":\n            response = {\n                ...(await deserializeAws_restXmlFunctionSizeLimitExceededResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyFunctions\":\n        case \"com.amazonaws.cloudfront#TooManyFunctions\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyFunctionsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnsupportedOperation\":\n        case \"com.amazonaws.cloudfront#UnsupportedOperation\":\n            response = {\n                ...(await deserializeAws_restXmlUnsupportedOperationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateInvalidationCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateInvalidationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Invalidation: undefined,\n        Location: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.Invalidation = deserializeAws_restXmlInvalidation(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateInvalidationCommand = deserializeAws_restXmlCreateInvalidationCommand;\nconst deserializeAws_restXmlCreateInvalidationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"BatchTooLarge\":\n        case \"com.amazonaws.cloudfront#BatchTooLarge\":\n            response = {\n                ...(await deserializeAws_restXmlBatchTooLargeResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"MissingBody\":\n        case \"com.amazonaws.cloudfront#MissingBody\":\n            response = {\n                ...(await deserializeAws_restXmlMissingBodyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyInvalidationsInProgress\":\n        case \"com.amazonaws.cloudfront#TooManyInvalidationsInProgress\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyInvalidationsInProgressResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateKeyGroupCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateKeyGroupCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        KeyGroup: undefined,\n        Location: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.KeyGroup = deserializeAws_restXmlKeyGroup(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateKeyGroupCommand = deserializeAws_restXmlCreateKeyGroupCommand;\nconst deserializeAws_restXmlCreateKeyGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"KeyGroupAlreadyExists\":\n        case \"com.amazonaws.cloudfront#KeyGroupAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlKeyGroupAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyKeyGroups\":\n        case \"com.amazonaws.cloudfront#TooManyKeyGroups\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyKeyGroupsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyPublicKeysInKeyGroup\":\n        case \"com.amazonaws.cloudfront#TooManyPublicKeysInKeyGroup\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyPublicKeysInKeyGroupResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateMonitoringSubscriptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateMonitoringSubscriptionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        MonitoringSubscription: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.MonitoringSubscription = deserializeAws_restXmlMonitoringSubscription(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateMonitoringSubscriptionCommand = deserializeAws_restXmlCreateMonitoringSubscriptionCommand;\nconst deserializeAws_restXmlCreateMonitoringSubscriptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnsupportedOperation\":\n        case \"com.amazonaws.cloudfront#UnsupportedOperation\":\n            response = {\n                ...(await deserializeAws_restXmlUnsupportedOperationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateOriginRequestPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateOriginRequestPolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        Location: undefined,\n        OriginRequestPolicy: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.OriginRequestPolicy = deserializeAws_restXmlOriginRequestPolicy(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateOriginRequestPolicyCommand = deserializeAws_restXmlCreateOriginRequestPolicyCommand;\nconst deserializeAws_restXmlCreateOriginRequestPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"OriginRequestPolicyAlreadyExists\":\n        case \"com.amazonaws.cloudfront#OriginRequestPolicyAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlOriginRequestPolicyAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCookiesInOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#TooManyCookiesInOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCookiesInOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyHeadersInOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#TooManyHeadersInOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyHeadersInOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyOriginRequestPolicies\":\n        case \"com.amazonaws.cloudfront#TooManyOriginRequestPolicies\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyOriginRequestPoliciesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyQueryStringsInOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#TooManyQueryStringsInOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyQueryStringsInOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreatePublicKeyCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreatePublicKeyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        Location: undefined,\n        PublicKey: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.PublicKey = deserializeAws_restXmlPublicKey(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreatePublicKeyCommand = deserializeAws_restXmlCreatePublicKeyCommand;\nconst deserializeAws_restXmlCreatePublicKeyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PublicKeyAlreadyExists\":\n        case \"com.amazonaws.cloudfront#PublicKeyAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlPublicKeyAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyPublicKeys\":\n        case \"com.amazonaws.cloudfront#TooManyPublicKeys\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyPublicKeysResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateRealtimeLogConfigCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateRealtimeLogConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        RealtimeLogConfig: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"RealtimeLogConfig\"] !== undefined) {\n        contents.RealtimeLogConfig = deserializeAws_restXmlRealtimeLogConfig(data[\"RealtimeLogConfig\"], context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateRealtimeLogConfigCommand = deserializeAws_restXmlCreateRealtimeLogConfigCommand;\nconst deserializeAws_restXmlCreateRealtimeLogConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"RealtimeLogConfigAlreadyExists\":\n        case \"com.amazonaws.cloudfront#RealtimeLogConfigAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlRealtimeLogConfigAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyRealtimeLogConfigs\":\n        case \"com.amazonaws.cloudfront#TooManyRealtimeLogConfigs\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyRealtimeLogConfigsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateResponseHeadersPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateResponseHeadersPolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        Location: undefined,\n        ResponseHeadersPolicy: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.ResponseHeadersPolicy = deserializeAws_restXmlResponseHeadersPolicy(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateResponseHeadersPolicyCommand = deserializeAws_restXmlCreateResponseHeadersPolicyCommand;\nconst deserializeAws_restXmlCreateResponseHeadersPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"ResponseHeadersPolicyAlreadyExists\":\n        case \"com.amazonaws.cloudfront#ResponseHeadersPolicyAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlResponseHeadersPolicyAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCustomHeadersInResponseHeadersPolicy\":\n        case \"com.amazonaws.cloudfront#TooManyCustomHeadersInResponseHeadersPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCustomHeadersInResponseHeadersPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyResponseHeadersPolicies\":\n        case \"com.amazonaws.cloudfront#TooManyResponseHeadersPolicies\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyResponseHeadersPoliciesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateStreamingDistributionCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateStreamingDistributionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        Location: undefined,\n        StreamingDistribution: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.StreamingDistribution = deserializeAws_restXmlStreamingDistribution(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateStreamingDistributionCommand = deserializeAws_restXmlCreateStreamingDistributionCommand;\nconst deserializeAws_restXmlCreateStreamingDistributionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"CNAMEAlreadyExists\":\n        case \"com.amazonaws.cloudfront#CNAMEAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlCNAMEAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOrigin\":\n        case \"com.amazonaws.cloudfront#InvalidOrigin\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOriginAccessIdentity\":\n        case \"com.amazonaws.cloudfront#InvalidOriginAccessIdentity\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginAccessIdentityResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"MissingBody\":\n        case \"com.amazonaws.cloudfront#MissingBody\":\n            response = {\n                ...(await deserializeAws_restXmlMissingBodyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"StreamingDistributionAlreadyExists\":\n        case \"com.amazonaws.cloudfront#StreamingDistributionAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlStreamingDistributionAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyStreamingDistributionCNAMEs\":\n        case \"com.amazonaws.cloudfront#TooManyStreamingDistributionCNAMEs\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyStreamingDistributionCNAMEsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyStreamingDistributions\":\n        case \"com.amazonaws.cloudfront#TooManyStreamingDistributions\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyStreamingDistributionsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyTrustedSigners\":\n        case \"com.amazonaws.cloudfront#TooManyTrustedSigners\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyTrustedSignersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TrustedSignerDoesNotExist\":\n        case \"com.amazonaws.cloudfront#TrustedSignerDoesNotExist\":\n            response = {\n                ...(await deserializeAws_restXmlTrustedSignerDoesNotExistResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateStreamingDistributionWithTagsCommand = async (output, context) => {\n    if (output.statusCode !== 201 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateStreamingDistributionWithTagsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        Location: undefined,\n        StreamingDistribution: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.StreamingDistribution = deserializeAws_restXmlStreamingDistribution(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateStreamingDistributionWithTagsCommand = deserializeAws_restXmlCreateStreamingDistributionWithTagsCommand;\nconst deserializeAws_restXmlCreateStreamingDistributionWithTagsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"CNAMEAlreadyExists\":\n        case \"com.amazonaws.cloudfront#CNAMEAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlCNAMEAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOrigin\":\n        case \"com.amazonaws.cloudfront#InvalidOrigin\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOriginAccessIdentity\":\n        case \"com.amazonaws.cloudfront#InvalidOriginAccessIdentity\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginAccessIdentityResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidTagging\":\n        case \"com.amazonaws.cloudfront#InvalidTagging\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidTaggingResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"MissingBody\":\n        case \"com.amazonaws.cloudfront#MissingBody\":\n            response = {\n                ...(await deserializeAws_restXmlMissingBodyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"StreamingDistributionAlreadyExists\":\n        case \"com.amazonaws.cloudfront#StreamingDistributionAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlStreamingDistributionAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyStreamingDistributionCNAMEs\":\n        case \"com.amazonaws.cloudfront#TooManyStreamingDistributionCNAMEs\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyStreamingDistributionCNAMEsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyStreamingDistributions\":\n        case \"com.amazonaws.cloudfront#TooManyStreamingDistributions\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyStreamingDistributionsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyTrustedSigners\":\n        case \"com.amazonaws.cloudfront#TooManyTrustedSigners\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyTrustedSignersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TrustedSignerDoesNotExist\":\n        case \"com.amazonaws.cloudfront#TrustedSignerDoesNotExist\":\n            response = {\n                ...(await deserializeAws_restXmlTrustedSignerDoesNotExistResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteCachePolicyCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteCachePolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteCachePolicyCommand = deserializeAws_restXmlDeleteCachePolicyCommand;\nconst deserializeAws_restXmlDeleteCachePolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"CachePolicyInUse\":\n        case \"com.amazonaws.cloudfront#CachePolicyInUse\":\n            response = {\n                ...(await deserializeAws_restXmlCachePolicyInUseResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalDelete\":\n        case \"com.amazonaws.cloudfront#IllegalDelete\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalDeleteResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchCachePolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteCloudFrontOriginAccessIdentityCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteCloudFrontOriginAccessIdentityCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteCloudFrontOriginAccessIdentityCommand = deserializeAws_restXmlDeleteCloudFrontOriginAccessIdentityCommand;\nconst deserializeAws_restXmlDeleteCloudFrontOriginAccessIdentityCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"CloudFrontOriginAccessIdentityInUse\":\n        case \"com.amazonaws.cloudfront#CloudFrontOriginAccessIdentityInUse\":\n            response = {\n                ...(await deserializeAws_restXmlCloudFrontOriginAccessIdentityInUseResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchCloudFrontOriginAccessIdentity\":\n        case \"com.amazonaws.cloudfront#NoSuchCloudFrontOriginAccessIdentity\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchCloudFrontOriginAccessIdentityResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteDistributionCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteDistributionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteDistributionCommand = deserializeAws_restXmlDeleteDistributionCommand;\nconst deserializeAws_restXmlDeleteDistributionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"DistributionNotDisabled\":\n        case \"com.amazonaws.cloudfront#DistributionNotDisabled\":\n            response = {\n                ...(await deserializeAws_restXmlDistributionNotDisabledResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteFieldLevelEncryptionConfigCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteFieldLevelEncryptionConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteFieldLevelEncryptionConfigCommand = deserializeAws_restXmlDeleteFieldLevelEncryptionConfigCommand;\nconst deserializeAws_restXmlDeleteFieldLevelEncryptionConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"FieldLevelEncryptionConfigInUse\":\n        case \"com.amazonaws.cloudfront#FieldLevelEncryptionConfigInUse\":\n            response = {\n                ...(await deserializeAws_restXmlFieldLevelEncryptionConfigInUseResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFieldLevelEncryptionConfig\":\n        case \"com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionConfig\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFieldLevelEncryptionConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteFieldLevelEncryptionProfileCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteFieldLevelEncryptionProfileCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteFieldLevelEncryptionProfileCommand = deserializeAws_restXmlDeleteFieldLevelEncryptionProfileCommand;\nconst deserializeAws_restXmlDeleteFieldLevelEncryptionProfileCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"FieldLevelEncryptionProfileInUse\":\n        case \"com.amazonaws.cloudfront#FieldLevelEncryptionProfileInUse\":\n            response = {\n                ...(await deserializeAws_restXmlFieldLevelEncryptionProfileInUseResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFieldLevelEncryptionProfile\":\n        case \"com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionProfile\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFieldLevelEncryptionProfileResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteFunctionCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteFunctionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteFunctionCommand = deserializeAws_restXmlDeleteFunctionCommand;\nconst deserializeAws_restXmlDeleteFunctionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"FunctionInUse\":\n        case \"com.amazonaws.cloudfront#FunctionInUse\":\n            response = {\n                ...(await deserializeAws_restXmlFunctionInUseResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFunctionExists\":\n        case \"com.amazonaws.cloudfront#NoSuchFunctionExists\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFunctionExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnsupportedOperation\":\n        case \"com.amazonaws.cloudfront#UnsupportedOperation\":\n            response = {\n                ...(await deserializeAws_restXmlUnsupportedOperationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteKeyGroupCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteKeyGroupCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteKeyGroupCommand = deserializeAws_restXmlDeleteKeyGroupCommand;\nconst deserializeAws_restXmlDeleteKeyGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResource\":\n        case \"com.amazonaws.cloudfront#NoSuchResource\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResourceResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"ResourceInUse\":\n        case \"com.amazonaws.cloudfront#ResourceInUse\":\n            response = {\n                ...(await deserializeAws_restXmlResourceInUseResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteMonitoringSubscriptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteMonitoringSubscriptionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteMonitoringSubscriptionCommand = deserializeAws_restXmlDeleteMonitoringSubscriptionCommand;\nconst deserializeAws_restXmlDeleteMonitoringSubscriptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnsupportedOperation\":\n        case \"com.amazonaws.cloudfront#UnsupportedOperation\":\n            response = {\n                ...(await deserializeAws_restXmlUnsupportedOperationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteOriginRequestPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteOriginRequestPolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteOriginRequestPolicyCommand = deserializeAws_restXmlDeleteOriginRequestPolicyCommand;\nconst deserializeAws_restXmlDeleteOriginRequestPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalDelete\":\n        case \"com.amazonaws.cloudfront#IllegalDelete\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalDeleteResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"OriginRequestPolicyInUse\":\n        case \"com.amazonaws.cloudfront#OriginRequestPolicyInUse\":\n            response = {\n                ...(await deserializeAws_restXmlOriginRequestPolicyInUseResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeletePublicKeyCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeletePublicKeyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeletePublicKeyCommand = deserializeAws_restXmlDeletePublicKeyCommand;\nconst deserializeAws_restXmlDeletePublicKeyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchPublicKey\":\n        case \"com.amazonaws.cloudfront#NoSuchPublicKey\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchPublicKeyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PublicKeyInUse\":\n        case \"com.amazonaws.cloudfront#PublicKeyInUse\":\n            response = {\n                ...(await deserializeAws_restXmlPublicKeyInUseResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteRealtimeLogConfigCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteRealtimeLogConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteRealtimeLogConfigCommand = deserializeAws_restXmlDeleteRealtimeLogConfigCommand;\nconst deserializeAws_restXmlDeleteRealtimeLogConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchRealtimeLogConfig\":\n        case \"com.amazonaws.cloudfront#NoSuchRealtimeLogConfig\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchRealtimeLogConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"RealtimeLogConfigInUse\":\n        case \"com.amazonaws.cloudfront#RealtimeLogConfigInUse\":\n            response = {\n                ...(await deserializeAws_restXmlRealtimeLogConfigInUseResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteResponseHeadersPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteResponseHeadersPolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteResponseHeadersPolicyCommand = deserializeAws_restXmlDeleteResponseHeadersPolicyCommand;\nconst deserializeAws_restXmlDeleteResponseHeadersPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalDelete\":\n        case \"com.amazonaws.cloudfront#IllegalDelete\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalDeleteResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResponseHeadersPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchResponseHeadersPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResponseHeadersPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"ResponseHeadersPolicyInUse\":\n        case \"com.amazonaws.cloudfront#ResponseHeadersPolicyInUse\":\n            response = {\n                ...(await deserializeAws_restXmlResponseHeadersPolicyInUseResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteStreamingDistributionCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteStreamingDistributionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteStreamingDistributionCommand = deserializeAws_restXmlDeleteStreamingDistributionCommand;\nconst deserializeAws_restXmlDeleteStreamingDistributionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchStreamingDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchStreamingDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchStreamingDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"StreamingDistributionNotDisabled\":\n        case \"com.amazonaws.cloudfront#StreamingDistributionNotDisabled\":\n            response = {\n                ...(await deserializeAws_restXmlStreamingDistributionNotDisabledResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDescribeFunctionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDescribeFunctionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        FunctionSummary: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FunctionSummary = deserializeAws_restXmlFunctionSummary(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDescribeFunctionCommand = deserializeAws_restXmlDescribeFunctionCommand;\nconst deserializeAws_restXmlDescribeFunctionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchFunctionExists\":\n        case \"com.amazonaws.cloudfront#NoSuchFunctionExists\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFunctionExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnsupportedOperation\":\n        case \"com.amazonaws.cloudfront#UnsupportedOperation\":\n            response = {\n                ...(await deserializeAws_restXmlUnsupportedOperationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetCachePolicyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetCachePolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        CachePolicy: undefined,\n        ETag: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.CachePolicy = deserializeAws_restXmlCachePolicy(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetCachePolicyCommand = deserializeAws_restXmlGetCachePolicyCommand;\nconst deserializeAws_restXmlGetCachePolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchCachePolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetCachePolicyConfigCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetCachePolicyConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        CachePolicyConfig: undefined,\n        ETag: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.CachePolicyConfig = deserializeAws_restXmlCachePolicyConfig(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetCachePolicyConfigCommand = deserializeAws_restXmlGetCachePolicyConfigCommand;\nconst deserializeAws_restXmlGetCachePolicyConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchCachePolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetCloudFrontOriginAccessIdentityCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetCloudFrontOriginAccessIdentityCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        CloudFrontOriginAccessIdentity: undefined,\n        ETag: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.CloudFrontOriginAccessIdentity = deserializeAws_restXmlCloudFrontOriginAccessIdentity(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetCloudFrontOriginAccessIdentityCommand = deserializeAws_restXmlGetCloudFrontOriginAccessIdentityCommand;\nconst deserializeAws_restXmlGetCloudFrontOriginAccessIdentityCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchCloudFrontOriginAccessIdentity\":\n        case \"com.amazonaws.cloudfront#NoSuchCloudFrontOriginAccessIdentity\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchCloudFrontOriginAccessIdentityResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetCloudFrontOriginAccessIdentityConfigCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetCloudFrontOriginAccessIdentityConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        CloudFrontOriginAccessIdentityConfig: undefined,\n        ETag: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.CloudFrontOriginAccessIdentityConfig = deserializeAws_restXmlCloudFrontOriginAccessIdentityConfig(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetCloudFrontOriginAccessIdentityConfigCommand = deserializeAws_restXmlGetCloudFrontOriginAccessIdentityConfigCommand;\nconst deserializeAws_restXmlGetCloudFrontOriginAccessIdentityConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchCloudFrontOriginAccessIdentity\":\n        case \"com.amazonaws.cloudfront#NoSuchCloudFrontOriginAccessIdentity\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchCloudFrontOriginAccessIdentityResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetDistributionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetDistributionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Distribution: undefined,\n        ETag: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.Distribution = deserializeAws_restXmlDistribution(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetDistributionCommand = deserializeAws_restXmlGetDistributionCommand;\nconst deserializeAws_restXmlGetDistributionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetDistributionConfigCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetDistributionConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        DistributionConfig: undefined,\n        ETag: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.DistributionConfig = deserializeAws_restXmlDistributionConfig(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetDistributionConfigCommand = deserializeAws_restXmlGetDistributionConfigCommand;\nconst deserializeAws_restXmlGetDistributionConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetFieldLevelEncryptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetFieldLevelEncryptionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        FieldLevelEncryption: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FieldLevelEncryption = deserializeAws_restXmlFieldLevelEncryption(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetFieldLevelEncryptionCommand = deserializeAws_restXmlGetFieldLevelEncryptionCommand;\nconst deserializeAws_restXmlGetFieldLevelEncryptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFieldLevelEncryptionConfig\":\n        case \"com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionConfig\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFieldLevelEncryptionConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetFieldLevelEncryptionConfigCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetFieldLevelEncryptionConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        FieldLevelEncryptionConfig: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FieldLevelEncryptionConfig = deserializeAws_restXmlFieldLevelEncryptionConfig(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetFieldLevelEncryptionConfigCommand = deserializeAws_restXmlGetFieldLevelEncryptionConfigCommand;\nconst deserializeAws_restXmlGetFieldLevelEncryptionConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFieldLevelEncryptionConfig\":\n        case \"com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionConfig\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFieldLevelEncryptionConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetFieldLevelEncryptionProfileCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetFieldLevelEncryptionProfileCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        FieldLevelEncryptionProfile: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FieldLevelEncryptionProfile = deserializeAws_restXmlFieldLevelEncryptionProfile(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetFieldLevelEncryptionProfileCommand = deserializeAws_restXmlGetFieldLevelEncryptionProfileCommand;\nconst deserializeAws_restXmlGetFieldLevelEncryptionProfileCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFieldLevelEncryptionProfile\":\n        case \"com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionProfile\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFieldLevelEncryptionProfileResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetFieldLevelEncryptionProfileConfigCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetFieldLevelEncryptionProfileConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        FieldLevelEncryptionProfileConfig: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FieldLevelEncryptionProfileConfig = deserializeAws_restXmlFieldLevelEncryptionProfileConfig(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetFieldLevelEncryptionProfileConfigCommand = deserializeAws_restXmlGetFieldLevelEncryptionProfileConfigCommand;\nconst deserializeAws_restXmlGetFieldLevelEncryptionProfileConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFieldLevelEncryptionProfile\":\n        case \"com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionProfile\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFieldLevelEncryptionProfileResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetFunctionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetFunctionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ContentType: undefined,\n        ETag: undefined,\n        FunctionCode: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    if (output.headers[\"content-type\"] !== undefined) {\n        contents.ContentType = output.headers[\"content-type\"];\n    }\n    const data = await collectBody(output.body, context);\n    contents.FunctionCode = data;\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetFunctionCommand = deserializeAws_restXmlGetFunctionCommand;\nconst deserializeAws_restXmlGetFunctionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchFunctionExists\":\n        case \"com.amazonaws.cloudfront#NoSuchFunctionExists\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFunctionExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnsupportedOperation\":\n        case \"com.amazonaws.cloudfront#UnsupportedOperation\":\n            response = {\n                ...(await deserializeAws_restXmlUnsupportedOperationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetInvalidationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetInvalidationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Invalidation: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.Invalidation = deserializeAws_restXmlInvalidation(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetInvalidationCommand = deserializeAws_restXmlGetInvalidationCommand;\nconst deserializeAws_restXmlGetInvalidationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchInvalidation\":\n        case \"com.amazonaws.cloudfront#NoSuchInvalidation\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchInvalidationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetKeyGroupCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetKeyGroupCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        KeyGroup: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.KeyGroup = deserializeAws_restXmlKeyGroup(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetKeyGroupCommand = deserializeAws_restXmlGetKeyGroupCommand;\nconst deserializeAws_restXmlGetKeyGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchResource\":\n        case \"com.amazonaws.cloudfront#NoSuchResource\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResourceResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetKeyGroupConfigCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetKeyGroupConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        KeyGroupConfig: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.KeyGroupConfig = deserializeAws_restXmlKeyGroupConfig(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetKeyGroupConfigCommand = deserializeAws_restXmlGetKeyGroupConfigCommand;\nconst deserializeAws_restXmlGetKeyGroupConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchResource\":\n        case \"com.amazonaws.cloudfront#NoSuchResource\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResourceResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetMonitoringSubscriptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetMonitoringSubscriptionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        MonitoringSubscription: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.MonitoringSubscription = deserializeAws_restXmlMonitoringSubscription(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetMonitoringSubscriptionCommand = deserializeAws_restXmlGetMonitoringSubscriptionCommand;\nconst deserializeAws_restXmlGetMonitoringSubscriptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnsupportedOperation\":\n        case \"com.amazonaws.cloudfront#UnsupportedOperation\":\n            response = {\n                ...(await deserializeAws_restXmlUnsupportedOperationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetOriginRequestPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetOriginRequestPolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        OriginRequestPolicy: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.OriginRequestPolicy = deserializeAws_restXmlOriginRequestPolicy(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetOriginRequestPolicyCommand = deserializeAws_restXmlGetOriginRequestPolicyCommand;\nconst deserializeAws_restXmlGetOriginRequestPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetOriginRequestPolicyConfigCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetOriginRequestPolicyConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        OriginRequestPolicyConfig: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.OriginRequestPolicyConfig = deserializeAws_restXmlOriginRequestPolicyConfig(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetOriginRequestPolicyConfigCommand = deserializeAws_restXmlGetOriginRequestPolicyConfigCommand;\nconst deserializeAws_restXmlGetOriginRequestPolicyConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetPublicKeyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetPublicKeyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        PublicKey: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.PublicKey = deserializeAws_restXmlPublicKey(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetPublicKeyCommand = deserializeAws_restXmlGetPublicKeyCommand;\nconst deserializeAws_restXmlGetPublicKeyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchPublicKey\":\n        case \"com.amazonaws.cloudfront#NoSuchPublicKey\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchPublicKeyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetPublicKeyConfigCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetPublicKeyConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        PublicKeyConfig: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.PublicKeyConfig = deserializeAws_restXmlPublicKeyConfig(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetPublicKeyConfigCommand = deserializeAws_restXmlGetPublicKeyConfigCommand;\nconst deserializeAws_restXmlGetPublicKeyConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchPublicKey\":\n        case \"com.amazonaws.cloudfront#NoSuchPublicKey\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchPublicKeyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetRealtimeLogConfigCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetRealtimeLogConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        RealtimeLogConfig: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"RealtimeLogConfig\"] !== undefined) {\n        contents.RealtimeLogConfig = deserializeAws_restXmlRealtimeLogConfig(data[\"RealtimeLogConfig\"], context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetRealtimeLogConfigCommand = deserializeAws_restXmlGetRealtimeLogConfigCommand;\nconst deserializeAws_restXmlGetRealtimeLogConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchRealtimeLogConfig\":\n        case \"com.amazonaws.cloudfront#NoSuchRealtimeLogConfig\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchRealtimeLogConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetResponseHeadersPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetResponseHeadersPolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        ResponseHeadersPolicy: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.ResponseHeadersPolicy = deserializeAws_restXmlResponseHeadersPolicy(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetResponseHeadersPolicyCommand = deserializeAws_restXmlGetResponseHeadersPolicyCommand;\nconst deserializeAws_restXmlGetResponseHeadersPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResponseHeadersPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchResponseHeadersPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResponseHeadersPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetResponseHeadersPolicyConfigCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetResponseHeadersPolicyConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        ResponseHeadersPolicyConfig: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.ResponseHeadersPolicyConfig = deserializeAws_restXmlResponseHeadersPolicyConfig(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetResponseHeadersPolicyConfigCommand = deserializeAws_restXmlGetResponseHeadersPolicyConfigCommand;\nconst deserializeAws_restXmlGetResponseHeadersPolicyConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResponseHeadersPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchResponseHeadersPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResponseHeadersPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetStreamingDistributionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetStreamingDistributionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        StreamingDistribution: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.StreamingDistribution = deserializeAws_restXmlStreamingDistribution(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetStreamingDistributionCommand = deserializeAws_restXmlGetStreamingDistributionCommand;\nconst deserializeAws_restXmlGetStreamingDistributionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchStreamingDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchStreamingDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchStreamingDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetStreamingDistributionConfigCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetStreamingDistributionConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        StreamingDistributionConfig: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.StreamingDistributionConfig = deserializeAws_restXmlStreamingDistributionConfig(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetStreamingDistributionConfigCommand = deserializeAws_restXmlGetStreamingDistributionConfigCommand;\nconst deserializeAws_restXmlGetStreamingDistributionConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchStreamingDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchStreamingDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchStreamingDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListCachePoliciesCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListCachePoliciesCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        CachePolicyList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.CachePolicyList = deserializeAws_restXmlCachePolicyList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListCachePoliciesCommand = deserializeAws_restXmlListCachePoliciesCommand;\nconst deserializeAws_restXmlListCachePoliciesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchCachePolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListCloudFrontOriginAccessIdentitiesCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListCloudFrontOriginAccessIdentitiesCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        CloudFrontOriginAccessIdentityList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.CloudFrontOriginAccessIdentityList = deserializeAws_restXmlCloudFrontOriginAccessIdentityList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListCloudFrontOriginAccessIdentitiesCommand = deserializeAws_restXmlListCloudFrontOriginAccessIdentitiesCommand;\nconst deserializeAws_restXmlListCloudFrontOriginAccessIdentitiesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListConflictingAliasesCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListConflictingAliasesCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ConflictingAliasesList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.ConflictingAliasesList = deserializeAws_restXmlConflictingAliasesList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListConflictingAliasesCommand = deserializeAws_restXmlListConflictingAliasesCommand;\nconst deserializeAws_restXmlListConflictingAliasesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListDistributionsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListDistributionsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        DistributionList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.DistributionList = deserializeAws_restXmlDistributionList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListDistributionsCommand = deserializeAws_restXmlListDistributionsCommand;\nconst deserializeAws_restXmlListDistributionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListDistributionsByCachePolicyIdCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListDistributionsByCachePolicyIdCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        DistributionIdList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.DistributionIdList = deserializeAws_restXmlDistributionIdList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListDistributionsByCachePolicyIdCommand = deserializeAws_restXmlListDistributionsByCachePolicyIdCommand;\nconst deserializeAws_restXmlListDistributionsByCachePolicyIdCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchCachePolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListDistributionsByKeyGroupCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListDistributionsByKeyGroupCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        DistributionIdList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.DistributionIdList = deserializeAws_restXmlDistributionIdList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListDistributionsByKeyGroupCommand = deserializeAws_restXmlListDistributionsByKeyGroupCommand;\nconst deserializeAws_restXmlListDistributionsByKeyGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResource\":\n        case \"com.amazonaws.cloudfront#NoSuchResource\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResourceResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListDistributionsByOriginRequestPolicyIdCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListDistributionsByOriginRequestPolicyIdCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        DistributionIdList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.DistributionIdList = deserializeAws_restXmlDistributionIdList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListDistributionsByOriginRequestPolicyIdCommand = deserializeAws_restXmlListDistributionsByOriginRequestPolicyIdCommand;\nconst deserializeAws_restXmlListDistributionsByOriginRequestPolicyIdCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListDistributionsByRealtimeLogConfigCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListDistributionsByRealtimeLogConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        DistributionList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.DistributionList = deserializeAws_restXmlDistributionList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListDistributionsByRealtimeLogConfigCommand = deserializeAws_restXmlListDistributionsByRealtimeLogConfigCommand;\nconst deserializeAws_restXmlListDistributionsByRealtimeLogConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListDistributionsByResponseHeadersPolicyIdCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListDistributionsByResponseHeadersPolicyIdCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        DistributionIdList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.DistributionIdList = deserializeAws_restXmlDistributionIdList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListDistributionsByResponseHeadersPolicyIdCommand = deserializeAws_restXmlListDistributionsByResponseHeadersPolicyIdCommand;\nconst deserializeAws_restXmlListDistributionsByResponseHeadersPolicyIdCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResponseHeadersPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchResponseHeadersPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResponseHeadersPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListDistributionsByWebACLIdCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListDistributionsByWebACLIdCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        DistributionList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.DistributionList = deserializeAws_restXmlDistributionList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListDistributionsByWebACLIdCommand = deserializeAws_restXmlListDistributionsByWebACLIdCommand;\nconst deserializeAws_restXmlListDistributionsByWebACLIdCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidWebACLId\":\n        case \"com.amazonaws.cloudfront#InvalidWebACLId\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidWebACLIdResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListFieldLevelEncryptionConfigsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListFieldLevelEncryptionConfigsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        FieldLevelEncryptionList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FieldLevelEncryptionList = deserializeAws_restXmlFieldLevelEncryptionList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListFieldLevelEncryptionConfigsCommand = deserializeAws_restXmlListFieldLevelEncryptionConfigsCommand;\nconst deserializeAws_restXmlListFieldLevelEncryptionConfigsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListFieldLevelEncryptionProfilesCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListFieldLevelEncryptionProfilesCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        FieldLevelEncryptionProfileList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FieldLevelEncryptionProfileList = deserializeAws_restXmlFieldLevelEncryptionProfileList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListFieldLevelEncryptionProfilesCommand = deserializeAws_restXmlListFieldLevelEncryptionProfilesCommand;\nconst deserializeAws_restXmlListFieldLevelEncryptionProfilesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListFunctionsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListFunctionsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        FunctionList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FunctionList = deserializeAws_restXmlFunctionList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListFunctionsCommand = deserializeAws_restXmlListFunctionsCommand;\nconst deserializeAws_restXmlListFunctionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnsupportedOperation\":\n        case \"com.amazonaws.cloudfront#UnsupportedOperation\":\n            response = {\n                ...(await deserializeAws_restXmlUnsupportedOperationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListInvalidationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListInvalidationsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        InvalidationList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.InvalidationList = deserializeAws_restXmlInvalidationList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListInvalidationsCommand = deserializeAws_restXmlListInvalidationsCommand;\nconst deserializeAws_restXmlListInvalidationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListKeyGroupsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListKeyGroupsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        KeyGroupList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.KeyGroupList = deserializeAws_restXmlKeyGroupList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListKeyGroupsCommand = deserializeAws_restXmlListKeyGroupsCommand;\nconst deserializeAws_restXmlListKeyGroupsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListOriginRequestPoliciesCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListOriginRequestPoliciesCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        OriginRequestPolicyList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.OriginRequestPolicyList = deserializeAws_restXmlOriginRequestPolicyList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListOriginRequestPoliciesCommand = deserializeAws_restXmlListOriginRequestPoliciesCommand;\nconst deserializeAws_restXmlListOriginRequestPoliciesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListPublicKeysCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListPublicKeysCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        PublicKeyList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.PublicKeyList = deserializeAws_restXmlPublicKeyList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListPublicKeysCommand = deserializeAws_restXmlListPublicKeysCommand;\nconst deserializeAws_restXmlListPublicKeysCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListRealtimeLogConfigsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListRealtimeLogConfigsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        RealtimeLogConfigs: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.RealtimeLogConfigs = deserializeAws_restXmlRealtimeLogConfigs(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListRealtimeLogConfigsCommand = deserializeAws_restXmlListRealtimeLogConfigsCommand;\nconst deserializeAws_restXmlListRealtimeLogConfigsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchRealtimeLogConfig\":\n        case \"com.amazonaws.cloudfront#NoSuchRealtimeLogConfig\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchRealtimeLogConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListResponseHeadersPoliciesCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListResponseHeadersPoliciesCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ResponseHeadersPolicyList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.ResponseHeadersPolicyList = deserializeAws_restXmlResponseHeadersPolicyList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListResponseHeadersPoliciesCommand = deserializeAws_restXmlListResponseHeadersPoliciesCommand;\nconst deserializeAws_restXmlListResponseHeadersPoliciesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResponseHeadersPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchResponseHeadersPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResponseHeadersPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListStreamingDistributionsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListStreamingDistributionsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        StreamingDistributionList: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.StreamingDistributionList = deserializeAws_restXmlStreamingDistributionList(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListStreamingDistributionsCommand = deserializeAws_restXmlListStreamingDistributionsCommand;\nconst deserializeAws_restXmlListStreamingDistributionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListTagsForResourceCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListTagsForResourceCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Tags: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.Tags = deserializeAws_restXmlTags(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListTagsForResourceCommand = deserializeAws_restXmlListTagsForResourceCommand;\nconst deserializeAws_restXmlListTagsForResourceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidTagging\":\n        case \"com.amazonaws.cloudfront#InvalidTagging\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidTaggingResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResource\":\n        case \"com.amazonaws.cloudfront#NoSuchResource\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResourceResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPublishFunctionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPublishFunctionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        FunctionSummary: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FunctionSummary = deserializeAws_restXmlFunctionSummary(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPublishFunctionCommand = deserializeAws_restXmlPublishFunctionCommand;\nconst deserializeAws_restXmlPublishFunctionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFunctionExists\":\n        case \"com.amazonaws.cloudfront#NoSuchFunctionExists\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFunctionExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnsupportedOperation\":\n        case \"com.amazonaws.cloudfront#UnsupportedOperation\":\n            response = {\n                ...(await deserializeAws_restXmlUnsupportedOperationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlTagResourceCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlTagResourceCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlTagResourceCommand = deserializeAws_restXmlTagResourceCommand;\nconst deserializeAws_restXmlTagResourceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidTagging\":\n        case \"com.amazonaws.cloudfront#InvalidTagging\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidTaggingResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResource\":\n        case \"com.amazonaws.cloudfront#NoSuchResource\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResourceResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlTestFunctionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlTestFunctionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        TestResult: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.TestResult = deserializeAws_restXmlTestResult(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlTestFunctionCommand = deserializeAws_restXmlTestFunctionCommand;\nconst deserializeAws_restXmlTestFunctionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFunctionExists\":\n        case \"com.amazonaws.cloudfront#NoSuchFunctionExists\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFunctionExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TestFunctionFailed\":\n        case \"com.amazonaws.cloudfront#TestFunctionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlTestFunctionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnsupportedOperation\":\n        case \"com.amazonaws.cloudfront#UnsupportedOperation\":\n            response = {\n                ...(await deserializeAws_restXmlUnsupportedOperationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUntagResourceCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUntagResourceCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUntagResourceCommand = deserializeAws_restXmlUntagResourceCommand;\nconst deserializeAws_restXmlUntagResourceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidTagging\":\n        case \"com.amazonaws.cloudfront#InvalidTagging\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidTaggingResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResource\":\n        case \"com.amazonaws.cloudfront#NoSuchResource\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResourceResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUpdateCachePolicyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUpdateCachePolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        CachePolicy: undefined,\n        ETag: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.CachePolicy = deserializeAws_restXmlCachePolicy(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUpdateCachePolicyCommand = deserializeAws_restXmlUpdateCachePolicyCommand;\nconst deserializeAws_restXmlUpdateCachePolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"CachePolicyAlreadyExists\":\n        case \"com.amazonaws.cloudfront#CachePolicyAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlCachePolicyAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalUpdate\":\n        case \"com.amazonaws.cloudfront#IllegalUpdate\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalUpdateResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchCachePolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCookiesInCachePolicy\":\n        case \"com.amazonaws.cloudfront#TooManyCookiesInCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCookiesInCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyHeadersInCachePolicy\":\n        case \"com.amazonaws.cloudfront#TooManyHeadersInCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyHeadersInCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyQueryStringsInCachePolicy\":\n        case \"com.amazonaws.cloudfront#TooManyQueryStringsInCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyQueryStringsInCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUpdateCloudFrontOriginAccessIdentityCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUpdateCloudFrontOriginAccessIdentityCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        CloudFrontOriginAccessIdentity: undefined,\n        ETag: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.CloudFrontOriginAccessIdentity = deserializeAws_restXmlCloudFrontOriginAccessIdentity(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUpdateCloudFrontOriginAccessIdentityCommand = deserializeAws_restXmlUpdateCloudFrontOriginAccessIdentityCommand;\nconst deserializeAws_restXmlUpdateCloudFrontOriginAccessIdentityCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalUpdate\":\n        case \"com.amazonaws.cloudfront#IllegalUpdate\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalUpdateResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"MissingBody\":\n        case \"com.amazonaws.cloudfront#MissingBody\":\n            response = {\n                ...(await deserializeAws_restXmlMissingBodyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchCloudFrontOriginAccessIdentity\":\n        case \"com.amazonaws.cloudfront#NoSuchCloudFrontOriginAccessIdentity\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchCloudFrontOriginAccessIdentityResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUpdateDistributionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUpdateDistributionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Distribution: undefined,\n        ETag: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.Distribution = deserializeAws_restXmlDistribution(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUpdateDistributionCommand = deserializeAws_restXmlUpdateDistributionCommand;\nconst deserializeAws_restXmlUpdateDistributionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"CNAMEAlreadyExists\":\n        case \"com.amazonaws.cloudfront#CNAMEAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlCNAMEAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior\":\n        case \"com.amazonaws.cloudfront#IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalFieldLevelEncryptionConfigAssociationWithCacheBehaviorResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalUpdate\":\n        case \"com.amazonaws.cloudfront#IllegalUpdate\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalUpdateResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidDefaultRootObject\":\n        case \"com.amazonaws.cloudfront#InvalidDefaultRootObject\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidDefaultRootObjectResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidErrorCode\":\n        case \"com.amazonaws.cloudfront#InvalidErrorCode\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidErrorCodeResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidForwardCookies\":\n        case \"com.amazonaws.cloudfront#InvalidForwardCookies\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidForwardCookiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidFunctionAssociation\":\n        case \"com.amazonaws.cloudfront#InvalidFunctionAssociation\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidFunctionAssociationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidGeoRestrictionParameter\":\n        case \"com.amazonaws.cloudfront#InvalidGeoRestrictionParameter\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidGeoRestrictionParameterResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidHeadersForS3Origin\":\n        case \"com.amazonaws.cloudfront#InvalidHeadersForS3Origin\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidHeadersForS3OriginResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidLambdaFunctionAssociation\":\n        case \"com.amazonaws.cloudfront#InvalidLambdaFunctionAssociation\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidLambdaFunctionAssociationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidLocationCode\":\n        case \"com.amazonaws.cloudfront#InvalidLocationCode\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidLocationCodeResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidMinimumProtocolVersion\":\n        case \"com.amazonaws.cloudfront#InvalidMinimumProtocolVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidMinimumProtocolVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOriginAccessIdentity\":\n        case \"com.amazonaws.cloudfront#InvalidOriginAccessIdentity\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginAccessIdentityResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOriginKeepaliveTimeout\":\n        case \"com.amazonaws.cloudfront#InvalidOriginKeepaliveTimeout\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginKeepaliveTimeoutResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOriginReadTimeout\":\n        case \"com.amazonaws.cloudfront#InvalidOriginReadTimeout\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginReadTimeoutResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidQueryStringParameters\":\n        case \"com.amazonaws.cloudfront#InvalidQueryStringParameters\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidQueryStringParametersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidRelativePath\":\n        case \"com.amazonaws.cloudfront#InvalidRelativePath\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidRelativePathResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidRequiredProtocol\":\n        case \"com.amazonaws.cloudfront#InvalidRequiredProtocol\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidRequiredProtocolResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidResponseCode\":\n        case \"com.amazonaws.cloudfront#InvalidResponseCode\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidResponseCodeResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidTTLOrder\":\n        case \"com.amazonaws.cloudfront#InvalidTTLOrder\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidTTLOrderResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidViewerCertificate\":\n        case \"com.amazonaws.cloudfront#InvalidViewerCertificate\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidViewerCertificateResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidWebACLId\":\n        case \"com.amazonaws.cloudfront#InvalidWebACLId\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidWebACLIdResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"MissingBody\":\n        case \"com.amazonaws.cloudfront#MissingBody\":\n            response = {\n                ...(await deserializeAws_restXmlMissingBodyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchCachePolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFieldLevelEncryptionConfig\":\n        case \"com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionConfig\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFieldLevelEncryptionConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchOrigin\":\n        case \"com.amazonaws.cloudfront#NoSuchOrigin\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchOriginResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchRealtimeLogConfig\":\n        case \"com.amazonaws.cloudfront#NoSuchRealtimeLogConfig\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchRealtimeLogConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResponseHeadersPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchResponseHeadersPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResponseHeadersPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"RealtimeLogConfigOwnerMismatch\":\n        case \"com.amazonaws.cloudfront#RealtimeLogConfigOwnerMismatch\":\n            response = {\n                ...(await deserializeAws_restXmlRealtimeLogConfigOwnerMismatchResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCacheBehaviors\":\n        case \"com.amazonaws.cloudfront#TooManyCacheBehaviors\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCacheBehaviorsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCertificates\":\n        case \"com.amazonaws.cloudfront#TooManyCertificates\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCertificatesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCookieNamesInWhiteList\":\n        case \"com.amazonaws.cloudfront#TooManyCookieNamesInWhiteList\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCookieNamesInWhiteListResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionCNAMEs\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionCNAMEs\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionCNAMEsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToCachePolicy\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToCachePolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToCachePolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToFieldLevelEncryptionConfig\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToFieldLevelEncryptionConfig\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToFieldLevelEncryptionConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToKeyGroup\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToKeyGroup\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToKeyGroupResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsAssociatedToResponseHeadersPolicy\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsAssociatedToResponseHeadersPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsAssociatedToResponseHeadersPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsWithFunctionAssociations\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsWithFunctionAssociations\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsWithFunctionAssociationsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsWithLambdaAssociations\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsWithLambdaAssociations\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsWithLambdaAssociationsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyDistributionsWithSingleFunctionARN\":\n        case \"com.amazonaws.cloudfront#TooManyDistributionsWithSingleFunctionARN\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyDistributionsWithSingleFunctionARNResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyFunctionAssociations\":\n        case \"com.amazonaws.cloudfront#TooManyFunctionAssociations\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyFunctionAssociationsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyHeadersInForwardedValues\":\n        case \"com.amazonaws.cloudfront#TooManyHeadersInForwardedValues\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyHeadersInForwardedValuesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyKeyGroupsAssociatedToDistribution\":\n        case \"com.amazonaws.cloudfront#TooManyKeyGroupsAssociatedToDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyKeyGroupsAssociatedToDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyLambdaFunctionAssociations\":\n        case \"com.amazonaws.cloudfront#TooManyLambdaFunctionAssociations\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyLambdaFunctionAssociationsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyOriginCustomHeaders\":\n        case \"com.amazonaws.cloudfront#TooManyOriginCustomHeaders\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyOriginCustomHeadersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyOriginGroupsPerDistribution\":\n        case \"com.amazonaws.cloudfront#TooManyOriginGroupsPerDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyOriginGroupsPerDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyOrigins\":\n        case \"com.amazonaws.cloudfront#TooManyOrigins\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyOriginsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyQueryStringParameters\":\n        case \"com.amazonaws.cloudfront#TooManyQueryStringParameters\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyQueryStringParametersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyTrustedSigners\":\n        case \"com.amazonaws.cloudfront#TooManyTrustedSigners\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyTrustedSignersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TrustedKeyGroupDoesNotExist\":\n        case \"com.amazonaws.cloudfront#TrustedKeyGroupDoesNotExist\":\n            response = {\n                ...(await deserializeAws_restXmlTrustedKeyGroupDoesNotExistResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TrustedSignerDoesNotExist\":\n        case \"com.amazonaws.cloudfront#TrustedSignerDoesNotExist\":\n            response = {\n                ...(await deserializeAws_restXmlTrustedSignerDoesNotExistResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUpdateFieldLevelEncryptionConfigCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUpdateFieldLevelEncryptionConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        FieldLevelEncryption: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FieldLevelEncryption = deserializeAws_restXmlFieldLevelEncryption(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUpdateFieldLevelEncryptionConfigCommand = deserializeAws_restXmlUpdateFieldLevelEncryptionConfigCommand;\nconst deserializeAws_restXmlUpdateFieldLevelEncryptionConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalUpdate\":\n        case \"com.amazonaws.cloudfront#IllegalUpdate\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalUpdateResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFieldLevelEncryptionConfig\":\n        case \"com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionConfig\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFieldLevelEncryptionConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFieldLevelEncryptionProfile\":\n        case \"com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionProfile\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFieldLevelEncryptionProfileResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"QueryArgProfileEmpty\":\n        case \"com.amazonaws.cloudfront#QueryArgProfileEmpty\":\n            response = {\n                ...(await deserializeAws_restXmlQueryArgProfileEmptyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyFieldLevelEncryptionContentTypeProfiles\":\n        case \"com.amazonaws.cloudfront#TooManyFieldLevelEncryptionContentTypeProfiles\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyFieldLevelEncryptionContentTypeProfilesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyFieldLevelEncryptionQueryArgProfiles\":\n        case \"com.amazonaws.cloudfront#TooManyFieldLevelEncryptionQueryArgProfiles\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyFieldLevelEncryptionQueryArgProfilesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUpdateFieldLevelEncryptionProfileCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUpdateFieldLevelEncryptionProfileCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        FieldLevelEncryptionProfile: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FieldLevelEncryptionProfile = deserializeAws_restXmlFieldLevelEncryptionProfile(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUpdateFieldLevelEncryptionProfileCommand = deserializeAws_restXmlUpdateFieldLevelEncryptionProfileCommand;\nconst deserializeAws_restXmlUpdateFieldLevelEncryptionProfileCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"FieldLevelEncryptionProfileAlreadyExists\":\n        case \"com.amazonaws.cloudfront#FieldLevelEncryptionProfileAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlFieldLevelEncryptionProfileAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"FieldLevelEncryptionProfileSizeExceeded\":\n        case \"com.amazonaws.cloudfront#FieldLevelEncryptionProfileSizeExceeded\":\n            response = {\n                ...(await deserializeAws_restXmlFieldLevelEncryptionProfileSizeExceededResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalUpdate\":\n        case \"com.amazonaws.cloudfront#IllegalUpdate\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalUpdateResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFieldLevelEncryptionProfile\":\n        case \"com.amazonaws.cloudfront#NoSuchFieldLevelEncryptionProfile\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFieldLevelEncryptionProfileResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchPublicKey\":\n        case \"com.amazonaws.cloudfront#NoSuchPublicKey\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchPublicKeyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyFieldLevelEncryptionEncryptionEntities\":\n        case \"com.amazonaws.cloudfront#TooManyFieldLevelEncryptionEncryptionEntities\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyFieldLevelEncryptionEncryptionEntitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyFieldLevelEncryptionFieldPatterns\":\n        case \"com.amazonaws.cloudfront#TooManyFieldLevelEncryptionFieldPatterns\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyFieldLevelEncryptionFieldPatternsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUpdateFunctionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUpdateFunctionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        FunctionSummary: undefined,\n    };\n    if (output.headers[\"ettag\"] !== undefined) {\n        contents.ETag = output.headers[\"ettag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.FunctionSummary = deserializeAws_restXmlFunctionSummary(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUpdateFunctionCommand = deserializeAws_restXmlUpdateFunctionCommand;\nconst deserializeAws_restXmlUpdateFunctionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"FunctionSizeLimitExceeded\":\n        case \"com.amazonaws.cloudfront#FunctionSizeLimitExceeded\":\n            response = {\n                ...(await deserializeAws_restXmlFunctionSizeLimitExceededResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchFunctionExists\":\n        case \"com.amazonaws.cloudfront#NoSuchFunctionExists\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchFunctionExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnsupportedOperation\":\n        case \"com.amazonaws.cloudfront#UnsupportedOperation\":\n            response = {\n                ...(await deserializeAws_restXmlUnsupportedOperationResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUpdateKeyGroupCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUpdateKeyGroupCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        KeyGroup: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.KeyGroup = deserializeAws_restXmlKeyGroup(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUpdateKeyGroupCommand = deserializeAws_restXmlUpdateKeyGroupCommand;\nconst deserializeAws_restXmlUpdateKeyGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"KeyGroupAlreadyExists\":\n        case \"com.amazonaws.cloudfront#KeyGroupAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlKeyGroupAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResource\":\n        case \"com.amazonaws.cloudfront#NoSuchResource\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResourceResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyPublicKeysInKeyGroup\":\n        case \"com.amazonaws.cloudfront#TooManyPublicKeysInKeyGroup\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyPublicKeysInKeyGroupResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUpdateOriginRequestPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUpdateOriginRequestPolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        OriginRequestPolicy: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.OriginRequestPolicy = deserializeAws_restXmlOriginRequestPolicy(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUpdateOriginRequestPolicyCommand = deserializeAws_restXmlUpdateOriginRequestPolicyCommand;\nconst deserializeAws_restXmlUpdateOriginRequestPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalUpdate\":\n        case \"com.amazonaws.cloudfront#IllegalUpdate\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalUpdateResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"OriginRequestPolicyAlreadyExists\":\n        case \"com.amazonaws.cloudfront#OriginRequestPolicyAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlOriginRequestPolicyAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCookiesInOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#TooManyCookiesInOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCookiesInOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyHeadersInOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#TooManyHeadersInOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyHeadersInOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyQueryStringsInOriginRequestPolicy\":\n        case \"com.amazonaws.cloudfront#TooManyQueryStringsInOriginRequestPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyQueryStringsInOriginRequestPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUpdatePublicKeyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUpdatePublicKeyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        PublicKey: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.PublicKey = deserializeAws_restXmlPublicKey(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUpdatePublicKeyCommand = deserializeAws_restXmlUpdatePublicKeyCommand;\nconst deserializeAws_restXmlUpdatePublicKeyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"CannotChangeImmutablePublicKeyFields\":\n        case \"com.amazonaws.cloudfront#CannotChangeImmutablePublicKeyFields\":\n            response = {\n                ...(await deserializeAws_restXmlCannotChangeImmutablePublicKeyFieldsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalUpdate\":\n        case \"com.amazonaws.cloudfront#IllegalUpdate\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalUpdateResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchPublicKey\":\n        case \"com.amazonaws.cloudfront#NoSuchPublicKey\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchPublicKeyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUpdateRealtimeLogConfigCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUpdateRealtimeLogConfigCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        RealtimeLogConfig: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"RealtimeLogConfig\"] !== undefined) {\n        contents.RealtimeLogConfig = deserializeAws_restXmlRealtimeLogConfig(data[\"RealtimeLogConfig\"], context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUpdateRealtimeLogConfigCommand = deserializeAws_restXmlUpdateRealtimeLogConfigCommand;\nconst deserializeAws_restXmlUpdateRealtimeLogConfigCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchRealtimeLogConfig\":\n        case \"com.amazonaws.cloudfront#NoSuchRealtimeLogConfig\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchRealtimeLogConfigResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUpdateResponseHeadersPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUpdateResponseHeadersPolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        ResponseHeadersPolicy: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.ResponseHeadersPolicy = deserializeAws_restXmlResponseHeadersPolicy(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUpdateResponseHeadersPolicyCommand = deserializeAws_restXmlUpdateResponseHeadersPolicyCommand;\nconst deserializeAws_restXmlUpdateResponseHeadersPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalUpdate\":\n        case \"com.amazonaws.cloudfront#IllegalUpdate\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalUpdateResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchResponseHeadersPolicy\":\n        case \"com.amazonaws.cloudfront#NoSuchResponseHeadersPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchResponseHeadersPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"ResponseHeadersPolicyAlreadyExists\":\n        case \"com.amazonaws.cloudfront#ResponseHeadersPolicyAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlResponseHeadersPolicyAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyCustomHeadersInResponseHeadersPolicy\":\n        case \"com.amazonaws.cloudfront#TooManyCustomHeadersInResponseHeadersPolicy\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyCustomHeadersInResponseHeadersPolicyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUpdateStreamingDistributionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUpdateStreamingDistributionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ETag: undefined,\n        StreamingDistribution: undefined,\n    };\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.StreamingDistribution = deserializeAws_restXmlStreamingDistribution(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUpdateStreamingDistributionCommand = deserializeAws_restXmlUpdateStreamingDistributionCommand;\nconst deserializeAws_restXmlUpdateStreamingDistributionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDenied\":\n        case \"com.amazonaws.cloudfront#AccessDenied\":\n            response = {\n                ...(await deserializeAws_restXmlAccessDeniedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"CNAMEAlreadyExists\":\n        case \"com.amazonaws.cloudfront#CNAMEAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlCNAMEAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IllegalUpdate\":\n        case \"com.amazonaws.cloudfront#IllegalUpdate\":\n            response = {\n                ...(await deserializeAws_restXmlIllegalUpdateResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InconsistentQuantities\":\n        case \"com.amazonaws.cloudfront#InconsistentQuantities\":\n            response = {\n                ...(await deserializeAws_restXmlInconsistentQuantitiesResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidArgument\":\n        case \"com.amazonaws.cloudfront#InvalidArgument\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIfMatchVersion\":\n        case \"com.amazonaws.cloudfront#InvalidIfMatchVersion\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidIfMatchVersionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidOriginAccessIdentity\":\n        case \"com.amazonaws.cloudfront#InvalidOriginAccessIdentity\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidOriginAccessIdentityResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"MissingBody\":\n        case \"com.amazonaws.cloudfront#MissingBody\":\n            response = {\n                ...(await deserializeAws_restXmlMissingBodyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchStreamingDistribution\":\n        case \"com.amazonaws.cloudfront#NoSuchStreamingDistribution\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchStreamingDistributionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PreconditionFailed\":\n        case \"com.amazonaws.cloudfront#PreconditionFailed\":\n            response = {\n                ...(await deserializeAws_restXmlPreconditionFailedResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyStreamingDistributionCNAMEs\":\n        case \"com.amazonaws.cloudfront#TooManyStreamingDistributionCNAMEs\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyStreamingDistributionCNAMEsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyTrustedSigners\":\n        case \"com.amazonaws.cloudfront#TooManyTrustedSigners\":\n            response = {\n                ...(await deserializeAws_restXmlTooManyTrustedSignersResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TrustedSignerDoesNotExist\":\n        case \"com.amazonaws.cloudfront#TrustedSignerDoesNotExist\":\n            response = {\n                ...(await deserializeAws_restXmlTrustedSignerDoesNotExistResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlAccessDeniedResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"AccessDenied\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlBatchTooLargeResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"BatchTooLarge\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCachePolicyAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"CachePolicyAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCachePolicyInUseResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"CachePolicyInUse\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCannotChangeImmutablePublicKeyFieldsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"CannotChangeImmutablePublicKeyFields\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCloudFrontOriginAccessIdentityAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"CloudFrontOriginAccessIdentityAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCloudFrontOriginAccessIdentityInUseResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"CloudFrontOriginAccessIdentityInUse\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCNAMEAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"CNAMEAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDistributionAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"DistributionAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDistributionNotDisabledResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"DistributionNotDisabled\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFieldLevelEncryptionConfigAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"FieldLevelEncryptionConfigAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFieldLevelEncryptionConfigInUseResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"FieldLevelEncryptionConfigInUse\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFieldLevelEncryptionProfileAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"FieldLevelEncryptionProfileAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFieldLevelEncryptionProfileInUseResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"FieldLevelEncryptionProfileInUse\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFieldLevelEncryptionProfileSizeExceededResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"FieldLevelEncryptionProfileSizeExceeded\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFunctionAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"FunctionAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFunctionInUseResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"FunctionInUse\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFunctionSizeLimitExceededResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"FunctionSizeLimitExceeded\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlIllegalDeleteResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"IllegalDelete\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlIllegalFieldLevelEncryptionConfigAssociationWithCacheBehaviorResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"IllegalFieldLevelEncryptionConfigAssociationWithCacheBehavior\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlIllegalUpdateResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"IllegalUpdate\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInconsistentQuantitiesResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InconsistentQuantities\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidArgumentResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidArgument\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidDefaultRootObjectResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidDefaultRootObject\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidErrorCodeResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidErrorCode\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidForwardCookiesResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidForwardCookies\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidFunctionAssociationResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidFunctionAssociation\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidGeoRestrictionParameterResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidGeoRestrictionParameter\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidHeadersForS3OriginResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidHeadersForS3Origin\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidIfMatchVersionResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidIfMatchVersion\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidLambdaFunctionAssociationResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidLambdaFunctionAssociation\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidLocationCodeResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidLocationCode\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidMinimumProtocolVersionResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidMinimumProtocolVersion\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidOriginResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidOrigin\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidOriginAccessIdentityResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidOriginAccessIdentity\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidOriginKeepaliveTimeoutResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidOriginKeepaliveTimeout\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidOriginReadTimeoutResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidOriginReadTimeout\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidProtocolSettingsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidProtocolSettings\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidQueryStringParametersResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidQueryStringParameters\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidRelativePathResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidRelativePath\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidRequiredProtocolResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidRequiredProtocol\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidResponseCodeResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidResponseCode\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidTaggingResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidTagging\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidTTLOrderResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidTTLOrder\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidViewerCertificateResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidViewerCertificate\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidWebACLIdResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidWebACLId\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlKeyGroupAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"KeyGroupAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMissingBodyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"MissingBody\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchCachePolicyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchCachePolicy\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchCloudFrontOriginAccessIdentityResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchCloudFrontOriginAccessIdentity\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchDistributionResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchDistribution\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchFieldLevelEncryptionConfigResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchFieldLevelEncryptionConfig\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchFieldLevelEncryptionProfileResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchFieldLevelEncryptionProfile\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchFunctionExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchFunctionExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchInvalidationResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchInvalidation\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchOriginResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchOrigin\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchOriginRequestPolicyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchOriginRequestPolicy\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchPublicKeyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchPublicKey\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchRealtimeLogConfigResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchRealtimeLogConfig\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchResourceResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchResource\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchResponseHeadersPolicyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchResponseHeadersPolicy\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchStreamingDistributionResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchStreamingDistribution\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginRequestPolicyAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"OriginRequestPolicyAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginRequestPolicyInUseResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"OriginRequestPolicyInUse\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlPreconditionFailedResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"PreconditionFailed\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlPublicKeyAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"PublicKeyAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlPublicKeyInUseResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"PublicKeyInUse\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlQueryArgProfileEmptyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"QueryArgProfileEmpty\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRealtimeLogConfigAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"RealtimeLogConfigAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRealtimeLogConfigInUseResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"RealtimeLogConfigInUse\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRealtimeLogConfigOwnerMismatchResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"RealtimeLogConfigOwnerMismatch\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResourceInUseResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"ResourceInUse\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"ResponseHeadersPolicyAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyInUseResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"ResponseHeadersPolicyInUse\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlStreamingDistributionAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"StreamingDistributionAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlStreamingDistributionNotDisabledResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"StreamingDistributionNotDisabled\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTestFunctionFailedResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TestFunctionFailed\",\n        $fault: \"server\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyCacheBehaviorsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyCacheBehaviors\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyCachePoliciesResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyCachePolicies\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyCertificatesResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyCertificates\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyCloudFrontOriginAccessIdentitiesResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyCloudFrontOriginAccessIdentities\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyCookieNamesInWhiteListResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyCookieNamesInWhiteList\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyCookiesInCachePolicyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyCookiesInCachePolicy\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyCookiesInOriginRequestPolicyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyCookiesInOriginRequestPolicy\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyCustomHeadersInResponseHeadersPolicyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyCustomHeadersInResponseHeadersPolicy\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyDistributionCNAMEsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyDistributionCNAMEs\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyDistributionsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyDistributions\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyDistributionsAssociatedToCachePolicyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyDistributionsAssociatedToCachePolicy\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyDistributionsAssociatedToFieldLevelEncryptionConfigResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyDistributionsAssociatedToFieldLevelEncryptionConfig\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyDistributionsAssociatedToKeyGroupResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyDistributionsAssociatedToKeyGroup\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyDistributionsAssociatedToOriginRequestPolicyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyDistributionsAssociatedToOriginRequestPolicy\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyDistributionsAssociatedToResponseHeadersPolicyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyDistributionsAssociatedToResponseHeadersPolicy\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyDistributionsWithFunctionAssociationsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyDistributionsWithFunctionAssociations\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyDistributionsWithLambdaAssociationsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyDistributionsWithLambdaAssociations\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyDistributionsWithSingleFunctionARNResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyDistributionsWithSingleFunctionARN\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyFieldLevelEncryptionConfigsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyFieldLevelEncryptionConfigs\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyFieldLevelEncryptionContentTypeProfilesResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyFieldLevelEncryptionContentTypeProfiles\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyFieldLevelEncryptionEncryptionEntitiesResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyFieldLevelEncryptionEncryptionEntities\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyFieldLevelEncryptionFieldPatternsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyFieldLevelEncryptionFieldPatterns\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyFieldLevelEncryptionProfilesResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyFieldLevelEncryptionProfiles\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyFieldLevelEncryptionQueryArgProfilesResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyFieldLevelEncryptionQueryArgProfiles\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyFunctionAssociationsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyFunctionAssociations\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyFunctionsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyFunctions\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyHeadersInCachePolicyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyHeadersInCachePolicy\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyHeadersInForwardedValuesResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyHeadersInForwardedValues\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyHeadersInOriginRequestPolicyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyHeadersInOriginRequestPolicy\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyInvalidationsInProgressResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyInvalidationsInProgress\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyKeyGroupsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyKeyGroups\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyKeyGroupsAssociatedToDistributionResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyKeyGroupsAssociatedToDistribution\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyLambdaFunctionAssociationsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyLambdaFunctionAssociations\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyOriginCustomHeadersResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyOriginCustomHeaders\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyOriginGroupsPerDistributionResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyOriginGroupsPerDistribution\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyOriginRequestPoliciesResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyOriginRequestPolicies\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyOriginsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyOrigins\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyPublicKeysResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyPublicKeys\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyPublicKeysInKeyGroupResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyPublicKeysInKeyGroup\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyQueryStringParametersResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyQueryStringParameters\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyQueryStringsInCachePolicyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyQueryStringsInCachePolicy\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyQueryStringsInOriginRequestPolicyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyQueryStringsInOriginRequestPolicy\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyRealtimeLogConfigsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyRealtimeLogConfigs\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyResponseHeadersPoliciesResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyResponseHeadersPolicies\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyStreamingDistributionCNAMEsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyStreamingDistributionCNAMEs\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyStreamingDistributionsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyStreamingDistributions\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTooManyTrustedSignersResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyTrustedSigners\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTrustedKeyGroupDoesNotExistResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TrustedKeyGroupDoesNotExist\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTrustedSignerDoesNotExistResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TrustedSignerDoesNotExist\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlUnsupportedOperationResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"UnsupportedOperation\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined,\n    };\n    const data = parsedOutput.body.Error;\n    if (data[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(data[\"Message\"]);\n    }\n    return contents;\n};\nconst serializeAws_restXmlAccessControlAllowHeadersList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"Header\");\n    });\n};\nconst serializeAws_restXmlAccessControlAllowMethodsList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyAccessControlAllowMethodsValues\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"Method\");\n    });\n};\nconst serializeAws_restXmlAccessControlAllowOriginsList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"Origin\");\n    });\n};\nconst serializeAws_restXmlAccessControlExposeHeadersList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"Header\");\n    });\n};\nconst serializeAws_restXmlAliases = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Aliases\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlAliasList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAliasList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"CNAME\");\n    });\n};\nconst serializeAws_restXmlAllowedMethods = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"AllowedMethods\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlMethodsList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.CachedMethods !== undefined && input.CachedMethods !== null) {\n        const node = serializeAws_restXmlCachedMethods(input.CachedMethods, context).withName(\"CachedMethods\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAwsAccountNumberList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"AwsAccountNumber\");\n    });\n};\nconst serializeAws_restXmlCacheBehavior = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CacheBehavior\");\n    if (input.PathPattern !== undefined && input.PathPattern !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.PathPattern)).withName(\"PathPattern\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.TargetOriginId !== undefined && input.TargetOriginId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.TargetOriginId)).withName(\"TargetOriginId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.TrustedSigners !== undefined && input.TrustedSigners !== null) {\n        const node = serializeAws_restXmlTrustedSigners(input.TrustedSigners, context).withName(\"TrustedSigners\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.TrustedKeyGroups !== undefined && input.TrustedKeyGroups !== null) {\n        const node = serializeAws_restXmlTrustedKeyGroups(input.TrustedKeyGroups, context).withName(\"TrustedKeyGroups\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ViewerProtocolPolicy !== undefined && input.ViewerProtocolPolicy !== null) {\n        const node = new xml_builder_1.XmlNode(\"ViewerProtocolPolicy\")\n            .addChildNode(new xml_builder_1.XmlText(input.ViewerProtocolPolicy))\n            .withName(\"ViewerProtocolPolicy\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AllowedMethods !== undefined && input.AllowedMethods !== null) {\n        const node = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context).withName(\"AllowedMethods\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SmoothStreaming !== undefined && input.SmoothStreaming !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.SmoothStreaming)))\n            .withName(\"SmoothStreaming\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Compress !== undefined && input.Compress !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Compress))).withName(\"Compress\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.LambdaFunctionAssociations !== undefined && input.LambdaFunctionAssociations !== null) {\n        const node = serializeAws_restXmlLambdaFunctionAssociations(input.LambdaFunctionAssociations, context).withName(\"LambdaFunctionAssociations\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FunctionAssociations !== undefined && input.FunctionAssociations !== null) {\n        const node = serializeAws_restXmlFunctionAssociations(input.FunctionAssociations, context).withName(\"FunctionAssociations\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FieldLevelEncryptionId !== undefined && input.FieldLevelEncryptionId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.FieldLevelEncryptionId))\n            .withName(\"FieldLevelEncryptionId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RealtimeLogConfigArn !== undefined && input.RealtimeLogConfigArn !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.RealtimeLogConfigArn))\n            .withName(\"RealtimeLogConfigArn\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CachePolicyId !== undefined && input.CachePolicyId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.CachePolicyId)).withName(\"CachePolicyId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OriginRequestPolicyId !== undefined && input.OriginRequestPolicyId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.OriginRequestPolicyId))\n            .withName(\"OriginRequestPolicyId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ResponseHeadersPolicyId !== undefined && input.ResponseHeadersPolicyId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.ResponseHeadersPolicyId))\n            .withName(\"ResponseHeadersPolicyId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ForwardedValues !== undefined && input.ForwardedValues !== null) {\n        const node = serializeAws_restXmlForwardedValues(input.ForwardedValues, context).withName(\"ForwardedValues\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.MinTTL !== undefined && input.MinTTL !== null) {\n        const node = new xml_builder_1.XmlNode(\"long\").addChildNode(new xml_builder_1.XmlText(String(input.MinTTL))).withName(\"MinTTL\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.DefaultTTL !== undefined && input.DefaultTTL !== null) {\n        const node = new xml_builder_1.XmlNode(\"long\").addChildNode(new xml_builder_1.XmlText(String(input.DefaultTTL))).withName(\"DefaultTTL\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.MaxTTL !== undefined && input.MaxTTL !== null) {\n        const node = new xml_builder_1.XmlNode(\"long\").addChildNode(new xml_builder_1.XmlText(String(input.MaxTTL))).withName(\"MaxTTL\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCacheBehaviorList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlCacheBehavior(entry, context);\n        return node.withName(\"CacheBehavior\");\n    });\n};\nconst serializeAws_restXmlCacheBehaviors = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CacheBehaviors\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlCacheBehaviorList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCachedMethods = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CachedMethods\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlMethodsList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCachePolicyConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CachePolicyConfig\");\n    if (input.Comment !== undefined && input.Comment !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Comment)).withName(\"Comment\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Name !== undefined && input.Name !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Name)).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.DefaultTTL !== undefined && input.DefaultTTL !== null) {\n        const node = new xml_builder_1.XmlNode(\"long\").addChildNode(new xml_builder_1.XmlText(String(input.DefaultTTL))).withName(\"DefaultTTL\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.MaxTTL !== undefined && input.MaxTTL !== null) {\n        const node = new xml_builder_1.XmlNode(\"long\").addChildNode(new xml_builder_1.XmlText(String(input.MaxTTL))).withName(\"MaxTTL\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.MinTTL !== undefined && input.MinTTL !== null) {\n        const node = new xml_builder_1.XmlNode(\"long\").addChildNode(new xml_builder_1.XmlText(String(input.MinTTL))).withName(\"MinTTL\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ParametersInCacheKeyAndForwardedToOrigin !== undefined &&\n        input.ParametersInCacheKeyAndForwardedToOrigin !== null) {\n        const node = serializeAws_restXmlParametersInCacheKeyAndForwardedToOrigin(input.ParametersInCacheKeyAndForwardedToOrigin, context).withName(\"ParametersInCacheKeyAndForwardedToOrigin\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCachePolicyCookiesConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CachePolicyCookiesConfig\");\n    if (input.CookieBehavior !== undefined && input.CookieBehavior !== null) {\n        const node = new xml_builder_1.XmlNode(\"CachePolicyCookieBehavior\")\n            .addChildNode(new xml_builder_1.XmlText(input.CookieBehavior))\n            .withName(\"CookieBehavior\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Cookies !== undefined && input.Cookies !== null) {\n        const node = serializeAws_restXmlCookieNames(input.Cookies, context).withName(\"Cookies\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCachePolicyHeadersConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CachePolicyHeadersConfig\");\n    if (input.HeaderBehavior !== undefined && input.HeaderBehavior !== null) {\n        const node = new xml_builder_1.XmlNode(\"CachePolicyHeaderBehavior\")\n            .addChildNode(new xml_builder_1.XmlText(input.HeaderBehavior))\n            .withName(\"HeaderBehavior\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Headers !== undefined && input.Headers !== null) {\n        const node = serializeAws_restXmlHeaders(input.Headers, context).withName(\"Headers\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCachePolicyQueryStringsConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CachePolicyQueryStringsConfig\");\n    if (input.QueryStringBehavior !== undefined && input.QueryStringBehavior !== null) {\n        const node = new xml_builder_1.XmlNode(\"CachePolicyQueryStringBehavior\")\n            .addChildNode(new xml_builder_1.XmlText(input.QueryStringBehavior))\n            .withName(\"QueryStringBehavior\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QueryStrings !== undefined && input.QueryStrings !== null) {\n        const node = serializeAws_restXmlQueryStringNames(input.QueryStrings, context).withName(\"QueryStrings\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCloudFrontOriginAccessIdentityConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CloudFrontOriginAccessIdentityConfig\");\n    if (input.CallerReference !== undefined && input.CallerReference !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.CallerReference)).withName(\"CallerReference\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Comment !== undefined && input.Comment !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Comment)).withName(\"Comment\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlContentTypeProfile = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ContentTypeProfile\");\n    if (input.Format !== undefined && input.Format !== null) {\n        const node = new xml_builder_1.XmlNode(\"Format\").addChildNode(new xml_builder_1.XmlText(input.Format)).withName(\"Format\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ProfileId !== undefined && input.ProfileId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.ProfileId)).withName(\"ProfileId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ContentType !== undefined && input.ContentType !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.ContentType)).withName(\"ContentType\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlContentTypeProfileConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ContentTypeProfileConfig\");\n    if (input.ForwardWhenContentTypeIsUnknown !== undefined && input.ForwardWhenContentTypeIsUnknown !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.ForwardWhenContentTypeIsUnknown)))\n            .withName(\"ForwardWhenContentTypeIsUnknown\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ContentTypeProfiles !== undefined && input.ContentTypeProfiles !== null) {\n        const node = serializeAws_restXmlContentTypeProfiles(input.ContentTypeProfiles, context).withName(\"ContentTypeProfiles\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlContentTypeProfileList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlContentTypeProfile(entry, context);\n        return node.withName(\"ContentTypeProfile\");\n    });\n};\nconst serializeAws_restXmlContentTypeProfiles = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ContentTypeProfiles\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlContentTypeProfileList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCookieNameList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"Name\");\n    });\n};\nconst serializeAws_restXmlCookieNames = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CookieNames\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlCookieNameList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCookiePreference = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CookiePreference\");\n    if (input.Forward !== undefined && input.Forward !== null) {\n        const node = new xml_builder_1.XmlNode(\"ItemSelection\").addChildNode(new xml_builder_1.XmlText(input.Forward)).withName(\"Forward\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.WhitelistedNames !== undefined && input.WhitelistedNames !== null) {\n        const node = serializeAws_restXmlCookieNames(input.WhitelistedNames, context).withName(\"WhitelistedNames\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCustomErrorResponse = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CustomErrorResponse\");\n    if (input.ErrorCode !== undefined && input.ErrorCode !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.ErrorCode))).withName(\"ErrorCode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ResponsePagePath !== undefined && input.ResponsePagePath !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.ResponsePagePath))\n            .withName(\"ResponsePagePath\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ResponseCode !== undefined && input.ResponseCode !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.ResponseCode)).withName(\"ResponseCode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ErrorCachingMinTTL !== undefined && input.ErrorCachingMinTTL !== null) {\n        const node = new xml_builder_1.XmlNode(\"long\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.ErrorCachingMinTTL)))\n            .withName(\"ErrorCachingMinTTL\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCustomErrorResponseList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlCustomErrorResponse(entry, context);\n        return node.withName(\"CustomErrorResponse\");\n    });\n};\nconst serializeAws_restXmlCustomErrorResponses = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CustomErrorResponses\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlCustomErrorResponseList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCustomHeaders = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CustomHeaders\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlOriginCustomHeadersList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCustomOriginConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CustomOriginConfig\");\n    if (input.HTTPPort !== undefined && input.HTTPPort !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.HTTPPort))).withName(\"HTTPPort\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.HTTPSPort !== undefined && input.HTTPSPort !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.HTTPSPort))).withName(\"HTTPSPort\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OriginProtocolPolicy !== undefined && input.OriginProtocolPolicy !== null) {\n        const node = new xml_builder_1.XmlNode(\"OriginProtocolPolicy\")\n            .addChildNode(new xml_builder_1.XmlText(input.OriginProtocolPolicy))\n            .withName(\"OriginProtocolPolicy\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OriginSslProtocols !== undefined && input.OriginSslProtocols !== null) {\n        const node = serializeAws_restXmlOriginSslProtocols(input.OriginSslProtocols, context).withName(\"OriginSslProtocols\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OriginReadTimeout !== undefined && input.OriginReadTimeout !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.OriginReadTimeout)))\n            .withName(\"OriginReadTimeout\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OriginKeepaliveTimeout !== undefined && input.OriginKeepaliveTimeout !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.OriginKeepaliveTimeout)))\n            .withName(\"OriginKeepaliveTimeout\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDefaultCacheBehavior = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"DefaultCacheBehavior\");\n    if (input.TargetOriginId !== undefined && input.TargetOriginId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.TargetOriginId)).withName(\"TargetOriginId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.TrustedSigners !== undefined && input.TrustedSigners !== null) {\n        const node = serializeAws_restXmlTrustedSigners(input.TrustedSigners, context).withName(\"TrustedSigners\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.TrustedKeyGroups !== undefined && input.TrustedKeyGroups !== null) {\n        const node = serializeAws_restXmlTrustedKeyGroups(input.TrustedKeyGroups, context).withName(\"TrustedKeyGroups\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ViewerProtocolPolicy !== undefined && input.ViewerProtocolPolicy !== null) {\n        const node = new xml_builder_1.XmlNode(\"ViewerProtocolPolicy\")\n            .addChildNode(new xml_builder_1.XmlText(input.ViewerProtocolPolicy))\n            .withName(\"ViewerProtocolPolicy\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AllowedMethods !== undefined && input.AllowedMethods !== null) {\n        const node = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context).withName(\"AllowedMethods\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SmoothStreaming !== undefined && input.SmoothStreaming !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.SmoothStreaming)))\n            .withName(\"SmoothStreaming\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Compress !== undefined && input.Compress !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Compress))).withName(\"Compress\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.LambdaFunctionAssociations !== undefined && input.LambdaFunctionAssociations !== null) {\n        const node = serializeAws_restXmlLambdaFunctionAssociations(input.LambdaFunctionAssociations, context).withName(\"LambdaFunctionAssociations\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FunctionAssociations !== undefined && input.FunctionAssociations !== null) {\n        const node = serializeAws_restXmlFunctionAssociations(input.FunctionAssociations, context).withName(\"FunctionAssociations\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FieldLevelEncryptionId !== undefined && input.FieldLevelEncryptionId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.FieldLevelEncryptionId))\n            .withName(\"FieldLevelEncryptionId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RealtimeLogConfigArn !== undefined && input.RealtimeLogConfigArn !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.RealtimeLogConfigArn))\n            .withName(\"RealtimeLogConfigArn\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CachePolicyId !== undefined && input.CachePolicyId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.CachePolicyId)).withName(\"CachePolicyId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OriginRequestPolicyId !== undefined && input.OriginRequestPolicyId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.OriginRequestPolicyId))\n            .withName(\"OriginRequestPolicyId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ResponseHeadersPolicyId !== undefined && input.ResponseHeadersPolicyId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.ResponseHeadersPolicyId))\n            .withName(\"ResponseHeadersPolicyId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ForwardedValues !== undefined && input.ForwardedValues !== null) {\n        const node = serializeAws_restXmlForwardedValues(input.ForwardedValues, context).withName(\"ForwardedValues\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.MinTTL !== undefined && input.MinTTL !== null) {\n        const node = new xml_builder_1.XmlNode(\"long\").addChildNode(new xml_builder_1.XmlText(String(input.MinTTL))).withName(\"MinTTL\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.DefaultTTL !== undefined && input.DefaultTTL !== null) {\n        const node = new xml_builder_1.XmlNode(\"long\").addChildNode(new xml_builder_1.XmlText(String(input.DefaultTTL))).withName(\"DefaultTTL\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.MaxTTL !== undefined && input.MaxTTL !== null) {\n        const node = new xml_builder_1.XmlNode(\"long\").addChildNode(new xml_builder_1.XmlText(String(input.MaxTTL))).withName(\"MaxTTL\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDistributionConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"DistributionConfig\");\n    if (input.CallerReference !== undefined && input.CallerReference !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.CallerReference)).withName(\"CallerReference\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Aliases !== undefined && input.Aliases !== null) {\n        const node = serializeAws_restXmlAliases(input.Aliases, context).withName(\"Aliases\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.DefaultRootObject !== undefined && input.DefaultRootObject !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.DefaultRootObject))\n            .withName(\"DefaultRootObject\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Origins !== undefined && input.Origins !== null) {\n        const node = serializeAws_restXmlOrigins(input.Origins, context).withName(\"Origins\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OriginGroups !== undefined && input.OriginGroups !== null) {\n        const node = serializeAws_restXmlOriginGroups(input.OriginGroups, context).withName(\"OriginGroups\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.DefaultCacheBehavior !== undefined && input.DefaultCacheBehavior !== null) {\n        const node = serializeAws_restXmlDefaultCacheBehavior(input.DefaultCacheBehavior, context).withName(\"DefaultCacheBehavior\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CacheBehaviors !== undefined && input.CacheBehaviors !== null) {\n        const node = serializeAws_restXmlCacheBehaviors(input.CacheBehaviors, context).withName(\"CacheBehaviors\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CustomErrorResponses !== undefined && input.CustomErrorResponses !== null) {\n        const node = serializeAws_restXmlCustomErrorResponses(input.CustomErrorResponses, context).withName(\"CustomErrorResponses\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Comment !== undefined && input.Comment !== null) {\n        const node = new xml_builder_1.XmlNode(\"CommentType\").addChildNode(new xml_builder_1.XmlText(input.Comment)).withName(\"Comment\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Logging !== undefined && input.Logging !== null) {\n        const node = serializeAws_restXmlLoggingConfig(input.Logging, context).withName(\"Logging\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.PriceClass !== undefined && input.PriceClass !== null) {\n        const node = new xml_builder_1.XmlNode(\"PriceClass\").addChildNode(new xml_builder_1.XmlText(input.PriceClass)).withName(\"PriceClass\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Enabled !== undefined && input.Enabled !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Enabled))).withName(\"Enabled\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ViewerCertificate !== undefined && input.ViewerCertificate !== null) {\n        const node = serializeAws_restXmlViewerCertificate(input.ViewerCertificate, context).withName(\"ViewerCertificate\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Restrictions !== undefined && input.Restrictions !== null) {\n        const node = serializeAws_restXmlRestrictions(input.Restrictions, context).withName(\"Restrictions\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.WebACLId !== undefined && input.WebACLId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.WebACLId)).withName(\"WebACLId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.HttpVersion !== undefined && input.HttpVersion !== null) {\n        const node = new xml_builder_1.XmlNode(\"HttpVersion\").addChildNode(new xml_builder_1.XmlText(input.HttpVersion)).withName(\"HttpVersion\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IsIPV6Enabled !== undefined && input.IsIPV6Enabled !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.IsIPV6Enabled)))\n            .withName(\"IsIPV6Enabled\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDistributionConfigWithTags = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"DistributionConfigWithTags\");\n    if (input.DistributionConfig !== undefined && input.DistributionConfig !== null) {\n        const node = serializeAws_restXmlDistributionConfig(input.DistributionConfig, context).withName(\"DistributionConfig\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags !== undefined && input.Tags !== null) {\n        const node = serializeAws_restXmlTags(input.Tags, context).withName(\"Tags\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlEncryptionEntities = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"EncryptionEntities\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlEncryptionEntityList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlEncryptionEntity = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"EncryptionEntity\");\n    if (input.PublicKeyId !== undefined && input.PublicKeyId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.PublicKeyId)).withName(\"PublicKeyId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ProviderId !== undefined && input.ProviderId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.ProviderId)).withName(\"ProviderId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FieldPatterns !== undefined && input.FieldPatterns !== null) {\n        const node = serializeAws_restXmlFieldPatterns(input.FieldPatterns, context).withName(\"FieldPatterns\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlEncryptionEntityList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlEncryptionEntity(entry, context);\n        return node.withName(\"EncryptionEntity\");\n    });\n};\nconst serializeAws_restXmlEndPoint = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"EndPoint\");\n    if (input.StreamType !== undefined && input.StreamType !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.StreamType)).withName(\"StreamType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KinesisStreamConfig !== undefined && input.KinesisStreamConfig !== null) {\n        const node = serializeAws_restXmlKinesisStreamConfig(input.KinesisStreamConfig, context).withName(\"KinesisStreamConfig\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlEndPointList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlEndPoint(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlFieldLevelEncryptionConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"FieldLevelEncryptionConfig\");\n    if (input.CallerReference !== undefined && input.CallerReference !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.CallerReference)).withName(\"CallerReference\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Comment !== undefined && input.Comment !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Comment)).withName(\"Comment\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QueryArgProfileConfig !== undefined && input.QueryArgProfileConfig !== null) {\n        const node = serializeAws_restXmlQueryArgProfileConfig(input.QueryArgProfileConfig, context).withName(\"QueryArgProfileConfig\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ContentTypeProfileConfig !== undefined && input.ContentTypeProfileConfig !== null) {\n        const node = serializeAws_restXmlContentTypeProfileConfig(input.ContentTypeProfileConfig, context).withName(\"ContentTypeProfileConfig\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlFieldLevelEncryptionProfileConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"FieldLevelEncryptionProfileConfig\");\n    if (input.Name !== undefined && input.Name !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Name)).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CallerReference !== undefined && input.CallerReference !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.CallerReference)).withName(\"CallerReference\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Comment !== undefined && input.Comment !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Comment)).withName(\"Comment\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EncryptionEntities !== undefined && input.EncryptionEntities !== null) {\n        const node = serializeAws_restXmlEncryptionEntities(input.EncryptionEntities, context).withName(\"EncryptionEntities\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlFieldList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"Field\");\n    });\n};\nconst serializeAws_restXmlFieldPatternList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"FieldPattern\");\n    });\n};\nconst serializeAws_restXmlFieldPatterns = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"FieldPatterns\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlFieldPatternList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlForwardedValues = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ForwardedValues\");\n    if (input.QueryString !== undefined && input.QueryString !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.QueryString)))\n            .withName(\"QueryString\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Cookies !== undefined && input.Cookies !== null) {\n        const node = serializeAws_restXmlCookiePreference(input.Cookies, context).withName(\"Cookies\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Headers !== undefined && input.Headers !== null) {\n        const node = serializeAws_restXmlHeaders(input.Headers, context).withName(\"Headers\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QueryStringCacheKeys !== undefined && input.QueryStringCacheKeys !== null) {\n        const node = serializeAws_restXmlQueryStringCacheKeys(input.QueryStringCacheKeys, context).withName(\"QueryStringCacheKeys\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlFunctionAssociation = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"FunctionAssociation\");\n    if (input.FunctionARN !== undefined && input.FunctionARN !== null) {\n        const node = new xml_builder_1.XmlNode(\"FunctionARN\").addChildNode(new xml_builder_1.XmlText(input.FunctionARN)).withName(\"FunctionARN\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EventType !== undefined && input.EventType !== null) {\n        const node = new xml_builder_1.XmlNode(\"EventType\").addChildNode(new xml_builder_1.XmlText(input.EventType)).withName(\"EventType\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlFunctionAssociationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlFunctionAssociation(entry, context);\n        return node.withName(\"FunctionAssociation\");\n    });\n};\nconst serializeAws_restXmlFunctionAssociations = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"FunctionAssociations\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlFunctionAssociationList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlFunctionConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"FunctionConfig\");\n    if (input.Comment !== undefined && input.Comment !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Comment)).withName(\"Comment\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Runtime !== undefined && input.Runtime !== null) {\n        const node = new xml_builder_1.XmlNode(\"FunctionRuntime\").addChildNode(new xml_builder_1.XmlText(input.Runtime)).withName(\"Runtime\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlGeoRestriction = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"GeoRestriction\");\n    if (input.RestrictionType !== undefined && input.RestrictionType !== null) {\n        const node = new xml_builder_1.XmlNode(\"GeoRestrictionType\")\n            .addChildNode(new xml_builder_1.XmlText(input.RestrictionType))\n            .withName(\"RestrictionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlLocationList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlHeaderList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"Name\");\n    });\n};\nconst serializeAws_restXmlHeaders = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Headers\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlHeaderList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInvalidationBatch = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"InvalidationBatch\");\n    if (input.Paths !== undefined && input.Paths !== null) {\n        const node = serializeAws_restXmlPaths(input.Paths, context).withName(\"Paths\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CallerReference !== undefined && input.CallerReference !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.CallerReference)).withName(\"CallerReference\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlKeyGroupConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"KeyGroupConfig\");\n    if (input.Name !== undefined && input.Name !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Name)).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlPublicKeyIdList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Comment !== undefined && input.Comment !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Comment)).withName(\"Comment\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlKinesisStreamConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"KinesisStreamConfig\");\n    if (input.RoleARN !== undefined && input.RoleARN !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.RoleARN)).withName(\"RoleARN\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StreamARN !== undefined && input.StreamARN !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.StreamARN)).withName(\"StreamARN\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLambdaFunctionAssociation = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"LambdaFunctionAssociation\");\n    if (input.LambdaFunctionARN !== undefined && input.LambdaFunctionARN !== null) {\n        const node = new xml_builder_1.XmlNode(\"LambdaFunctionARN\")\n            .addChildNode(new xml_builder_1.XmlText(input.LambdaFunctionARN))\n            .withName(\"LambdaFunctionARN\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EventType !== undefined && input.EventType !== null) {\n        const node = new xml_builder_1.XmlNode(\"EventType\").addChildNode(new xml_builder_1.XmlText(input.EventType)).withName(\"EventType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IncludeBody !== undefined && input.IncludeBody !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.IncludeBody)))\n            .withName(\"IncludeBody\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLambdaFunctionAssociationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlLambdaFunctionAssociation(entry, context);\n        return node.withName(\"LambdaFunctionAssociation\");\n    });\n};\nconst serializeAws_restXmlLambdaFunctionAssociations = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"LambdaFunctionAssociations\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlLambdaFunctionAssociationList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLocationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"Location\");\n    });\n};\nconst serializeAws_restXmlLoggingConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"LoggingConfig\");\n    if (input.Enabled !== undefined && input.Enabled !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Enabled))).withName(\"Enabled\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IncludeCookies !== undefined && input.IncludeCookies !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.IncludeCookies)))\n            .withName(\"IncludeCookies\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Bucket !== undefined && input.Bucket !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Bucket)).withName(\"Bucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix !== undefined && input.Prefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMethodsList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"Method\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"Method\");\n    });\n};\nconst serializeAws_restXmlMonitoringSubscription = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"MonitoringSubscription\");\n    if (input.RealtimeMetricsSubscriptionConfig !== undefined && input.RealtimeMetricsSubscriptionConfig !== null) {\n        const node = serializeAws_restXmlRealtimeMetricsSubscriptionConfig(input.RealtimeMetricsSubscriptionConfig, context).withName(\"RealtimeMetricsSubscriptionConfig\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOrigin = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Origin\");\n    if (input.Id !== undefined && input.Id !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Id)).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.DomainName !== undefined && input.DomainName !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.DomainName)).withName(\"DomainName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OriginPath !== undefined && input.OriginPath !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.OriginPath)).withName(\"OriginPath\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CustomHeaders !== undefined && input.CustomHeaders !== null) {\n        const node = serializeAws_restXmlCustomHeaders(input.CustomHeaders, context).withName(\"CustomHeaders\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.S3OriginConfig !== undefined && input.S3OriginConfig !== null) {\n        const node = serializeAws_restXmlS3OriginConfig(input.S3OriginConfig, context).withName(\"S3OriginConfig\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CustomOriginConfig !== undefined && input.CustomOriginConfig !== null) {\n        const node = serializeAws_restXmlCustomOriginConfig(input.CustomOriginConfig, context).withName(\"CustomOriginConfig\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ConnectionAttempts !== undefined && input.ConnectionAttempts !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.ConnectionAttempts)))\n            .withName(\"ConnectionAttempts\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ConnectionTimeout !== undefined && input.ConnectionTimeout !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.ConnectionTimeout)))\n            .withName(\"ConnectionTimeout\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OriginShield !== undefined && input.OriginShield !== null) {\n        const node = serializeAws_restXmlOriginShield(input.OriginShield, context).withName(\"OriginShield\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOriginCustomHeader = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OriginCustomHeader\");\n    if (input.HeaderName !== undefined && input.HeaderName !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.HeaderName)).withName(\"HeaderName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.HeaderValue !== undefined && input.HeaderValue !== null) {\n        const node = new xml_builder_1.XmlNode(\"sensitiveStringType\")\n            .addChildNode(new xml_builder_1.XmlText(input.HeaderValue))\n            .withName(\"HeaderValue\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOriginCustomHeadersList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlOriginCustomHeader(entry, context);\n        return node.withName(\"OriginCustomHeader\");\n    });\n};\nconst serializeAws_restXmlOriginGroup = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OriginGroup\");\n    if (input.Id !== undefined && input.Id !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Id)).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FailoverCriteria !== undefined && input.FailoverCriteria !== null) {\n        const node = serializeAws_restXmlOriginGroupFailoverCriteria(input.FailoverCriteria, context).withName(\"FailoverCriteria\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Members !== undefined && input.Members !== null) {\n        const node = serializeAws_restXmlOriginGroupMembers(input.Members, context).withName(\"Members\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOriginGroupFailoverCriteria = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OriginGroupFailoverCriteria\");\n    if (input.StatusCodes !== undefined && input.StatusCodes !== null) {\n        const node = serializeAws_restXmlStatusCodes(input.StatusCodes, context).withName(\"StatusCodes\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOriginGroupList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlOriginGroup(entry, context);\n        return node.withName(\"OriginGroup\");\n    });\n};\nconst serializeAws_restXmlOriginGroupMember = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OriginGroupMember\");\n    if (input.OriginId !== undefined && input.OriginId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.OriginId)).withName(\"OriginId\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOriginGroupMemberList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlOriginGroupMember(entry, context);\n        return node.withName(\"OriginGroupMember\");\n    });\n};\nconst serializeAws_restXmlOriginGroupMembers = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OriginGroupMembers\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlOriginGroupMemberList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOriginGroups = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OriginGroups\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlOriginGroupList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOriginList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlOrigin(entry, context);\n        return node.withName(\"Origin\");\n    });\n};\nconst serializeAws_restXmlOriginRequestPolicyConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OriginRequestPolicyConfig\");\n    if (input.Comment !== undefined && input.Comment !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Comment)).withName(\"Comment\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Name !== undefined && input.Name !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Name)).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.HeadersConfig !== undefined && input.HeadersConfig !== null) {\n        const node = serializeAws_restXmlOriginRequestPolicyHeadersConfig(input.HeadersConfig, context).withName(\"HeadersConfig\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CookiesConfig !== undefined && input.CookiesConfig !== null) {\n        const node = serializeAws_restXmlOriginRequestPolicyCookiesConfig(input.CookiesConfig, context).withName(\"CookiesConfig\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QueryStringsConfig !== undefined && input.QueryStringsConfig !== null) {\n        const node = serializeAws_restXmlOriginRequestPolicyQueryStringsConfig(input.QueryStringsConfig, context).withName(\"QueryStringsConfig\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOriginRequestPolicyCookiesConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OriginRequestPolicyCookiesConfig\");\n    if (input.CookieBehavior !== undefined && input.CookieBehavior !== null) {\n        const node = new xml_builder_1.XmlNode(\"OriginRequestPolicyCookieBehavior\")\n            .addChildNode(new xml_builder_1.XmlText(input.CookieBehavior))\n            .withName(\"CookieBehavior\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Cookies !== undefined && input.Cookies !== null) {\n        const node = serializeAws_restXmlCookieNames(input.Cookies, context).withName(\"Cookies\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOriginRequestPolicyHeadersConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OriginRequestPolicyHeadersConfig\");\n    if (input.HeaderBehavior !== undefined && input.HeaderBehavior !== null) {\n        const node = new xml_builder_1.XmlNode(\"OriginRequestPolicyHeaderBehavior\")\n            .addChildNode(new xml_builder_1.XmlText(input.HeaderBehavior))\n            .withName(\"HeaderBehavior\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Headers !== undefined && input.Headers !== null) {\n        const node = serializeAws_restXmlHeaders(input.Headers, context).withName(\"Headers\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOriginRequestPolicyQueryStringsConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OriginRequestPolicyQueryStringsConfig\");\n    if (input.QueryStringBehavior !== undefined && input.QueryStringBehavior !== null) {\n        const node = new xml_builder_1.XmlNode(\"OriginRequestPolicyQueryStringBehavior\")\n            .addChildNode(new xml_builder_1.XmlText(input.QueryStringBehavior))\n            .withName(\"QueryStringBehavior\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QueryStrings !== undefined && input.QueryStrings !== null) {\n        const node = serializeAws_restXmlQueryStringNames(input.QueryStrings, context).withName(\"QueryStrings\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOrigins = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Origins\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlOriginList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOriginShield = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OriginShield\");\n    if (input.Enabled !== undefined && input.Enabled !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Enabled))).withName(\"Enabled\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OriginShieldRegion !== undefined && input.OriginShieldRegion !== null) {\n        const node = new xml_builder_1.XmlNode(\"OriginShieldRegion\")\n            .addChildNode(new xml_builder_1.XmlText(input.OriginShieldRegion))\n            .withName(\"OriginShieldRegion\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOriginSslProtocols = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OriginSslProtocols\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlSslProtocolsList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlParametersInCacheKeyAndForwardedToOrigin = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ParametersInCacheKeyAndForwardedToOrigin\");\n    if (input.EnableAcceptEncodingGzip !== undefined && input.EnableAcceptEncodingGzip !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.EnableAcceptEncodingGzip)))\n            .withName(\"EnableAcceptEncodingGzip\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EnableAcceptEncodingBrotli !== undefined && input.EnableAcceptEncodingBrotli !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.EnableAcceptEncodingBrotli)))\n            .withName(\"EnableAcceptEncodingBrotli\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.HeadersConfig !== undefined && input.HeadersConfig !== null) {\n        const node = serializeAws_restXmlCachePolicyHeadersConfig(input.HeadersConfig, context).withName(\"HeadersConfig\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CookiesConfig !== undefined && input.CookiesConfig !== null) {\n        const node = serializeAws_restXmlCachePolicyCookiesConfig(input.CookiesConfig, context).withName(\"CookiesConfig\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QueryStringsConfig !== undefined && input.QueryStringsConfig !== null) {\n        const node = serializeAws_restXmlCachePolicyQueryStringsConfig(input.QueryStringsConfig, context).withName(\"QueryStringsConfig\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlPathList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"Path\");\n    });\n};\nconst serializeAws_restXmlPaths = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Paths\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlPathList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlPublicKeyConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"PublicKeyConfig\");\n    if (input.CallerReference !== undefined && input.CallerReference !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.CallerReference)).withName(\"CallerReference\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Name !== undefined && input.Name !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Name)).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EncodedKey !== undefined && input.EncodedKey !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.EncodedKey)).withName(\"EncodedKey\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Comment !== undefined && input.Comment !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Comment)).withName(\"Comment\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlPublicKeyIdList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"PublicKey\");\n    });\n};\nconst serializeAws_restXmlQueryArgProfile = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"QueryArgProfile\");\n    if (input.QueryArg !== undefined && input.QueryArg !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.QueryArg)).withName(\"QueryArg\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ProfileId !== undefined && input.ProfileId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.ProfileId)).withName(\"ProfileId\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlQueryArgProfileConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"QueryArgProfileConfig\");\n    if (input.ForwardWhenQueryArgProfileIsUnknown !== undefined && input.ForwardWhenQueryArgProfileIsUnknown !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.ForwardWhenQueryArgProfileIsUnknown)))\n            .withName(\"ForwardWhenQueryArgProfileIsUnknown\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QueryArgProfiles !== undefined && input.QueryArgProfiles !== null) {\n        const node = serializeAws_restXmlQueryArgProfiles(input.QueryArgProfiles, context).withName(\"QueryArgProfiles\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlQueryArgProfileList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlQueryArgProfile(entry, context);\n        return node.withName(\"QueryArgProfile\");\n    });\n};\nconst serializeAws_restXmlQueryArgProfiles = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"QueryArgProfiles\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlQueryArgProfileList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlQueryStringCacheKeys = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"QueryStringCacheKeys\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlQueryStringCacheKeysList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlQueryStringCacheKeysList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"Name\");\n    });\n};\nconst serializeAws_restXmlQueryStringNames = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"QueryStringNames\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlQueryStringNamesList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlQueryStringNamesList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"Name\");\n    });\n};\nconst serializeAws_restXmlRealtimeMetricsSubscriptionConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"RealtimeMetricsSubscriptionConfig\");\n    if (input.RealtimeMetricsSubscriptionStatus !== undefined && input.RealtimeMetricsSubscriptionStatus !== null) {\n        const node = new xml_builder_1.XmlNode(\"RealtimeMetricsSubscriptionStatus\")\n            .addChildNode(new xml_builder_1.XmlText(input.RealtimeMetricsSubscriptionStatus))\n            .withName(\"RealtimeMetricsSubscriptionStatus\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicyAccessControlAllowHeaders = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyAccessControlAllowHeaders\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlAccessControlAllowHeadersList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicyAccessControlAllowMethods = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyAccessControlAllowMethods\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlAccessControlAllowMethodsList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicyAccessControlAllowOrigins = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyAccessControlAllowOrigins\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlAccessControlAllowOriginsList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicyAccessControlExposeHeaders = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyAccessControlExposeHeaders\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlAccessControlExposeHeadersList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicyConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyConfig\");\n    if (input.Comment !== undefined && input.Comment !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Comment)).withName(\"Comment\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Name !== undefined && input.Name !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Name)).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CorsConfig !== undefined && input.CorsConfig !== null) {\n        const node = serializeAws_restXmlResponseHeadersPolicyCorsConfig(input.CorsConfig, context).withName(\"CorsConfig\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SecurityHeadersConfig !== undefined && input.SecurityHeadersConfig !== null) {\n        const node = serializeAws_restXmlResponseHeadersPolicySecurityHeadersConfig(input.SecurityHeadersConfig, context).withName(\"SecurityHeadersConfig\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CustomHeadersConfig !== undefined && input.CustomHeadersConfig !== null) {\n        const node = serializeAws_restXmlResponseHeadersPolicyCustomHeadersConfig(input.CustomHeadersConfig, context).withName(\"CustomHeadersConfig\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicyContentSecurityPolicy = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyContentSecurityPolicy\");\n    if (input.Override !== undefined && input.Override !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Override))).withName(\"Override\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ContentSecurityPolicy !== undefined && input.ContentSecurityPolicy !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.ContentSecurityPolicy))\n            .withName(\"ContentSecurityPolicy\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicyContentTypeOptions = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyContentTypeOptions\");\n    if (input.Override !== undefined && input.Override !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Override))).withName(\"Override\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicyCorsConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyCorsConfig\");\n    if (input.AccessControlAllowOrigins !== undefined && input.AccessControlAllowOrigins !== null) {\n        const node = serializeAws_restXmlResponseHeadersPolicyAccessControlAllowOrigins(input.AccessControlAllowOrigins, context).withName(\"AccessControlAllowOrigins\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessControlAllowHeaders !== undefined && input.AccessControlAllowHeaders !== null) {\n        const node = serializeAws_restXmlResponseHeadersPolicyAccessControlAllowHeaders(input.AccessControlAllowHeaders, context).withName(\"AccessControlAllowHeaders\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessControlAllowMethods !== undefined && input.AccessControlAllowMethods !== null) {\n        const node = serializeAws_restXmlResponseHeadersPolicyAccessControlAllowMethods(input.AccessControlAllowMethods, context).withName(\"AccessControlAllowMethods\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessControlAllowCredentials !== undefined && input.AccessControlAllowCredentials !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.AccessControlAllowCredentials)))\n            .withName(\"AccessControlAllowCredentials\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessControlExposeHeaders !== undefined && input.AccessControlExposeHeaders !== null) {\n        const node = serializeAws_restXmlResponseHeadersPolicyAccessControlExposeHeaders(input.AccessControlExposeHeaders, context).withName(\"AccessControlExposeHeaders\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessControlMaxAgeSec !== undefined && input.AccessControlMaxAgeSec !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.AccessControlMaxAgeSec)))\n            .withName(\"AccessControlMaxAgeSec\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OriginOverride !== undefined && input.OriginOverride !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.OriginOverride)))\n            .withName(\"OriginOverride\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicyCustomHeader = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyCustomHeader\");\n    if (input.Header !== undefined && input.Header !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Header)).withName(\"Header\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Value !== undefined && input.Value !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Value)).withName(\"Value\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Override !== undefined && input.Override !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Override))).withName(\"Override\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicyCustomHeaderList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlResponseHeadersPolicyCustomHeader(entry, context);\n        return node.withName(\"ResponseHeadersPolicyCustomHeader\");\n    });\n};\nconst serializeAws_restXmlResponseHeadersPolicyCustomHeadersConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyCustomHeadersConfig\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlResponseHeadersPolicyCustomHeaderList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicyFrameOptions = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyFrameOptions\");\n    if (input.Override !== undefined && input.Override !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Override))).withName(\"Override\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FrameOption !== undefined && input.FrameOption !== null) {\n        const node = new xml_builder_1.XmlNode(\"FrameOptionsList\")\n            .addChildNode(new xml_builder_1.XmlText(input.FrameOption))\n            .withName(\"FrameOption\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicyReferrerPolicy = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyReferrerPolicy\");\n    if (input.Override !== undefined && input.Override !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Override))).withName(\"Override\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReferrerPolicy !== undefined && input.ReferrerPolicy !== null) {\n        const node = new xml_builder_1.XmlNode(\"ReferrerPolicyList\")\n            .addChildNode(new xml_builder_1.XmlText(input.ReferrerPolicy))\n            .withName(\"ReferrerPolicy\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicySecurityHeadersConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicySecurityHeadersConfig\");\n    if (input.XSSProtection !== undefined && input.XSSProtection !== null) {\n        const node = serializeAws_restXmlResponseHeadersPolicyXSSProtection(input.XSSProtection, context).withName(\"XSSProtection\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FrameOptions !== undefined && input.FrameOptions !== null) {\n        const node = serializeAws_restXmlResponseHeadersPolicyFrameOptions(input.FrameOptions, context).withName(\"FrameOptions\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReferrerPolicy !== undefined && input.ReferrerPolicy !== null) {\n        const node = serializeAws_restXmlResponseHeadersPolicyReferrerPolicy(input.ReferrerPolicy, context).withName(\"ReferrerPolicy\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ContentSecurityPolicy !== undefined && input.ContentSecurityPolicy !== null) {\n        const node = serializeAws_restXmlResponseHeadersPolicyContentSecurityPolicy(input.ContentSecurityPolicy, context).withName(\"ContentSecurityPolicy\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ContentTypeOptions !== undefined && input.ContentTypeOptions !== null) {\n        const node = serializeAws_restXmlResponseHeadersPolicyContentTypeOptions(input.ContentTypeOptions, context).withName(\"ContentTypeOptions\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StrictTransportSecurity !== undefined && input.StrictTransportSecurity !== null) {\n        const node = serializeAws_restXmlResponseHeadersPolicyStrictTransportSecurity(input.StrictTransportSecurity, context).withName(\"StrictTransportSecurity\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicyStrictTransportSecurity = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyStrictTransportSecurity\");\n    if (input.Override !== undefined && input.Override !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Override))).withName(\"Override\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IncludeSubdomains !== undefined && input.IncludeSubdomains !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.IncludeSubdomains)))\n            .withName(\"IncludeSubdomains\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Preload !== undefined && input.Preload !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Preload))).withName(\"Preload\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessControlMaxAgeSec !== undefined && input.AccessControlMaxAgeSec !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.AccessControlMaxAgeSec)))\n            .withName(\"AccessControlMaxAgeSec\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlResponseHeadersPolicyXSSProtection = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ResponseHeadersPolicyXSSProtection\");\n    if (input.Override !== undefined && input.Override !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Override))).withName(\"Override\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Protection !== undefined && input.Protection !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Protection))).withName(\"Protection\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ModeBlock !== undefined && input.ModeBlock !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.ModeBlock))).withName(\"ModeBlock\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReportUri !== undefined && input.ReportUri !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.ReportUri)).withName(\"ReportUri\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRestrictions = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Restrictions\");\n    if (input.GeoRestriction !== undefined && input.GeoRestriction !== null) {\n        const node = serializeAws_restXmlGeoRestriction(input.GeoRestriction, context).withName(\"GeoRestriction\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlS3Origin = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"S3Origin\");\n    if (input.DomainName !== undefined && input.DomainName !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.DomainName)).withName(\"DomainName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OriginAccessIdentity !== undefined && input.OriginAccessIdentity !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.OriginAccessIdentity))\n            .withName(\"OriginAccessIdentity\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlS3OriginConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"S3OriginConfig\");\n    if (input.OriginAccessIdentity !== undefined && input.OriginAccessIdentity !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.OriginAccessIdentity))\n            .withName(\"OriginAccessIdentity\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlSslProtocolsList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"SslProtocol\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"SslProtocol\");\n    });\n};\nconst serializeAws_restXmlStatusCodeList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(entry)));\n        return node.withName(\"StatusCode\");\n    });\n};\nconst serializeAws_restXmlStatusCodes = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"StatusCodes\");\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlStatusCodeList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlStreamingDistributionConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"StreamingDistributionConfig\");\n    if (input.CallerReference !== undefined && input.CallerReference !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.CallerReference)).withName(\"CallerReference\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.S3Origin !== undefined && input.S3Origin !== null) {\n        const node = serializeAws_restXmlS3Origin(input.S3Origin, context).withName(\"S3Origin\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Aliases !== undefined && input.Aliases !== null) {\n        const node = serializeAws_restXmlAliases(input.Aliases, context).withName(\"Aliases\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Comment !== undefined && input.Comment !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Comment)).withName(\"Comment\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Logging !== undefined && input.Logging !== null) {\n        const node = serializeAws_restXmlStreamingLoggingConfig(input.Logging, context).withName(\"Logging\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.TrustedSigners !== undefined && input.TrustedSigners !== null) {\n        const node = serializeAws_restXmlTrustedSigners(input.TrustedSigners, context).withName(\"TrustedSigners\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.PriceClass !== undefined && input.PriceClass !== null) {\n        const node = new xml_builder_1.XmlNode(\"PriceClass\").addChildNode(new xml_builder_1.XmlText(input.PriceClass)).withName(\"PriceClass\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Enabled !== undefined && input.Enabled !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Enabled))).withName(\"Enabled\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlStreamingDistributionConfigWithTags = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"StreamingDistributionConfigWithTags\");\n    if (input.StreamingDistributionConfig !== undefined && input.StreamingDistributionConfig !== null) {\n        const node = serializeAws_restXmlStreamingDistributionConfig(input.StreamingDistributionConfig, context).withName(\"StreamingDistributionConfig\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags !== undefined && input.Tags !== null) {\n        const node = serializeAws_restXmlTags(input.Tags, context).withName(\"Tags\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlStreamingLoggingConfig = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"StreamingLoggingConfig\");\n    if (input.Enabled !== undefined && input.Enabled !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Enabled))).withName(\"Enabled\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Bucket !== undefined && input.Bucket !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Bucket)).withName(\"Bucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix !== undefined && input.Prefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTag = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Tag\");\n    if (input.Key !== undefined && input.Key !== null) {\n        const node = new xml_builder_1.XmlNode(\"TagKey\").addChildNode(new xml_builder_1.XmlText(input.Key)).withName(\"Key\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Value !== undefined && input.Value !== null) {\n        const node = new xml_builder_1.XmlNode(\"TagValue\").addChildNode(new xml_builder_1.XmlText(input.Value)).withName(\"Value\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTagKeyList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"TagKey\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"Key\");\n    });\n};\nconst serializeAws_restXmlTagKeys = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"TagKeys\");\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlTagKeyList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTagList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlTag(entry, context);\n        return node.withName(\"Tag\");\n    });\n};\nconst serializeAws_restXmlTags = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Tags\");\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlTagList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTrustedKeyGroupIdList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"KeyGroup\");\n    });\n};\nconst serializeAws_restXmlTrustedKeyGroups = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"TrustedKeyGroups\");\n    if (input.Enabled !== undefined && input.Enabled !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Enabled))).withName(\"Enabled\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlTrustedKeyGroupIdList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTrustedSigners = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"TrustedSigners\");\n    if (input.Enabled !== undefined && input.Enabled !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\").addChildNode(new xml_builder_1.XmlText(String(input.Enabled))).withName(\"Enabled\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Quantity !== undefined && input.Quantity !== null) {\n        const node = new xml_builder_1.XmlNode(\"integer\").addChildNode(new xml_builder_1.XmlText(String(input.Quantity))).withName(\"Quantity\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Items !== undefined && input.Items !== null) {\n        const nodes = serializeAws_restXmlAwsAccountNumberList(input.Items, context);\n        const containerNode = new xml_builder_1.XmlNode(\"Items\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlViewerCertificate = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ViewerCertificate\");\n    if (input.CloudFrontDefaultCertificate !== undefined && input.CloudFrontDefaultCertificate !== null) {\n        const node = new xml_builder_1.XmlNode(\"boolean\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.CloudFrontDefaultCertificate)))\n            .withName(\"CloudFrontDefaultCertificate\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IAMCertificateId !== undefined && input.IAMCertificateId !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.IAMCertificateId))\n            .withName(\"IAMCertificateId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ACMCertificateArn !== undefined && input.ACMCertificateArn !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\")\n            .addChildNode(new xml_builder_1.XmlText(input.ACMCertificateArn))\n            .withName(\"ACMCertificateArn\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SSLSupportMethod !== undefined && input.SSLSupportMethod !== null) {\n        const node = new xml_builder_1.XmlNode(\"SSLSupportMethod\")\n            .addChildNode(new xml_builder_1.XmlText(input.SSLSupportMethod))\n            .withName(\"SSLSupportMethod\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.MinimumProtocolVersion !== undefined && input.MinimumProtocolVersion !== null) {\n        const node = new xml_builder_1.XmlNode(\"MinimumProtocolVersion\")\n            .addChildNode(new xml_builder_1.XmlText(input.MinimumProtocolVersion))\n            .withName(\"MinimumProtocolVersion\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Certificate !== undefined && input.Certificate !== null) {\n        const node = new xml_builder_1.XmlNode(\"string\").addChildNode(new xml_builder_1.XmlText(input.Certificate)).withName(\"Certificate\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CertificateSource !== undefined && input.CertificateSource !== null) {\n        const node = new xml_builder_1.XmlNode(\"CertificateSource\")\n            .addChildNode(new xml_builder_1.XmlText(input.CertificateSource))\n            .withName(\"CertificateSource\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst deserializeAws_restXmlAccessControlAllowHeadersList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlAccessControlAllowMethodsList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlAccessControlAllowOriginsList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlAccessControlExposeHeadersList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlActiveTrustedKeyGroups = (output, context) => {\n    const contents = {\n        Enabled: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Enabled\"] !== undefined) {\n        contents.Enabled = smithy_client_1.parseBoolean(output[\"Enabled\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"KeyGroup\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlKGKeyPairIdsList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"KeyGroup\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlActiveTrustedSigners = (output, context) => {\n    const contents = {\n        Enabled: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Enabled\"] !== undefined) {\n        contents.Enabled = smithy_client_1.parseBoolean(output[\"Enabled\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Signer\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlSignerList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Signer\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAliases = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"CNAME\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlAliasList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"CNAME\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAliasICPRecordal = (output, context) => {\n    const contents = {\n        CNAME: undefined,\n        ICPRecordalStatus: undefined,\n    };\n    if (output[\"CNAME\"] !== undefined) {\n        contents.CNAME = smithy_client_1.expectString(output[\"CNAME\"]);\n    }\n    if (output[\"ICPRecordalStatus\"] !== undefined) {\n        contents.ICPRecordalStatus = smithy_client_1.expectString(output[\"ICPRecordalStatus\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAliasICPRecordals = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlAliasICPRecordal(entry, context);\n    });\n};\nconst deserializeAws_restXmlAliasList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlAllowedMethods = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n        CachedMethods: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Method\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlMethodsList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Method\"]), context);\n    }\n    if (output[\"CachedMethods\"] !== undefined) {\n        contents.CachedMethods = deserializeAws_restXmlCachedMethods(output[\"CachedMethods\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAwsAccountNumberList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlCacheBehavior = (output, context) => {\n    const contents = {\n        PathPattern: undefined,\n        TargetOriginId: undefined,\n        TrustedSigners: undefined,\n        TrustedKeyGroups: undefined,\n        ViewerProtocolPolicy: undefined,\n        AllowedMethods: undefined,\n        SmoothStreaming: undefined,\n        Compress: undefined,\n        LambdaFunctionAssociations: undefined,\n        FunctionAssociations: undefined,\n        FieldLevelEncryptionId: undefined,\n        RealtimeLogConfigArn: undefined,\n        CachePolicyId: undefined,\n        OriginRequestPolicyId: undefined,\n        ResponseHeadersPolicyId: undefined,\n        ForwardedValues: undefined,\n        MinTTL: undefined,\n        DefaultTTL: undefined,\n        MaxTTL: undefined,\n    };\n    if (output[\"PathPattern\"] !== undefined) {\n        contents.PathPattern = smithy_client_1.expectString(output[\"PathPattern\"]);\n    }\n    if (output[\"TargetOriginId\"] !== undefined) {\n        contents.TargetOriginId = smithy_client_1.expectString(output[\"TargetOriginId\"]);\n    }\n    if (output[\"TrustedSigners\"] !== undefined) {\n        contents.TrustedSigners = deserializeAws_restXmlTrustedSigners(output[\"TrustedSigners\"], context);\n    }\n    if (output[\"TrustedKeyGroups\"] !== undefined) {\n        contents.TrustedKeyGroups = deserializeAws_restXmlTrustedKeyGroups(output[\"TrustedKeyGroups\"], context);\n    }\n    if (output[\"ViewerProtocolPolicy\"] !== undefined) {\n        contents.ViewerProtocolPolicy = smithy_client_1.expectString(output[\"ViewerProtocolPolicy\"]);\n    }\n    if (output[\"AllowedMethods\"] !== undefined) {\n        contents.AllowedMethods = deserializeAws_restXmlAllowedMethods(output[\"AllowedMethods\"], context);\n    }\n    if (output[\"SmoothStreaming\"] !== undefined) {\n        contents.SmoothStreaming = smithy_client_1.parseBoolean(output[\"SmoothStreaming\"]);\n    }\n    if (output[\"Compress\"] !== undefined) {\n        contents.Compress = smithy_client_1.parseBoolean(output[\"Compress\"]);\n    }\n    if (output[\"LambdaFunctionAssociations\"] !== undefined) {\n        contents.LambdaFunctionAssociations = deserializeAws_restXmlLambdaFunctionAssociations(output[\"LambdaFunctionAssociations\"], context);\n    }\n    if (output[\"FunctionAssociations\"] !== undefined) {\n        contents.FunctionAssociations = deserializeAws_restXmlFunctionAssociations(output[\"FunctionAssociations\"], context);\n    }\n    if (output[\"FieldLevelEncryptionId\"] !== undefined) {\n        contents.FieldLevelEncryptionId = smithy_client_1.expectString(output[\"FieldLevelEncryptionId\"]);\n    }\n    if (output[\"RealtimeLogConfigArn\"] !== undefined) {\n        contents.RealtimeLogConfigArn = smithy_client_1.expectString(output[\"RealtimeLogConfigArn\"]);\n    }\n    if (output[\"CachePolicyId\"] !== undefined) {\n        contents.CachePolicyId = smithy_client_1.expectString(output[\"CachePolicyId\"]);\n    }\n    if (output[\"OriginRequestPolicyId\"] !== undefined) {\n        contents.OriginRequestPolicyId = smithy_client_1.expectString(output[\"OriginRequestPolicyId\"]);\n    }\n    if (output[\"ResponseHeadersPolicyId\"] !== undefined) {\n        contents.ResponseHeadersPolicyId = smithy_client_1.expectString(output[\"ResponseHeadersPolicyId\"]);\n    }\n    if (output[\"ForwardedValues\"] !== undefined) {\n        contents.ForwardedValues = deserializeAws_restXmlForwardedValues(output[\"ForwardedValues\"], context);\n    }\n    if (output[\"MinTTL\"] !== undefined) {\n        contents.MinTTL = smithy_client_1.strictParseLong(output[\"MinTTL\"]);\n    }\n    if (output[\"DefaultTTL\"] !== undefined) {\n        contents.DefaultTTL = smithy_client_1.strictParseLong(output[\"DefaultTTL\"]);\n    }\n    if (output[\"MaxTTL\"] !== undefined) {\n        contents.MaxTTL = smithy_client_1.strictParseLong(output[\"MaxTTL\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCacheBehaviorList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlCacheBehavior(entry, context);\n    });\n};\nconst deserializeAws_restXmlCacheBehaviors = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"CacheBehavior\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlCacheBehaviorList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"CacheBehavior\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCachedMethods = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Method\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlMethodsList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Method\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCachePolicy = (output, context) => {\n    const contents = {\n        Id: undefined,\n        LastModifiedTime: undefined,\n        CachePolicyConfig: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"LastModifiedTime\"] !== undefined) {\n        contents.LastModifiedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModifiedTime\"]));\n    }\n    if (output[\"CachePolicyConfig\"] !== undefined) {\n        contents.CachePolicyConfig = deserializeAws_restXmlCachePolicyConfig(output[\"CachePolicyConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCachePolicyConfig = (output, context) => {\n    const contents = {\n        Comment: undefined,\n        Name: undefined,\n        DefaultTTL: undefined,\n        MaxTTL: undefined,\n        MinTTL: undefined,\n        ParametersInCacheKeyAndForwardedToOrigin: undefined,\n    };\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(output[\"Name\"]);\n    }\n    if (output[\"DefaultTTL\"] !== undefined) {\n        contents.DefaultTTL = smithy_client_1.strictParseLong(output[\"DefaultTTL\"]);\n    }\n    if (output[\"MaxTTL\"] !== undefined) {\n        contents.MaxTTL = smithy_client_1.strictParseLong(output[\"MaxTTL\"]);\n    }\n    if (output[\"MinTTL\"] !== undefined) {\n        contents.MinTTL = smithy_client_1.strictParseLong(output[\"MinTTL\"]);\n    }\n    if (output[\"ParametersInCacheKeyAndForwardedToOrigin\"] !== undefined) {\n        contents.ParametersInCacheKeyAndForwardedToOrigin = deserializeAws_restXmlParametersInCacheKeyAndForwardedToOrigin(output[\"ParametersInCacheKeyAndForwardedToOrigin\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCachePolicyCookiesConfig = (output, context) => {\n    const contents = {\n        CookieBehavior: undefined,\n        Cookies: undefined,\n    };\n    if (output[\"CookieBehavior\"] !== undefined) {\n        contents.CookieBehavior = smithy_client_1.expectString(output[\"CookieBehavior\"]);\n    }\n    if (output[\"Cookies\"] !== undefined) {\n        contents.Cookies = deserializeAws_restXmlCookieNames(output[\"Cookies\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCachePolicyHeadersConfig = (output, context) => {\n    const contents = {\n        HeaderBehavior: undefined,\n        Headers: undefined,\n    };\n    if (output[\"HeaderBehavior\"] !== undefined) {\n        contents.HeaderBehavior = smithy_client_1.expectString(output[\"HeaderBehavior\"]);\n    }\n    if (output[\"Headers\"] !== undefined) {\n        contents.Headers = deserializeAws_restXmlHeaders(output[\"Headers\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCachePolicyList = (output, context) => {\n    const contents = {\n        NextMarker: undefined,\n        MaxItems: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"CachePolicySummary\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlCachePolicySummaryList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"CachePolicySummary\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCachePolicyQueryStringsConfig = (output, context) => {\n    const contents = {\n        QueryStringBehavior: undefined,\n        QueryStrings: undefined,\n    };\n    if (output[\"QueryStringBehavior\"] !== undefined) {\n        contents.QueryStringBehavior = smithy_client_1.expectString(output[\"QueryStringBehavior\"]);\n    }\n    if (output[\"QueryStrings\"] !== undefined) {\n        contents.QueryStrings = deserializeAws_restXmlQueryStringNames(output[\"QueryStrings\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCachePolicySummary = (output, context) => {\n    const contents = {\n        Type: undefined,\n        CachePolicy: undefined,\n    };\n    if (output[\"Type\"] !== undefined) {\n        contents.Type = smithy_client_1.expectString(output[\"Type\"]);\n    }\n    if (output[\"CachePolicy\"] !== undefined) {\n        contents.CachePolicy = deserializeAws_restXmlCachePolicy(output[\"CachePolicy\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCachePolicySummaryList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlCachePolicySummary(entry, context);\n    });\n};\nconst deserializeAws_restXmlCloudFrontOriginAccessIdentity = (output, context) => {\n    const contents = {\n        Id: undefined,\n        S3CanonicalUserId: undefined,\n        CloudFrontOriginAccessIdentityConfig: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"S3CanonicalUserId\"] !== undefined) {\n        contents.S3CanonicalUserId = smithy_client_1.expectString(output[\"S3CanonicalUserId\"]);\n    }\n    if (output[\"CloudFrontOriginAccessIdentityConfig\"] !== undefined) {\n        contents.CloudFrontOriginAccessIdentityConfig = deserializeAws_restXmlCloudFrontOriginAccessIdentityConfig(output[\"CloudFrontOriginAccessIdentityConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCloudFrontOriginAccessIdentityConfig = (output, context) => {\n    const contents = {\n        CallerReference: undefined,\n        Comment: undefined,\n    };\n    if (output[\"CallerReference\"] !== undefined) {\n        contents.CallerReference = smithy_client_1.expectString(output[\"CallerReference\"]);\n    }\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCloudFrontOriginAccessIdentityList = (output, context) => {\n    const contents = {\n        Marker: undefined,\n        NextMarker: undefined,\n        MaxItems: undefined,\n        IsTruncated: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Marker\"] !== undefined) {\n        contents.Marker = smithy_client_1.expectString(output[\"Marker\"]);\n    }\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(output[\"IsTruncated\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"CloudFrontOriginAccessIdentitySummary\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlCloudFrontOriginAccessIdentitySummaryList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"CloudFrontOriginAccessIdentitySummary\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCloudFrontOriginAccessIdentitySummary = (output, context) => {\n    const contents = {\n        Id: undefined,\n        S3CanonicalUserId: undefined,\n        Comment: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"S3CanonicalUserId\"] !== undefined) {\n        contents.S3CanonicalUserId = smithy_client_1.expectString(output[\"S3CanonicalUserId\"]);\n    }\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCloudFrontOriginAccessIdentitySummaryList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlCloudFrontOriginAccessIdentitySummary(entry, context);\n    });\n};\nconst deserializeAws_restXmlConflictingAlias = (output, context) => {\n    const contents = {\n        Alias: undefined,\n        DistributionId: undefined,\n        AccountId: undefined,\n    };\n    if (output[\"Alias\"] !== undefined) {\n        contents.Alias = smithy_client_1.expectString(output[\"Alias\"]);\n    }\n    if (output[\"DistributionId\"] !== undefined) {\n        contents.DistributionId = smithy_client_1.expectString(output[\"DistributionId\"]);\n    }\n    if (output[\"AccountId\"] !== undefined) {\n        contents.AccountId = smithy_client_1.expectString(output[\"AccountId\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlConflictingAliases = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlConflictingAlias(entry, context);\n    });\n};\nconst deserializeAws_restXmlConflictingAliasesList = (output, context) => {\n    const contents = {\n        NextMarker: undefined,\n        MaxItems: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"ConflictingAlias\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlConflictingAliases(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"ConflictingAlias\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlContentTypeProfile = (output, context) => {\n    const contents = {\n        Format: undefined,\n        ProfileId: undefined,\n        ContentType: undefined,\n    };\n    if (output[\"Format\"] !== undefined) {\n        contents.Format = smithy_client_1.expectString(output[\"Format\"]);\n    }\n    if (output[\"ProfileId\"] !== undefined) {\n        contents.ProfileId = smithy_client_1.expectString(output[\"ProfileId\"]);\n    }\n    if (output[\"ContentType\"] !== undefined) {\n        contents.ContentType = smithy_client_1.expectString(output[\"ContentType\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlContentTypeProfileConfig = (output, context) => {\n    const contents = {\n        ForwardWhenContentTypeIsUnknown: undefined,\n        ContentTypeProfiles: undefined,\n    };\n    if (output[\"ForwardWhenContentTypeIsUnknown\"] !== undefined) {\n        contents.ForwardWhenContentTypeIsUnknown = smithy_client_1.parseBoolean(output[\"ForwardWhenContentTypeIsUnknown\"]);\n    }\n    if (output[\"ContentTypeProfiles\"] !== undefined) {\n        contents.ContentTypeProfiles = deserializeAws_restXmlContentTypeProfiles(output[\"ContentTypeProfiles\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlContentTypeProfileList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlContentTypeProfile(entry, context);\n    });\n};\nconst deserializeAws_restXmlContentTypeProfiles = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"ContentTypeProfile\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlContentTypeProfileList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"ContentTypeProfile\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCookieNameList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlCookieNames = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Name\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlCookieNameList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Name\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCookiePreference = (output, context) => {\n    const contents = {\n        Forward: undefined,\n        WhitelistedNames: undefined,\n    };\n    if (output[\"Forward\"] !== undefined) {\n        contents.Forward = smithy_client_1.expectString(output[\"Forward\"]);\n    }\n    if (output[\"WhitelistedNames\"] !== undefined) {\n        contents.WhitelistedNames = deserializeAws_restXmlCookieNames(output[\"WhitelistedNames\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCustomErrorResponse = (output, context) => {\n    const contents = {\n        ErrorCode: undefined,\n        ResponsePagePath: undefined,\n        ResponseCode: undefined,\n        ErrorCachingMinTTL: undefined,\n    };\n    if (output[\"ErrorCode\"] !== undefined) {\n        contents.ErrorCode = smithy_client_1.strictParseInt32(output[\"ErrorCode\"]);\n    }\n    if (output[\"ResponsePagePath\"] !== undefined) {\n        contents.ResponsePagePath = smithy_client_1.expectString(output[\"ResponsePagePath\"]);\n    }\n    if (output[\"ResponseCode\"] !== undefined) {\n        contents.ResponseCode = smithy_client_1.expectString(output[\"ResponseCode\"]);\n    }\n    if (output[\"ErrorCachingMinTTL\"] !== undefined) {\n        contents.ErrorCachingMinTTL = smithy_client_1.strictParseLong(output[\"ErrorCachingMinTTL\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCustomErrorResponseList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlCustomErrorResponse(entry, context);\n    });\n};\nconst deserializeAws_restXmlCustomErrorResponses = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"CustomErrorResponse\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlCustomErrorResponseList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"CustomErrorResponse\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCustomHeaders = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"OriginCustomHeader\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlOriginCustomHeadersList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"OriginCustomHeader\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCustomOriginConfig = (output, context) => {\n    const contents = {\n        HTTPPort: undefined,\n        HTTPSPort: undefined,\n        OriginProtocolPolicy: undefined,\n        OriginSslProtocols: undefined,\n        OriginReadTimeout: undefined,\n        OriginKeepaliveTimeout: undefined,\n    };\n    if (output[\"HTTPPort\"] !== undefined) {\n        contents.HTTPPort = smithy_client_1.strictParseInt32(output[\"HTTPPort\"]);\n    }\n    if (output[\"HTTPSPort\"] !== undefined) {\n        contents.HTTPSPort = smithy_client_1.strictParseInt32(output[\"HTTPSPort\"]);\n    }\n    if (output[\"OriginProtocolPolicy\"] !== undefined) {\n        contents.OriginProtocolPolicy = smithy_client_1.expectString(output[\"OriginProtocolPolicy\"]);\n    }\n    if (output[\"OriginSslProtocols\"] !== undefined) {\n        contents.OriginSslProtocols = deserializeAws_restXmlOriginSslProtocols(output[\"OriginSslProtocols\"], context);\n    }\n    if (output[\"OriginReadTimeout\"] !== undefined) {\n        contents.OriginReadTimeout = smithy_client_1.strictParseInt32(output[\"OriginReadTimeout\"]);\n    }\n    if (output[\"OriginKeepaliveTimeout\"] !== undefined) {\n        contents.OriginKeepaliveTimeout = smithy_client_1.strictParseInt32(output[\"OriginKeepaliveTimeout\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDefaultCacheBehavior = (output, context) => {\n    const contents = {\n        TargetOriginId: undefined,\n        TrustedSigners: undefined,\n        TrustedKeyGroups: undefined,\n        ViewerProtocolPolicy: undefined,\n        AllowedMethods: undefined,\n        SmoothStreaming: undefined,\n        Compress: undefined,\n        LambdaFunctionAssociations: undefined,\n        FunctionAssociations: undefined,\n        FieldLevelEncryptionId: undefined,\n        RealtimeLogConfigArn: undefined,\n        CachePolicyId: undefined,\n        OriginRequestPolicyId: undefined,\n        ResponseHeadersPolicyId: undefined,\n        ForwardedValues: undefined,\n        MinTTL: undefined,\n        DefaultTTL: undefined,\n        MaxTTL: undefined,\n    };\n    if (output[\"TargetOriginId\"] !== undefined) {\n        contents.TargetOriginId = smithy_client_1.expectString(output[\"TargetOriginId\"]);\n    }\n    if (output[\"TrustedSigners\"] !== undefined) {\n        contents.TrustedSigners = deserializeAws_restXmlTrustedSigners(output[\"TrustedSigners\"], context);\n    }\n    if (output[\"TrustedKeyGroups\"] !== undefined) {\n        contents.TrustedKeyGroups = deserializeAws_restXmlTrustedKeyGroups(output[\"TrustedKeyGroups\"], context);\n    }\n    if (output[\"ViewerProtocolPolicy\"] !== undefined) {\n        contents.ViewerProtocolPolicy = smithy_client_1.expectString(output[\"ViewerProtocolPolicy\"]);\n    }\n    if (output[\"AllowedMethods\"] !== undefined) {\n        contents.AllowedMethods = deserializeAws_restXmlAllowedMethods(output[\"AllowedMethods\"], context);\n    }\n    if (output[\"SmoothStreaming\"] !== undefined) {\n        contents.SmoothStreaming = smithy_client_1.parseBoolean(output[\"SmoothStreaming\"]);\n    }\n    if (output[\"Compress\"] !== undefined) {\n        contents.Compress = smithy_client_1.parseBoolean(output[\"Compress\"]);\n    }\n    if (output[\"LambdaFunctionAssociations\"] !== undefined) {\n        contents.LambdaFunctionAssociations = deserializeAws_restXmlLambdaFunctionAssociations(output[\"LambdaFunctionAssociations\"], context);\n    }\n    if (output[\"FunctionAssociations\"] !== undefined) {\n        contents.FunctionAssociations = deserializeAws_restXmlFunctionAssociations(output[\"FunctionAssociations\"], context);\n    }\n    if (output[\"FieldLevelEncryptionId\"] !== undefined) {\n        contents.FieldLevelEncryptionId = smithy_client_1.expectString(output[\"FieldLevelEncryptionId\"]);\n    }\n    if (output[\"RealtimeLogConfigArn\"] !== undefined) {\n        contents.RealtimeLogConfigArn = smithy_client_1.expectString(output[\"RealtimeLogConfigArn\"]);\n    }\n    if (output[\"CachePolicyId\"] !== undefined) {\n        contents.CachePolicyId = smithy_client_1.expectString(output[\"CachePolicyId\"]);\n    }\n    if (output[\"OriginRequestPolicyId\"] !== undefined) {\n        contents.OriginRequestPolicyId = smithy_client_1.expectString(output[\"OriginRequestPolicyId\"]);\n    }\n    if (output[\"ResponseHeadersPolicyId\"] !== undefined) {\n        contents.ResponseHeadersPolicyId = smithy_client_1.expectString(output[\"ResponseHeadersPolicyId\"]);\n    }\n    if (output[\"ForwardedValues\"] !== undefined) {\n        contents.ForwardedValues = deserializeAws_restXmlForwardedValues(output[\"ForwardedValues\"], context);\n    }\n    if (output[\"MinTTL\"] !== undefined) {\n        contents.MinTTL = smithy_client_1.strictParseLong(output[\"MinTTL\"]);\n    }\n    if (output[\"DefaultTTL\"] !== undefined) {\n        contents.DefaultTTL = smithy_client_1.strictParseLong(output[\"DefaultTTL\"]);\n    }\n    if (output[\"MaxTTL\"] !== undefined) {\n        contents.MaxTTL = smithy_client_1.strictParseLong(output[\"MaxTTL\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDistribution = (output, context) => {\n    const contents = {\n        Id: undefined,\n        ARN: undefined,\n        Status: undefined,\n        LastModifiedTime: undefined,\n        InProgressInvalidationBatches: undefined,\n        DomainName: undefined,\n        ActiveTrustedSigners: undefined,\n        ActiveTrustedKeyGroups: undefined,\n        DistributionConfig: undefined,\n        AliasICPRecordals: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"ARN\"] !== undefined) {\n        contents.ARN = smithy_client_1.expectString(output[\"ARN\"]);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    if (output[\"LastModifiedTime\"] !== undefined) {\n        contents.LastModifiedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModifiedTime\"]));\n    }\n    if (output[\"InProgressInvalidationBatches\"] !== undefined) {\n        contents.InProgressInvalidationBatches = smithy_client_1.strictParseInt32(output[\"InProgressInvalidationBatches\"]);\n    }\n    if (output[\"DomainName\"] !== undefined) {\n        contents.DomainName = smithy_client_1.expectString(output[\"DomainName\"]);\n    }\n    if (output[\"ActiveTrustedSigners\"] !== undefined) {\n        contents.ActiveTrustedSigners = deserializeAws_restXmlActiveTrustedSigners(output[\"ActiveTrustedSigners\"], context);\n    }\n    if (output[\"ActiveTrustedKeyGroups\"] !== undefined) {\n        contents.ActiveTrustedKeyGroups = deserializeAws_restXmlActiveTrustedKeyGroups(output[\"ActiveTrustedKeyGroups\"], context);\n    }\n    if (output[\"DistributionConfig\"] !== undefined) {\n        contents.DistributionConfig = deserializeAws_restXmlDistributionConfig(output[\"DistributionConfig\"], context);\n    }\n    if (output.AliasICPRecordals === \"\") {\n        contents.AliasICPRecordals = [];\n    }\n    if (output[\"AliasICPRecordals\"] !== undefined && output[\"AliasICPRecordals\"][\"AliasICPRecordal\"] !== undefined) {\n        contents.AliasICPRecordals = deserializeAws_restXmlAliasICPRecordals(smithy_client_1.getArrayIfSingleItem(output[\"AliasICPRecordals\"][\"AliasICPRecordal\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDistributionConfig = (output, context) => {\n    const contents = {\n        CallerReference: undefined,\n        Aliases: undefined,\n        DefaultRootObject: undefined,\n        Origins: undefined,\n        OriginGroups: undefined,\n        DefaultCacheBehavior: undefined,\n        CacheBehaviors: undefined,\n        CustomErrorResponses: undefined,\n        Comment: undefined,\n        Logging: undefined,\n        PriceClass: undefined,\n        Enabled: undefined,\n        ViewerCertificate: undefined,\n        Restrictions: undefined,\n        WebACLId: undefined,\n        HttpVersion: undefined,\n        IsIPV6Enabled: undefined,\n    };\n    if (output[\"CallerReference\"] !== undefined) {\n        contents.CallerReference = smithy_client_1.expectString(output[\"CallerReference\"]);\n    }\n    if (output[\"Aliases\"] !== undefined) {\n        contents.Aliases = deserializeAws_restXmlAliases(output[\"Aliases\"], context);\n    }\n    if (output[\"DefaultRootObject\"] !== undefined) {\n        contents.DefaultRootObject = smithy_client_1.expectString(output[\"DefaultRootObject\"]);\n    }\n    if (output[\"Origins\"] !== undefined) {\n        contents.Origins = deserializeAws_restXmlOrigins(output[\"Origins\"], context);\n    }\n    if (output[\"OriginGroups\"] !== undefined) {\n        contents.OriginGroups = deserializeAws_restXmlOriginGroups(output[\"OriginGroups\"], context);\n    }\n    if (output[\"DefaultCacheBehavior\"] !== undefined) {\n        contents.DefaultCacheBehavior = deserializeAws_restXmlDefaultCacheBehavior(output[\"DefaultCacheBehavior\"], context);\n    }\n    if (output[\"CacheBehaviors\"] !== undefined) {\n        contents.CacheBehaviors = deserializeAws_restXmlCacheBehaviors(output[\"CacheBehaviors\"], context);\n    }\n    if (output[\"CustomErrorResponses\"] !== undefined) {\n        contents.CustomErrorResponses = deserializeAws_restXmlCustomErrorResponses(output[\"CustomErrorResponses\"], context);\n    }\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    if (output[\"Logging\"] !== undefined) {\n        contents.Logging = deserializeAws_restXmlLoggingConfig(output[\"Logging\"], context);\n    }\n    if (output[\"PriceClass\"] !== undefined) {\n        contents.PriceClass = smithy_client_1.expectString(output[\"PriceClass\"]);\n    }\n    if (output[\"Enabled\"] !== undefined) {\n        contents.Enabled = smithy_client_1.parseBoolean(output[\"Enabled\"]);\n    }\n    if (output[\"ViewerCertificate\"] !== undefined) {\n        contents.ViewerCertificate = deserializeAws_restXmlViewerCertificate(output[\"ViewerCertificate\"], context);\n    }\n    if (output[\"Restrictions\"] !== undefined) {\n        contents.Restrictions = deserializeAws_restXmlRestrictions(output[\"Restrictions\"], context);\n    }\n    if (output[\"WebACLId\"] !== undefined) {\n        contents.WebACLId = smithy_client_1.expectString(output[\"WebACLId\"]);\n    }\n    if (output[\"HttpVersion\"] !== undefined) {\n        contents.HttpVersion = smithy_client_1.expectString(output[\"HttpVersion\"]);\n    }\n    if (output[\"IsIPV6Enabled\"] !== undefined) {\n        contents.IsIPV6Enabled = smithy_client_1.parseBoolean(output[\"IsIPV6Enabled\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDistributionIdList = (output, context) => {\n    const contents = {\n        Marker: undefined,\n        NextMarker: undefined,\n        MaxItems: undefined,\n        IsTruncated: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Marker\"] !== undefined) {\n        contents.Marker = smithy_client_1.expectString(output[\"Marker\"]);\n    }\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(output[\"IsTruncated\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"DistributionId\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlDistributionIdListSummary(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"DistributionId\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDistributionIdListSummary = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlDistributionList = (output, context) => {\n    const contents = {\n        Marker: undefined,\n        NextMarker: undefined,\n        MaxItems: undefined,\n        IsTruncated: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Marker\"] !== undefined) {\n        contents.Marker = smithy_client_1.expectString(output[\"Marker\"]);\n    }\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(output[\"IsTruncated\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"DistributionSummary\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlDistributionSummaryList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"DistributionSummary\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDistributionSummary = (output, context) => {\n    const contents = {\n        Id: undefined,\n        ARN: undefined,\n        Status: undefined,\n        LastModifiedTime: undefined,\n        DomainName: undefined,\n        Aliases: undefined,\n        Origins: undefined,\n        OriginGroups: undefined,\n        DefaultCacheBehavior: undefined,\n        CacheBehaviors: undefined,\n        CustomErrorResponses: undefined,\n        Comment: undefined,\n        PriceClass: undefined,\n        Enabled: undefined,\n        ViewerCertificate: undefined,\n        Restrictions: undefined,\n        WebACLId: undefined,\n        HttpVersion: undefined,\n        IsIPV6Enabled: undefined,\n        AliasICPRecordals: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"ARN\"] !== undefined) {\n        contents.ARN = smithy_client_1.expectString(output[\"ARN\"]);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    if (output[\"LastModifiedTime\"] !== undefined) {\n        contents.LastModifiedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModifiedTime\"]));\n    }\n    if (output[\"DomainName\"] !== undefined) {\n        contents.DomainName = smithy_client_1.expectString(output[\"DomainName\"]);\n    }\n    if (output[\"Aliases\"] !== undefined) {\n        contents.Aliases = deserializeAws_restXmlAliases(output[\"Aliases\"], context);\n    }\n    if (output[\"Origins\"] !== undefined) {\n        contents.Origins = deserializeAws_restXmlOrigins(output[\"Origins\"], context);\n    }\n    if (output[\"OriginGroups\"] !== undefined) {\n        contents.OriginGroups = deserializeAws_restXmlOriginGroups(output[\"OriginGroups\"], context);\n    }\n    if (output[\"DefaultCacheBehavior\"] !== undefined) {\n        contents.DefaultCacheBehavior = deserializeAws_restXmlDefaultCacheBehavior(output[\"DefaultCacheBehavior\"], context);\n    }\n    if (output[\"CacheBehaviors\"] !== undefined) {\n        contents.CacheBehaviors = deserializeAws_restXmlCacheBehaviors(output[\"CacheBehaviors\"], context);\n    }\n    if (output[\"CustomErrorResponses\"] !== undefined) {\n        contents.CustomErrorResponses = deserializeAws_restXmlCustomErrorResponses(output[\"CustomErrorResponses\"], context);\n    }\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    if (output[\"PriceClass\"] !== undefined) {\n        contents.PriceClass = smithy_client_1.expectString(output[\"PriceClass\"]);\n    }\n    if (output[\"Enabled\"] !== undefined) {\n        contents.Enabled = smithy_client_1.parseBoolean(output[\"Enabled\"]);\n    }\n    if (output[\"ViewerCertificate\"] !== undefined) {\n        contents.ViewerCertificate = deserializeAws_restXmlViewerCertificate(output[\"ViewerCertificate\"], context);\n    }\n    if (output[\"Restrictions\"] !== undefined) {\n        contents.Restrictions = deserializeAws_restXmlRestrictions(output[\"Restrictions\"], context);\n    }\n    if (output[\"WebACLId\"] !== undefined) {\n        contents.WebACLId = smithy_client_1.expectString(output[\"WebACLId\"]);\n    }\n    if (output[\"HttpVersion\"] !== undefined) {\n        contents.HttpVersion = smithy_client_1.expectString(output[\"HttpVersion\"]);\n    }\n    if (output[\"IsIPV6Enabled\"] !== undefined) {\n        contents.IsIPV6Enabled = smithy_client_1.parseBoolean(output[\"IsIPV6Enabled\"]);\n    }\n    if (output.AliasICPRecordals === \"\") {\n        contents.AliasICPRecordals = [];\n    }\n    if (output[\"AliasICPRecordals\"] !== undefined && output[\"AliasICPRecordals\"][\"AliasICPRecordal\"] !== undefined) {\n        contents.AliasICPRecordals = deserializeAws_restXmlAliasICPRecordals(smithy_client_1.getArrayIfSingleItem(output[\"AliasICPRecordals\"][\"AliasICPRecordal\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDistributionSummaryList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlDistributionSummary(entry, context);\n    });\n};\nconst deserializeAws_restXmlEncryptionEntities = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"EncryptionEntity\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlEncryptionEntityList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"EncryptionEntity\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlEncryptionEntity = (output, context) => {\n    const contents = {\n        PublicKeyId: undefined,\n        ProviderId: undefined,\n        FieldPatterns: undefined,\n    };\n    if (output[\"PublicKeyId\"] !== undefined) {\n        contents.PublicKeyId = smithy_client_1.expectString(output[\"PublicKeyId\"]);\n    }\n    if (output[\"ProviderId\"] !== undefined) {\n        contents.ProviderId = smithy_client_1.expectString(output[\"ProviderId\"]);\n    }\n    if (output[\"FieldPatterns\"] !== undefined) {\n        contents.FieldPatterns = deserializeAws_restXmlFieldPatterns(output[\"FieldPatterns\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlEncryptionEntityList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlEncryptionEntity(entry, context);\n    });\n};\nconst deserializeAws_restXmlEndPoint = (output, context) => {\n    const contents = {\n        StreamType: undefined,\n        KinesisStreamConfig: undefined,\n    };\n    if (output[\"StreamType\"] !== undefined) {\n        contents.StreamType = smithy_client_1.expectString(output[\"StreamType\"]);\n    }\n    if (output[\"KinesisStreamConfig\"] !== undefined) {\n        contents.KinesisStreamConfig = deserializeAws_restXmlKinesisStreamConfig(output[\"KinesisStreamConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlEndPointList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlEndPoint(entry, context);\n    });\n};\nconst deserializeAws_restXmlFieldLevelEncryption = (output, context) => {\n    const contents = {\n        Id: undefined,\n        LastModifiedTime: undefined,\n        FieldLevelEncryptionConfig: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"LastModifiedTime\"] !== undefined) {\n        contents.LastModifiedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModifiedTime\"]));\n    }\n    if (output[\"FieldLevelEncryptionConfig\"] !== undefined) {\n        contents.FieldLevelEncryptionConfig = deserializeAws_restXmlFieldLevelEncryptionConfig(output[\"FieldLevelEncryptionConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFieldLevelEncryptionConfig = (output, context) => {\n    const contents = {\n        CallerReference: undefined,\n        Comment: undefined,\n        QueryArgProfileConfig: undefined,\n        ContentTypeProfileConfig: undefined,\n    };\n    if (output[\"CallerReference\"] !== undefined) {\n        contents.CallerReference = smithy_client_1.expectString(output[\"CallerReference\"]);\n    }\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    if (output[\"QueryArgProfileConfig\"] !== undefined) {\n        contents.QueryArgProfileConfig = deserializeAws_restXmlQueryArgProfileConfig(output[\"QueryArgProfileConfig\"], context);\n    }\n    if (output[\"ContentTypeProfileConfig\"] !== undefined) {\n        contents.ContentTypeProfileConfig = deserializeAws_restXmlContentTypeProfileConfig(output[\"ContentTypeProfileConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFieldLevelEncryptionList = (output, context) => {\n    const contents = {\n        NextMarker: undefined,\n        MaxItems: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"FieldLevelEncryptionSummary\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlFieldLevelEncryptionSummaryList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"FieldLevelEncryptionSummary\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFieldLevelEncryptionProfile = (output, context) => {\n    const contents = {\n        Id: undefined,\n        LastModifiedTime: undefined,\n        FieldLevelEncryptionProfileConfig: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"LastModifiedTime\"] !== undefined) {\n        contents.LastModifiedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModifiedTime\"]));\n    }\n    if (output[\"FieldLevelEncryptionProfileConfig\"] !== undefined) {\n        contents.FieldLevelEncryptionProfileConfig = deserializeAws_restXmlFieldLevelEncryptionProfileConfig(output[\"FieldLevelEncryptionProfileConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFieldLevelEncryptionProfileConfig = (output, context) => {\n    const contents = {\n        Name: undefined,\n        CallerReference: undefined,\n        Comment: undefined,\n        EncryptionEntities: undefined,\n    };\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(output[\"Name\"]);\n    }\n    if (output[\"CallerReference\"] !== undefined) {\n        contents.CallerReference = smithy_client_1.expectString(output[\"CallerReference\"]);\n    }\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    if (output[\"EncryptionEntities\"] !== undefined) {\n        contents.EncryptionEntities = deserializeAws_restXmlEncryptionEntities(output[\"EncryptionEntities\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFieldLevelEncryptionProfileList = (output, context) => {\n    const contents = {\n        NextMarker: undefined,\n        MaxItems: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"FieldLevelEncryptionProfileSummary\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlFieldLevelEncryptionProfileSummaryList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"FieldLevelEncryptionProfileSummary\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFieldLevelEncryptionProfileSummary = (output, context) => {\n    const contents = {\n        Id: undefined,\n        LastModifiedTime: undefined,\n        Name: undefined,\n        EncryptionEntities: undefined,\n        Comment: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"LastModifiedTime\"] !== undefined) {\n        contents.LastModifiedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModifiedTime\"]));\n    }\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(output[\"Name\"]);\n    }\n    if (output[\"EncryptionEntities\"] !== undefined) {\n        contents.EncryptionEntities = deserializeAws_restXmlEncryptionEntities(output[\"EncryptionEntities\"], context);\n    }\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFieldLevelEncryptionProfileSummaryList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlFieldLevelEncryptionProfileSummary(entry, context);\n    });\n};\nconst deserializeAws_restXmlFieldLevelEncryptionSummary = (output, context) => {\n    const contents = {\n        Id: undefined,\n        LastModifiedTime: undefined,\n        Comment: undefined,\n        QueryArgProfileConfig: undefined,\n        ContentTypeProfileConfig: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"LastModifiedTime\"] !== undefined) {\n        contents.LastModifiedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModifiedTime\"]));\n    }\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    if (output[\"QueryArgProfileConfig\"] !== undefined) {\n        contents.QueryArgProfileConfig = deserializeAws_restXmlQueryArgProfileConfig(output[\"QueryArgProfileConfig\"], context);\n    }\n    if (output[\"ContentTypeProfileConfig\"] !== undefined) {\n        contents.ContentTypeProfileConfig = deserializeAws_restXmlContentTypeProfileConfig(output[\"ContentTypeProfileConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFieldLevelEncryptionSummaryList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlFieldLevelEncryptionSummary(entry, context);\n    });\n};\nconst deserializeAws_restXmlFieldList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlFieldPatternList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlFieldPatterns = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"FieldPattern\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlFieldPatternList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"FieldPattern\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlForwardedValues = (output, context) => {\n    const contents = {\n        QueryString: undefined,\n        Cookies: undefined,\n        Headers: undefined,\n        QueryStringCacheKeys: undefined,\n    };\n    if (output[\"QueryString\"] !== undefined) {\n        contents.QueryString = smithy_client_1.parseBoolean(output[\"QueryString\"]);\n    }\n    if (output[\"Cookies\"] !== undefined) {\n        contents.Cookies = deserializeAws_restXmlCookiePreference(output[\"Cookies\"], context);\n    }\n    if (output[\"Headers\"] !== undefined) {\n        contents.Headers = deserializeAws_restXmlHeaders(output[\"Headers\"], context);\n    }\n    if (output[\"QueryStringCacheKeys\"] !== undefined) {\n        contents.QueryStringCacheKeys = deserializeAws_restXmlQueryStringCacheKeys(output[\"QueryStringCacheKeys\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFunctionAssociation = (output, context) => {\n    const contents = {\n        FunctionARN: undefined,\n        EventType: undefined,\n    };\n    if (output[\"FunctionARN\"] !== undefined) {\n        contents.FunctionARN = smithy_client_1.expectString(output[\"FunctionARN\"]);\n    }\n    if (output[\"EventType\"] !== undefined) {\n        contents.EventType = smithy_client_1.expectString(output[\"EventType\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFunctionAssociationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlFunctionAssociation(entry, context);\n    });\n};\nconst deserializeAws_restXmlFunctionAssociations = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"FunctionAssociation\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlFunctionAssociationList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"FunctionAssociation\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFunctionConfig = (output, context) => {\n    const contents = {\n        Comment: undefined,\n        Runtime: undefined,\n    };\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    if (output[\"Runtime\"] !== undefined) {\n        contents.Runtime = smithy_client_1.expectString(output[\"Runtime\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFunctionExecutionLogList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlFunctionList = (output, context) => {\n    const contents = {\n        NextMarker: undefined,\n        MaxItems: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"FunctionSummary\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlFunctionSummaryList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"FunctionSummary\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFunctionMetadata = (output, context) => {\n    const contents = {\n        FunctionARN: undefined,\n        Stage: undefined,\n        CreatedTime: undefined,\n        LastModifiedTime: undefined,\n    };\n    if (output[\"FunctionARN\"] !== undefined) {\n        contents.FunctionARN = smithy_client_1.expectString(output[\"FunctionARN\"]);\n    }\n    if (output[\"Stage\"] !== undefined) {\n        contents.Stage = smithy_client_1.expectString(output[\"Stage\"]);\n    }\n    if (output[\"CreatedTime\"] !== undefined) {\n        contents.CreatedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"CreatedTime\"]));\n    }\n    if (output[\"LastModifiedTime\"] !== undefined) {\n        contents.LastModifiedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModifiedTime\"]));\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFunctionSummary = (output, context) => {\n    const contents = {\n        Name: undefined,\n        Status: undefined,\n        FunctionConfig: undefined,\n        FunctionMetadata: undefined,\n    };\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(output[\"Name\"]);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    if (output[\"FunctionConfig\"] !== undefined) {\n        contents.FunctionConfig = deserializeAws_restXmlFunctionConfig(output[\"FunctionConfig\"], context);\n    }\n    if (output[\"FunctionMetadata\"] !== undefined) {\n        contents.FunctionMetadata = deserializeAws_restXmlFunctionMetadata(output[\"FunctionMetadata\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFunctionSummaryList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlFunctionSummary(entry, context);\n    });\n};\nconst deserializeAws_restXmlGeoRestriction = (output, context) => {\n    const contents = {\n        RestrictionType: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"RestrictionType\"] !== undefined) {\n        contents.RestrictionType = smithy_client_1.expectString(output[\"RestrictionType\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Location\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlLocationList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Location\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlHeaderList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlHeaders = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Name\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlHeaderList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Name\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidation = (output, context) => {\n    const contents = {\n        Id: undefined,\n        Status: undefined,\n        CreateTime: undefined,\n        InvalidationBatch: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    if (output[\"CreateTime\"] !== undefined) {\n        contents.CreateTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"CreateTime\"]));\n    }\n    if (output[\"InvalidationBatch\"] !== undefined) {\n        contents.InvalidationBatch = deserializeAws_restXmlInvalidationBatch(output[\"InvalidationBatch\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidationBatch = (output, context) => {\n    const contents = {\n        Paths: undefined,\n        CallerReference: undefined,\n    };\n    if (output[\"Paths\"] !== undefined) {\n        contents.Paths = deserializeAws_restXmlPaths(output[\"Paths\"], context);\n    }\n    if (output[\"CallerReference\"] !== undefined) {\n        contents.CallerReference = smithy_client_1.expectString(output[\"CallerReference\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidationList = (output, context) => {\n    const contents = {\n        Marker: undefined,\n        NextMarker: undefined,\n        MaxItems: undefined,\n        IsTruncated: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Marker\"] !== undefined) {\n        contents.Marker = smithy_client_1.expectString(output[\"Marker\"]);\n    }\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(output[\"IsTruncated\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"InvalidationSummary\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlInvalidationSummaryList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"InvalidationSummary\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidationSummary = (output, context) => {\n    const contents = {\n        Id: undefined,\n        CreateTime: undefined,\n        Status: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"CreateTime\"] !== undefined) {\n        contents.CreateTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"CreateTime\"]));\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInvalidationSummaryList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlInvalidationSummary(entry, context);\n    });\n};\nconst deserializeAws_restXmlKeyGroup = (output, context) => {\n    const contents = {\n        Id: undefined,\n        LastModifiedTime: undefined,\n        KeyGroupConfig: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"LastModifiedTime\"] !== undefined) {\n        contents.LastModifiedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModifiedTime\"]));\n    }\n    if (output[\"KeyGroupConfig\"] !== undefined) {\n        contents.KeyGroupConfig = deserializeAws_restXmlKeyGroupConfig(output[\"KeyGroupConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlKeyGroupConfig = (output, context) => {\n    const contents = {\n        Name: undefined,\n        Items: undefined,\n        Comment: undefined,\n    };\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(output[\"Name\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"PublicKey\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlPublicKeyIdList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"PublicKey\"]), context);\n    }\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlKeyGroupList = (output, context) => {\n    const contents = {\n        NextMarker: undefined,\n        MaxItems: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"KeyGroupSummary\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlKeyGroupSummaryList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"KeyGroupSummary\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlKeyGroupSummary = (output, context) => {\n    const contents = {\n        KeyGroup: undefined,\n    };\n    if (output[\"KeyGroup\"] !== undefined) {\n        contents.KeyGroup = deserializeAws_restXmlKeyGroup(output[\"KeyGroup\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlKeyGroupSummaryList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlKeyGroupSummary(entry, context);\n    });\n};\nconst deserializeAws_restXmlKeyPairIdList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlKeyPairIds = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"KeyPairId\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlKeyPairIdList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"KeyPairId\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlKGKeyPairIds = (output, context) => {\n    const contents = {\n        KeyGroupId: undefined,\n        KeyPairIds: undefined,\n    };\n    if (output[\"KeyGroupId\"] !== undefined) {\n        contents.KeyGroupId = smithy_client_1.expectString(output[\"KeyGroupId\"]);\n    }\n    if (output[\"KeyPairIds\"] !== undefined) {\n        contents.KeyPairIds = deserializeAws_restXmlKeyPairIds(output[\"KeyPairIds\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlKGKeyPairIdsList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlKGKeyPairIds(entry, context);\n    });\n};\nconst deserializeAws_restXmlKinesisStreamConfig = (output, context) => {\n    const contents = {\n        RoleARN: undefined,\n        StreamARN: undefined,\n    };\n    if (output[\"RoleARN\"] !== undefined) {\n        contents.RoleARN = smithy_client_1.expectString(output[\"RoleARN\"]);\n    }\n    if (output[\"StreamARN\"] !== undefined) {\n        contents.StreamARN = smithy_client_1.expectString(output[\"StreamARN\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLambdaFunctionAssociation = (output, context) => {\n    const contents = {\n        LambdaFunctionARN: undefined,\n        EventType: undefined,\n        IncludeBody: undefined,\n    };\n    if (output[\"LambdaFunctionARN\"] !== undefined) {\n        contents.LambdaFunctionARN = smithy_client_1.expectString(output[\"LambdaFunctionARN\"]);\n    }\n    if (output[\"EventType\"] !== undefined) {\n        contents.EventType = smithy_client_1.expectString(output[\"EventType\"]);\n    }\n    if (output[\"IncludeBody\"] !== undefined) {\n        contents.IncludeBody = smithy_client_1.parseBoolean(output[\"IncludeBody\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLambdaFunctionAssociationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlLambdaFunctionAssociation(entry, context);\n    });\n};\nconst deserializeAws_restXmlLambdaFunctionAssociations = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"LambdaFunctionAssociation\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlLambdaFunctionAssociationList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"LambdaFunctionAssociation\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLocationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlLoggingConfig = (output, context) => {\n    const contents = {\n        Enabled: undefined,\n        IncludeCookies: undefined,\n        Bucket: undefined,\n        Prefix: undefined,\n    };\n    if (output[\"Enabled\"] !== undefined) {\n        contents.Enabled = smithy_client_1.parseBoolean(output[\"Enabled\"]);\n    }\n    if (output[\"IncludeCookies\"] !== undefined) {\n        contents.IncludeCookies = smithy_client_1.parseBoolean(output[\"IncludeCookies\"]);\n    }\n    if (output[\"Bucket\"] !== undefined) {\n        contents.Bucket = smithy_client_1.expectString(output[\"Bucket\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(output[\"Prefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMethodsList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlMonitoringSubscription = (output, context) => {\n    const contents = {\n        RealtimeMetricsSubscriptionConfig: undefined,\n    };\n    if (output[\"RealtimeMetricsSubscriptionConfig\"] !== undefined) {\n        contents.RealtimeMetricsSubscriptionConfig = deserializeAws_restXmlRealtimeMetricsSubscriptionConfig(output[\"RealtimeMetricsSubscriptionConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOrigin = (output, context) => {\n    const contents = {\n        Id: undefined,\n        DomainName: undefined,\n        OriginPath: undefined,\n        CustomHeaders: undefined,\n        S3OriginConfig: undefined,\n        CustomOriginConfig: undefined,\n        ConnectionAttempts: undefined,\n        ConnectionTimeout: undefined,\n        OriginShield: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"DomainName\"] !== undefined) {\n        contents.DomainName = smithy_client_1.expectString(output[\"DomainName\"]);\n    }\n    if (output[\"OriginPath\"] !== undefined) {\n        contents.OriginPath = smithy_client_1.expectString(output[\"OriginPath\"]);\n    }\n    if (output[\"CustomHeaders\"] !== undefined) {\n        contents.CustomHeaders = deserializeAws_restXmlCustomHeaders(output[\"CustomHeaders\"], context);\n    }\n    if (output[\"S3OriginConfig\"] !== undefined) {\n        contents.S3OriginConfig = deserializeAws_restXmlS3OriginConfig(output[\"S3OriginConfig\"], context);\n    }\n    if (output[\"CustomOriginConfig\"] !== undefined) {\n        contents.CustomOriginConfig = deserializeAws_restXmlCustomOriginConfig(output[\"CustomOriginConfig\"], context);\n    }\n    if (output[\"ConnectionAttempts\"] !== undefined) {\n        contents.ConnectionAttempts = smithy_client_1.strictParseInt32(output[\"ConnectionAttempts\"]);\n    }\n    if (output[\"ConnectionTimeout\"] !== undefined) {\n        contents.ConnectionTimeout = smithy_client_1.strictParseInt32(output[\"ConnectionTimeout\"]);\n    }\n    if (output[\"OriginShield\"] !== undefined) {\n        contents.OriginShield = deserializeAws_restXmlOriginShield(output[\"OriginShield\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginCustomHeader = (output, context) => {\n    const contents = {\n        HeaderName: undefined,\n        HeaderValue: undefined,\n    };\n    if (output[\"HeaderName\"] !== undefined) {\n        contents.HeaderName = smithy_client_1.expectString(output[\"HeaderName\"]);\n    }\n    if (output[\"HeaderValue\"] !== undefined) {\n        contents.HeaderValue = smithy_client_1.expectString(output[\"HeaderValue\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginCustomHeadersList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlOriginCustomHeader(entry, context);\n    });\n};\nconst deserializeAws_restXmlOriginGroup = (output, context) => {\n    const contents = {\n        Id: undefined,\n        FailoverCriteria: undefined,\n        Members: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"FailoverCriteria\"] !== undefined) {\n        contents.FailoverCriteria = deserializeAws_restXmlOriginGroupFailoverCriteria(output[\"FailoverCriteria\"], context);\n    }\n    if (output[\"Members\"] !== undefined) {\n        contents.Members = deserializeAws_restXmlOriginGroupMembers(output[\"Members\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginGroupFailoverCriteria = (output, context) => {\n    const contents = {\n        StatusCodes: undefined,\n    };\n    if (output[\"StatusCodes\"] !== undefined) {\n        contents.StatusCodes = deserializeAws_restXmlStatusCodes(output[\"StatusCodes\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginGroupList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlOriginGroup(entry, context);\n    });\n};\nconst deserializeAws_restXmlOriginGroupMember = (output, context) => {\n    const contents = {\n        OriginId: undefined,\n    };\n    if (output[\"OriginId\"] !== undefined) {\n        contents.OriginId = smithy_client_1.expectString(output[\"OriginId\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginGroupMemberList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlOriginGroupMember(entry, context);\n    });\n};\nconst deserializeAws_restXmlOriginGroupMembers = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"OriginGroupMember\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlOriginGroupMemberList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"OriginGroupMember\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginGroups = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"OriginGroup\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlOriginGroupList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"OriginGroup\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlOrigin(entry, context);\n    });\n};\nconst deserializeAws_restXmlOriginRequestPolicy = (output, context) => {\n    const contents = {\n        Id: undefined,\n        LastModifiedTime: undefined,\n        OriginRequestPolicyConfig: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"LastModifiedTime\"] !== undefined) {\n        contents.LastModifiedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModifiedTime\"]));\n    }\n    if (output[\"OriginRequestPolicyConfig\"] !== undefined) {\n        contents.OriginRequestPolicyConfig = deserializeAws_restXmlOriginRequestPolicyConfig(output[\"OriginRequestPolicyConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginRequestPolicyConfig = (output, context) => {\n    const contents = {\n        Comment: undefined,\n        Name: undefined,\n        HeadersConfig: undefined,\n        CookiesConfig: undefined,\n        QueryStringsConfig: undefined,\n    };\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(output[\"Name\"]);\n    }\n    if (output[\"HeadersConfig\"] !== undefined) {\n        contents.HeadersConfig = deserializeAws_restXmlOriginRequestPolicyHeadersConfig(output[\"HeadersConfig\"], context);\n    }\n    if (output[\"CookiesConfig\"] !== undefined) {\n        contents.CookiesConfig = deserializeAws_restXmlOriginRequestPolicyCookiesConfig(output[\"CookiesConfig\"], context);\n    }\n    if (output[\"QueryStringsConfig\"] !== undefined) {\n        contents.QueryStringsConfig = deserializeAws_restXmlOriginRequestPolicyQueryStringsConfig(output[\"QueryStringsConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginRequestPolicyCookiesConfig = (output, context) => {\n    const contents = {\n        CookieBehavior: undefined,\n        Cookies: undefined,\n    };\n    if (output[\"CookieBehavior\"] !== undefined) {\n        contents.CookieBehavior = smithy_client_1.expectString(output[\"CookieBehavior\"]);\n    }\n    if (output[\"Cookies\"] !== undefined) {\n        contents.Cookies = deserializeAws_restXmlCookieNames(output[\"Cookies\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginRequestPolicyHeadersConfig = (output, context) => {\n    const contents = {\n        HeaderBehavior: undefined,\n        Headers: undefined,\n    };\n    if (output[\"HeaderBehavior\"] !== undefined) {\n        contents.HeaderBehavior = smithy_client_1.expectString(output[\"HeaderBehavior\"]);\n    }\n    if (output[\"Headers\"] !== undefined) {\n        contents.Headers = deserializeAws_restXmlHeaders(output[\"Headers\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginRequestPolicyList = (output, context) => {\n    const contents = {\n        NextMarker: undefined,\n        MaxItems: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"OriginRequestPolicySummary\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlOriginRequestPolicySummaryList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"OriginRequestPolicySummary\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginRequestPolicyQueryStringsConfig = (output, context) => {\n    const contents = {\n        QueryStringBehavior: undefined,\n        QueryStrings: undefined,\n    };\n    if (output[\"QueryStringBehavior\"] !== undefined) {\n        contents.QueryStringBehavior = smithy_client_1.expectString(output[\"QueryStringBehavior\"]);\n    }\n    if (output[\"QueryStrings\"] !== undefined) {\n        contents.QueryStrings = deserializeAws_restXmlQueryStringNames(output[\"QueryStrings\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginRequestPolicySummary = (output, context) => {\n    const contents = {\n        Type: undefined,\n        OriginRequestPolicy: undefined,\n    };\n    if (output[\"Type\"] !== undefined) {\n        contents.Type = smithy_client_1.expectString(output[\"Type\"]);\n    }\n    if (output[\"OriginRequestPolicy\"] !== undefined) {\n        contents.OriginRequestPolicy = deserializeAws_restXmlOriginRequestPolicy(output[\"OriginRequestPolicy\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginRequestPolicySummaryList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlOriginRequestPolicySummary(entry, context);\n    });\n};\nconst deserializeAws_restXmlOrigins = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Origin\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlOriginList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Origin\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginShield = (output, context) => {\n    const contents = {\n        Enabled: undefined,\n        OriginShieldRegion: undefined,\n    };\n    if (output[\"Enabled\"] !== undefined) {\n        contents.Enabled = smithy_client_1.parseBoolean(output[\"Enabled\"]);\n    }\n    if (output[\"OriginShieldRegion\"] !== undefined) {\n        contents.OriginShieldRegion = smithy_client_1.expectString(output[\"OriginShieldRegion\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOriginSslProtocols = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"SslProtocol\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlSslProtocolsList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"SslProtocol\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlParametersInCacheKeyAndForwardedToOrigin = (output, context) => {\n    const contents = {\n        EnableAcceptEncodingGzip: undefined,\n        EnableAcceptEncodingBrotli: undefined,\n        HeadersConfig: undefined,\n        CookiesConfig: undefined,\n        QueryStringsConfig: undefined,\n    };\n    if (output[\"EnableAcceptEncodingGzip\"] !== undefined) {\n        contents.EnableAcceptEncodingGzip = smithy_client_1.parseBoolean(output[\"EnableAcceptEncodingGzip\"]);\n    }\n    if (output[\"EnableAcceptEncodingBrotli\"] !== undefined) {\n        contents.EnableAcceptEncodingBrotli = smithy_client_1.parseBoolean(output[\"EnableAcceptEncodingBrotli\"]);\n    }\n    if (output[\"HeadersConfig\"] !== undefined) {\n        contents.HeadersConfig = deserializeAws_restXmlCachePolicyHeadersConfig(output[\"HeadersConfig\"], context);\n    }\n    if (output[\"CookiesConfig\"] !== undefined) {\n        contents.CookiesConfig = deserializeAws_restXmlCachePolicyCookiesConfig(output[\"CookiesConfig\"], context);\n    }\n    if (output[\"QueryStringsConfig\"] !== undefined) {\n        contents.QueryStringsConfig = deserializeAws_restXmlCachePolicyQueryStringsConfig(output[\"QueryStringsConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlPathList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlPaths = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Path\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlPathList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Path\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlPublicKey = (output, context) => {\n    const contents = {\n        Id: undefined,\n        CreatedTime: undefined,\n        PublicKeyConfig: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"CreatedTime\"] !== undefined) {\n        contents.CreatedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"CreatedTime\"]));\n    }\n    if (output[\"PublicKeyConfig\"] !== undefined) {\n        contents.PublicKeyConfig = deserializeAws_restXmlPublicKeyConfig(output[\"PublicKeyConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlPublicKeyConfig = (output, context) => {\n    const contents = {\n        CallerReference: undefined,\n        Name: undefined,\n        EncodedKey: undefined,\n        Comment: undefined,\n    };\n    if (output[\"CallerReference\"] !== undefined) {\n        contents.CallerReference = smithy_client_1.expectString(output[\"CallerReference\"]);\n    }\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(output[\"Name\"]);\n    }\n    if (output[\"EncodedKey\"] !== undefined) {\n        contents.EncodedKey = smithy_client_1.expectString(output[\"EncodedKey\"]);\n    }\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlPublicKeyIdList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlPublicKeyList = (output, context) => {\n    const contents = {\n        NextMarker: undefined,\n        MaxItems: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"PublicKeySummary\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlPublicKeySummaryList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"PublicKeySummary\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlPublicKeySummary = (output, context) => {\n    const contents = {\n        Id: undefined,\n        Name: undefined,\n        CreatedTime: undefined,\n        EncodedKey: undefined,\n        Comment: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(output[\"Name\"]);\n    }\n    if (output[\"CreatedTime\"] !== undefined) {\n        contents.CreatedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"CreatedTime\"]));\n    }\n    if (output[\"EncodedKey\"] !== undefined) {\n        contents.EncodedKey = smithy_client_1.expectString(output[\"EncodedKey\"]);\n    }\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlPublicKeySummaryList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlPublicKeySummary(entry, context);\n    });\n};\nconst deserializeAws_restXmlQueryArgProfile = (output, context) => {\n    const contents = {\n        QueryArg: undefined,\n        ProfileId: undefined,\n    };\n    if (output[\"QueryArg\"] !== undefined) {\n        contents.QueryArg = smithy_client_1.expectString(output[\"QueryArg\"]);\n    }\n    if (output[\"ProfileId\"] !== undefined) {\n        contents.ProfileId = smithy_client_1.expectString(output[\"ProfileId\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlQueryArgProfileConfig = (output, context) => {\n    const contents = {\n        ForwardWhenQueryArgProfileIsUnknown: undefined,\n        QueryArgProfiles: undefined,\n    };\n    if (output[\"ForwardWhenQueryArgProfileIsUnknown\"] !== undefined) {\n        contents.ForwardWhenQueryArgProfileIsUnknown = smithy_client_1.parseBoolean(output[\"ForwardWhenQueryArgProfileIsUnknown\"]);\n    }\n    if (output[\"QueryArgProfiles\"] !== undefined) {\n        contents.QueryArgProfiles = deserializeAws_restXmlQueryArgProfiles(output[\"QueryArgProfiles\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlQueryArgProfileList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlQueryArgProfile(entry, context);\n    });\n};\nconst deserializeAws_restXmlQueryArgProfiles = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"QueryArgProfile\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlQueryArgProfileList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"QueryArgProfile\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlQueryStringCacheKeys = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Name\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlQueryStringCacheKeysList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Name\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlQueryStringCacheKeysList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlQueryStringNames = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Name\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlQueryStringNamesList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Name\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlQueryStringNamesList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlRealtimeLogConfig = (output, context) => {\n    const contents = {\n        ARN: undefined,\n        Name: undefined,\n        SamplingRate: undefined,\n        EndPoints: undefined,\n        Fields: undefined,\n    };\n    if (output[\"ARN\"] !== undefined) {\n        contents.ARN = smithy_client_1.expectString(output[\"ARN\"]);\n    }\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(output[\"Name\"]);\n    }\n    if (output[\"SamplingRate\"] !== undefined) {\n        contents.SamplingRate = smithy_client_1.strictParseLong(output[\"SamplingRate\"]);\n    }\n    if (output.EndPoints === \"\") {\n        contents.EndPoints = [];\n    }\n    if (output[\"EndPoints\"] !== undefined && output[\"EndPoints\"][\"member\"] !== undefined) {\n        contents.EndPoints = deserializeAws_restXmlEndPointList(smithy_client_1.getArrayIfSingleItem(output[\"EndPoints\"][\"member\"]), context);\n    }\n    if (output.Fields === \"\") {\n        contents.Fields = [];\n    }\n    if (output[\"Fields\"] !== undefined && output[\"Fields\"][\"Field\"] !== undefined) {\n        contents.Fields = deserializeAws_restXmlFieldList(smithy_client_1.getArrayIfSingleItem(output[\"Fields\"][\"Field\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRealtimeLogConfigList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlRealtimeLogConfig(entry, context);\n    });\n};\nconst deserializeAws_restXmlRealtimeLogConfigs = (output, context) => {\n    const contents = {\n        MaxItems: undefined,\n        Items: undefined,\n        IsTruncated: undefined,\n        Marker: undefined,\n        NextMarker: undefined,\n    };\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"member\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlRealtimeLogConfigList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"member\"]), context);\n    }\n    if (output[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(output[\"IsTruncated\"]);\n    }\n    if (output[\"Marker\"] !== undefined) {\n        contents.Marker = smithy_client_1.expectString(output[\"Marker\"]);\n    }\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRealtimeMetricsSubscriptionConfig = (output, context) => {\n    const contents = {\n        RealtimeMetricsSubscriptionStatus: undefined,\n    };\n    if (output[\"RealtimeMetricsSubscriptionStatus\"] !== undefined) {\n        contents.RealtimeMetricsSubscriptionStatus = smithy_client_1.expectString(output[\"RealtimeMetricsSubscriptionStatus\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicy = (output, context) => {\n    const contents = {\n        Id: undefined,\n        LastModifiedTime: undefined,\n        ResponseHeadersPolicyConfig: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"LastModifiedTime\"] !== undefined) {\n        contents.LastModifiedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModifiedTime\"]));\n    }\n    if (output[\"ResponseHeadersPolicyConfig\"] !== undefined) {\n        contents.ResponseHeadersPolicyConfig = deserializeAws_restXmlResponseHeadersPolicyConfig(output[\"ResponseHeadersPolicyConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyAccessControlAllowHeaders = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Header\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlAccessControlAllowHeadersList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Header\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyAccessControlAllowMethods = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Method\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlAccessControlAllowMethodsList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Method\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyAccessControlAllowOrigins = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Origin\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlAccessControlAllowOriginsList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Origin\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyAccessControlExposeHeaders = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Header\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlAccessControlExposeHeadersList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Header\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyConfig = (output, context) => {\n    const contents = {\n        Comment: undefined,\n        Name: undefined,\n        CorsConfig: undefined,\n        SecurityHeadersConfig: undefined,\n        CustomHeadersConfig: undefined,\n    };\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(output[\"Name\"]);\n    }\n    if (output[\"CorsConfig\"] !== undefined) {\n        contents.CorsConfig = deserializeAws_restXmlResponseHeadersPolicyCorsConfig(output[\"CorsConfig\"], context);\n    }\n    if (output[\"SecurityHeadersConfig\"] !== undefined) {\n        contents.SecurityHeadersConfig = deserializeAws_restXmlResponseHeadersPolicySecurityHeadersConfig(output[\"SecurityHeadersConfig\"], context);\n    }\n    if (output[\"CustomHeadersConfig\"] !== undefined) {\n        contents.CustomHeadersConfig = deserializeAws_restXmlResponseHeadersPolicyCustomHeadersConfig(output[\"CustomHeadersConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyContentSecurityPolicy = (output, context) => {\n    const contents = {\n        Override: undefined,\n        ContentSecurityPolicy: undefined,\n    };\n    if (output[\"Override\"] !== undefined) {\n        contents.Override = smithy_client_1.parseBoolean(output[\"Override\"]);\n    }\n    if (output[\"ContentSecurityPolicy\"] !== undefined) {\n        contents.ContentSecurityPolicy = smithy_client_1.expectString(output[\"ContentSecurityPolicy\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyContentTypeOptions = (output, context) => {\n    const contents = {\n        Override: undefined,\n    };\n    if (output[\"Override\"] !== undefined) {\n        contents.Override = smithy_client_1.parseBoolean(output[\"Override\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyCorsConfig = (output, context) => {\n    const contents = {\n        AccessControlAllowOrigins: undefined,\n        AccessControlAllowHeaders: undefined,\n        AccessControlAllowMethods: undefined,\n        AccessControlAllowCredentials: undefined,\n        AccessControlExposeHeaders: undefined,\n        AccessControlMaxAgeSec: undefined,\n        OriginOverride: undefined,\n    };\n    if (output[\"AccessControlAllowOrigins\"] !== undefined) {\n        contents.AccessControlAllowOrigins = deserializeAws_restXmlResponseHeadersPolicyAccessControlAllowOrigins(output[\"AccessControlAllowOrigins\"], context);\n    }\n    if (output[\"AccessControlAllowHeaders\"] !== undefined) {\n        contents.AccessControlAllowHeaders = deserializeAws_restXmlResponseHeadersPolicyAccessControlAllowHeaders(output[\"AccessControlAllowHeaders\"], context);\n    }\n    if (output[\"AccessControlAllowMethods\"] !== undefined) {\n        contents.AccessControlAllowMethods = deserializeAws_restXmlResponseHeadersPolicyAccessControlAllowMethods(output[\"AccessControlAllowMethods\"], context);\n    }\n    if (output[\"AccessControlAllowCredentials\"] !== undefined) {\n        contents.AccessControlAllowCredentials = smithy_client_1.parseBoolean(output[\"AccessControlAllowCredentials\"]);\n    }\n    if (output[\"AccessControlExposeHeaders\"] !== undefined) {\n        contents.AccessControlExposeHeaders = deserializeAws_restXmlResponseHeadersPolicyAccessControlExposeHeaders(output[\"AccessControlExposeHeaders\"], context);\n    }\n    if (output[\"AccessControlMaxAgeSec\"] !== undefined) {\n        contents.AccessControlMaxAgeSec = smithy_client_1.strictParseInt32(output[\"AccessControlMaxAgeSec\"]);\n    }\n    if (output[\"OriginOverride\"] !== undefined) {\n        contents.OriginOverride = smithy_client_1.parseBoolean(output[\"OriginOverride\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyCustomHeader = (output, context) => {\n    const contents = {\n        Header: undefined,\n        Value: undefined,\n        Override: undefined,\n    };\n    if (output[\"Header\"] !== undefined) {\n        contents.Header = smithy_client_1.expectString(output[\"Header\"]);\n    }\n    if (output[\"Value\"] !== undefined) {\n        contents.Value = smithy_client_1.expectString(output[\"Value\"]);\n    }\n    if (output[\"Override\"] !== undefined) {\n        contents.Override = smithy_client_1.parseBoolean(output[\"Override\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyCustomHeaderList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlResponseHeadersPolicyCustomHeader(entry, context);\n    });\n};\nconst deserializeAws_restXmlResponseHeadersPolicyCustomHeadersConfig = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"ResponseHeadersPolicyCustomHeader\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlResponseHeadersPolicyCustomHeaderList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"ResponseHeadersPolicyCustomHeader\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyFrameOptions = (output, context) => {\n    const contents = {\n        Override: undefined,\n        FrameOption: undefined,\n    };\n    if (output[\"Override\"] !== undefined) {\n        contents.Override = smithy_client_1.parseBoolean(output[\"Override\"]);\n    }\n    if (output[\"FrameOption\"] !== undefined) {\n        contents.FrameOption = smithy_client_1.expectString(output[\"FrameOption\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyList = (output, context) => {\n    const contents = {\n        NextMarker: undefined,\n        MaxItems: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"ResponseHeadersPolicySummary\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlResponseHeadersPolicySummaryList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"ResponseHeadersPolicySummary\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyReferrerPolicy = (output, context) => {\n    const contents = {\n        Override: undefined,\n        ReferrerPolicy: undefined,\n    };\n    if (output[\"Override\"] !== undefined) {\n        contents.Override = smithy_client_1.parseBoolean(output[\"Override\"]);\n    }\n    if (output[\"ReferrerPolicy\"] !== undefined) {\n        contents.ReferrerPolicy = smithy_client_1.expectString(output[\"ReferrerPolicy\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicySecurityHeadersConfig = (output, context) => {\n    const contents = {\n        XSSProtection: undefined,\n        FrameOptions: undefined,\n        ReferrerPolicy: undefined,\n        ContentSecurityPolicy: undefined,\n        ContentTypeOptions: undefined,\n        StrictTransportSecurity: undefined,\n    };\n    if (output[\"XSSProtection\"] !== undefined) {\n        contents.XSSProtection = deserializeAws_restXmlResponseHeadersPolicyXSSProtection(output[\"XSSProtection\"], context);\n    }\n    if (output[\"FrameOptions\"] !== undefined) {\n        contents.FrameOptions = deserializeAws_restXmlResponseHeadersPolicyFrameOptions(output[\"FrameOptions\"], context);\n    }\n    if (output[\"ReferrerPolicy\"] !== undefined) {\n        contents.ReferrerPolicy = deserializeAws_restXmlResponseHeadersPolicyReferrerPolicy(output[\"ReferrerPolicy\"], context);\n    }\n    if (output[\"ContentSecurityPolicy\"] !== undefined) {\n        contents.ContentSecurityPolicy = deserializeAws_restXmlResponseHeadersPolicyContentSecurityPolicy(output[\"ContentSecurityPolicy\"], context);\n    }\n    if (output[\"ContentTypeOptions\"] !== undefined) {\n        contents.ContentTypeOptions = deserializeAws_restXmlResponseHeadersPolicyContentTypeOptions(output[\"ContentTypeOptions\"], context);\n    }\n    if (output[\"StrictTransportSecurity\"] !== undefined) {\n        contents.StrictTransportSecurity = deserializeAws_restXmlResponseHeadersPolicyStrictTransportSecurity(output[\"StrictTransportSecurity\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicyStrictTransportSecurity = (output, context) => {\n    const contents = {\n        Override: undefined,\n        IncludeSubdomains: undefined,\n        Preload: undefined,\n        AccessControlMaxAgeSec: undefined,\n    };\n    if (output[\"Override\"] !== undefined) {\n        contents.Override = smithy_client_1.parseBoolean(output[\"Override\"]);\n    }\n    if (output[\"IncludeSubdomains\"] !== undefined) {\n        contents.IncludeSubdomains = smithy_client_1.parseBoolean(output[\"IncludeSubdomains\"]);\n    }\n    if (output[\"Preload\"] !== undefined) {\n        contents.Preload = smithy_client_1.parseBoolean(output[\"Preload\"]);\n    }\n    if (output[\"AccessControlMaxAgeSec\"] !== undefined) {\n        contents.AccessControlMaxAgeSec = smithy_client_1.strictParseInt32(output[\"AccessControlMaxAgeSec\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicySummary = (output, context) => {\n    const contents = {\n        Type: undefined,\n        ResponseHeadersPolicy: undefined,\n    };\n    if (output[\"Type\"] !== undefined) {\n        contents.Type = smithy_client_1.expectString(output[\"Type\"]);\n    }\n    if (output[\"ResponseHeadersPolicy\"] !== undefined) {\n        contents.ResponseHeadersPolicy = deserializeAws_restXmlResponseHeadersPolicy(output[\"ResponseHeadersPolicy\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlResponseHeadersPolicySummaryList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlResponseHeadersPolicySummary(entry, context);\n    });\n};\nconst deserializeAws_restXmlResponseHeadersPolicyXSSProtection = (output, context) => {\n    const contents = {\n        Override: undefined,\n        Protection: undefined,\n        ModeBlock: undefined,\n        ReportUri: undefined,\n    };\n    if (output[\"Override\"] !== undefined) {\n        contents.Override = smithy_client_1.parseBoolean(output[\"Override\"]);\n    }\n    if (output[\"Protection\"] !== undefined) {\n        contents.Protection = smithy_client_1.parseBoolean(output[\"Protection\"]);\n    }\n    if (output[\"ModeBlock\"] !== undefined) {\n        contents.ModeBlock = smithy_client_1.parseBoolean(output[\"ModeBlock\"]);\n    }\n    if (output[\"ReportUri\"] !== undefined) {\n        contents.ReportUri = smithy_client_1.expectString(output[\"ReportUri\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRestrictions = (output, context) => {\n    const contents = {\n        GeoRestriction: undefined,\n    };\n    if (output[\"GeoRestriction\"] !== undefined) {\n        contents.GeoRestriction = deserializeAws_restXmlGeoRestriction(output[\"GeoRestriction\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlS3Origin = (output, context) => {\n    const contents = {\n        DomainName: undefined,\n        OriginAccessIdentity: undefined,\n    };\n    if (output[\"DomainName\"] !== undefined) {\n        contents.DomainName = smithy_client_1.expectString(output[\"DomainName\"]);\n    }\n    if (output[\"OriginAccessIdentity\"] !== undefined) {\n        contents.OriginAccessIdentity = smithy_client_1.expectString(output[\"OriginAccessIdentity\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlS3OriginConfig = (output, context) => {\n    const contents = {\n        OriginAccessIdentity: undefined,\n    };\n    if (output[\"OriginAccessIdentity\"] !== undefined) {\n        contents.OriginAccessIdentity = smithy_client_1.expectString(output[\"OriginAccessIdentity\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlSigner = (output, context) => {\n    const contents = {\n        AwsAccountNumber: undefined,\n        KeyPairIds: undefined,\n    };\n    if (output[\"AwsAccountNumber\"] !== undefined) {\n        contents.AwsAccountNumber = smithy_client_1.expectString(output[\"AwsAccountNumber\"]);\n    }\n    if (output[\"KeyPairIds\"] !== undefined) {\n        contents.KeyPairIds = deserializeAws_restXmlKeyPairIds(output[\"KeyPairIds\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlSignerList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlSigner(entry, context);\n    });\n};\nconst deserializeAws_restXmlSslProtocolsList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlStatusCodeList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.strictParseInt32(entry);\n    });\n};\nconst deserializeAws_restXmlStatusCodes = (output, context) => {\n    const contents = {\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"StatusCode\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlStatusCodeList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"StatusCode\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlStreamingDistribution = (output, context) => {\n    const contents = {\n        Id: undefined,\n        ARN: undefined,\n        Status: undefined,\n        LastModifiedTime: undefined,\n        DomainName: undefined,\n        ActiveTrustedSigners: undefined,\n        StreamingDistributionConfig: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"ARN\"] !== undefined) {\n        contents.ARN = smithy_client_1.expectString(output[\"ARN\"]);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    if (output[\"LastModifiedTime\"] !== undefined) {\n        contents.LastModifiedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModifiedTime\"]));\n    }\n    if (output[\"DomainName\"] !== undefined) {\n        contents.DomainName = smithy_client_1.expectString(output[\"DomainName\"]);\n    }\n    if (output[\"ActiveTrustedSigners\"] !== undefined) {\n        contents.ActiveTrustedSigners = deserializeAws_restXmlActiveTrustedSigners(output[\"ActiveTrustedSigners\"], context);\n    }\n    if (output[\"StreamingDistributionConfig\"] !== undefined) {\n        contents.StreamingDistributionConfig = deserializeAws_restXmlStreamingDistributionConfig(output[\"StreamingDistributionConfig\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlStreamingDistributionConfig = (output, context) => {\n    const contents = {\n        CallerReference: undefined,\n        S3Origin: undefined,\n        Aliases: undefined,\n        Comment: undefined,\n        Logging: undefined,\n        TrustedSigners: undefined,\n        PriceClass: undefined,\n        Enabled: undefined,\n    };\n    if (output[\"CallerReference\"] !== undefined) {\n        contents.CallerReference = smithy_client_1.expectString(output[\"CallerReference\"]);\n    }\n    if (output[\"S3Origin\"] !== undefined) {\n        contents.S3Origin = deserializeAws_restXmlS3Origin(output[\"S3Origin\"], context);\n    }\n    if (output[\"Aliases\"] !== undefined) {\n        contents.Aliases = deserializeAws_restXmlAliases(output[\"Aliases\"], context);\n    }\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    if (output[\"Logging\"] !== undefined) {\n        contents.Logging = deserializeAws_restXmlStreamingLoggingConfig(output[\"Logging\"], context);\n    }\n    if (output[\"TrustedSigners\"] !== undefined) {\n        contents.TrustedSigners = deserializeAws_restXmlTrustedSigners(output[\"TrustedSigners\"], context);\n    }\n    if (output[\"PriceClass\"] !== undefined) {\n        contents.PriceClass = smithy_client_1.expectString(output[\"PriceClass\"]);\n    }\n    if (output[\"Enabled\"] !== undefined) {\n        contents.Enabled = smithy_client_1.parseBoolean(output[\"Enabled\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlStreamingDistributionList = (output, context) => {\n    const contents = {\n        Marker: undefined,\n        NextMarker: undefined,\n        MaxItems: undefined,\n        IsTruncated: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Marker\"] !== undefined) {\n        contents.Marker = smithy_client_1.expectString(output[\"Marker\"]);\n    }\n    if (output[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(output[\"NextMarker\"]);\n    }\n    if (output[\"MaxItems\"] !== undefined) {\n        contents.MaxItems = smithy_client_1.strictParseInt32(output[\"MaxItems\"]);\n    }\n    if (output[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(output[\"IsTruncated\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"StreamingDistributionSummary\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlStreamingDistributionSummaryList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"StreamingDistributionSummary\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlStreamingDistributionSummary = (output, context) => {\n    const contents = {\n        Id: undefined,\n        ARN: undefined,\n        Status: undefined,\n        LastModifiedTime: undefined,\n        DomainName: undefined,\n        S3Origin: undefined,\n        Aliases: undefined,\n        TrustedSigners: undefined,\n        Comment: undefined,\n        PriceClass: undefined,\n        Enabled: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"ARN\"] !== undefined) {\n        contents.ARN = smithy_client_1.expectString(output[\"ARN\"]);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    if (output[\"LastModifiedTime\"] !== undefined) {\n        contents.LastModifiedTime = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModifiedTime\"]));\n    }\n    if (output[\"DomainName\"] !== undefined) {\n        contents.DomainName = smithy_client_1.expectString(output[\"DomainName\"]);\n    }\n    if (output[\"S3Origin\"] !== undefined) {\n        contents.S3Origin = deserializeAws_restXmlS3Origin(output[\"S3Origin\"], context);\n    }\n    if (output[\"Aliases\"] !== undefined) {\n        contents.Aliases = deserializeAws_restXmlAliases(output[\"Aliases\"], context);\n    }\n    if (output[\"TrustedSigners\"] !== undefined) {\n        contents.TrustedSigners = deserializeAws_restXmlTrustedSigners(output[\"TrustedSigners\"], context);\n    }\n    if (output[\"Comment\"] !== undefined) {\n        contents.Comment = smithy_client_1.expectString(output[\"Comment\"]);\n    }\n    if (output[\"PriceClass\"] !== undefined) {\n        contents.PriceClass = smithy_client_1.expectString(output[\"PriceClass\"]);\n    }\n    if (output[\"Enabled\"] !== undefined) {\n        contents.Enabled = smithy_client_1.parseBoolean(output[\"Enabled\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlStreamingDistributionSummaryList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlStreamingDistributionSummary(entry, context);\n    });\n};\nconst deserializeAws_restXmlStreamingLoggingConfig = (output, context) => {\n    const contents = {\n        Enabled: undefined,\n        Bucket: undefined,\n        Prefix: undefined,\n    };\n    if (output[\"Enabled\"] !== undefined) {\n        contents.Enabled = smithy_client_1.parseBoolean(output[\"Enabled\"]);\n    }\n    if (output[\"Bucket\"] !== undefined) {\n        contents.Bucket = smithy_client_1.expectString(output[\"Bucket\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(output[\"Prefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTag = (output, context) => {\n    const contents = {\n        Key: undefined,\n        Value: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = smithy_client_1.expectString(output[\"Key\"]);\n    }\n    if (output[\"Value\"] !== undefined) {\n        contents.Value = smithy_client_1.expectString(output[\"Value\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTagList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlTag(entry, context);\n    });\n};\nconst deserializeAws_restXmlTags = (output, context) => {\n    const contents = {\n        Items: undefined,\n    };\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"Tag\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlTagList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTestResult = (output, context) => {\n    const contents = {\n        FunctionSummary: undefined,\n        ComputeUtilization: undefined,\n        FunctionExecutionLogs: undefined,\n        FunctionErrorMessage: undefined,\n        FunctionOutput: undefined,\n    };\n    if (output[\"FunctionSummary\"] !== undefined) {\n        contents.FunctionSummary = deserializeAws_restXmlFunctionSummary(output[\"FunctionSummary\"], context);\n    }\n    if (output[\"ComputeUtilization\"] !== undefined) {\n        contents.ComputeUtilization = smithy_client_1.expectString(output[\"ComputeUtilization\"]);\n    }\n    if (output.FunctionExecutionLogs === \"\") {\n        contents.FunctionExecutionLogs = [];\n    }\n    if (output[\"FunctionExecutionLogs\"] !== undefined && output[\"FunctionExecutionLogs\"][\"member\"] !== undefined) {\n        contents.FunctionExecutionLogs = deserializeAws_restXmlFunctionExecutionLogList(smithy_client_1.getArrayIfSingleItem(output[\"FunctionExecutionLogs\"][\"member\"]), context);\n    }\n    if (output[\"FunctionErrorMessage\"] !== undefined) {\n        contents.FunctionErrorMessage = smithy_client_1.expectString(output[\"FunctionErrorMessage\"]);\n    }\n    if (output[\"FunctionOutput\"] !== undefined) {\n        contents.FunctionOutput = smithy_client_1.expectString(output[\"FunctionOutput\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTrustedKeyGroupIdList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlTrustedKeyGroups = (output, context) => {\n    const contents = {\n        Enabled: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Enabled\"] !== undefined) {\n        contents.Enabled = smithy_client_1.parseBoolean(output[\"Enabled\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"KeyGroup\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlTrustedKeyGroupIdList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"KeyGroup\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTrustedSigners = (output, context) => {\n    const contents = {\n        Enabled: undefined,\n        Quantity: undefined,\n        Items: undefined,\n    };\n    if (output[\"Enabled\"] !== undefined) {\n        contents.Enabled = smithy_client_1.parseBoolean(output[\"Enabled\"]);\n    }\n    if (output[\"Quantity\"] !== undefined) {\n        contents.Quantity = smithy_client_1.strictParseInt32(output[\"Quantity\"]);\n    }\n    if (output.Items === \"\") {\n        contents.Items = [];\n    }\n    if (output[\"Items\"] !== undefined && output[\"Items\"][\"AwsAccountNumber\"] !== undefined) {\n        contents.Items = deserializeAws_restXmlAwsAccountNumberList(smithy_client_1.getArrayIfSingleItem(output[\"Items\"][\"AwsAccountNumber\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlViewerCertificate = (output, context) => {\n    const contents = {\n        CloudFrontDefaultCertificate: undefined,\n        IAMCertificateId: undefined,\n        ACMCertificateArn: undefined,\n        SSLSupportMethod: undefined,\n        MinimumProtocolVersion: undefined,\n        Certificate: undefined,\n        CertificateSource: undefined,\n    };\n    if (output[\"CloudFrontDefaultCertificate\"] !== undefined) {\n        contents.CloudFrontDefaultCertificate = smithy_client_1.parseBoolean(output[\"CloudFrontDefaultCertificate\"]);\n    }\n    if (output[\"IAMCertificateId\"] !== undefined) {\n        contents.IAMCertificateId = smithy_client_1.expectString(output[\"IAMCertificateId\"]);\n    }\n    if (output[\"ACMCertificateArn\"] !== undefined) {\n        contents.ACMCertificateArn = smithy_client_1.expectString(output[\"ACMCertificateArn\"]);\n    }\n    if (output[\"SSLSupportMethod\"] !== undefined) {\n        contents.SSLSupportMethod = smithy_client_1.expectString(output[\"SSLSupportMethod\"]);\n    }\n    if (output[\"MinimumProtocolVersion\"] !== undefined) {\n        contents.MinimumProtocolVersion = smithy_client_1.expectString(output[\"MinimumProtocolVersion\"]);\n    }\n    if (output[\"Certificate\"] !== undefined) {\n        contents.Certificate = smithy_client_1.expectString(output[\"Certificate\"]);\n    }\n    if (output[\"CertificateSource\"] !== undefined) {\n        contents.CertificateSource = smithy_client_1.expectString(output[\"CertificateSource\"]);\n    }\n    return contents;\n};\nconst deserializeMetadata = (output) => {\n    var _a;\n    return ({\n        httpStatusCode: output.statusCode,\n        requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n        extendedRequestId: output.headers[\"x-amz-id-2\"],\n        cfId: output.headers[\"x-amz-cf-id\"],\n    });\n};\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst isSerializableHeaderValue = (value) => value !== undefined &&\n    value !== null &&\n    value !== \"\" &&\n    (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n    (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        const parsedObj = fast_xml_parser_1.parse(encoded, {\n            attributeNamePrefix: \"\",\n            ignoreAttributes: false,\n            parseNodeValue: false,\n            trimValues: false,\n            tagValueProcessor: (val) => (val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : entities_1.decodeHTML(val)),\n        });\n        const textNodeName = \"#text\";\n        const key = Object.keys(parsedObj)[0];\n        const parsedObjToReturn = parsedObj[key];\n        if (parsedObjToReturn[textNodeName]) {\n            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n            delete parsedObjToReturn[textNodeName];\n        }\n        return smithy_client_1.getValueFromTextNode(parsedObjToReturn);\n    }\n    return {};\n});\nconst loadRestXmlErrorCode = (output, data) => {\n    if (data.Error.Code !== undefined) {\n        return data.Error.Code;\n    }\n    if (output.statusCode == 404) {\n        return \"NotFound\";\n    }\n    return \"\";\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRuntimeConfig = void 0;\nconst tslib_1 = require(\"tslib\");\nconst package_json_1 = tslib_1.__importDefault(require(\"../package.json\"));\nconst client_sts_1 = require(\"@aws-sdk/client-sts\");\nconst config_resolver_1 = require(\"@aws-sdk/config-resolver\");\nconst credential_provider_node_1 = require(\"@aws-sdk/credential-provider-node\");\nconst hash_node_1 = require(\"@aws-sdk/hash-node\");\nconst middleware_retry_1 = require(\"@aws-sdk/middleware-retry\");\nconst node_config_provider_1 = require(\"@aws-sdk/node-config-provider\");\nconst node_http_handler_1 = require(\"@aws-sdk/node-http-handler\");\nconst util_base64_node_1 = require(\"@aws-sdk/util-base64-node\");\nconst util_body_length_node_1 = require(\"@aws-sdk/util-body-length-node\");\nconst util_user_agent_node_1 = require(\"@aws-sdk/util-user-agent-node\");\nconst util_utf8_node_1 = require(\"@aws-sdk/util-utf8-node\");\nconst runtimeConfig_shared_1 = require(\"./runtimeConfig.shared\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst getRuntimeConfig = (config) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n    smithy_client_1.emitWarningIfUnsupportedVersion(process.version);\n    const clientSharedValues = runtimeConfig_shared_1.getRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,\n        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,\n        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,\n        credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : client_sts_1.decorateDefaultCredentialProvider(credential_provider_node_1.defaultProvider),\n        defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : util_user_agent_node_1.defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),\n        maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : node_config_provider_1.loadConfig(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n        region: (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0 ? _g : node_config_provider_1.loadConfig(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),\n        requestHandler: (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0 ? _h : new node_http_handler_1.NodeHttpHandler(),\n        retryMode: (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0 ? _j : node_config_provider_1.loadConfig(middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS),\n        sha256: (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0 ? _k : hash_node_1.Hash.bind(null, \"sha256\"),\n        streamCollector: (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0 ? _l : node_http_handler_1.streamCollector,\n        useDualstackEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0 ? _m : node_config_provider_1.loadConfig(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n        useFipsEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0 ? _o : node_config_provider_1.loadConfig(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n        utf8Decoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.fromUtf8,\n        utf8Encoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0 ? _q : util_utf8_node_1.toUtf8,\n    };\n};\nexports.getRuntimeConfig = getRuntimeConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRuntimeConfig = void 0;\nconst url_parser_1 = require(\"@aws-sdk/url-parser\");\nconst endpoints_1 = require(\"./endpoints\");\nconst getRuntimeConfig = (config) => {\n    var _a, _b, _c, _d, _e;\n    return ({\n        apiVersion: \"2020-05-31\",\n        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,\n        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},\n        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,\n        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : \"CloudFront\",\n        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl,\n    });\n};\nexports.getRuntimeConfig = getRuntimeConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./waitForDistributionDeployed\"), exports);\ntslib_1.__exportStar(require(\"./waitForInvalidationCompleted\"), exports);\ntslib_1.__exportStar(require(\"./waitForStreamingDistributionDeployed\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.waitUntilDistributionDeployed = exports.waitForDistributionDeployed = void 0;\nconst util_waiter_1 = require(\"@aws-sdk/util-waiter\");\nconst GetDistributionCommand_1 = require(\"../commands/GetDistributionCommand\");\nconst checkState = async (client, input) => {\n    let reason;\n    try {\n        const result = await client.send(new GetDistributionCommand_1.GetDistributionCommand(input));\n        reason = result;\n        try {\n            const returnComparator = () => {\n                return result.Distribution.Status;\n            };\n            if (returnComparator() === \"Deployed\") {\n                return { state: util_waiter_1.WaiterState.SUCCESS, reason };\n            }\n        }\n        catch (e) { }\n    }\n    catch (exception) {\n        reason = exception;\n    }\n    return { state: util_waiter_1.WaiterState.RETRY, reason };\n};\nconst waitForDistributionDeployed = async (params, input) => {\n    const serviceDefaults = { minDelay: 60, maxDelay: 120 };\n    return util_waiter_1.createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\nexports.waitForDistributionDeployed = waitForDistributionDeployed;\nconst waitUntilDistributionDeployed = async (params, input) => {\n    const serviceDefaults = { minDelay: 60, maxDelay: 120 };\n    const result = await util_waiter_1.createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n    return util_waiter_1.checkExceptions(result);\n};\nexports.waitUntilDistributionDeployed = waitUntilDistributionDeployed;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.waitUntilInvalidationCompleted = exports.waitForInvalidationCompleted = void 0;\nconst util_waiter_1 = require(\"@aws-sdk/util-waiter\");\nconst GetInvalidationCommand_1 = require(\"../commands/GetInvalidationCommand\");\nconst checkState = async (client, input) => {\n    let reason;\n    try {\n        const result = await client.send(new GetInvalidationCommand_1.GetInvalidationCommand(input));\n        reason = result;\n        try {\n            const returnComparator = () => {\n                return result.Invalidation.Status;\n            };\n            if (returnComparator() === \"Completed\") {\n                return { state: util_waiter_1.WaiterState.SUCCESS, reason };\n            }\n        }\n        catch (e) { }\n    }\n    catch (exception) {\n        reason = exception;\n    }\n    return { state: util_waiter_1.WaiterState.RETRY, reason };\n};\nconst waitForInvalidationCompleted = async (params, input) => {\n    const serviceDefaults = { minDelay: 20, maxDelay: 120 };\n    return util_waiter_1.createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\nexports.waitForInvalidationCompleted = waitForInvalidationCompleted;\nconst waitUntilInvalidationCompleted = async (params, input) => {\n    const serviceDefaults = { minDelay: 20, maxDelay: 120 };\n    const result = await util_waiter_1.createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n    return util_waiter_1.checkExceptions(result);\n};\nexports.waitUntilInvalidationCompleted = waitUntilInvalidationCompleted;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.waitUntilStreamingDistributionDeployed = exports.waitForStreamingDistributionDeployed = void 0;\nconst util_waiter_1 = require(\"@aws-sdk/util-waiter\");\nconst GetStreamingDistributionCommand_1 = require(\"../commands/GetStreamingDistributionCommand\");\nconst checkState = async (client, input) => {\n    let reason;\n    try {\n        const result = await client.send(new GetStreamingDistributionCommand_1.GetStreamingDistributionCommand(input));\n        reason = result;\n        try {\n            const returnComparator = () => {\n                return result.StreamingDistribution.Status;\n            };\n            if (returnComparator() === \"Deployed\") {\n                return { state: util_waiter_1.WaiterState.SUCCESS, reason };\n            }\n        }\n        catch (e) { }\n    }\n    catch (exception) {\n        reason = exception;\n    }\n    return { state: util_waiter_1.WaiterState.RETRY, reason };\n};\nconst waitForStreamingDistributionDeployed = async (params, input) => {\n    const serviceDefaults = { minDelay: 60, maxDelay: 120 };\n    return util_waiter_1.createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\nexports.waitForStreamingDistributionDeployed = waitForStreamingDistributionDeployed;\nconst waitUntilStreamingDistributionDeployed = async (params, input) => {\n    const serviceDefaults = { minDelay: 60, maxDelay: 120 };\n    const result = await util_waiter_1.createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n    return util_waiter_1.checkExceptions(result);\n};\nexports.waitUntilStreamingDistributionDeployed = waitUntilStreamingDistributionDeployed;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.S3 = void 0;\nconst AbortMultipartUploadCommand_1 = require(\"./commands/AbortMultipartUploadCommand\");\nconst CompleteMultipartUploadCommand_1 = require(\"./commands/CompleteMultipartUploadCommand\");\nconst CopyObjectCommand_1 = require(\"./commands/CopyObjectCommand\");\nconst CreateBucketCommand_1 = require(\"./commands/CreateBucketCommand\");\nconst CreateMultipartUploadCommand_1 = require(\"./commands/CreateMultipartUploadCommand\");\nconst DeleteBucketAnalyticsConfigurationCommand_1 = require(\"./commands/DeleteBucketAnalyticsConfigurationCommand\");\nconst DeleteBucketCommand_1 = require(\"./commands/DeleteBucketCommand\");\nconst DeleteBucketCorsCommand_1 = require(\"./commands/DeleteBucketCorsCommand\");\nconst DeleteBucketEncryptionCommand_1 = require(\"./commands/DeleteBucketEncryptionCommand\");\nconst DeleteBucketIntelligentTieringConfigurationCommand_1 = require(\"./commands/DeleteBucketIntelligentTieringConfigurationCommand\");\nconst DeleteBucketInventoryConfigurationCommand_1 = require(\"./commands/DeleteBucketInventoryConfigurationCommand\");\nconst DeleteBucketLifecycleCommand_1 = require(\"./commands/DeleteBucketLifecycleCommand\");\nconst DeleteBucketMetricsConfigurationCommand_1 = require(\"./commands/DeleteBucketMetricsConfigurationCommand\");\nconst DeleteBucketOwnershipControlsCommand_1 = require(\"./commands/DeleteBucketOwnershipControlsCommand\");\nconst DeleteBucketPolicyCommand_1 = require(\"./commands/DeleteBucketPolicyCommand\");\nconst DeleteBucketReplicationCommand_1 = require(\"./commands/DeleteBucketReplicationCommand\");\nconst DeleteBucketTaggingCommand_1 = require(\"./commands/DeleteBucketTaggingCommand\");\nconst DeleteBucketWebsiteCommand_1 = require(\"./commands/DeleteBucketWebsiteCommand\");\nconst DeleteObjectCommand_1 = require(\"./commands/DeleteObjectCommand\");\nconst DeleteObjectsCommand_1 = require(\"./commands/DeleteObjectsCommand\");\nconst DeleteObjectTaggingCommand_1 = require(\"./commands/DeleteObjectTaggingCommand\");\nconst DeletePublicAccessBlockCommand_1 = require(\"./commands/DeletePublicAccessBlockCommand\");\nconst GetBucketAccelerateConfigurationCommand_1 = require(\"./commands/GetBucketAccelerateConfigurationCommand\");\nconst GetBucketAclCommand_1 = require(\"./commands/GetBucketAclCommand\");\nconst GetBucketAnalyticsConfigurationCommand_1 = require(\"./commands/GetBucketAnalyticsConfigurationCommand\");\nconst GetBucketCorsCommand_1 = require(\"./commands/GetBucketCorsCommand\");\nconst GetBucketEncryptionCommand_1 = require(\"./commands/GetBucketEncryptionCommand\");\nconst GetBucketIntelligentTieringConfigurationCommand_1 = require(\"./commands/GetBucketIntelligentTieringConfigurationCommand\");\nconst GetBucketInventoryConfigurationCommand_1 = require(\"./commands/GetBucketInventoryConfigurationCommand\");\nconst GetBucketLifecycleConfigurationCommand_1 = require(\"./commands/GetBucketLifecycleConfigurationCommand\");\nconst GetBucketLocationCommand_1 = require(\"./commands/GetBucketLocationCommand\");\nconst GetBucketLoggingCommand_1 = require(\"./commands/GetBucketLoggingCommand\");\nconst GetBucketMetricsConfigurationCommand_1 = require(\"./commands/GetBucketMetricsConfigurationCommand\");\nconst GetBucketNotificationConfigurationCommand_1 = require(\"./commands/GetBucketNotificationConfigurationCommand\");\nconst GetBucketOwnershipControlsCommand_1 = require(\"./commands/GetBucketOwnershipControlsCommand\");\nconst GetBucketPolicyCommand_1 = require(\"./commands/GetBucketPolicyCommand\");\nconst GetBucketPolicyStatusCommand_1 = require(\"./commands/GetBucketPolicyStatusCommand\");\nconst GetBucketReplicationCommand_1 = require(\"./commands/GetBucketReplicationCommand\");\nconst GetBucketRequestPaymentCommand_1 = require(\"./commands/GetBucketRequestPaymentCommand\");\nconst GetBucketTaggingCommand_1 = require(\"./commands/GetBucketTaggingCommand\");\nconst GetBucketVersioningCommand_1 = require(\"./commands/GetBucketVersioningCommand\");\nconst GetBucketWebsiteCommand_1 = require(\"./commands/GetBucketWebsiteCommand\");\nconst GetObjectAclCommand_1 = require(\"./commands/GetObjectAclCommand\");\nconst GetObjectCommand_1 = require(\"./commands/GetObjectCommand\");\nconst GetObjectLegalHoldCommand_1 = require(\"./commands/GetObjectLegalHoldCommand\");\nconst GetObjectLockConfigurationCommand_1 = require(\"./commands/GetObjectLockConfigurationCommand\");\nconst GetObjectRetentionCommand_1 = require(\"./commands/GetObjectRetentionCommand\");\nconst GetObjectTaggingCommand_1 = require(\"./commands/GetObjectTaggingCommand\");\nconst GetObjectTorrentCommand_1 = require(\"./commands/GetObjectTorrentCommand\");\nconst GetPublicAccessBlockCommand_1 = require(\"./commands/GetPublicAccessBlockCommand\");\nconst HeadBucketCommand_1 = require(\"./commands/HeadBucketCommand\");\nconst HeadObjectCommand_1 = require(\"./commands/HeadObjectCommand\");\nconst ListBucketAnalyticsConfigurationsCommand_1 = require(\"./commands/ListBucketAnalyticsConfigurationsCommand\");\nconst ListBucketIntelligentTieringConfigurationsCommand_1 = require(\"./commands/ListBucketIntelligentTieringConfigurationsCommand\");\nconst ListBucketInventoryConfigurationsCommand_1 = require(\"./commands/ListBucketInventoryConfigurationsCommand\");\nconst ListBucketMetricsConfigurationsCommand_1 = require(\"./commands/ListBucketMetricsConfigurationsCommand\");\nconst ListBucketsCommand_1 = require(\"./commands/ListBucketsCommand\");\nconst ListMultipartUploadsCommand_1 = require(\"./commands/ListMultipartUploadsCommand\");\nconst ListObjectsCommand_1 = require(\"./commands/ListObjectsCommand\");\nconst ListObjectsV2Command_1 = require(\"./commands/ListObjectsV2Command\");\nconst ListObjectVersionsCommand_1 = require(\"./commands/ListObjectVersionsCommand\");\nconst ListPartsCommand_1 = require(\"./commands/ListPartsCommand\");\nconst PutBucketAccelerateConfigurationCommand_1 = require(\"./commands/PutBucketAccelerateConfigurationCommand\");\nconst PutBucketAclCommand_1 = require(\"./commands/PutBucketAclCommand\");\nconst PutBucketAnalyticsConfigurationCommand_1 = require(\"./commands/PutBucketAnalyticsConfigurationCommand\");\nconst PutBucketCorsCommand_1 = require(\"./commands/PutBucketCorsCommand\");\nconst PutBucketEncryptionCommand_1 = require(\"./commands/PutBucketEncryptionCommand\");\nconst PutBucketIntelligentTieringConfigurationCommand_1 = require(\"./commands/PutBucketIntelligentTieringConfigurationCommand\");\nconst PutBucketInventoryConfigurationCommand_1 = require(\"./commands/PutBucketInventoryConfigurationCommand\");\nconst PutBucketLifecycleConfigurationCommand_1 = require(\"./commands/PutBucketLifecycleConfigurationCommand\");\nconst PutBucketLoggingCommand_1 = require(\"./commands/PutBucketLoggingCommand\");\nconst PutBucketMetricsConfigurationCommand_1 = require(\"./commands/PutBucketMetricsConfigurationCommand\");\nconst PutBucketNotificationConfigurationCommand_1 = require(\"./commands/PutBucketNotificationConfigurationCommand\");\nconst PutBucketOwnershipControlsCommand_1 = require(\"./commands/PutBucketOwnershipControlsCommand\");\nconst PutBucketPolicyCommand_1 = require(\"./commands/PutBucketPolicyCommand\");\nconst PutBucketReplicationCommand_1 = require(\"./commands/PutBucketReplicationCommand\");\nconst PutBucketRequestPaymentCommand_1 = require(\"./commands/PutBucketRequestPaymentCommand\");\nconst PutBucketTaggingCommand_1 = require(\"./commands/PutBucketTaggingCommand\");\nconst PutBucketVersioningCommand_1 = require(\"./commands/PutBucketVersioningCommand\");\nconst PutBucketWebsiteCommand_1 = require(\"./commands/PutBucketWebsiteCommand\");\nconst PutObjectAclCommand_1 = require(\"./commands/PutObjectAclCommand\");\nconst PutObjectCommand_1 = require(\"./commands/PutObjectCommand\");\nconst PutObjectLegalHoldCommand_1 = require(\"./commands/PutObjectLegalHoldCommand\");\nconst PutObjectLockConfigurationCommand_1 = require(\"./commands/PutObjectLockConfigurationCommand\");\nconst PutObjectRetentionCommand_1 = require(\"./commands/PutObjectRetentionCommand\");\nconst PutObjectTaggingCommand_1 = require(\"./commands/PutObjectTaggingCommand\");\nconst PutPublicAccessBlockCommand_1 = require(\"./commands/PutPublicAccessBlockCommand\");\nconst RestoreObjectCommand_1 = require(\"./commands/RestoreObjectCommand\");\nconst SelectObjectContentCommand_1 = require(\"./commands/SelectObjectContentCommand\");\nconst UploadPartCommand_1 = require(\"./commands/UploadPartCommand\");\nconst UploadPartCopyCommand_1 = require(\"./commands/UploadPartCopyCommand\");\nconst WriteGetObjectResponseCommand_1 = require(\"./commands/WriteGetObjectResponseCommand\");\nconst S3Client_1 = require(\"./S3Client\");\nclass S3 extends S3Client_1.S3Client {\n    abortMultipartUpload(args, optionsOrCb, cb) {\n        const command = new AbortMultipartUploadCommand_1.AbortMultipartUploadCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    completeMultipartUpload(args, optionsOrCb, cb) {\n        const command = new CompleteMultipartUploadCommand_1.CompleteMultipartUploadCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    copyObject(args, optionsOrCb, cb) {\n        const command = new CopyObjectCommand_1.CopyObjectCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createBucket(args, optionsOrCb, cb) {\n        const command = new CreateBucketCommand_1.CreateBucketCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    createMultipartUpload(args, optionsOrCb, cb) {\n        const command = new CreateMultipartUploadCommand_1.CreateMultipartUploadCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucket(args, optionsOrCb, cb) {\n        const command = new DeleteBucketCommand_1.DeleteBucketCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketAnalyticsConfiguration(args, optionsOrCb, cb) {\n        const command = new DeleteBucketAnalyticsConfigurationCommand_1.DeleteBucketAnalyticsConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketCors(args, optionsOrCb, cb) {\n        const command = new DeleteBucketCorsCommand_1.DeleteBucketCorsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketEncryption(args, optionsOrCb, cb) {\n        const command = new DeleteBucketEncryptionCommand_1.DeleteBucketEncryptionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {\n        const command = new DeleteBucketIntelligentTieringConfigurationCommand_1.DeleteBucketIntelligentTieringConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketInventoryConfiguration(args, optionsOrCb, cb) {\n        const command = new DeleteBucketInventoryConfigurationCommand_1.DeleteBucketInventoryConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketLifecycle(args, optionsOrCb, cb) {\n        const command = new DeleteBucketLifecycleCommand_1.DeleteBucketLifecycleCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketMetricsConfiguration(args, optionsOrCb, cb) {\n        const command = new DeleteBucketMetricsConfigurationCommand_1.DeleteBucketMetricsConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketOwnershipControls(args, optionsOrCb, cb) {\n        const command = new DeleteBucketOwnershipControlsCommand_1.DeleteBucketOwnershipControlsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketPolicy(args, optionsOrCb, cb) {\n        const command = new DeleteBucketPolicyCommand_1.DeleteBucketPolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketReplication(args, optionsOrCb, cb) {\n        const command = new DeleteBucketReplicationCommand_1.DeleteBucketReplicationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketTagging(args, optionsOrCb, cb) {\n        const command = new DeleteBucketTaggingCommand_1.DeleteBucketTaggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteBucketWebsite(args, optionsOrCb, cb) {\n        const command = new DeleteBucketWebsiteCommand_1.DeleteBucketWebsiteCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteObject(args, optionsOrCb, cb) {\n        const command = new DeleteObjectCommand_1.DeleteObjectCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteObjects(args, optionsOrCb, cb) {\n        const command = new DeleteObjectsCommand_1.DeleteObjectsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deleteObjectTagging(args, optionsOrCb, cb) {\n        const command = new DeleteObjectTaggingCommand_1.DeleteObjectTaggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    deletePublicAccessBlock(args, optionsOrCb, cb) {\n        const command = new DeletePublicAccessBlockCommand_1.DeletePublicAccessBlockCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketAccelerateConfiguration(args, optionsOrCb, cb) {\n        const command = new GetBucketAccelerateConfigurationCommand_1.GetBucketAccelerateConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketAcl(args, optionsOrCb, cb) {\n        const command = new GetBucketAclCommand_1.GetBucketAclCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketAnalyticsConfiguration(args, optionsOrCb, cb) {\n        const command = new GetBucketAnalyticsConfigurationCommand_1.GetBucketAnalyticsConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketCors(args, optionsOrCb, cb) {\n        const command = new GetBucketCorsCommand_1.GetBucketCorsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketEncryption(args, optionsOrCb, cb) {\n        const command = new GetBucketEncryptionCommand_1.GetBucketEncryptionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {\n        const command = new GetBucketIntelligentTieringConfigurationCommand_1.GetBucketIntelligentTieringConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketInventoryConfiguration(args, optionsOrCb, cb) {\n        const command = new GetBucketInventoryConfigurationCommand_1.GetBucketInventoryConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketLifecycleConfiguration(args, optionsOrCb, cb) {\n        const command = new GetBucketLifecycleConfigurationCommand_1.GetBucketLifecycleConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketLocation(args, optionsOrCb, cb) {\n        const command = new GetBucketLocationCommand_1.GetBucketLocationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketLogging(args, optionsOrCb, cb) {\n        const command = new GetBucketLoggingCommand_1.GetBucketLoggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketMetricsConfiguration(args, optionsOrCb, cb) {\n        const command = new GetBucketMetricsConfigurationCommand_1.GetBucketMetricsConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketNotificationConfiguration(args, optionsOrCb, cb) {\n        const command = new GetBucketNotificationConfigurationCommand_1.GetBucketNotificationConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketOwnershipControls(args, optionsOrCb, cb) {\n        const command = new GetBucketOwnershipControlsCommand_1.GetBucketOwnershipControlsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketPolicy(args, optionsOrCb, cb) {\n        const command = new GetBucketPolicyCommand_1.GetBucketPolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketPolicyStatus(args, optionsOrCb, cb) {\n        const command = new GetBucketPolicyStatusCommand_1.GetBucketPolicyStatusCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketReplication(args, optionsOrCb, cb) {\n        const command = new GetBucketReplicationCommand_1.GetBucketReplicationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketRequestPayment(args, optionsOrCb, cb) {\n        const command = new GetBucketRequestPaymentCommand_1.GetBucketRequestPaymentCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketTagging(args, optionsOrCb, cb) {\n        const command = new GetBucketTaggingCommand_1.GetBucketTaggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketVersioning(args, optionsOrCb, cb) {\n        const command = new GetBucketVersioningCommand_1.GetBucketVersioningCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getBucketWebsite(args, optionsOrCb, cb) {\n        const command = new GetBucketWebsiteCommand_1.GetBucketWebsiteCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObject(args, optionsOrCb, cb) {\n        const command = new GetObjectCommand_1.GetObjectCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObjectAcl(args, optionsOrCb, cb) {\n        const command = new GetObjectAclCommand_1.GetObjectAclCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObjectLegalHold(args, optionsOrCb, cb) {\n        const command = new GetObjectLegalHoldCommand_1.GetObjectLegalHoldCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObjectLockConfiguration(args, optionsOrCb, cb) {\n        const command = new GetObjectLockConfigurationCommand_1.GetObjectLockConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObjectRetention(args, optionsOrCb, cb) {\n        const command = new GetObjectRetentionCommand_1.GetObjectRetentionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObjectTagging(args, optionsOrCb, cb) {\n        const command = new GetObjectTaggingCommand_1.GetObjectTaggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getObjectTorrent(args, optionsOrCb, cb) {\n        const command = new GetObjectTorrentCommand_1.GetObjectTorrentCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getPublicAccessBlock(args, optionsOrCb, cb) {\n        const command = new GetPublicAccessBlockCommand_1.GetPublicAccessBlockCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    headBucket(args, optionsOrCb, cb) {\n        const command = new HeadBucketCommand_1.HeadBucketCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    headObject(args, optionsOrCb, cb) {\n        const command = new HeadObjectCommand_1.HeadObjectCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listBucketAnalyticsConfigurations(args, optionsOrCb, cb) {\n        const command = new ListBucketAnalyticsConfigurationsCommand_1.ListBucketAnalyticsConfigurationsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listBucketIntelligentTieringConfigurations(args, optionsOrCb, cb) {\n        const command = new ListBucketIntelligentTieringConfigurationsCommand_1.ListBucketIntelligentTieringConfigurationsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listBucketInventoryConfigurations(args, optionsOrCb, cb) {\n        const command = new ListBucketInventoryConfigurationsCommand_1.ListBucketInventoryConfigurationsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listBucketMetricsConfigurations(args, optionsOrCb, cb) {\n        const command = new ListBucketMetricsConfigurationsCommand_1.ListBucketMetricsConfigurationsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listBuckets(args, optionsOrCb, cb) {\n        const command = new ListBucketsCommand_1.ListBucketsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listMultipartUploads(args, optionsOrCb, cb) {\n        const command = new ListMultipartUploadsCommand_1.ListMultipartUploadsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listObjects(args, optionsOrCb, cb) {\n        const command = new ListObjectsCommand_1.ListObjectsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listObjectsV2(args, optionsOrCb, cb) {\n        const command = new ListObjectsV2Command_1.ListObjectsV2Command(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listObjectVersions(args, optionsOrCb, cb) {\n        const command = new ListObjectVersionsCommand_1.ListObjectVersionsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listParts(args, optionsOrCb, cb) {\n        const command = new ListPartsCommand_1.ListPartsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketAccelerateConfiguration(args, optionsOrCb, cb) {\n        const command = new PutBucketAccelerateConfigurationCommand_1.PutBucketAccelerateConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketAcl(args, optionsOrCb, cb) {\n        const command = new PutBucketAclCommand_1.PutBucketAclCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketAnalyticsConfiguration(args, optionsOrCb, cb) {\n        const command = new PutBucketAnalyticsConfigurationCommand_1.PutBucketAnalyticsConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketCors(args, optionsOrCb, cb) {\n        const command = new PutBucketCorsCommand_1.PutBucketCorsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketEncryption(args, optionsOrCb, cb) {\n        const command = new PutBucketEncryptionCommand_1.PutBucketEncryptionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {\n        const command = new PutBucketIntelligentTieringConfigurationCommand_1.PutBucketIntelligentTieringConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketInventoryConfiguration(args, optionsOrCb, cb) {\n        const command = new PutBucketInventoryConfigurationCommand_1.PutBucketInventoryConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketLifecycleConfiguration(args, optionsOrCb, cb) {\n        const command = new PutBucketLifecycleConfigurationCommand_1.PutBucketLifecycleConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketLogging(args, optionsOrCb, cb) {\n        const command = new PutBucketLoggingCommand_1.PutBucketLoggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketMetricsConfiguration(args, optionsOrCb, cb) {\n        const command = new PutBucketMetricsConfigurationCommand_1.PutBucketMetricsConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketNotificationConfiguration(args, optionsOrCb, cb) {\n        const command = new PutBucketNotificationConfigurationCommand_1.PutBucketNotificationConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketOwnershipControls(args, optionsOrCb, cb) {\n        const command = new PutBucketOwnershipControlsCommand_1.PutBucketOwnershipControlsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketPolicy(args, optionsOrCb, cb) {\n        const command = new PutBucketPolicyCommand_1.PutBucketPolicyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketReplication(args, optionsOrCb, cb) {\n        const command = new PutBucketReplicationCommand_1.PutBucketReplicationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketRequestPayment(args, optionsOrCb, cb) {\n        const command = new PutBucketRequestPaymentCommand_1.PutBucketRequestPaymentCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketTagging(args, optionsOrCb, cb) {\n        const command = new PutBucketTaggingCommand_1.PutBucketTaggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketVersioning(args, optionsOrCb, cb) {\n        const command = new PutBucketVersioningCommand_1.PutBucketVersioningCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putBucketWebsite(args, optionsOrCb, cb) {\n        const command = new PutBucketWebsiteCommand_1.PutBucketWebsiteCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putObject(args, optionsOrCb, cb) {\n        const command = new PutObjectCommand_1.PutObjectCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putObjectAcl(args, optionsOrCb, cb) {\n        const command = new PutObjectAclCommand_1.PutObjectAclCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putObjectLegalHold(args, optionsOrCb, cb) {\n        const command = new PutObjectLegalHoldCommand_1.PutObjectLegalHoldCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putObjectLockConfiguration(args, optionsOrCb, cb) {\n        const command = new PutObjectLockConfigurationCommand_1.PutObjectLockConfigurationCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putObjectRetention(args, optionsOrCb, cb) {\n        const command = new PutObjectRetentionCommand_1.PutObjectRetentionCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putObjectTagging(args, optionsOrCb, cb) {\n        const command = new PutObjectTaggingCommand_1.PutObjectTaggingCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    putPublicAccessBlock(args, optionsOrCb, cb) {\n        const command = new PutPublicAccessBlockCommand_1.PutPublicAccessBlockCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    restoreObject(args, optionsOrCb, cb) {\n        const command = new RestoreObjectCommand_1.RestoreObjectCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    selectObjectContent(args, optionsOrCb, cb) {\n        const command = new SelectObjectContentCommand_1.SelectObjectContentCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    uploadPart(args, optionsOrCb, cb) {\n        const command = new UploadPartCommand_1.UploadPartCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    uploadPartCopy(args, optionsOrCb, cb) {\n        const command = new UploadPartCopyCommand_1.UploadPartCopyCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    writeGetObjectResponse(args, optionsOrCb, cb) {\n        const command = new WriteGetObjectResponseCommand_1.WriteGetObjectResponseCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n}\nexports.S3 = S3;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.S3Client = void 0;\nconst config_resolver_1 = require(\"@aws-sdk/config-resolver\");\nconst eventstream_serde_config_resolver_1 = require(\"@aws-sdk/eventstream-serde-config-resolver\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_content_length_1 = require(\"@aws-sdk/middleware-content-length\");\nconst middleware_expect_continue_1 = require(\"@aws-sdk/middleware-expect-continue\");\nconst middleware_host_header_1 = require(\"@aws-sdk/middleware-host-header\");\nconst middleware_logger_1 = require(\"@aws-sdk/middleware-logger\");\nconst middleware_retry_1 = require(\"@aws-sdk/middleware-retry\");\nconst middleware_sdk_s3_1 = require(\"@aws-sdk/middleware-sdk-s3\");\nconst middleware_signing_1 = require(\"@aws-sdk/middleware-signing\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/middleware-user-agent\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst runtimeConfig_1 = require(\"./runtimeConfig\");\nclass S3Client extends smithy_client_1.Client {\n    constructor(configuration) {\n        const _config_0 = runtimeConfig_1.getRuntimeConfig(configuration);\n        const _config_1 = config_resolver_1.resolveRegionConfig(_config_0);\n        const _config_2 = config_resolver_1.resolveEndpointsConfig(_config_1);\n        const _config_3 = middleware_retry_1.resolveRetryConfig(_config_2);\n        const _config_4 = middleware_host_header_1.resolveHostHeaderConfig(_config_3);\n        const _config_5 = middleware_signing_1.resolveAwsAuthConfig(_config_4);\n        const _config_6 = middleware_bucket_endpoint_1.resolveBucketEndpointConfig(_config_5);\n        const _config_7 = middleware_user_agent_1.resolveUserAgentConfig(_config_6);\n        const _config_8 = eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig(_config_7);\n        super(_config_8);\n        this.config = _config_8;\n        this.middlewareStack.use(middleware_retry_1.getRetryPlugin(this.config));\n        this.middlewareStack.use(middleware_content_length_1.getContentLengthPlugin(this.config));\n        this.middlewareStack.use(middleware_host_header_1.getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(middleware_logger_1.getLoggerPlugin(this.config));\n        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(this.config));\n        this.middlewareStack.use(middleware_sdk_s3_1.getValidateBucketNamePlugin(this.config));\n        this.middlewareStack.use(middleware_sdk_s3_1.getUseRegionalEndpointPlugin(this.config));\n        this.middlewareStack.use(middleware_expect_continue_1.getAddExpectContinuePlugin(this.config));\n        this.middlewareStack.use(middleware_user_agent_1.getUserAgentPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\nexports.S3Client = S3Client;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbortMultipartUploadCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass AbortMultipartUploadCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"AbortMultipartUploadCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.AbortMultipartUploadRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.AbortMultipartUploadOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlAbortMultipartUploadCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlAbortMultipartUploadCommand(output, context);\n    }\n}\nexports.AbortMultipartUploadCommand = AbortMultipartUploadCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CompleteMultipartUploadCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_sdk_s3_1 = require(\"@aws-sdk/middleware-sdk-s3\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CompleteMultipartUploadCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_sdk_s3_1.getThrow200ExceptionsPlugin(configuration));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"CompleteMultipartUploadCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CompleteMultipartUploadRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CompleteMultipartUploadOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCompleteMultipartUploadCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCompleteMultipartUploadCommand(output, context);\n    }\n}\nexports.CompleteMultipartUploadCommand = CompleteMultipartUploadCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CopyObjectCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_sdk_s3_1 = require(\"@aws-sdk/middleware-sdk-s3\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst middleware_ssec_1 = require(\"@aws-sdk/middleware-ssec\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CopyObjectCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_sdk_s3_1.getThrow200ExceptionsPlugin(configuration));\n        this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"CopyObjectCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CopyObjectRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CopyObjectOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCopyObjectCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCopyObjectCommand(output, context);\n    }\n}\nexports.CopyObjectCommand = CopyObjectCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateBucketCommand = void 0;\nconst middleware_location_constraint_1 = require(\"@aws-sdk/middleware-location-constraint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateBucketCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_location_constraint_1.getLocationConstraintPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"CreateBucketCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateBucketRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateBucketOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateBucketCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateBucketCommand(output, context);\n    }\n}\nexports.CreateBucketCommand = CreateBucketCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateMultipartUploadCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst middleware_ssec_1 = require(\"@aws-sdk/middleware-ssec\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass CreateMultipartUploadCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"CreateMultipartUploadCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.CreateMultipartUploadRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.CreateMultipartUploadOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlCreateMultipartUploadCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlCreateMultipartUploadCommand(output, context);\n    }\n}\nexports.CreateMultipartUploadCommand = CreateMultipartUploadCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteBucketAnalyticsConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteBucketAnalyticsConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketAnalyticsConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteBucketAnalyticsConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand(output, context);\n    }\n}\nexports.DeleteBucketAnalyticsConfigurationCommand = DeleteBucketAnalyticsConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteBucketCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteBucketCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteBucketRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteBucketCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteBucketCommand(output, context);\n    }\n}\nexports.DeleteBucketCommand = DeleteBucketCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteBucketCorsCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteBucketCorsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketCorsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteBucketCorsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteBucketCorsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteBucketCorsCommand(output, context);\n    }\n}\nexports.DeleteBucketCorsCommand = DeleteBucketCorsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteBucketEncryptionCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteBucketEncryptionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketEncryptionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteBucketEncryptionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteBucketEncryptionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteBucketEncryptionCommand(output, context);\n    }\n}\nexports.DeleteBucketEncryptionCommand = DeleteBucketEncryptionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteBucketIntelligentTieringConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteBucketIntelligentTieringConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketIntelligentTieringConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteBucketIntelligentTieringConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand(output, context);\n    }\n}\nexports.DeleteBucketIntelligentTieringConfigurationCommand = DeleteBucketIntelligentTieringConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteBucketInventoryConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteBucketInventoryConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketInventoryConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteBucketInventoryConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteBucketInventoryConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand(output, context);\n    }\n}\nexports.DeleteBucketInventoryConfigurationCommand = DeleteBucketInventoryConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteBucketLifecycleCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteBucketLifecycleCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketLifecycleCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteBucketLifecycleRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteBucketLifecycleCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteBucketLifecycleCommand(output, context);\n    }\n}\nexports.DeleteBucketLifecycleCommand = DeleteBucketLifecycleCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteBucketMetricsConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteBucketMetricsConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketMetricsConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteBucketMetricsConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteBucketMetricsConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand(output, context);\n    }\n}\nexports.DeleteBucketMetricsConfigurationCommand = DeleteBucketMetricsConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteBucketOwnershipControlsCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteBucketOwnershipControlsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketOwnershipControlsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteBucketOwnershipControlsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteBucketOwnershipControlsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteBucketOwnershipControlsCommand(output, context);\n    }\n}\nexports.DeleteBucketOwnershipControlsCommand = DeleteBucketOwnershipControlsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteBucketPolicyCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteBucketPolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketPolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteBucketPolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteBucketPolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteBucketPolicyCommand(output, context);\n    }\n}\nexports.DeleteBucketPolicyCommand = DeleteBucketPolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteBucketReplicationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteBucketReplicationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketReplicationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteBucketReplicationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteBucketReplicationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteBucketReplicationCommand(output, context);\n    }\n}\nexports.DeleteBucketReplicationCommand = DeleteBucketReplicationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteBucketTaggingCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteBucketTaggingCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketTaggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteBucketTaggingRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteBucketTaggingCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteBucketTaggingCommand(output, context);\n    }\n}\nexports.DeleteBucketTaggingCommand = DeleteBucketTaggingCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteBucketWebsiteCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteBucketWebsiteCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteBucketWebsiteCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteBucketWebsiteRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteBucketWebsiteCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteBucketWebsiteCommand(output, context);\n    }\n}\nexports.DeleteBucketWebsiteCommand = DeleteBucketWebsiteCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteObjectCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteObjectCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteObjectCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteObjectRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.DeleteObjectOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteObjectCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteObjectCommand(output, context);\n    }\n}\nexports.DeleteObjectCommand = DeleteObjectCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteObjectTaggingCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteObjectTaggingCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteObjectTaggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteObjectTaggingRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.DeleteObjectTaggingOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteObjectTaggingCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteObjectTaggingCommand(output, context);\n    }\n}\nexports.DeleteObjectTaggingCommand = DeleteObjectTaggingCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeleteObjectsCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeleteObjectsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeleteObjectsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeleteObjectsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.DeleteObjectsOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeleteObjectsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeleteObjectsCommand(output, context);\n    }\n}\nexports.DeleteObjectsCommand = DeleteObjectsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeletePublicAccessBlockCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass DeletePublicAccessBlockCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"DeletePublicAccessBlockCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DeletePublicAccessBlockRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlDeletePublicAccessBlockCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlDeletePublicAccessBlockCommand(output, context);\n    }\n}\nexports.DeletePublicAccessBlockCommand = DeletePublicAccessBlockCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketAccelerateConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketAccelerateConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketAccelerateConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketAccelerateConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketAccelerateConfigurationOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketAccelerateConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketAccelerateConfigurationCommand(output, context);\n    }\n}\nexports.GetBucketAccelerateConfigurationCommand = GetBucketAccelerateConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketAclCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketAclCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketAclCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketAclRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketAclOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketAclCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketAclCommand(output, context);\n    }\n}\nexports.GetBucketAclCommand = GetBucketAclCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketAnalyticsConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketAnalyticsConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketAnalyticsConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketAnalyticsConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketAnalyticsConfigurationOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketAnalyticsConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand(output, context);\n    }\n}\nexports.GetBucketAnalyticsConfigurationCommand = GetBucketAnalyticsConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketCorsCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketCorsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketCorsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketCorsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketCorsOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketCorsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketCorsCommand(output, context);\n    }\n}\nexports.GetBucketCorsCommand = GetBucketCorsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketEncryptionCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketEncryptionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketEncryptionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketEncryptionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketEncryptionOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketEncryptionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketEncryptionCommand(output, context);\n    }\n}\nexports.GetBucketEncryptionCommand = GetBucketEncryptionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketIntelligentTieringConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketIntelligentTieringConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketIntelligentTieringConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketIntelligentTieringConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketIntelligentTieringConfigurationOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand(output, context);\n    }\n}\nexports.GetBucketIntelligentTieringConfigurationCommand = GetBucketIntelligentTieringConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketInventoryConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketInventoryConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketInventoryConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketInventoryConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketInventoryConfigurationOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketInventoryConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketInventoryConfigurationCommand(output, context);\n    }\n}\nexports.GetBucketInventoryConfigurationCommand = GetBucketInventoryConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketLifecycleConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketLifecycleConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketLifecycleConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketLifecycleConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketLifecycleConfigurationOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketLifecycleConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketLifecycleConfigurationCommand(output, context);\n    }\n}\nexports.GetBucketLifecycleConfigurationCommand = GetBucketLifecycleConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketLocationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketLocationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketLocationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketLocationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketLocationOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketLocationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketLocationCommand(output, context);\n    }\n}\nexports.GetBucketLocationCommand = GetBucketLocationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketLoggingCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketLoggingCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketLoggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketLoggingRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketLoggingOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketLoggingCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketLoggingCommand(output, context);\n    }\n}\nexports.GetBucketLoggingCommand = GetBucketLoggingCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketMetricsConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketMetricsConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketMetricsConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketMetricsConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketMetricsConfigurationOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketMetricsConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketMetricsConfigurationCommand(output, context);\n    }\n}\nexports.GetBucketMetricsConfigurationCommand = GetBucketMetricsConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketNotificationConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketNotificationConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketNotificationConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketNotificationConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.NotificationConfiguration.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketNotificationConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketNotificationConfigurationCommand(output, context);\n    }\n}\nexports.GetBucketNotificationConfigurationCommand = GetBucketNotificationConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketOwnershipControlsCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketOwnershipControlsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketOwnershipControlsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketOwnershipControlsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketOwnershipControlsOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketOwnershipControlsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketOwnershipControlsCommand(output, context);\n    }\n}\nexports.GetBucketOwnershipControlsCommand = GetBucketOwnershipControlsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketPolicyCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketPolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketPolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketPolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketPolicyOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketPolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketPolicyCommand(output, context);\n    }\n}\nexports.GetBucketPolicyCommand = GetBucketPolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketPolicyStatusCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketPolicyStatusCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketPolicyStatusCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketPolicyStatusRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketPolicyStatusOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketPolicyStatusCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketPolicyStatusCommand(output, context);\n    }\n}\nexports.GetBucketPolicyStatusCommand = GetBucketPolicyStatusCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketReplicationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketReplicationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketReplicationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketReplicationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketReplicationOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketReplicationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketReplicationCommand(output, context);\n    }\n}\nexports.GetBucketReplicationCommand = GetBucketReplicationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketRequestPaymentCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketRequestPaymentCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketRequestPaymentCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketRequestPaymentRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketRequestPaymentOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketRequestPaymentCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketRequestPaymentCommand(output, context);\n    }\n}\nexports.GetBucketRequestPaymentCommand = GetBucketRequestPaymentCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketTaggingCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketTaggingCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketTaggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketTaggingRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketTaggingOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketTaggingCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketTaggingCommand(output, context);\n    }\n}\nexports.GetBucketTaggingCommand = GetBucketTaggingCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketVersioningCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketVersioningCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketVersioningCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketVersioningRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketVersioningOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketVersioningCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketVersioningCommand(output, context);\n    }\n}\nexports.GetBucketVersioningCommand = GetBucketVersioningCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketWebsiteCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetBucketWebsiteCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetBucketWebsiteCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetBucketWebsiteRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetBucketWebsiteOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetBucketWebsiteCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetBucketWebsiteCommand(output, context);\n    }\n}\nexports.GetBucketWebsiteCommand = GetBucketWebsiteCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetObjectAclCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetObjectAclCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectAclCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetObjectAclRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetObjectAclOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetObjectAclCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetObjectAclCommand(output, context);\n    }\n}\nexports.GetObjectAclCommand = GetObjectAclCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetObjectCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst middleware_ssec_1 = require(\"@aws-sdk/middleware-ssec\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetObjectCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetObjectRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetObjectOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetObjectCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetObjectCommand(output, context);\n    }\n}\nexports.GetObjectCommand = GetObjectCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetObjectLegalHoldCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetObjectLegalHoldCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectLegalHoldCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetObjectLegalHoldRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetObjectLegalHoldOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetObjectLegalHoldCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetObjectLegalHoldCommand(output, context);\n    }\n}\nexports.GetObjectLegalHoldCommand = GetObjectLegalHoldCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetObjectLockConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetObjectLockConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectLockConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetObjectLockConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetObjectLockConfigurationOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetObjectLockConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetObjectLockConfigurationCommand(output, context);\n    }\n}\nexports.GetObjectLockConfigurationCommand = GetObjectLockConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetObjectRetentionCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetObjectRetentionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectRetentionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetObjectRetentionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetObjectRetentionOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetObjectRetentionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetObjectRetentionCommand(output, context);\n    }\n}\nexports.GetObjectRetentionCommand = GetObjectRetentionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetObjectTaggingCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetObjectTaggingCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectTaggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetObjectTaggingRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetObjectTaggingOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetObjectTaggingCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetObjectTaggingCommand(output, context);\n    }\n}\nexports.GetObjectTaggingCommand = GetObjectTaggingCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetObjectTorrentCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetObjectTorrentCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetObjectTorrentCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetObjectTorrentRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetObjectTorrentOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetObjectTorrentCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetObjectTorrentCommand(output, context);\n    }\n}\nexports.GetObjectTorrentCommand = GetObjectTorrentCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetPublicAccessBlockCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass GetPublicAccessBlockCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"GetPublicAccessBlockCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetPublicAccessBlockRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetPublicAccessBlockOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlGetPublicAccessBlockCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlGetPublicAccessBlockCommand(output, context);\n    }\n}\nexports.GetPublicAccessBlockCommand = GetPublicAccessBlockCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeadBucketCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass HeadBucketCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"HeadBucketCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.HeadBucketRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlHeadBucketCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlHeadBucketCommand(output, context);\n    }\n}\nexports.HeadBucketCommand = HeadBucketCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeadObjectCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst middleware_ssec_1 = require(\"@aws-sdk/middleware-ssec\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass HeadObjectCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"HeadObjectCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.HeadObjectRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.HeadObjectOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlHeadObjectCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlHeadObjectCommand(output, context);\n    }\n}\nexports.HeadObjectCommand = HeadObjectCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBucketAnalyticsConfigurationsCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListBucketAnalyticsConfigurationsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListBucketAnalyticsConfigurationsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.ListBucketAnalyticsConfigurationsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.ListBucketAnalyticsConfigurationsOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListBucketAnalyticsConfigurationsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand(output, context);\n    }\n}\nexports.ListBucketAnalyticsConfigurationsCommand = ListBucketAnalyticsConfigurationsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBucketIntelligentTieringConfigurationsCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListBucketIntelligentTieringConfigurationsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListBucketIntelligentTieringConfigurationsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.ListBucketIntelligentTieringConfigurationsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.ListBucketIntelligentTieringConfigurationsOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand(output, context);\n    }\n}\nexports.ListBucketIntelligentTieringConfigurationsCommand = ListBucketIntelligentTieringConfigurationsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBucketInventoryConfigurationsCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListBucketInventoryConfigurationsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListBucketInventoryConfigurationsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.ListBucketInventoryConfigurationsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.ListBucketInventoryConfigurationsOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListBucketInventoryConfigurationsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListBucketInventoryConfigurationsCommand(output, context);\n    }\n}\nexports.ListBucketInventoryConfigurationsCommand = ListBucketInventoryConfigurationsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBucketMetricsConfigurationsCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListBucketMetricsConfigurationsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListBucketMetricsConfigurationsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.ListBucketMetricsConfigurationsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.ListBucketMetricsConfigurationsOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListBucketMetricsConfigurationsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListBucketMetricsConfigurationsCommand(output, context);\n    }\n}\nexports.ListBucketMetricsConfigurationsCommand = ListBucketMetricsConfigurationsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBucketsCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListBucketsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListBucketsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: (input) => input,\n            outputFilterSensitiveLog: models_0_1.ListBucketsOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListBucketsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListBucketsCommand(output, context);\n    }\n}\nexports.ListBucketsCommand = ListBucketsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListMultipartUploadsCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListMultipartUploadsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListMultipartUploadsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.ListMultipartUploadsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.ListMultipartUploadsOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListMultipartUploadsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListMultipartUploadsCommand(output, context);\n    }\n}\nexports.ListMultipartUploadsCommand = ListMultipartUploadsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListObjectVersionsCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListObjectVersionsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListObjectVersionsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.ListObjectVersionsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.ListObjectVersionsOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListObjectVersionsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListObjectVersionsCommand(output, context);\n    }\n}\nexports.ListObjectVersionsCommand = ListObjectVersionsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListObjectsCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListObjectsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListObjectsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.ListObjectsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.ListObjectsOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListObjectsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListObjectsCommand(output, context);\n    }\n}\nexports.ListObjectsCommand = ListObjectsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListObjectsV2Command = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListObjectsV2Command extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListObjectsV2Command\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.ListObjectsV2Request.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.ListObjectsV2Output.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListObjectsV2Command(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListObjectsV2Command(output, context);\n    }\n}\nexports.ListObjectsV2Command = ListObjectsV2Command;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListPartsCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass ListPartsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"ListPartsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.ListPartsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.ListPartsOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlListPartsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlListPartsCommand(output, context);\n    }\n}\nexports.ListPartsCommand = ListPartsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketAccelerateConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketAccelerateConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketAccelerateConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketAccelerateConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketAccelerateConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketAccelerateConfigurationCommand(output, context);\n    }\n}\nexports.PutBucketAccelerateConfigurationCommand = PutBucketAccelerateConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketAclCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketAclCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketAclCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketAclRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketAclCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketAclCommand(output, context);\n    }\n}\nexports.PutBucketAclCommand = PutBucketAclCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketAnalyticsConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketAnalyticsConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketAnalyticsConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketAnalyticsConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketAnalyticsConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand(output, context);\n    }\n}\nexports.PutBucketAnalyticsConfigurationCommand = PutBucketAnalyticsConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketCorsCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketCorsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketCorsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketCorsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketCorsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketCorsCommand(output, context);\n    }\n}\nexports.PutBucketCorsCommand = PutBucketCorsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketEncryptionCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketEncryptionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketEncryptionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketEncryptionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketEncryptionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketEncryptionCommand(output, context);\n    }\n}\nexports.PutBucketEncryptionCommand = PutBucketEncryptionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketIntelligentTieringConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketIntelligentTieringConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketIntelligentTieringConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketIntelligentTieringConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand(output, context);\n    }\n}\nexports.PutBucketIntelligentTieringConfigurationCommand = PutBucketIntelligentTieringConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketInventoryConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketInventoryConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketInventoryConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketInventoryConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketInventoryConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketInventoryConfigurationCommand(output, context);\n    }\n}\nexports.PutBucketInventoryConfigurationCommand = PutBucketInventoryConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketLifecycleConfigurationCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketLifecycleConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketLifecycleConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketLifecycleConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketLifecycleConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketLifecycleConfigurationCommand(output, context);\n    }\n}\nexports.PutBucketLifecycleConfigurationCommand = PutBucketLifecycleConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketLoggingCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketLoggingCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketLoggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketLoggingRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketLoggingCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketLoggingCommand(output, context);\n    }\n}\nexports.PutBucketLoggingCommand = PutBucketLoggingCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketMetricsConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketMetricsConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketMetricsConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketMetricsConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketMetricsConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketMetricsConfigurationCommand(output, context);\n    }\n}\nexports.PutBucketMetricsConfigurationCommand = PutBucketMetricsConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketNotificationConfigurationCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketNotificationConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketNotificationConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketNotificationConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketNotificationConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketNotificationConfigurationCommand(output, context);\n    }\n}\nexports.PutBucketNotificationConfigurationCommand = PutBucketNotificationConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketOwnershipControlsCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketOwnershipControlsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketOwnershipControlsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketOwnershipControlsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketOwnershipControlsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketOwnershipControlsCommand(output, context);\n    }\n}\nexports.PutBucketOwnershipControlsCommand = PutBucketOwnershipControlsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketPolicyCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketPolicyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketPolicyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketPolicyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketPolicyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketPolicyCommand(output, context);\n    }\n}\nexports.PutBucketPolicyCommand = PutBucketPolicyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketReplicationCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketReplicationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketReplicationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketReplicationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketReplicationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketReplicationCommand(output, context);\n    }\n}\nexports.PutBucketReplicationCommand = PutBucketReplicationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketRequestPaymentCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketRequestPaymentCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketRequestPaymentCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketRequestPaymentRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketRequestPaymentCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketRequestPaymentCommand(output, context);\n    }\n}\nexports.PutBucketRequestPaymentCommand = PutBucketRequestPaymentCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketTaggingCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketTaggingCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketTaggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketTaggingRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketTaggingCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketTaggingCommand(output, context);\n    }\n}\nexports.PutBucketTaggingCommand = PutBucketTaggingCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketVersioningCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketVersioningCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketVersioningCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketVersioningRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketVersioningCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketVersioningCommand(output, context);\n    }\n}\nexports.PutBucketVersioningCommand = PutBucketVersioningCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutBucketWebsiteCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutBucketWebsiteCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutBucketWebsiteCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutBucketWebsiteRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutBucketWebsiteCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutBucketWebsiteCommand(output, context);\n    }\n}\nexports.PutBucketWebsiteCommand = PutBucketWebsiteCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutObjectAclCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutObjectAclCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutObjectAclCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutObjectAclRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.PutObjectAclOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutObjectAclCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutObjectAclCommand(output, context);\n    }\n}\nexports.PutObjectAclCommand = PutObjectAclCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutObjectCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst middleware_ssec_1 = require(\"@aws-sdk/middleware-ssec\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutObjectCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutObjectCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutObjectRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.PutObjectOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutObjectCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutObjectCommand(output, context);\n    }\n}\nexports.PutObjectCommand = PutObjectCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutObjectLegalHoldCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutObjectLegalHoldCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutObjectLegalHoldCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutObjectLegalHoldRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.PutObjectLegalHoldOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutObjectLegalHoldCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutObjectLegalHoldCommand(output, context);\n    }\n}\nexports.PutObjectLegalHoldCommand = PutObjectLegalHoldCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutObjectLockConfigurationCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutObjectLockConfigurationCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutObjectLockConfigurationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutObjectLockConfigurationRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.PutObjectLockConfigurationOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutObjectLockConfigurationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutObjectLockConfigurationCommand(output, context);\n    }\n}\nexports.PutObjectLockConfigurationCommand = PutObjectLockConfigurationCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutObjectRetentionCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutObjectRetentionCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutObjectRetentionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutObjectRetentionRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.PutObjectRetentionOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutObjectRetentionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutObjectRetentionCommand(output, context);\n    }\n}\nexports.PutObjectRetentionCommand = PutObjectRetentionCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutObjectTaggingCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutObjectTaggingCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutObjectTaggingCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutObjectTaggingRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.PutObjectTaggingOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutObjectTaggingCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutObjectTaggingCommand(output, context);\n    }\n}\nexports.PutObjectTaggingCommand = PutObjectTaggingCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PutPublicAccessBlockCommand = void 0;\nconst middleware_apply_body_checksum_1 = require(\"@aws-sdk/middleware-apply-body-checksum\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass PutPublicAccessBlockCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        this.middlewareStack.use(middleware_apply_body_checksum_1.getApplyMd5BodyChecksumPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"PutPublicAccessBlockCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.PutPublicAccessBlockRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlPutPublicAccessBlockCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlPutPublicAccessBlockCommand(output, context);\n    }\n}\nexports.PutPublicAccessBlockCommand = PutPublicAccessBlockCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RestoreObjectCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass RestoreObjectCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"RestoreObjectCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.RestoreObjectRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.RestoreObjectOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlRestoreObjectCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlRestoreObjectCommand(output, context);\n    }\n}\nexports.RestoreObjectCommand = RestoreObjectCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SelectObjectContentCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst middleware_ssec_1 = require(\"@aws-sdk/middleware-ssec\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass SelectObjectContentCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"SelectObjectContentCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.SelectObjectContentRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.SelectObjectContentOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlSelectObjectContentCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlSelectObjectContentCommand(output, context);\n    }\n}\nexports.SelectObjectContentCommand = SelectObjectContentCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UploadPartCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst middleware_ssec_1 = require(\"@aws-sdk/middleware-ssec\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UploadPartCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"UploadPartCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UploadPartRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.UploadPartOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUploadPartCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUploadPartCommand(output, context);\n    }\n}\nexports.UploadPartCommand = UploadPartCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UploadPartCopyCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_sdk_s3_1 = require(\"@aws-sdk/middleware-sdk-s3\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst middleware_ssec_1 = require(\"@aws-sdk/middleware-ssec\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass UploadPartCopyCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_sdk_s3_1.getThrow200ExceptionsPlugin(configuration));\n        this.middlewareStack.use(middleware_ssec_1.getSsecPlugin(configuration));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"UploadPartCopyCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.UploadPartCopyRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_1_1.UploadPartCopyOutput.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlUploadPartCopyCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlUploadPartCopyCommand(output, context);\n    }\n}\nexports.UploadPartCopyCommand = UploadPartCopyCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WriteGetObjectResponseCommand = void 0;\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_1_1 = require(\"../models/models_1\");\nconst Aws_restXml_1 = require(\"../protocols/Aws_restXml\");\nclass WriteGetObjectResponseCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_bucket_endpoint_1.getBucketEndpointPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"S3Client\";\n        const commandName = \"WriteGetObjectResponseCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_1_1.WriteGetObjectResponseRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restXml_1.serializeAws_restXmlWriteGetObjectResponseCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restXml_1.deserializeAws_restXmlWriteGetObjectResponseCommand(output, context);\n    }\n}\nexports.WriteGetObjectResponseCommand = WriteGetObjectResponseCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./AbortMultipartUploadCommand\"), exports);\ntslib_1.__exportStar(require(\"./CompleteMultipartUploadCommand\"), exports);\ntslib_1.__exportStar(require(\"./CopyObjectCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateBucketCommand\"), exports);\ntslib_1.__exportStar(require(\"./CreateMultipartUploadCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteBucketAnalyticsConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteBucketCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteBucketCorsCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteBucketEncryptionCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteBucketIntelligentTieringConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteBucketInventoryConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteBucketLifecycleCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteBucketMetricsConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteBucketOwnershipControlsCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteBucketPolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteBucketReplicationCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteBucketTaggingCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteBucketWebsiteCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteObjectCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteObjectTaggingCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeleteObjectsCommand\"), exports);\ntslib_1.__exportStar(require(\"./DeletePublicAccessBlockCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketAccelerateConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketAclCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketAnalyticsConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketCorsCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketEncryptionCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketIntelligentTieringConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketInventoryConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketLifecycleConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketLocationCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketLoggingCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketMetricsConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketNotificationConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketOwnershipControlsCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketPolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketPolicyStatusCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketReplicationCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketRequestPaymentCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketTaggingCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketVersioningCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetBucketWebsiteCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetObjectAclCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetObjectCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetObjectLegalHoldCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetObjectLockConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetObjectRetentionCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetObjectTaggingCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetObjectTorrentCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetPublicAccessBlockCommand\"), exports);\ntslib_1.__exportStar(require(\"./HeadBucketCommand\"), exports);\ntslib_1.__exportStar(require(\"./HeadObjectCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListBucketAnalyticsConfigurationsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListBucketIntelligentTieringConfigurationsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListBucketInventoryConfigurationsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListBucketMetricsConfigurationsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListBucketsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListMultipartUploadsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListObjectVersionsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListObjectsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListObjectsV2Command\"), exports);\ntslib_1.__exportStar(require(\"./ListPartsCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketAccelerateConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketAclCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketAnalyticsConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketCorsCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketEncryptionCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketIntelligentTieringConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketInventoryConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketLifecycleConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketLoggingCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketMetricsConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketNotificationConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketOwnershipControlsCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketPolicyCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketReplicationCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketRequestPaymentCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketTaggingCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketVersioningCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutBucketWebsiteCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutObjectAclCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutObjectCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutObjectLegalHoldCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutObjectLockConfigurationCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutObjectRetentionCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutObjectTaggingCommand\"), exports);\ntslib_1.__exportStar(require(\"./PutPublicAccessBlockCommand\"), exports);\ntslib_1.__exportStar(require(\"./RestoreObjectCommand\"), exports);\ntslib_1.__exportStar(require(\"./SelectObjectContentCommand\"), exports);\ntslib_1.__exportStar(require(\"./UploadPartCommand\"), exports);\ntslib_1.__exportStar(require(\"./UploadPartCopyCommand\"), exports);\ntslib_1.__exportStar(require(\"./WriteGetObjectResponseCommand\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultRegionInfoProvider = void 0;\nconst config_resolver_1 = require(\"@aws-sdk/config-resolver\");\nconst regionHash = {\n    \"af-south-1\": {\n        variants: [\n            {\n                hostname: \"s3.af-south-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.af-south-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"ap-east-1\": {\n        variants: [\n            {\n                hostname: \"s3.ap-east-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.ap-east-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"ap-northeast-1\": {\n        variants: [\n            {\n                hostname: \"s3.ap-northeast-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.ap-northeast-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"ap-northeast-2\": {\n        variants: [\n            {\n                hostname: \"s3.ap-northeast-2.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.ap-northeast-2.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"ap-northeast-3\": {\n        variants: [\n            {\n                hostname: \"s3.ap-northeast-3.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.ap-northeast-3.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"ap-south-1\": {\n        variants: [\n            {\n                hostname: \"s3.ap-south-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.ap-south-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"ap-southeast-1\": {\n        variants: [\n            {\n                hostname: \"s3.ap-southeast-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.ap-southeast-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"ap-southeast-2\": {\n        variants: [\n            {\n                hostname: \"s3.ap-southeast-2.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.ap-southeast-2.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"aws-global\": {\n        variants: [\n            {\n                hostname: \"s3.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"us-east-1\",\n    },\n    \"ca-central-1\": {\n        variants: [\n            {\n                hostname: \"s3.ca-central-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3-fips.ca-central-1.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"s3-fips.dualstack.ca-central-1.amazonaws.com\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"s3.dualstack.ca-central-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"cn-north-1\": {\n        variants: [\n            {\n                hostname: \"s3.cn-north-1.amazonaws.com.cn\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.cn-north-1.amazonaws.com.cn\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"cn-northwest-1\": {\n        variants: [\n            {\n                hostname: \"s3.cn-northwest-1.amazonaws.com.cn\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.cn-northwest-1.amazonaws.com.cn\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"eu-central-1\": {\n        variants: [\n            {\n                hostname: \"s3.eu-central-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.eu-central-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"eu-north-1\": {\n        variants: [\n            {\n                hostname: \"s3.eu-north-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.eu-north-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"eu-south-1\": {\n        variants: [\n            {\n                hostname: \"s3.eu-south-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.eu-south-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"eu-west-1\": {\n        variants: [\n            {\n                hostname: \"s3.eu-west-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.eu-west-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"eu-west-2\": {\n        variants: [\n            {\n                hostname: \"s3.eu-west-2.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.eu-west-2.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"eu-west-3\": {\n        variants: [\n            {\n                hostname: \"s3.eu-west-3.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.eu-west-3.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"me-south-1\": {\n        variants: [\n            {\n                hostname: \"s3.me-south-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.me-south-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"s3-external-1\": {\n        variants: [\n            {\n                hostname: \"s3-external-1.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"us-east-1\",\n    },\n    \"sa-east-1\": {\n        variants: [\n            {\n                hostname: \"s3.sa-east-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3.dualstack.sa-east-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"us-east-1\": {\n        variants: [\n            {\n                hostname: \"s3.us-east-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3-fips.dualstack.us-east-1.amazonaws.com\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"s3-fips.us-east-1.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"s3.dualstack.us-east-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"us-east-2\": {\n        variants: [\n            {\n                hostname: \"s3.us-east-2.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3-fips.dualstack.us-east-2.amazonaws.com\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"s3-fips.us-east-2.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"s3.dualstack.us-east-2.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"us-gov-east-1\": {\n        variants: [\n            {\n                hostname: \"s3.us-gov-east-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3-fips.us-gov-east-1.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"s3.dualstack.us-gov-east-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"us-gov-west-1\": {\n        variants: [\n            {\n                hostname: \"s3.us-gov-west-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3-fips.us-gov-west-1.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"s3.dualstack.us-gov-west-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"us-west-1\": {\n        variants: [\n            {\n                hostname: \"s3.us-west-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3-fips.dualstack.us-west-1.amazonaws.com\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"s3-fips.us-west-1.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"s3.dualstack.us-west-1.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"us-west-2\": {\n        variants: [\n            {\n                hostname: \"s3.us-west-2.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3-fips.dualstack.us-west-2.amazonaws.com\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"s3-fips.us-west-2.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"s3.dualstack.us-west-2.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n};\nconst partitionHash = {\n    aws: {\n        regions: [\n            \"af-south-1\",\n            \"ap-east-1\",\n            \"ap-northeast-1\",\n            \"ap-northeast-2\",\n            \"ap-northeast-3\",\n            \"ap-south-1\",\n            \"ap-southeast-1\",\n            \"ap-southeast-2\",\n            \"aws-global\",\n            \"ca-central-1\",\n            \"eu-central-1\",\n            \"eu-north-1\",\n            \"eu-south-1\",\n            \"eu-west-1\",\n            \"eu-west-2\",\n            \"eu-west-3\",\n            \"fips-ca-central-1\",\n            \"fips-us-east-1\",\n            \"fips-us-east-2\",\n            \"fips-us-west-1\",\n            \"fips-us-west-2\",\n            \"me-south-1\",\n            \"s3-external-1\",\n            \"sa-east-1\",\n            \"us-east-1\",\n            \"us-east-2\",\n            \"us-west-1\",\n            \"us-west-2\",\n        ],\n        regionRegex: \"^(us|eu|ap|sa|ca|me|af)\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"s3.{region}.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3-fips.{region}.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"s3-fips.dualstack.{region}.amazonaws.com\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"s3.dualstack.{region}.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"aws-cn\": {\n        regions: [\"cn-north-1\", \"cn-northwest-1\"],\n        regionRegex: \"^cn\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"s3.{region}.amazonaws.com.cn\",\n                tags: [],\n            },\n            {\n                hostname: \"s3-fips.{region}.amazonaws.com.cn\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"s3-fips.{region}.api.amazonwebservices.com.cn\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"s3.dualstack.{region}.amazonaws.com.cn\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"aws-iso\": {\n        regions: [\"us-iso-east-1\", \"us-iso-west-1\"],\n        regionRegex: \"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"s3.{region}.c2s.ic.gov\",\n                tags: [],\n            },\n            {\n                hostname: \"s3-fips.{region}.c2s.ic.gov\",\n                tags: [\"fips\"],\n            },\n        ],\n    },\n    \"aws-iso-b\": {\n        regions: [\"us-isob-east-1\"],\n        regionRegex: \"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"s3.{region}.sc2s.sgov.gov\",\n                tags: [],\n            },\n            {\n                hostname: \"s3-fips.{region}.sc2s.sgov.gov\",\n                tags: [\"fips\"],\n            },\n        ],\n    },\n    \"aws-us-gov\": {\n        regions: [\"fips-us-gov-east-1\", \"fips-us-gov-west-1\", \"us-gov-east-1\", \"us-gov-west-1\"],\n        regionRegex: \"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"s3.{region}.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"s3-fips.{region}.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"s3-fips.dualstack.{region}.amazonaws.com\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"s3.dualstack.{region}.amazonaws.com\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n};\nconst defaultRegionInfoProvider = async (region, options) => config_resolver_1.getRegionInfo(region, {\n    ...options,\n    signingService: \"s3\",\n    regionHash,\n    partitionHash,\n});\nexports.defaultRegionInfoProvider = defaultRegionInfoProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./S3\"), exports);\ntslib_1.__exportStar(require(\"./S3Client\"), exports);\ntslib_1.__exportStar(require(\"./commands\"), exports);\ntslib_1.__exportStar(require(\"./models\"), exports);\ntslib_1.__exportStar(require(\"./pagination\"), exports);\ntslib_1.__exportStar(require(\"./waiters\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./models_0\"), exports);\ntslib_1.__exportStar(require(\"./models_1\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetBucketAccelerateConfigurationOutput = exports.DeletePublicAccessBlockRequest = exports.DeleteObjectTaggingRequest = exports.DeleteObjectTaggingOutput = exports.DeleteObjectsRequest = exports.Delete = exports.ObjectIdentifier = exports.DeleteObjectsOutput = exports._Error = exports.DeletedObject = exports.DeleteObjectRequest = exports.DeleteObjectOutput = exports.DeleteBucketWebsiteRequest = exports.DeleteBucketTaggingRequest = exports.DeleteBucketReplicationRequest = exports.DeleteBucketPolicyRequest = exports.DeleteBucketOwnershipControlsRequest = exports.DeleteBucketMetricsConfigurationRequest = exports.DeleteBucketLifecycleRequest = exports.DeleteBucketInventoryConfigurationRequest = exports.DeleteBucketIntelligentTieringConfigurationRequest = exports.DeleteBucketEncryptionRequest = exports.DeleteBucketCorsRequest = exports.DeleteBucketAnalyticsConfigurationRequest = exports.DeleteBucketRequest = exports.CreateMultipartUploadRequest = exports.CreateMultipartUploadOutput = exports.CreateBucketRequest = exports.CreateBucketConfiguration = exports.CreateBucketOutput = exports.BucketAlreadyOwnedByYou = exports.BucketAlreadyExists = exports.ObjectNotInActiveTierError = exports.CopyObjectRequest = exports.CopyObjectOutput = exports.CopyObjectResult = exports.CompleteMultipartUploadRequest = exports.CompletedMultipartUpload = exports.CompletedPart = exports.CompleteMultipartUploadOutput = exports.AccessControlTranslation = exports.AccessControlPolicy = exports.Owner = exports.Grant = exports.Grantee = exports.AccelerateConfiguration = exports.NoSuchUpload = exports.AbortMultipartUploadRequest = exports.AbortMultipartUploadOutput = exports.AbortIncompleteMultipartUpload = void 0;\nexports.LoggingEnabled = exports.TargetGrant = exports.GetBucketLocationRequest = exports.GetBucketLocationOutput = exports.GetBucketLifecycleConfigurationRequest = exports.GetBucketLifecycleConfigurationOutput = exports.LifecycleRule = exports.Transition = exports.NoncurrentVersionTransition = exports.NoncurrentVersionExpiration = exports.LifecycleRuleFilter = exports.LifecycleRuleAndOperator = exports.LifecycleExpiration = exports.GetBucketInventoryConfigurationRequest = exports.GetBucketInventoryConfigurationOutput = exports.InventoryConfiguration = exports.InventorySchedule = exports.InventoryFilter = exports.InventoryDestination = exports.InventoryS3BucketDestination = exports.InventoryEncryption = exports.SSES3 = exports.SSEKMS = exports.GetBucketIntelligentTieringConfigurationRequest = exports.GetBucketIntelligentTieringConfigurationOutput = exports.IntelligentTieringConfiguration = exports.Tiering = exports.IntelligentTieringFilter = exports.IntelligentTieringAndOperator = exports.GetBucketEncryptionRequest = exports.GetBucketEncryptionOutput = exports.ServerSideEncryptionConfiguration = exports.ServerSideEncryptionRule = exports.ServerSideEncryptionByDefault = exports.GetBucketCorsRequest = exports.GetBucketCorsOutput = exports.CORSRule = exports.GetBucketAnalyticsConfigurationRequest = exports.GetBucketAnalyticsConfigurationOutput = exports.AnalyticsConfiguration = exports.StorageClassAnalysis = exports.StorageClassAnalysisDataExport = exports.AnalyticsExportDestination = exports.AnalyticsS3BucketDestination = exports.AnalyticsFilter = exports.AnalyticsAndOperator = exports.Tag = exports.GetBucketAclRequest = exports.GetBucketAclOutput = exports.GetBucketAccelerateConfigurationRequest = void 0;\nexports.Condition = exports.RedirectAllRequestsTo = exports.IndexDocument = exports.ErrorDocument = exports.GetBucketVersioningRequest = exports.GetBucketVersioningOutput = exports.GetBucketTaggingRequest = exports.GetBucketTaggingOutput = exports.GetBucketRequestPaymentRequest = exports.GetBucketRequestPaymentOutput = exports.GetBucketReplicationRequest = exports.GetBucketReplicationOutput = exports.ReplicationConfiguration = exports.ReplicationRule = exports.SourceSelectionCriteria = exports.SseKmsEncryptedObjects = exports.ReplicaModifications = exports.ReplicationRuleFilter = exports.ReplicationRuleAndOperator = exports.ExistingObjectReplication = exports.Destination = exports.ReplicationTime = exports.Metrics = exports.ReplicationTimeValue = exports.EncryptionConfiguration = exports.DeleteMarkerReplication = exports.GetBucketPolicyStatusRequest = exports.GetBucketPolicyStatusOutput = exports.PolicyStatus = exports.GetBucketPolicyRequest = exports.GetBucketPolicyOutput = exports.GetBucketOwnershipControlsRequest = exports.GetBucketOwnershipControlsOutput = exports.OwnershipControls = exports.OwnershipControlsRule = exports.NotificationConfiguration = exports.TopicConfiguration = exports.QueueConfiguration = exports.LambdaFunctionConfiguration = exports.NotificationConfigurationFilter = exports.S3KeyFilter = exports.FilterRule = exports.GetBucketNotificationConfigurationRequest = exports.GetBucketMetricsConfigurationRequest = exports.GetBucketMetricsConfigurationOutput = exports.MetricsConfiguration = exports.MetricsFilter = exports.MetricsAndOperator = exports.GetBucketLoggingRequest = exports.GetBucketLoggingOutput = void 0;\nexports.ListObjectsRequest = exports.ListObjectsOutput = exports._Object = exports.ListMultipartUploadsRequest = exports.ListMultipartUploadsOutput = exports.MultipartUpload = exports.Initiator = exports.CommonPrefix = exports.ListBucketsOutput = exports.Bucket = exports.ListBucketMetricsConfigurationsRequest = exports.ListBucketMetricsConfigurationsOutput = exports.ListBucketInventoryConfigurationsRequest = exports.ListBucketInventoryConfigurationsOutput = exports.ListBucketIntelligentTieringConfigurationsRequest = exports.ListBucketIntelligentTieringConfigurationsOutput = exports.ListBucketAnalyticsConfigurationsRequest = exports.ListBucketAnalyticsConfigurationsOutput = exports.HeadObjectRequest = exports.HeadObjectOutput = exports.NotFound = exports.HeadBucketRequest = exports.GetPublicAccessBlockRequest = exports.GetPublicAccessBlockOutput = exports.PublicAccessBlockConfiguration = exports.GetObjectTorrentRequest = exports.GetObjectTorrentOutput = exports.GetObjectTaggingRequest = exports.GetObjectTaggingOutput = exports.GetObjectRetentionRequest = exports.GetObjectRetentionOutput = exports.ObjectLockRetention = exports.GetObjectLockConfigurationRequest = exports.GetObjectLockConfigurationOutput = exports.ObjectLockConfiguration = exports.ObjectLockRule = exports.DefaultRetention = exports.GetObjectLegalHoldRequest = exports.GetObjectLegalHoldOutput = exports.ObjectLockLegalHold = exports.GetObjectAclRequest = exports.GetObjectAclOutput = exports.NoSuchKey = exports.InvalidObjectState = exports.GetObjectRequest = exports.GetObjectOutput = exports.GetBucketWebsiteRequest = exports.GetBucketWebsiteOutput = exports.RoutingRule = exports.Redirect = void 0;\nexports.RestoreObjectOutput = exports.ObjectAlreadyInActiveTierError = exports.PutPublicAccessBlockRequest = exports.PutObjectTaggingRequest = exports.PutObjectTaggingOutput = exports.PutObjectRetentionRequest = exports.PutObjectRetentionOutput = exports.PutObjectLockConfigurationRequest = exports.PutObjectLockConfigurationOutput = exports.PutObjectLegalHoldRequest = exports.PutObjectLegalHoldOutput = exports.PutObjectAclRequest = exports.PutObjectAclOutput = exports.PutObjectRequest = exports.PutObjectOutput = exports.PutBucketWebsiteRequest = exports.WebsiteConfiguration = exports.PutBucketVersioningRequest = exports.VersioningConfiguration = exports.PutBucketTaggingRequest = exports.Tagging = exports.PutBucketRequestPaymentRequest = exports.RequestPaymentConfiguration = exports.PutBucketReplicationRequest = exports.PutBucketPolicyRequest = exports.PutBucketOwnershipControlsRequest = exports.PutBucketNotificationConfigurationRequest = exports.PutBucketMetricsConfigurationRequest = exports.PutBucketLoggingRequest = exports.BucketLoggingStatus = exports.PutBucketLifecycleConfigurationRequest = exports.BucketLifecycleConfiguration = exports.PutBucketInventoryConfigurationRequest = exports.PutBucketIntelligentTieringConfigurationRequest = exports.PutBucketEncryptionRequest = exports.PutBucketCorsRequest = exports.CORSConfiguration = exports.PutBucketAnalyticsConfigurationRequest = exports.PutBucketAclRequest = exports.PutBucketAccelerateConfigurationRequest = exports.ListPartsRequest = exports.ListPartsOutput = exports.Part = exports.ListObjectVersionsRequest = exports.ListObjectVersionsOutput = exports.ObjectVersion = exports.DeleteMarkerEntry = exports.ListObjectsV2Request = exports.ListObjectsV2Output = exports.NoSuchBucket = void 0;\nexports.GlacierJobParameters = void 0;\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nvar AbortIncompleteMultipartUpload;\n(function (AbortIncompleteMultipartUpload) {\n    AbortIncompleteMultipartUpload.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AbortIncompleteMultipartUpload = exports.AbortIncompleteMultipartUpload || (exports.AbortIncompleteMultipartUpload = {}));\nvar AbortMultipartUploadOutput;\n(function (AbortMultipartUploadOutput) {\n    AbortMultipartUploadOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AbortMultipartUploadOutput = exports.AbortMultipartUploadOutput || (exports.AbortMultipartUploadOutput = {}));\nvar AbortMultipartUploadRequest;\n(function (AbortMultipartUploadRequest) {\n    AbortMultipartUploadRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AbortMultipartUploadRequest = exports.AbortMultipartUploadRequest || (exports.AbortMultipartUploadRequest = {}));\nvar NoSuchUpload;\n(function (NoSuchUpload) {\n    NoSuchUpload.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchUpload = exports.NoSuchUpload || (exports.NoSuchUpload = {}));\nvar AccelerateConfiguration;\n(function (AccelerateConfiguration) {\n    AccelerateConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AccelerateConfiguration = exports.AccelerateConfiguration || (exports.AccelerateConfiguration = {}));\nvar Grantee;\n(function (Grantee) {\n    Grantee.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Grantee = exports.Grantee || (exports.Grantee = {}));\nvar Grant;\n(function (Grant) {\n    Grant.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Grant = exports.Grant || (exports.Grant = {}));\nvar Owner;\n(function (Owner) {\n    Owner.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Owner = exports.Owner || (exports.Owner = {}));\nvar AccessControlPolicy;\n(function (AccessControlPolicy) {\n    AccessControlPolicy.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AccessControlPolicy = exports.AccessControlPolicy || (exports.AccessControlPolicy = {}));\nvar AccessControlTranslation;\n(function (AccessControlTranslation) {\n    AccessControlTranslation.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AccessControlTranslation = exports.AccessControlTranslation || (exports.AccessControlTranslation = {}));\nvar CompleteMultipartUploadOutput;\n(function (CompleteMultipartUploadOutput) {\n    CompleteMultipartUploadOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(CompleteMultipartUploadOutput = exports.CompleteMultipartUploadOutput || (exports.CompleteMultipartUploadOutput = {}));\nvar CompletedPart;\n(function (CompletedPart) {\n    CompletedPart.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CompletedPart = exports.CompletedPart || (exports.CompletedPart = {}));\nvar CompletedMultipartUpload;\n(function (CompletedMultipartUpload) {\n    CompletedMultipartUpload.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CompletedMultipartUpload = exports.CompletedMultipartUpload || (exports.CompletedMultipartUpload = {}));\nvar CompleteMultipartUploadRequest;\n(function (CompleteMultipartUploadRequest) {\n    CompleteMultipartUploadRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CompleteMultipartUploadRequest = exports.CompleteMultipartUploadRequest || (exports.CompleteMultipartUploadRequest = {}));\nvar CopyObjectResult;\n(function (CopyObjectResult) {\n    CopyObjectResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CopyObjectResult = exports.CopyObjectResult || (exports.CopyObjectResult = {}));\nvar CopyObjectOutput;\n(function (CopyObjectOutput) {\n    CopyObjectOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }),\n        ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(CopyObjectOutput = exports.CopyObjectOutput || (exports.CopyObjectOutput = {}));\nvar CopyObjectRequest;\n(function (CopyObjectRequest) {\n    CopyObjectRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }),\n        ...(obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }),\n        ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }),\n        ...(obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(CopyObjectRequest = exports.CopyObjectRequest || (exports.CopyObjectRequest = {}));\nvar ObjectNotInActiveTierError;\n(function (ObjectNotInActiveTierError) {\n    ObjectNotInActiveTierError.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ObjectNotInActiveTierError = exports.ObjectNotInActiveTierError || (exports.ObjectNotInActiveTierError = {}));\nvar BucketAlreadyExists;\n(function (BucketAlreadyExists) {\n    BucketAlreadyExists.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(BucketAlreadyExists = exports.BucketAlreadyExists || (exports.BucketAlreadyExists = {}));\nvar BucketAlreadyOwnedByYou;\n(function (BucketAlreadyOwnedByYou) {\n    BucketAlreadyOwnedByYou.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(BucketAlreadyOwnedByYou = exports.BucketAlreadyOwnedByYou || (exports.BucketAlreadyOwnedByYou = {}));\nvar CreateBucketOutput;\n(function (CreateBucketOutput) {\n    CreateBucketOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateBucketOutput = exports.CreateBucketOutput || (exports.CreateBucketOutput = {}));\nvar CreateBucketConfiguration;\n(function (CreateBucketConfiguration) {\n    CreateBucketConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateBucketConfiguration = exports.CreateBucketConfiguration || (exports.CreateBucketConfiguration = {}));\nvar CreateBucketRequest;\n(function (CreateBucketRequest) {\n    CreateBucketRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CreateBucketRequest = exports.CreateBucketRequest || (exports.CreateBucketRequest = {}));\nvar CreateMultipartUploadOutput;\n(function (CreateMultipartUploadOutput) {\n    CreateMultipartUploadOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }),\n        ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(CreateMultipartUploadOutput = exports.CreateMultipartUploadOutput || (exports.CreateMultipartUploadOutput = {}));\nvar CreateMultipartUploadRequest;\n(function (CreateMultipartUploadRequest) {\n    CreateMultipartUploadRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }),\n        ...(obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }),\n        ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(CreateMultipartUploadRequest = exports.CreateMultipartUploadRequest || (exports.CreateMultipartUploadRequest = {}));\nvar DeleteBucketRequest;\n(function (DeleteBucketRequest) {\n    DeleteBucketRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteBucketRequest = exports.DeleteBucketRequest || (exports.DeleteBucketRequest = {}));\nvar DeleteBucketAnalyticsConfigurationRequest;\n(function (DeleteBucketAnalyticsConfigurationRequest) {\n    DeleteBucketAnalyticsConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteBucketAnalyticsConfigurationRequest = exports.DeleteBucketAnalyticsConfigurationRequest || (exports.DeleteBucketAnalyticsConfigurationRequest = {}));\nvar DeleteBucketCorsRequest;\n(function (DeleteBucketCorsRequest) {\n    DeleteBucketCorsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteBucketCorsRequest = exports.DeleteBucketCorsRequest || (exports.DeleteBucketCorsRequest = {}));\nvar DeleteBucketEncryptionRequest;\n(function (DeleteBucketEncryptionRequest) {\n    DeleteBucketEncryptionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteBucketEncryptionRequest = exports.DeleteBucketEncryptionRequest || (exports.DeleteBucketEncryptionRequest = {}));\nvar DeleteBucketIntelligentTieringConfigurationRequest;\n(function (DeleteBucketIntelligentTieringConfigurationRequest) {\n    DeleteBucketIntelligentTieringConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteBucketIntelligentTieringConfigurationRequest = exports.DeleteBucketIntelligentTieringConfigurationRequest || (exports.DeleteBucketIntelligentTieringConfigurationRequest = {}));\nvar DeleteBucketInventoryConfigurationRequest;\n(function (DeleteBucketInventoryConfigurationRequest) {\n    DeleteBucketInventoryConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteBucketInventoryConfigurationRequest = exports.DeleteBucketInventoryConfigurationRequest || (exports.DeleteBucketInventoryConfigurationRequest = {}));\nvar DeleteBucketLifecycleRequest;\n(function (DeleteBucketLifecycleRequest) {\n    DeleteBucketLifecycleRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteBucketLifecycleRequest = exports.DeleteBucketLifecycleRequest || (exports.DeleteBucketLifecycleRequest = {}));\nvar DeleteBucketMetricsConfigurationRequest;\n(function (DeleteBucketMetricsConfigurationRequest) {\n    DeleteBucketMetricsConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteBucketMetricsConfigurationRequest = exports.DeleteBucketMetricsConfigurationRequest || (exports.DeleteBucketMetricsConfigurationRequest = {}));\nvar DeleteBucketOwnershipControlsRequest;\n(function (DeleteBucketOwnershipControlsRequest) {\n    DeleteBucketOwnershipControlsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteBucketOwnershipControlsRequest = exports.DeleteBucketOwnershipControlsRequest || (exports.DeleteBucketOwnershipControlsRequest = {}));\nvar DeleteBucketPolicyRequest;\n(function (DeleteBucketPolicyRequest) {\n    DeleteBucketPolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteBucketPolicyRequest = exports.DeleteBucketPolicyRequest || (exports.DeleteBucketPolicyRequest = {}));\nvar DeleteBucketReplicationRequest;\n(function (DeleteBucketReplicationRequest) {\n    DeleteBucketReplicationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteBucketReplicationRequest = exports.DeleteBucketReplicationRequest || (exports.DeleteBucketReplicationRequest = {}));\nvar DeleteBucketTaggingRequest;\n(function (DeleteBucketTaggingRequest) {\n    DeleteBucketTaggingRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteBucketTaggingRequest = exports.DeleteBucketTaggingRequest || (exports.DeleteBucketTaggingRequest = {}));\nvar DeleteBucketWebsiteRequest;\n(function (DeleteBucketWebsiteRequest) {\n    DeleteBucketWebsiteRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteBucketWebsiteRequest = exports.DeleteBucketWebsiteRequest || (exports.DeleteBucketWebsiteRequest = {}));\nvar DeleteObjectOutput;\n(function (DeleteObjectOutput) {\n    DeleteObjectOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteObjectOutput = exports.DeleteObjectOutput || (exports.DeleteObjectOutput = {}));\nvar DeleteObjectRequest;\n(function (DeleteObjectRequest) {\n    DeleteObjectRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteObjectRequest = exports.DeleteObjectRequest || (exports.DeleteObjectRequest = {}));\nvar DeletedObject;\n(function (DeletedObject) {\n    DeletedObject.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeletedObject = exports.DeletedObject || (exports.DeletedObject = {}));\nvar _Error;\n(function (_Error) {\n    _Error.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(_Error = exports._Error || (exports._Error = {}));\nvar DeleteObjectsOutput;\n(function (DeleteObjectsOutput) {\n    DeleteObjectsOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteObjectsOutput = exports.DeleteObjectsOutput || (exports.DeleteObjectsOutput = {}));\nvar ObjectIdentifier;\n(function (ObjectIdentifier) {\n    ObjectIdentifier.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ObjectIdentifier = exports.ObjectIdentifier || (exports.ObjectIdentifier = {}));\nvar Delete;\n(function (Delete) {\n    Delete.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Delete = exports.Delete || (exports.Delete = {}));\nvar DeleteObjectsRequest;\n(function (DeleteObjectsRequest) {\n    DeleteObjectsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteObjectsRequest = exports.DeleteObjectsRequest || (exports.DeleteObjectsRequest = {}));\nvar DeleteObjectTaggingOutput;\n(function (DeleteObjectTaggingOutput) {\n    DeleteObjectTaggingOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteObjectTaggingOutput = exports.DeleteObjectTaggingOutput || (exports.DeleteObjectTaggingOutput = {}));\nvar DeleteObjectTaggingRequest;\n(function (DeleteObjectTaggingRequest) {\n    DeleteObjectTaggingRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteObjectTaggingRequest = exports.DeleteObjectTaggingRequest || (exports.DeleteObjectTaggingRequest = {}));\nvar DeletePublicAccessBlockRequest;\n(function (DeletePublicAccessBlockRequest) {\n    DeletePublicAccessBlockRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeletePublicAccessBlockRequest = exports.DeletePublicAccessBlockRequest || (exports.DeletePublicAccessBlockRequest = {}));\nvar GetBucketAccelerateConfigurationOutput;\n(function (GetBucketAccelerateConfigurationOutput) {\n    GetBucketAccelerateConfigurationOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketAccelerateConfigurationOutput = exports.GetBucketAccelerateConfigurationOutput || (exports.GetBucketAccelerateConfigurationOutput = {}));\nvar GetBucketAccelerateConfigurationRequest;\n(function (GetBucketAccelerateConfigurationRequest) {\n    GetBucketAccelerateConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketAccelerateConfigurationRequest = exports.GetBucketAccelerateConfigurationRequest || (exports.GetBucketAccelerateConfigurationRequest = {}));\nvar GetBucketAclOutput;\n(function (GetBucketAclOutput) {\n    GetBucketAclOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketAclOutput = exports.GetBucketAclOutput || (exports.GetBucketAclOutput = {}));\nvar GetBucketAclRequest;\n(function (GetBucketAclRequest) {\n    GetBucketAclRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketAclRequest = exports.GetBucketAclRequest || (exports.GetBucketAclRequest = {}));\nvar Tag;\n(function (Tag) {\n    Tag.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Tag = exports.Tag || (exports.Tag = {}));\nvar AnalyticsAndOperator;\n(function (AnalyticsAndOperator) {\n    AnalyticsAndOperator.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AnalyticsAndOperator = exports.AnalyticsAndOperator || (exports.AnalyticsAndOperator = {}));\nvar AnalyticsFilter;\n(function (AnalyticsFilter) {\n    AnalyticsFilter.visit = (value, visitor) => {\n        if (value.Prefix !== undefined)\n            return visitor.Prefix(value.Prefix);\n        if (value.Tag !== undefined)\n            return visitor.Tag(value.Tag);\n        if (value.And !== undefined)\n            return visitor.And(value.And);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n    AnalyticsFilter.filterSensitiveLog = (obj) => {\n        if (obj.Prefix !== undefined)\n            return { Prefix: obj.Prefix };\n        if (obj.Tag !== undefined)\n            return { Tag: Tag.filterSensitiveLog(obj.Tag) };\n        if (obj.And !== undefined)\n            return { And: AnalyticsAndOperator.filterSensitiveLog(obj.And) };\n        if (obj.$unknown !== undefined)\n            return { [obj.$unknown[0]]: \"UNKNOWN\" };\n    };\n})(AnalyticsFilter = exports.AnalyticsFilter || (exports.AnalyticsFilter = {}));\nvar AnalyticsS3BucketDestination;\n(function (AnalyticsS3BucketDestination) {\n    AnalyticsS3BucketDestination.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AnalyticsS3BucketDestination = exports.AnalyticsS3BucketDestination || (exports.AnalyticsS3BucketDestination = {}));\nvar AnalyticsExportDestination;\n(function (AnalyticsExportDestination) {\n    AnalyticsExportDestination.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AnalyticsExportDestination = exports.AnalyticsExportDestination || (exports.AnalyticsExportDestination = {}));\nvar StorageClassAnalysisDataExport;\n(function (StorageClassAnalysisDataExport) {\n    StorageClassAnalysisDataExport.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(StorageClassAnalysisDataExport = exports.StorageClassAnalysisDataExport || (exports.StorageClassAnalysisDataExport = {}));\nvar StorageClassAnalysis;\n(function (StorageClassAnalysis) {\n    StorageClassAnalysis.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(StorageClassAnalysis = exports.StorageClassAnalysis || (exports.StorageClassAnalysis = {}));\nvar AnalyticsConfiguration;\n(function (AnalyticsConfiguration) {\n    AnalyticsConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Filter && { Filter: AnalyticsFilter.filterSensitiveLog(obj.Filter) }),\n    });\n})(AnalyticsConfiguration = exports.AnalyticsConfiguration || (exports.AnalyticsConfiguration = {}));\nvar GetBucketAnalyticsConfigurationOutput;\n(function (GetBucketAnalyticsConfigurationOutput) {\n    GetBucketAnalyticsConfigurationOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.AnalyticsConfiguration && {\n            AnalyticsConfiguration: AnalyticsConfiguration.filterSensitiveLog(obj.AnalyticsConfiguration),\n        }),\n    });\n})(GetBucketAnalyticsConfigurationOutput = exports.GetBucketAnalyticsConfigurationOutput || (exports.GetBucketAnalyticsConfigurationOutput = {}));\nvar GetBucketAnalyticsConfigurationRequest;\n(function (GetBucketAnalyticsConfigurationRequest) {\n    GetBucketAnalyticsConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketAnalyticsConfigurationRequest = exports.GetBucketAnalyticsConfigurationRequest || (exports.GetBucketAnalyticsConfigurationRequest = {}));\nvar CORSRule;\n(function (CORSRule) {\n    CORSRule.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CORSRule = exports.CORSRule || (exports.CORSRule = {}));\nvar GetBucketCorsOutput;\n(function (GetBucketCorsOutput) {\n    GetBucketCorsOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketCorsOutput = exports.GetBucketCorsOutput || (exports.GetBucketCorsOutput = {}));\nvar GetBucketCorsRequest;\n(function (GetBucketCorsRequest) {\n    GetBucketCorsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketCorsRequest = exports.GetBucketCorsRequest || (exports.GetBucketCorsRequest = {}));\nvar ServerSideEncryptionByDefault;\n(function (ServerSideEncryptionByDefault) {\n    ServerSideEncryptionByDefault.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.KMSMasterKeyID && { KMSMasterKeyID: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(ServerSideEncryptionByDefault = exports.ServerSideEncryptionByDefault || (exports.ServerSideEncryptionByDefault = {}));\nvar ServerSideEncryptionRule;\n(function (ServerSideEncryptionRule) {\n    ServerSideEncryptionRule.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.ApplyServerSideEncryptionByDefault && {\n            ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefault.filterSensitiveLog(obj.ApplyServerSideEncryptionByDefault),\n        }),\n    });\n})(ServerSideEncryptionRule = exports.ServerSideEncryptionRule || (exports.ServerSideEncryptionRule = {}));\nvar ServerSideEncryptionConfiguration;\n(function (ServerSideEncryptionConfiguration) {\n    ServerSideEncryptionConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Rules && { Rules: obj.Rules.map((item) => ServerSideEncryptionRule.filterSensitiveLog(item)) }),\n    });\n})(ServerSideEncryptionConfiguration = exports.ServerSideEncryptionConfiguration || (exports.ServerSideEncryptionConfiguration = {}));\nvar GetBucketEncryptionOutput;\n(function (GetBucketEncryptionOutput) {\n    GetBucketEncryptionOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.ServerSideEncryptionConfiguration && {\n            ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration.filterSensitiveLog(obj.ServerSideEncryptionConfiguration),\n        }),\n    });\n})(GetBucketEncryptionOutput = exports.GetBucketEncryptionOutput || (exports.GetBucketEncryptionOutput = {}));\nvar GetBucketEncryptionRequest;\n(function (GetBucketEncryptionRequest) {\n    GetBucketEncryptionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketEncryptionRequest = exports.GetBucketEncryptionRequest || (exports.GetBucketEncryptionRequest = {}));\nvar IntelligentTieringAndOperator;\n(function (IntelligentTieringAndOperator) {\n    IntelligentTieringAndOperator.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(IntelligentTieringAndOperator = exports.IntelligentTieringAndOperator || (exports.IntelligentTieringAndOperator = {}));\nvar IntelligentTieringFilter;\n(function (IntelligentTieringFilter) {\n    IntelligentTieringFilter.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(IntelligentTieringFilter = exports.IntelligentTieringFilter || (exports.IntelligentTieringFilter = {}));\nvar Tiering;\n(function (Tiering) {\n    Tiering.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Tiering = exports.Tiering || (exports.Tiering = {}));\nvar IntelligentTieringConfiguration;\n(function (IntelligentTieringConfiguration) {\n    IntelligentTieringConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(IntelligentTieringConfiguration = exports.IntelligentTieringConfiguration || (exports.IntelligentTieringConfiguration = {}));\nvar GetBucketIntelligentTieringConfigurationOutput;\n(function (GetBucketIntelligentTieringConfigurationOutput) {\n    GetBucketIntelligentTieringConfigurationOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketIntelligentTieringConfigurationOutput = exports.GetBucketIntelligentTieringConfigurationOutput || (exports.GetBucketIntelligentTieringConfigurationOutput = {}));\nvar GetBucketIntelligentTieringConfigurationRequest;\n(function (GetBucketIntelligentTieringConfigurationRequest) {\n    GetBucketIntelligentTieringConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketIntelligentTieringConfigurationRequest = exports.GetBucketIntelligentTieringConfigurationRequest || (exports.GetBucketIntelligentTieringConfigurationRequest = {}));\nvar SSEKMS;\n(function (SSEKMS) {\n    SSEKMS.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.KeyId && { KeyId: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(SSEKMS = exports.SSEKMS || (exports.SSEKMS = {}));\nvar SSES3;\n(function (SSES3) {\n    SSES3.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(SSES3 = exports.SSES3 || (exports.SSES3 = {}));\nvar InventoryEncryption;\n(function (InventoryEncryption) {\n    InventoryEncryption.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSEKMS && { SSEKMS: SSEKMS.filterSensitiveLog(obj.SSEKMS) }),\n    });\n})(InventoryEncryption = exports.InventoryEncryption || (exports.InventoryEncryption = {}));\nvar InventoryS3BucketDestination;\n(function (InventoryS3BucketDestination) {\n    InventoryS3BucketDestination.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Encryption && { Encryption: InventoryEncryption.filterSensitiveLog(obj.Encryption) }),\n    });\n})(InventoryS3BucketDestination = exports.InventoryS3BucketDestination || (exports.InventoryS3BucketDestination = {}));\nvar InventoryDestination;\n(function (InventoryDestination) {\n    InventoryDestination.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.S3BucketDestination && {\n            S3BucketDestination: InventoryS3BucketDestination.filterSensitiveLog(obj.S3BucketDestination),\n        }),\n    });\n})(InventoryDestination = exports.InventoryDestination || (exports.InventoryDestination = {}));\nvar InventoryFilter;\n(function (InventoryFilter) {\n    InventoryFilter.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InventoryFilter = exports.InventoryFilter || (exports.InventoryFilter = {}));\nvar InventorySchedule;\n(function (InventorySchedule) {\n    InventorySchedule.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InventorySchedule = exports.InventorySchedule || (exports.InventorySchedule = {}));\nvar InventoryConfiguration;\n(function (InventoryConfiguration) {\n    InventoryConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Destination && { Destination: InventoryDestination.filterSensitiveLog(obj.Destination) }),\n    });\n})(InventoryConfiguration = exports.InventoryConfiguration || (exports.InventoryConfiguration = {}));\nvar GetBucketInventoryConfigurationOutput;\n(function (GetBucketInventoryConfigurationOutput) {\n    GetBucketInventoryConfigurationOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.InventoryConfiguration && {\n            InventoryConfiguration: InventoryConfiguration.filterSensitiveLog(obj.InventoryConfiguration),\n        }),\n    });\n})(GetBucketInventoryConfigurationOutput = exports.GetBucketInventoryConfigurationOutput || (exports.GetBucketInventoryConfigurationOutput = {}));\nvar GetBucketInventoryConfigurationRequest;\n(function (GetBucketInventoryConfigurationRequest) {\n    GetBucketInventoryConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketInventoryConfigurationRequest = exports.GetBucketInventoryConfigurationRequest || (exports.GetBucketInventoryConfigurationRequest = {}));\nvar LifecycleExpiration;\n(function (LifecycleExpiration) {\n    LifecycleExpiration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(LifecycleExpiration = exports.LifecycleExpiration || (exports.LifecycleExpiration = {}));\nvar LifecycleRuleAndOperator;\n(function (LifecycleRuleAndOperator) {\n    LifecycleRuleAndOperator.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(LifecycleRuleAndOperator = exports.LifecycleRuleAndOperator || (exports.LifecycleRuleAndOperator = {}));\nvar LifecycleRuleFilter;\n(function (LifecycleRuleFilter) {\n    LifecycleRuleFilter.visit = (value, visitor) => {\n        if (value.Prefix !== undefined)\n            return visitor.Prefix(value.Prefix);\n        if (value.Tag !== undefined)\n            return visitor.Tag(value.Tag);\n        if (value.And !== undefined)\n            return visitor.And(value.And);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n    LifecycleRuleFilter.filterSensitiveLog = (obj) => {\n        if (obj.Prefix !== undefined)\n            return { Prefix: obj.Prefix };\n        if (obj.Tag !== undefined)\n            return { Tag: Tag.filterSensitiveLog(obj.Tag) };\n        if (obj.And !== undefined)\n            return { And: LifecycleRuleAndOperator.filterSensitiveLog(obj.And) };\n        if (obj.$unknown !== undefined)\n            return { [obj.$unknown[0]]: \"UNKNOWN\" };\n    };\n})(LifecycleRuleFilter = exports.LifecycleRuleFilter || (exports.LifecycleRuleFilter = {}));\nvar NoncurrentVersionExpiration;\n(function (NoncurrentVersionExpiration) {\n    NoncurrentVersionExpiration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoncurrentVersionExpiration = exports.NoncurrentVersionExpiration || (exports.NoncurrentVersionExpiration = {}));\nvar NoncurrentVersionTransition;\n(function (NoncurrentVersionTransition) {\n    NoncurrentVersionTransition.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoncurrentVersionTransition = exports.NoncurrentVersionTransition || (exports.NoncurrentVersionTransition = {}));\nvar Transition;\n(function (Transition) {\n    Transition.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Transition = exports.Transition || (exports.Transition = {}));\nvar LifecycleRule;\n(function (LifecycleRule) {\n    LifecycleRule.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Filter && { Filter: LifecycleRuleFilter.filterSensitiveLog(obj.Filter) }),\n    });\n})(LifecycleRule = exports.LifecycleRule || (exports.LifecycleRule = {}));\nvar GetBucketLifecycleConfigurationOutput;\n(function (GetBucketLifecycleConfigurationOutput) {\n    GetBucketLifecycleConfigurationOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Rules && { Rules: obj.Rules.map((item) => LifecycleRule.filterSensitiveLog(item)) }),\n    });\n})(GetBucketLifecycleConfigurationOutput = exports.GetBucketLifecycleConfigurationOutput || (exports.GetBucketLifecycleConfigurationOutput = {}));\nvar GetBucketLifecycleConfigurationRequest;\n(function (GetBucketLifecycleConfigurationRequest) {\n    GetBucketLifecycleConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketLifecycleConfigurationRequest = exports.GetBucketLifecycleConfigurationRequest || (exports.GetBucketLifecycleConfigurationRequest = {}));\nvar GetBucketLocationOutput;\n(function (GetBucketLocationOutput) {\n    GetBucketLocationOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketLocationOutput = exports.GetBucketLocationOutput || (exports.GetBucketLocationOutput = {}));\nvar GetBucketLocationRequest;\n(function (GetBucketLocationRequest) {\n    GetBucketLocationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketLocationRequest = exports.GetBucketLocationRequest || (exports.GetBucketLocationRequest = {}));\nvar TargetGrant;\n(function (TargetGrant) {\n    TargetGrant.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TargetGrant = exports.TargetGrant || (exports.TargetGrant = {}));\nvar LoggingEnabled;\n(function (LoggingEnabled) {\n    LoggingEnabled.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(LoggingEnabled = exports.LoggingEnabled || (exports.LoggingEnabled = {}));\nvar GetBucketLoggingOutput;\n(function (GetBucketLoggingOutput) {\n    GetBucketLoggingOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketLoggingOutput = exports.GetBucketLoggingOutput || (exports.GetBucketLoggingOutput = {}));\nvar GetBucketLoggingRequest;\n(function (GetBucketLoggingRequest) {\n    GetBucketLoggingRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketLoggingRequest = exports.GetBucketLoggingRequest || (exports.GetBucketLoggingRequest = {}));\nvar MetricsAndOperator;\n(function (MetricsAndOperator) {\n    MetricsAndOperator.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(MetricsAndOperator = exports.MetricsAndOperator || (exports.MetricsAndOperator = {}));\nvar MetricsFilter;\n(function (MetricsFilter) {\n    MetricsFilter.visit = (value, visitor) => {\n        if (value.Prefix !== undefined)\n            return visitor.Prefix(value.Prefix);\n        if (value.Tag !== undefined)\n            return visitor.Tag(value.Tag);\n        if (value.AccessPointArn !== undefined)\n            return visitor.AccessPointArn(value.AccessPointArn);\n        if (value.And !== undefined)\n            return visitor.And(value.And);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n    MetricsFilter.filterSensitiveLog = (obj) => {\n        if (obj.Prefix !== undefined)\n            return { Prefix: obj.Prefix };\n        if (obj.Tag !== undefined)\n            return { Tag: Tag.filterSensitiveLog(obj.Tag) };\n        if (obj.AccessPointArn !== undefined)\n            return { AccessPointArn: obj.AccessPointArn };\n        if (obj.And !== undefined)\n            return { And: MetricsAndOperator.filterSensitiveLog(obj.And) };\n        if (obj.$unknown !== undefined)\n            return { [obj.$unknown[0]]: \"UNKNOWN\" };\n    };\n})(MetricsFilter = exports.MetricsFilter || (exports.MetricsFilter = {}));\nvar MetricsConfiguration;\n(function (MetricsConfiguration) {\n    MetricsConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Filter && { Filter: MetricsFilter.filterSensitiveLog(obj.Filter) }),\n    });\n})(MetricsConfiguration = exports.MetricsConfiguration || (exports.MetricsConfiguration = {}));\nvar GetBucketMetricsConfigurationOutput;\n(function (GetBucketMetricsConfigurationOutput) {\n    GetBucketMetricsConfigurationOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.MetricsConfiguration && {\n            MetricsConfiguration: MetricsConfiguration.filterSensitiveLog(obj.MetricsConfiguration),\n        }),\n    });\n})(GetBucketMetricsConfigurationOutput = exports.GetBucketMetricsConfigurationOutput || (exports.GetBucketMetricsConfigurationOutput = {}));\nvar GetBucketMetricsConfigurationRequest;\n(function (GetBucketMetricsConfigurationRequest) {\n    GetBucketMetricsConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketMetricsConfigurationRequest = exports.GetBucketMetricsConfigurationRequest || (exports.GetBucketMetricsConfigurationRequest = {}));\nvar GetBucketNotificationConfigurationRequest;\n(function (GetBucketNotificationConfigurationRequest) {\n    GetBucketNotificationConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketNotificationConfigurationRequest = exports.GetBucketNotificationConfigurationRequest || (exports.GetBucketNotificationConfigurationRequest = {}));\nvar FilterRule;\n(function (FilterRule) {\n    FilterRule.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FilterRule = exports.FilterRule || (exports.FilterRule = {}));\nvar S3KeyFilter;\n(function (S3KeyFilter) {\n    S3KeyFilter.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(S3KeyFilter = exports.S3KeyFilter || (exports.S3KeyFilter = {}));\nvar NotificationConfigurationFilter;\n(function (NotificationConfigurationFilter) {\n    NotificationConfigurationFilter.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NotificationConfigurationFilter = exports.NotificationConfigurationFilter || (exports.NotificationConfigurationFilter = {}));\nvar LambdaFunctionConfiguration;\n(function (LambdaFunctionConfiguration) {\n    LambdaFunctionConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(LambdaFunctionConfiguration = exports.LambdaFunctionConfiguration || (exports.LambdaFunctionConfiguration = {}));\nvar QueueConfiguration;\n(function (QueueConfiguration) {\n    QueueConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(QueueConfiguration = exports.QueueConfiguration || (exports.QueueConfiguration = {}));\nvar TopicConfiguration;\n(function (TopicConfiguration) {\n    TopicConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TopicConfiguration = exports.TopicConfiguration || (exports.TopicConfiguration = {}));\nvar NotificationConfiguration;\n(function (NotificationConfiguration) {\n    NotificationConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NotificationConfiguration = exports.NotificationConfiguration || (exports.NotificationConfiguration = {}));\nvar OwnershipControlsRule;\n(function (OwnershipControlsRule) {\n    OwnershipControlsRule.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OwnershipControlsRule = exports.OwnershipControlsRule || (exports.OwnershipControlsRule = {}));\nvar OwnershipControls;\n(function (OwnershipControls) {\n    OwnershipControls.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OwnershipControls = exports.OwnershipControls || (exports.OwnershipControls = {}));\nvar GetBucketOwnershipControlsOutput;\n(function (GetBucketOwnershipControlsOutput) {\n    GetBucketOwnershipControlsOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketOwnershipControlsOutput = exports.GetBucketOwnershipControlsOutput || (exports.GetBucketOwnershipControlsOutput = {}));\nvar GetBucketOwnershipControlsRequest;\n(function (GetBucketOwnershipControlsRequest) {\n    GetBucketOwnershipControlsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketOwnershipControlsRequest = exports.GetBucketOwnershipControlsRequest || (exports.GetBucketOwnershipControlsRequest = {}));\nvar GetBucketPolicyOutput;\n(function (GetBucketPolicyOutput) {\n    GetBucketPolicyOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketPolicyOutput = exports.GetBucketPolicyOutput || (exports.GetBucketPolicyOutput = {}));\nvar GetBucketPolicyRequest;\n(function (GetBucketPolicyRequest) {\n    GetBucketPolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketPolicyRequest = exports.GetBucketPolicyRequest || (exports.GetBucketPolicyRequest = {}));\nvar PolicyStatus;\n(function (PolicyStatus) {\n    PolicyStatus.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PolicyStatus = exports.PolicyStatus || (exports.PolicyStatus = {}));\nvar GetBucketPolicyStatusOutput;\n(function (GetBucketPolicyStatusOutput) {\n    GetBucketPolicyStatusOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketPolicyStatusOutput = exports.GetBucketPolicyStatusOutput || (exports.GetBucketPolicyStatusOutput = {}));\nvar GetBucketPolicyStatusRequest;\n(function (GetBucketPolicyStatusRequest) {\n    GetBucketPolicyStatusRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketPolicyStatusRequest = exports.GetBucketPolicyStatusRequest || (exports.GetBucketPolicyStatusRequest = {}));\nvar DeleteMarkerReplication;\n(function (DeleteMarkerReplication) {\n    DeleteMarkerReplication.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteMarkerReplication = exports.DeleteMarkerReplication || (exports.DeleteMarkerReplication = {}));\nvar EncryptionConfiguration;\n(function (EncryptionConfiguration) {\n    EncryptionConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(EncryptionConfiguration = exports.EncryptionConfiguration || (exports.EncryptionConfiguration = {}));\nvar ReplicationTimeValue;\n(function (ReplicationTimeValue) {\n    ReplicationTimeValue.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ReplicationTimeValue = exports.ReplicationTimeValue || (exports.ReplicationTimeValue = {}));\nvar Metrics;\n(function (Metrics) {\n    Metrics.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Metrics = exports.Metrics || (exports.Metrics = {}));\nvar ReplicationTime;\n(function (ReplicationTime) {\n    ReplicationTime.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ReplicationTime = exports.ReplicationTime || (exports.ReplicationTime = {}));\nvar Destination;\n(function (Destination) {\n    Destination.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Destination = exports.Destination || (exports.Destination = {}));\nvar ExistingObjectReplication;\n(function (ExistingObjectReplication) {\n    ExistingObjectReplication.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ExistingObjectReplication = exports.ExistingObjectReplication || (exports.ExistingObjectReplication = {}));\nvar ReplicationRuleAndOperator;\n(function (ReplicationRuleAndOperator) {\n    ReplicationRuleAndOperator.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ReplicationRuleAndOperator = exports.ReplicationRuleAndOperator || (exports.ReplicationRuleAndOperator = {}));\nvar ReplicationRuleFilter;\n(function (ReplicationRuleFilter) {\n    ReplicationRuleFilter.visit = (value, visitor) => {\n        if (value.Prefix !== undefined)\n            return visitor.Prefix(value.Prefix);\n        if (value.Tag !== undefined)\n            return visitor.Tag(value.Tag);\n        if (value.And !== undefined)\n            return visitor.And(value.And);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n    ReplicationRuleFilter.filterSensitiveLog = (obj) => {\n        if (obj.Prefix !== undefined)\n            return { Prefix: obj.Prefix };\n        if (obj.Tag !== undefined)\n            return { Tag: Tag.filterSensitiveLog(obj.Tag) };\n        if (obj.And !== undefined)\n            return { And: ReplicationRuleAndOperator.filterSensitiveLog(obj.And) };\n        if (obj.$unknown !== undefined)\n            return { [obj.$unknown[0]]: \"UNKNOWN\" };\n    };\n})(ReplicationRuleFilter = exports.ReplicationRuleFilter || (exports.ReplicationRuleFilter = {}));\nvar ReplicaModifications;\n(function (ReplicaModifications) {\n    ReplicaModifications.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ReplicaModifications = exports.ReplicaModifications || (exports.ReplicaModifications = {}));\nvar SseKmsEncryptedObjects;\n(function (SseKmsEncryptedObjects) {\n    SseKmsEncryptedObjects.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(SseKmsEncryptedObjects = exports.SseKmsEncryptedObjects || (exports.SseKmsEncryptedObjects = {}));\nvar SourceSelectionCriteria;\n(function (SourceSelectionCriteria) {\n    SourceSelectionCriteria.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(SourceSelectionCriteria = exports.SourceSelectionCriteria || (exports.SourceSelectionCriteria = {}));\nvar ReplicationRule;\n(function (ReplicationRule) {\n    ReplicationRule.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Filter && { Filter: ReplicationRuleFilter.filterSensitiveLog(obj.Filter) }),\n    });\n})(ReplicationRule = exports.ReplicationRule || (exports.ReplicationRule = {}));\nvar ReplicationConfiguration;\n(function (ReplicationConfiguration) {\n    ReplicationConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Rules && { Rules: obj.Rules.map((item) => ReplicationRule.filterSensitiveLog(item)) }),\n    });\n})(ReplicationConfiguration = exports.ReplicationConfiguration || (exports.ReplicationConfiguration = {}));\nvar GetBucketReplicationOutput;\n(function (GetBucketReplicationOutput) {\n    GetBucketReplicationOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.ReplicationConfiguration && {\n            ReplicationConfiguration: ReplicationConfiguration.filterSensitiveLog(obj.ReplicationConfiguration),\n        }),\n    });\n})(GetBucketReplicationOutput = exports.GetBucketReplicationOutput || (exports.GetBucketReplicationOutput = {}));\nvar GetBucketReplicationRequest;\n(function (GetBucketReplicationRequest) {\n    GetBucketReplicationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketReplicationRequest = exports.GetBucketReplicationRequest || (exports.GetBucketReplicationRequest = {}));\nvar GetBucketRequestPaymentOutput;\n(function (GetBucketRequestPaymentOutput) {\n    GetBucketRequestPaymentOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketRequestPaymentOutput = exports.GetBucketRequestPaymentOutput || (exports.GetBucketRequestPaymentOutput = {}));\nvar GetBucketRequestPaymentRequest;\n(function (GetBucketRequestPaymentRequest) {\n    GetBucketRequestPaymentRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketRequestPaymentRequest = exports.GetBucketRequestPaymentRequest || (exports.GetBucketRequestPaymentRequest = {}));\nvar GetBucketTaggingOutput;\n(function (GetBucketTaggingOutput) {\n    GetBucketTaggingOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketTaggingOutput = exports.GetBucketTaggingOutput || (exports.GetBucketTaggingOutput = {}));\nvar GetBucketTaggingRequest;\n(function (GetBucketTaggingRequest) {\n    GetBucketTaggingRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketTaggingRequest = exports.GetBucketTaggingRequest || (exports.GetBucketTaggingRequest = {}));\nvar GetBucketVersioningOutput;\n(function (GetBucketVersioningOutput) {\n    GetBucketVersioningOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketVersioningOutput = exports.GetBucketVersioningOutput || (exports.GetBucketVersioningOutput = {}));\nvar GetBucketVersioningRequest;\n(function (GetBucketVersioningRequest) {\n    GetBucketVersioningRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketVersioningRequest = exports.GetBucketVersioningRequest || (exports.GetBucketVersioningRequest = {}));\nvar ErrorDocument;\n(function (ErrorDocument) {\n    ErrorDocument.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ErrorDocument = exports.ErrorDocument || (exports.ErrorDocument = {}));\nvar IndexDocument;\n(function (IndexDocument) {\n    IndexDocument.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(IndexDocument = exports.IndexDocument || (exports.IndexDocument = {}));\nvar RedirectAllRequestsTo;\n(function (RedirectAllRequestsTo) {\n    RedirectAllRequestsTo.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(RedirectAllRequestsTo = exports.RedirectAllRequestsTo || (exports.RedirectAllRequestsTo = {}));\nvar Condition;\n(function (Condition) {\n    Condition.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Condition = exports.Condition || (exports.Condition = {}));\nvar Redirect;\n(function (Redirect) {\n    Redirect.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Redirect = exports.Redirect || (exports.Redirect = {}));\nvar RoutingRule;\n(function (RoutingRule) {\n    RoutingRule.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(RoutingRule = exports.RoutingRule || (exports.RoutingRule = {}));\nvar GetBucketWebsiteOutput;\n(function (GetBucketWebsiteOutput) {\n    GetBucketWebsiteOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketWebsiteOutput = exports.GetBucketWebsiteOutput || (exports.GetBucketWebsiteOutput = {}));\nvar GetBucketWebsiteRequest;\n(function (GetBucketWebsiteRequest) {\n    GetBucketWebsiteRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetBucketWebsiteRequest = exports.GetBucketWebsiteRequest || (exports.GetBucketWebsiteRequest = {}));\nvar GetObjectOutput;\n(function (GetObjectOutput) {\n    GetObjectOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(GetObjectOutput = exports.GetObjectOutput || (exports.GetObjectOutput = {}));\nvar GetObjectRequest;\n(function (GetObjectRequest) {\n    GetObjectRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(GetObjectRequest = exports.GetObjectRequest || (exports.GetObjectRequest = {}));\nvar InvalidObjectState;\n(function (InvalidObjectState) {\n    InvalidObjectState.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidObjectState = exports.InvalidObjectState || (exports.InvalidObjectState = {}));\nvar NoSuchKey;\n(function (NoSuchKey) {\n    NoSuchKey.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchKey = exports.NoSuchKey || (exports.NoSuchKey = {}));\nvar GetObjectAclOutput;\n(function (GetObjectAclOutput) {\n    GetObjectAclOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetObjectAclOutput = exports.GetObjectAclOutput || (exports.GetObjectAclOutput = {}));\nvar GetObjectAclRequest;\n(function (GetObjectAclRequest) {\n    GetObjectAclRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetObjectAclRequest = exports.GetObjectAclRequest || (exports.GetObjectAclRequest = {}));\nvar ObjectLockLegalHold;\n(function (ObjectLockLegalHold) {\n    ObjectLockLegalHold.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ObjectLockLegalHold = exports.ObjectLockLegalHold || (exports.ObjectLockLegalHold = {}));\nvar GetObjectLegalHoldOutput;\n(function (GetObjectLegalHoldOutput) {\n    GetObjectLegalHoldOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetObjectLegalHoldOutput = exports.GetObjectLegalHoldOutput || (exports.GetObjectLegalHoldOutput = {}));\nvar GetObjectLegalHoldRequest;\n(function (GetObjectLegalHoldRequest) {\n    GetObjectLegalHoldRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetObjectLegalHoldRequest = exports.GetObjectLegalHoldRequest || (exports.GetObjectLegalHoldRequest = {}));\nvar DefaultRetention;\n(function (DefaultRetention) {\n    DefaultRetention.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DefaultRetention = exports.DefaultRetention || (exports.DefaultRetention = {}));\nvar ObjectLockRule;\n(function (ObjectLockRule) {\n    ObjectLockRule.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ObjectLockRule = exports.ObjectLockRule || (exports.ObjectLockRule = {}));\nvar ObjectLockConfiguration;\n(function (ObjectLockConfiguration) {\n    ObjectLockConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ObjectLockConfiguration = exports.ObjectLockConfiguration || (exports.ObjectLockConfiguration = {}));\nvar GetObjectLockConfigurationOutput;\n(function (GetObjectLockConfigurationOutput) {\n    GetObjectLockConfigurationOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetObjectLockConfigurationOutput = exports.GetObjectLockConfigurationOutput || (exports.GetObjectLockConfigurationOutput = {}));\nvar GetObjectLockConfigurationRequest;\n(function (GetObjectLockConfigurationRequest) {\n    GetObjectLockConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetObjectLockConfigurationRequest = exports.GetObjectLockConfigurationRequest || (exports.GetObjectLockConfigurationRequest = {}));\nvar ObjectLockRetention;\n(function (ObjectLockRetention) {\n    ObjectLockRetention.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ObjectLockRetention = exports.ObjectLockRetention || (exports.ObjectLockRetention = {}));\nvar GetObjectRetentionOutput;\n(function (GetObjectRetentionOutput) {\n    GetObjectRetentionOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetObjectRetentionOutput = exports.GetObjectRetentionOutput || (exports.GetObjectRetentionOutput = {}));\nvar GetObjectRetentionRequest;\n(function (GetObjectRetentionRequest) {\n    GetObjectRetentionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetObjectRetentionRequest = exports.GetObjectRetentionRequest || (exports.GetObjectRetentionRequest = {}));\nvar GetObjectTaggingOutput;\n(function (GetObjectTaggingOutput) {\n    GetObjectTaggingOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetObjectTaggingOutput = exports.GetObjectTaggingOutput || (exports.GetObjectTaggingOutput = {}));\nvar GetObjectTaggingRequest;\n(function (GetObjectTaggingRequest) {\n    GetObjectTaggingRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetObjectTaggingRequest = exports.GetObjectTaggingRequest || (exports.GetObjectTaggingRequest = {}));\nvar GetObjectTorrentOutput;\n(function (GetObjectTorrentOutput) {\n    GetObjectTorrentOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetObjectTorrentOutput = exports.GetObjectTorrentOutput || (exports.GetObjectTorrentOutput = {}));\nvar GetObjectTorrentRequest;\n(function (GetObjectTorrentRequest) {\n    GetObjectTorrentRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetObjectTorrentRequest = exports.GetObjectTorrentRequest || (exports.GetObjectTorrentRequest = {}));\nvar PublicAccessBlockConfiguration;\n(function (PublicAccessBlockConfiguration) {\n    PublicAccessBlockConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PublicAccessBlockConfiguration = exports.PublicAccessBlockConfiguration || (exports.PublicAccessBlockConfiguration = {}));\nvar GetPublicAccessBlockOutput;\n(function (GetPublicAccessBlockOutput) {\n    GetPublicAccessBlockOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetPublicAccessBlockOutput = exports.GetPublicAccessBlockOutput || (exports.GetPublicAccessBlockOutput = {}));\nvar GetPublicAccessBlockRequest;\n(function (GetPublicAccessBlockRequest) {\n    GetPublicAccessBlockRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetPublicAccessBlockRequest = exports.GetPublicAccessBlockRequest || (exports.GetPublicAccessBlockRequest = {}));\nvar HeadBucketRequest;\n(function (HeadBucketRequest) {\n    HeadBucketRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(HeadBucketRequest = exports.HeadBucketRequest || (exports.HeadBucketRequest = {}));\nvar NotFound;\n(function (NotFound) {\n    NotFound.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NotFound = exports.NotFound || (exports.NotFound = {}));\nvar HeadObjectOutput;\n(function (HeadObjectOutput) {\n    HeadObjectOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(HeadObjectOutput = exports.HeadObjectOutput || (exports.HeadObjectOutput = {}));\nvar HeadObjectRequest;\n(function (HeadObjectRequest) {\n    HeadObjectRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(HeadObjectRequest = exports.HeadObjectRequest || (exports.HeadObjectRequest = {}));\nvar ListBucketAnalyticsConfigurationsOutput;\n(function (ListBucketAnalyticsConfigurationsOutput) {\n    ListBucketAnalyticsConfigurationsOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.AnalyticsConfigurationList && {\n            AnalyticsConfigurationList: obj.AnalyticsConfigurationList.map((item) => AnalyticsConfiguration.filterSensitiveLog(item)),\n        }),\n    });\n})(ListBucketAnalyticsConfigurationsOutput = exports.ListBucketAnalyticsConfigurationsOutput || (exports.ListBucketAnalyticsConfigurationsOutput = {}));\nvar ListBucketAnalyticsConfigurationsRequest;\n(function (ListBucketAnalyticsConfigurationsRequest) {\n    ListBucketAnalyticsConfigurationsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListBucketAnalyticsConfigurationsRequest = exports.ListBucketAnalyticsConfigurationsRequest || (exports.ListBucketAnalyticsConfigurationsRequest = {}));\nvar ListBucketIntelligentTieringConfigurationsOutput;\n(function (ListBucketIntelligentTieringConfigurationsOutput) {\n    ListBucketIntelligentTieringConfigurationsOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListBucketIntelligentTieringConfigurationsOutput = exports.ListBucketIntelligentTieringConfigurationsOutput || (exports.ListBucketIntelligentTieringConfigurationsOutput = {}));\nvar ListBucketIntelligentTieringConfigurationsRequest;\n(function (ListBucketIntelligentTieringConfigurationsRequest) {\n    ListBucketIntelligentTieringConfigurationsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListBucketIntelligentTieringConfigurationsRequest = exports.ListBucketIntelligentTieringConfigurationsRequest || (exports.ListBucketIntelligentTieringConfigurationsRequest = {}));\nvar ListBucketInventoryConfigurationsOutput;\n(function (ListBucketInventoryConfigurationsOutput) {\n    ListBucketInventoryConfigurationsOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.InventoryConfigurationList && {\n            InventoryConfigurationList: obj.InventoryConfigurationList.map((item) => InventoryConfiguration.filterSensitiveLog(item)),\n        }),\n    });\n})(ListBucketInventoryConfigurationsOutput = exports.ListBucketInventoryConfigurationsOutput || (exports.ListBucketInventoryConfigurationsOutput = {}));\nvar ListBucketInventoryConfigurationsRequest;\n(function (ListBucketInventoryConfigurationsRequest) {\n    ListBucketInventoryConfigurationsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListBucketInventoryConfigurationsRequest = exports.ListBucketInventoryConfigurationsRequest || (exports.ListBucketInventoryConfigurationsRequest = {}));\nvar ListBucketMetricsConfigurationsOutput;\n(function (ListBucketMetricsConfigurationsOutput) {\n    ListBucketMetricsConfigurationsOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.MetricsConfigurationList && {\n            MetricsConfigurationList: obj.MetricsConfigurationList.map((item) => MetricsConfiguration.filterSensitiveLog(item)),\n        }),\n    });\n})(ListBucketMetricsConfigurationsOutput = exports.ListBucketMetricsConfigurationsOutput || (exports.ListBucketMetricsConfigurationsOutput = {}));\nvar ListBucketMetricsConfigurationsRequest;\n(function (ListBucketMetricsConfigurationsRequest) {\n    ListBucketMetricsConfigurationsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListBucketMetricsConfigurationsRequest = exports.ListBucketMetricsConfigurationsRequest || (exports.ListBucketMetricsConfigurationsRequest = {}));\nvar Bucket;\n(function (Bucket) {\n    Bucket.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Bucket = exports.Bucket || (exports.Bucket = {}));\nvar ListBucketsOutput;\n(function (ListBucketsOutput) {\n    ListBucketsOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListBucketsOutput = exports.ListBucketsOutput || (exports.ListBucketsOutput = {}));\nvar CommonPrefix;\n(function (CommonPrefix) {\n    CommonPrefix.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CommonPrefix = exports.CommonPrefix || (exports.CommonPrefix = {}));\nvar Initiator;\n(function (Initiator) {\n    Initiator.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Initiator = exports.Initiator || (exports.Initiator = {}));\nvar MultipartUpload;\n(function (MultipartUpload) {\n    MultipartUpload.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(MultipartUpload = exports.MultipartUpload || (exports.MultipartUpload = {}));\nvar ListMultipartUploadsOutput;\n(function (ListMultipartUploadsOutput) {\n    ListMultipartUploadsOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListMultipartUploadsOutput = exports.ListMultipartUploadsOutput || (exports.ListMultipartUploadsOutput = {}));\nvar ListMultipartUploadsRequest;\n(function (ListMultipartUploadsRequest) {\n    ListMultipartUploadsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListMultipartUploadsRequest = exports.ListMultipartUploadsRequest || (exports.ListMultipartUploadsRequest = {}));\nvar _Object;\n(function (_Object) {\n    _Object.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(_Object = exports._Object || (exports._Object = {}));\nvar ListObjectsOutput;\n(function (ListObjectsOutput) {\n    ListObjectsOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListObjectsOutput = exports.ListObjectsOutput || (exports.ListObjectsOutput = {}));\nvar ListObjectsRequest;\n(function (ListObjectsRequest) {\n    ListObjectsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListObjectsRequest = exports.ListObjectsRequest || (exports.ListObjectsRequest = {}));\nvar NoSuchBucket;\n(function (NoSuchBucket) {\n    NoSuchBucket.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(NoSuchBucket = exports.NoSuchBucket || (exports.NoSuchBucket = {}));\nvar ListObjectsV2Output;\n(function (ListObjectsV2Output) {\n    ListObjectsV2Output.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListObjectsV2Output = exports.ListObjectsV2Output || (exports.ListObjectsV2Output = {}));\nvar ListObjectsV2Request;\n(function (ListObjectsV2Request) {\n    ListObjectsV2Request.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListObjectsV2Request = exports.ListObjectsV2Request || (exports.ListObjectsV2Request = {}));\nvar DeleteMarkerEntry;\n(function (DeleteMarkerEntry) {\n    DeleteMarkerEntry.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DeleteMarkerEntry = exports.DeleteMarkerEntry || (exports.DeleteMarkerEntry = {}));\nvar ObjectVersion;\n(function (ObjectVersion) {\n    ObjectVersion.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ObjectVersion = exports.ObjectVersion || (exports.ObjectVersion = {}));\nvar ListObjectVersionsOutput;\n(function (ListObjectVersionsOutput) {\n    ListObjectVersionsOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListObjectVersionsOutput = exports.ListObjectVersionsOutput || (exports.ListObjectVersionsOutput = {}));\nvar ListObjectVersionsRequest;\n(function (ListObjectVersionsRequest) {\n    ListObjectVersionsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListObjectVersionsRequest = exports.ListObjectVersionsRequest || (exports.ListObjectVersionsRequest = {}));\nvar Part;\n(function (Part) {\n    Part.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Part = exports.Part || (exports.Part = {}));\nvar ListPartsOutput;\n(function (ListPartsOutput) {\n    ListPartsOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListPartsOutput = exports.ListPartsOutput || (exports.ListPartsOutput = {}));\nvar ListPartsRequest;\n(function (ListPartsRequest) {\n    ListPartsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListPartsRequest = exports.ListPartsRequest || (exports.ListPartsRequest = {}));\nvar PutBucketAccelerateConfigurationRequest;\n(function (PutBucketAccelerateConfigurationRequest) {\n    PutBucketAccelerateConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutBucketAccelerateConfigurationRequest = exports.PutBucketAccelerateConfigurationRequest || (exports.PutBucketAccelerateConfigurationRequest = {}));\nvar PutBucketAclRequest;\n(function (PutBucketAclRequest) {\n    PutBucketAclRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutBucketAclRequest = exports.PutBucketAclRequest || (exports.PutBucketAclRequest = {}));\nvar PutBucketAnalyticsConfigurationRequest;\n(function (PutBucketAnalyticsConfigurationRequest) {\n    PutBucketAnalyticsConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.AnalyticsConfiguration && {\n            AnalyticsConfiguration: AnalyticsConfiguration.filterSensitiveLog(obj.AnalyticsConfiguration),\n        }),\n    });\n})(PutBucketAnalyticsConfigurationRequest = exports.PutBucketAnalyticsConfigurationRequest || (exports.PutBucketAnalyticsConfigurationRequest = {}));\nvar CORSConfiguration;\n(function (CORSConfiguration) {\n    CORSConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CORSConfiguration = exports.CORSConfiguration || (exports.CORSConfiguration = {}));\nvar PutBucketCorsRequest;\n(function (PutBucketCorsRequest) {\n    PutBucketCorsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutBucketCorsRequest = exports.PutBucketCorsRequest || (exports.PutBucketCorsRequest = {}));\nvar PutBucketEncryptionRequest;\n(function (PutBucketEncryptionRequest) {\n    PutBucketEncryptionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.ServerSideEncryptionConfiguration && {\n            ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration.filterSensitiveLog(obj.ServerSideEncryptionConfiguration),\n        }),\n    });\n})(PutBucketEncryptionRequest = exports.PutBucketEncryptionRequest || (exports.PutBucketEncryptionRequest = {}));\nvar PutBucketIntelligentTieringConfigurationRequest;\n(function (PutBucketIntelligentTieringConfigurationRequest) {\n    PutBucketIntelligentTieringConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutBucketIntelligentTieringConfigurationRequest = exports.PutBucketIntelligentTieringConfigurationRequest || (exports.PutBucketIntelligentTieringConfigurationRequest = {}));\nvar PutBucketInventoryConfigurationRequest;\n(function (PutBucketInventoryConfigurationRequest) {\n    PutBucketInventoryConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.InventoryConfiguration && {\n            InventoryConfiguration: InventoryConfiguration.filterSensitiveLog(obj.InventoryConfiguration),\n        }),\n    });\n})(PutBucketInventoryConfigurationRequest = exports.PutBucketInventoryConfigurationRequest || (exports.PutBucketInventoryConfigurationRequest = {}));\nvar BucketLifecycleConfiguration;\n(function (BucketLifecycleConfiguration) {\n    BucketLifecycleConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Rules && { Rules: obj.Rules.map((item) => LifecycleRule.filterSensitiveLog(item)) }),\n    });\n})(BucketLifecycleConfiguration = exports.BucketLifecycleConfiguration || (exports.BucketLifecycleConfiguration = {}));\nvar PutBucketLifecycleConfigurationRequest;\n(function (PutBucketLifecycleConfigurationRequest) {\n    PutBucketLifecycleConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.LifecycleConfiguration && {\n            LifecycleConfiguration: BucketLifecycleConfiguration.filterSensitiveLog(obj.LifecycleConfiguration),\n        }),\n    });\n})(PutBucketLifecycleConfigurationRequest = exports.PutBucketLifecycleConfigurationRequest || (exports.PutBucketLifecycleConfigurationRequest = {}));\nvar BucketLoggingStatus;\n(function (BucketLoggingStatus) {\n    BucketLoggingStatus.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(BucketLoggingStatus = exports.BucketLoggingStatus || (exports.BucketLoggingStatus = {}));\nvar PutBucketLoggingRequest;\n(function (PutBucketLoggingRequest) {\n    PutBucketLoggingRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutBucketLoggingRequest = exports.PutBucketLoggingRequest || (exports.PutBucketLoggingRequest = {}));\nvar PutBucketMetricsConfigurationRequest;\n(function (PutBucketMetricsConfigurationRequest) {\n    PutBucketMetricsConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.MetricsConfiguration && {\n            MetricsConfiguration: MetricsConfiguration.filterSensitiveLog(obj.MetricsConfiguration),\n        }),\n    });\n})(PutBucketMetricsConfigurationRequest = exports.PutBucketMetricsConfigurationRequest || (exports.PutBucketMetricsConfigurationRequest = {}));\nvar PutBucketNotificationConfigurationRequest;\n(function (PutBucketNotificationConfigurationRequest) {\n    PutBucketNotificationConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutBucketNotificationConfigurationRequest = exports.PutBucketNotificationConfigurationRequest || (exports.PutBucketNotificationConfigurationRequest = {}));\nvar PutBucketOwnershipControlsRequest;\n(function (PutBucketOwnershipControlsRequest) {\n    PutBucketOwnershipControlsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutBucketOwnershipControlsRequest = exports.PutBucketOwnershipControlsRequest || (exports.PutBucketOwnershipControlsRequest = {}));\nvar PutBucketPolicyRequest;\n(function (PutBucketPolicyRequest) {\n    PutBucketPolicyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutBucketPolicyRequest = exports.PutBucketPolicyRequest || (exports.PutBucketPolicyRequest = {}));\nvar PutBucketReplicationRequest;\n(function (PutBucketReplicationRequest) {\n    PutBucketReplicationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.ReplicationConfiguration && {\n            ReplicationConfiguration: ReplicationConfiguration.filterSensitiveLog(obj.ReplicationConfiguration),\n        }),\n    });\n})(PutBucketReplicationRequest = exports.PutBucketReplicationRequest || (exports.PutBucketReplicationRequest = {}));\nvar RequestPaymentConfiguration;\n(function (RequestPaymentConfiguration) {\n    RequestPaymentConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(RequestPaymentConfiguration = exports.RequestPaymentConfiguration || (exports.RequestPaymentConfiguration = {}));\nvar PutBucketRequestPaymentRequest;\n(function (PutBucketRequestPaymentRequest) {\n    PutBucketRequestPaymentRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutBucketRequestPaymentRequest = exports.PutBucketRequestPaymentRequest || (exports.PutBucketRequestPaymentRequest = {}));\nvar Tagging;\n(function (Tagging) {\n    Tagging.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Tagging = exports.Tagging || (exports.Tagging = {}));\nvar PutBucketTaggingRequest;\n(function (PutBucketTaggingRequest) {\n    PutBucketTaggingRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutBucketTaggingRequest = exports.PutBucketTaggingRequest || (exports.PutBucketTaggingRequest = {}));\nvar VersioningConfiguration;\n(function (VersioningConfiguration) {\n    VersioningConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(VersioningConfiguration = exports.VersioningConfiguration || (exports.VersioningConfiguration = {}));\nvar PutBucketVersioningRequest;\n(function (PutBucketVersioningRequest) {\n    PutBucketVersioningRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutBucketVersioningRequest = exports.PutBucketVersioningRequest || (exports.PutBucketVersioningRequest = {}));\nvar WebsiteConfiguration;\n(function (WebsiteConfiguration) {\n    WebsiteConfiguration.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(WebsiteConfiguration = exports.WebsiteConfiguration || (exports.WebsiteConfiguration = {}));\nvar PutBucketWebsiteRequest;\n(function (PutBucketWebsiteRequest) {\n    PutBucketWebsiteRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutBucketWebsiteRequest = exports.PutBucketWebsiteRequest || (exports.PutBucketWebsiteRequest = {}));\nvar PutObjectOutput;\n(function (PutObjectOutput) {\n    PutObjectOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }),\n        ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(PutObjectOutput = exports.PutObjectOutput || (exports.PutObjectOutput = {}));\nvar PutObjectRequest;\n(function (PutObjectRequest) {\n    PutObjectRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }),\n        ...(obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }),\n        ...(obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(PutObjectRequest = exports.PutObjectRequest || (exports.PutObjectRequest = {}));\nvar PutObjectAclOutput;\n(function (PutObjectAclOutput) {\n    PutObjectAclOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutObjectAclOutput = exports.PutObjectAclOutput || (exports.PutObjectAclOutput = {}));\nvar PutObjectAclRequest;\n(function (PutObjectAclRequest) {\n    PutObjectAclRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutObjectAclRequest = exports.PutObjectAclRequest || (exports.PutObjectAclRequest = {}));\nvar PutObjectLegalHoldOutput;\n(function (PutObjectLegalHoldOutput) {\n    PutObjectLegalHoldOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutObjectLegalHoldOutput = exports.PutObjectLegalHoldOutput || (exports.PutObjectLegalHoldOutput = {}));\nvar PutObjectLegalHoldRequest;\n(function (PutObjectLegalHoldRequest) {\n    PutObjectLegalHoldRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutObjectLegalHoldRequest = exports.PutObjectLegalHoldRequest || (exports.PutObjectLegalHoldRequest = {}));\nvar PutObjectLockConfigurationOutput;\n(function (PutObjectLockConfigurationOutput) {\n    PutObjectLockConfigurationOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutObjectLockConfigurationOutput = exports.PutObjectLockConfigurationOutput || (exports.PutObjectLockConfigurationOutput = {}));\nvar PutObjectLockConfigurationRequest;\n(function (PutObjectLockConfigurationRequest) {\n    PutObjectLockConfigurationRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutObjectLockConfigurationRequest = exports.PutObjectLockConfigurationRequest || (exports.PutObjectLockConfigurationRequest = {}));\nvar PutObjectRetentionOutput;\n(function (PutObjectRetentionOutput) {\n    PutObjectRetentionOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutObjectRetentionOutput = exports.PutObjectRetentionOutput || (exports.PutObjectRetentionOutput = {}));\nvar PutObjectRetentionRequest;\n(function (PutObjectRetentionRequest) {\n    PutObjectRetentionRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutObjectRetentionRequest = exports.PutObjectRetentionRequest || (exports.PutObjectRetentionRequest = {}));\nvar PutObjectTaggingOutput;\n(function (PutObjectTaggingOutput) {\n    PutObjectTaggingOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutObjectTaggingOutput = exports.PutObjectTaggingOutput || (exports.PutObjectTaggingOutput = {}));\nvar PutObjectTaggingRequest;\n(function (PutObjectTaggingRequest) {\n    PutObjectTaggingRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutObjectTaggingRequest = exports.PutObjectTaggingRequest || (exports.PutObjectTaggingRequest = {}));\nvar PutPublicAccessBlockRequest;\n(function (PutPublicAccessBlockRequest) {\n    PutPublicAccessBlockRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PutPublicAccessBlockRequest = exports.PutPublicAccessBlockRequest || (exports.PutPublicAccessBlockRequest = {}));\nvar ObjectAlreadyInActiveTierError;\n(function (ObjectAlreadyInActiveTierError) {\n    ObjectAlreadyInActiveTierError.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ObjectAlreadyInActiveTierError = exports.ObjectAlreadyInActiveTierError || (exports.ObjectAlreadyInActiveTierError = {}));\nvar RestoreObjectOutput;\n(function (RestoreObjectOutput) {\n    RestoreObjectOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(RestoreObjectOutput = exports.RestoreObjectOutput || (exports.RestoreObjectOutput = {}));\nvar GlacierJobParameters;\n(function (GlacierJobParameters) {\n    GlacierJobParameters.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GlacierJobParameters = exports.GlacierJobParameters || (exports.GlacierJobParameters = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WriteGetObjectResponseRequest = exports.UploadPartCopyRequest = exports.UploadPartCopyOutput = exports.CopyPartResult = exports.UploadPartRequest = exports.UploadPartOutput = exports.SelectObjectContentRequest = exports.ScanRange = exports.RequestProgress = exports.SelectObjectContentOutput = exports.SelectObjectContentEventStream = exports.StatsEvent = exports.Stats = exports.RecordsEvent = exports.ProgressEvent = exports.Progress = exports.EndEvent = exports.ContinuationEvent = exports.RestoreObjectRequest = exports.RestoreRequest = exports.RestoreRequestType = exports.SelectParameters = exports.OutputSerialization = exports.JSONOutput = exports.CSVOutput = exports.QuoteFields = exports.InputSerialization = exports.ParquetInput = exports.JSONInput = exports.JSONType = exports.CSVInput = exports.FileHeaderInfo = exports.OutputLocation = exports.S3Location = exports.MetadataEntry = exports.Encryption = void 0;\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nvar Encryption;\n(function (Encryption) {\n    Encryption.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.KMSKeyId && { KMSKeyId: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(Encryption = exports.Encryption || (exports.Encryption = {}));\nvar MetadataEntry;\n(function (MetadataEntry) {\n    MetadataEntry.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(MetadataEntry = exports.MetadataEntry || (exports.MetadataEntry = {}));\nvar S3Location;\n(function (S3Location) {\n    S3Location.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Encryption && { Encryption: Encryption.filterSensitiveLog(obj.Encryption) }),\n    });\n})(S3Location = exports.S3Location || (exports.S3Location = {}));\nvar OutputLocation;\n(function (OutputLocation) {\n    OutputLocation.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.S3 && { S3: S3Location.filterSensitiveLog(obj.S3) }),\n    });\n})(OutputLocation = exports.OutputLocation || (exports.OutputLocation = {}));\nvar FileHeaderInfo;\n(function (FileHeaderInfo) {\n    FileHeaderInfo[\"IGNORE\"] = \"IGNORE\";\n    FileHeaderInfo[\"NONE\"] = \"NONE\";\n    FileHeaderInfo[\"USE\"] = \"USE\";\n})(FileHeaderInfo = exports.FileHeaderInfo || (exports.FileHeaderInfo = {}));\nvar CSVInput;\n(function (CSVInput) {\n    CSVInput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CSVInput = exports.CSVInput || (exports.CSVInput = {}));\nvar JSONType;\n(function (JSONType) {\n    JSONType[\"DOCUMENT\"] = \"DOCUMENT\";\n    JSONType[\"LINES\"] = \"LINES\";\n})(JSONType = exports.JSONType || (exports.JSONType = {}));\nvar JSONInput;\n(function (JSONInput) {\n    JSONInput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(JSONInput = exports.JSONInput || (exports.JSONInput = {}));\nvar ParquetInput;\n(function (ParquetInput) {\n    ParquetInput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ParquetInput = exports.ParquetInput || (exports.ParquetInput = {}));\nvar InputSerialization;\n(function (InputSerialization) {\n    InputSerialization.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InputSerialization = exports.InputSerialization || (exports.InputSerialization = {}));\nvar QuoteFields;\n(function (QuoteFields) {\n    QuoteFields[\"ALWAYS\"] = \"ALWAYS\";\n    QuoteFields[\"ASNEEDED\"] = \"ASNEEDED\";\n})(QuoteFields = exports.QuoteFields || (exports.QuoteFields = {}));\nvar CSVOutput;\n(function (CSVOutput) {\n    CSVOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CSVOutput = exports.CSVOutput || (exports.CSVOutput = {}));\nvar JSONOutput;\n(function (JSONOutput) {\n    JSONOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(JSONOutput = exports.JSONOutput || (exports.JSONOutput = {}));\nvar OutputSerialization;\n(function (OutputSerialization) {\n    OutputSerialization.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(OutputSerialization = exports.OutputSerialization || (exports.OutputSerialization = {}));\nvar SelectParameters;\n(function (SelectParameters) {\n    SelectParameters.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(SelectParameters = exports.SelectParameters || (exports.SelectParameters = {}));\nvar RestoreRequestType;\n(function (RestoreRequestType) {\n    RestoreRequestType[\"SELECT\"] = \"SELECT\";\n})(RestoreRequestType = exports.RestoreRequestType || (exports.RestoreRequestType = {}));\nvar RestoreRequest;\n(function (RestoreRequest) {\n    RestoreRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.OutputLocation && { OutputLocation: OutputLocation.filterSensitiveLog(obj.OutputLocation) }),\n    });\n})(RestoreRequest = exports.RestoreRequest || (exports.RestoreRequest = {}));\nvar RestoreObjectRequest;\n(function (RestoreObjectRequest) {\n    RestoreObjectRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.RestoreRequest && { RestoreRequest: RestoreRequest.filterSensitiveLog(obj.RestoreRequest) }),\n    });\n})(RestoreObjectRequest = exports.RestoreObjectRequest || (exports.RestoreObjectRequest = {}));\nvar ContinuationEvent;\n(function (ContinuationEvent) {\n    ContinuationEvent.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ContinuationEvent = exports.ContinuationEvent || (exports.ContinuationEvent = {}));\nvar EndEvent;\n(function (EndEvent) {\n    EndEvent.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(EndEvent = exports.EndEvent || (exports.EndEvent = {}));\nvar Progress;\n(function (Progress) {\n    Progress.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Progress = exports.Progress || (exports.Progress = {}));\nvar ProgressEvent;\n(function (ProgressEvent) {\n    ProgressEvent.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ProgressEvent = exports.ProgressEvent || (exports.ProgressEvent = {}));\nvar RecordsEvent;\n(function (RecordsEvent) {\n    RecordsEvent.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(RecordsEvent = exports.RecordsEvent || (exports.RecordsEvent = {}));\nvar Stats;\n(function (Stats) {\n    Stats.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Stats = exports.Stats || (exports.Stats = {}));\nvar StatsEvent;\n(function (StatsEvent) {\n    StatsEvent.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(StatsEvent = exports.StatsEvent || (exports.StatsEvent = {}));\nvar SelectObjectContentEventStream;\n(function (SelectObjectContentEventStream) {\n    SelectObjectContentEventStream.visit = (value, visitor) => {\n        if (value.Records !== undefined)\n            return visitor.Records(value.Records);\n        if (value.Stats !== undefined)\n            return visitor.Stats(value.Stats);\n        if (value.Progress !== undefined)\n            return visitor.Progress(value.Progress);\n        if (value.Cont !== undefined)\n            return visitor.Cont(value.Cont);\n        if (value.End !== undefined)\n            return visitor.End(value.End);\n        return visitor._(value.$unknown[0], value.$unknown[1]);\n    };\n    SelectObjectContentEventStream.filterSensitiveLog = (obj) => {\n        if (obj.Records !== undefined)\n            return { Records: RecordsEvent.filterSensitiveLog(obj.Records) };\n        if (obj.Stats !== undefined)\n            return { Stats: StatsEvent.filterSensitiveLog(obj.Stats) };\n        if (obj.Progress !== undefined)\n            return { Progress: ProgressEvent.filterSensitiveLog(obj.Progress) };\n        if (obj.Cont !== undefined)\n            return { Cont: ContinuationEvent.filterSensitiveLog(obj.Cont) };\n        if (obj.End !== undefined)\n            return { End: EndEvent.filterSensitiveLog(obj.End) };\n        if (obj.$unknown !== undefined)\n            return { [obj.$unknown[0]]: \"UNKNOWN\" };\n    };\n})(SelectObjectContentEventStream = exports.SelectObjectContentEventStream || (exports.SelectObjectContentEventStream = {}));\nvar SelectObjectContentOutput;\n(function (SelectObjectContentOutput) {\n    SelectObjectContentOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.Payload && { Payload: \"STREAMING_CONTENT\" }),\n    });\n})(SelectObjectContentOutput = exports.SelectObjectContentOutput || (exports.SelectObjectContentOutput = {}));\nvar RequestProgress;\n(function (RequestProgress) {\n    RequestProgress.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(RequestProgress = exports.RequestProgress || (exports.RequestProgress = {}));\nvar ScanRange;\n(function (ScanRange) {\n    ScanRange.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ScanRange = exports.ScanRange || (exports.ScanRange = {}));\nvar SelectObjectContentRequest;\n(function (SelectObjectContentRequest) {\n    SelectObjectContentRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(SelectObjectContentRequest = exports.SelectObjectContentRequest || (exports.SelectObjectContentRequest = {}));\nvar UploadPartOutput;\n(function (UploadPartOutput) {\n    UploadPartOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(UploadPartOutput = exports.UploadPartOutput || (exports.UploadPartOutput = {}));\nvar UploadPartRequest;\n(function (UploadPartRequest) {\n    UploadPartRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(UploadPartRequest = exports.UploadPartRequest || (exports.UploadPartRequest = {}));\nvar CopyPartResult;\n(function (CopyPartResult) {\n    CopyPartResult.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(CopyPartResult = exports.CopyPartResult || (exports.CopyPartResult = {}));\nvar UploadPartCopyOutput;\n(function (UploadPartCopyOutput) {\n    UploadPartCopyOutput.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(UploadPartCopyOutput = exports.UploadPartCopyOutput || (exports.UploadPartCopyOutput = {}));\nvar UploadPartCopyRequest;\n(function (UploadPartCopyRequest) {\n    UploadPartCopyRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }),\n        ...(obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(UploadPartCopyRequest = exports.UploadPartCopyRequest || (exports.UploadPartCopyRequest = {}));\nvar WriteGetObjectResponseRequest;\n(function (WriteGetObjectResponseRequest) {\n    WriteGetObjectResponseRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(WriteGetObjectResponseRequest = exports.WriteGetObjectResponseRequest || (exports.WriteGetObjectResponseRequest = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paginateListObjectsV2 = void 0;\nconst ListObjectsV2Command_1 = require(\"../commands/ListObjectsV2Command\");\nconst S3_1 = require(\"../S3\");\nconst S3Client_1 = require(\"../S3Client\");\nconst makePagedClientRequest = async (client, input, ...args) => {\n    return await client.send(new ListObjectsV2Command_1.ListObjectsV2Command(input), ...args);\n};\nconst makePagedRequest = async (client, input, ...args) => {\n    return await client.listObjectsV2(input, ...args);\n};\nasync function* paginateListObjectsV2(config, input, ...additionalArguments) {\n    let token = config.startingToken || undefined;\n    let hasNext = true;\n    let page;\n    while (hasNext) {\n        input.ContinuationToken = token;\n        input[\"MaxKeys\"] = config.pageSize;\n        if (config.client instanceof S3_1.S3) {\n            page = await makePagedRequest(config.client, input, ...additionalArguments);\n        }\n        else if (config.client instanceof S3Client_1.S3Client) {\n            page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n        }\n        else {\n            throw new Error(\"Invalid client, expected S3 | S3Client\");\n        }\n        yield page;\n        token = page.NextContinuationToken;\n        hasNext = !!token;\n    }\n    return undefined;\n}\nexports.paginateListObjectsV2 = paginateListObjectsV2;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paginateListParts = void 0;\nconst ListPartsCommand_1 = require(\"../commands/ListPartsCommand\");\nconst S3_1 = require(\"../S3\");\nconst S3Client_1 = require(\"../S3Client\");\nconst makePagedClientRequest = async (client, input, ...args) => {\n    return await client.send(new ListPartsCommand_1.ListPartsCommand(input), ...args);\n};\nconst makePagedRequest = async (client, input, ...args) => {\n    return await client.listParts(input, ...args);\n};\nasync function* paginateListParts(config, input, ...additionalArguments) {\n    let token = config.startingToken || undefined;\n    let hasNext = true;\n    let page;\n    while (hasNext) {\n        input.PartNumberMarker = token;\n        input[\"MaxParts\"] = config.pageSize;\n        if (config.client instanceof S3_1.S3) {\n            page = await makePagedRequest(config.client, input, ...additionalArguments);\n        }\n        else if (config.client instanceof S3Client_1.S3Client) {\n            page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n        }\n        else {\n            throw new Error(\"Invalid client, expected S3 | S3Client\");\n        }\n        yield page;\n        token = page.NextPartNumberMarker;\n        hasNext = !!token;\n    }\n    return undefined;\n}\nexports.paginateListParts = paginateListParts;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./Interfaces\"), exports);\ntslib_1.__exportStar(require(\"./ListObjectsV2Paginator\"), exports);\ntslib_1.__exportStar(require(\"./ListPartsPaginator\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeAws_restXmlGetPublicAccessBlockCommand = exports.serializeAws_restXmlGetObjectTorrentCommand = exports.serializeAws_restXmlGetObjectTaggingCommand = exports.serializeAws_restXmlGetObjectRetentionCommand = exports.serializeAws_restXmlGetObjectLockConfigurationCommand = exports.serializeAws_restXmlGetObjectLegalHoldCommand = exports.serializeAws_restXmlGetObjectAclCommand = exports.serializeAws_restXmlGetObjectCommand = exports.serializeAws_restXmlGetBucketWebsiteCommand = exports.serializeAws_restXmlGetBucketVersioningCommand = exports.serializeAws_restXmlGetBucketTaggingCommand = exports.serializeAws_restXmlGetBucketRequestPaymentCommand = exports.serializeAws_restXmlGetBucketReplicationCommand = exports.serializeAws_restXmlGetBucketPolicyStatusCommand = exports.serializeAws_restXmlGetBucketPolicyCommand = exports.serializeAws_restXmlGetBucketOwnershipControlsCommand = exports.serializeAws_restXmlGetBucketNotificationConfigurationCommand = exports.serializeAws_restXmlGetBucketMetricsConfigurationCommand = exports.serializeAws_restXmlGetBucketLoggingCommand = exports.serializeAws_restXmlGetBucketLocationCommand = exports.serializeAws_restXmlGetBucketLifecycleConfigurationCommand = exports.serializeAws_restXmlGetBucketInventoryConfigurationCommand = exports.serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = exports.serializeAws_restXmlGetBucketEncryptionCommand = exports.serializeAws_restXmlGetBucketCorsCommand = exports.serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = exports.serializeAws_restXmlGetBucketAclCommand = exports.serializeAws_restXmlGetBucketAccelerateConfigurationCommand = exports.serializeAws_restXmlDeletePublicAccessBlockCommand = exports.serializeAws_restXmlDeleteObjectTaggingCommand = exports.serializeAws_restXmlDeleteObjectsCommand = exports.serializeAws_restXmlDeleteObjectCommand = exports.serializeAws_restXmlDeleteBucketWebsiteCommand = exports.serializeAws_restXmlDeleteBucketTaggingCommand = exports.serializeAws_restXmlDeleteBucketReplicationCommand = exports.serializeAws_restXmlDeleteBucketPolicyCommand = exports.serializeAws_restXmlDeleteBucketOwnershipControlsCommand = exports.serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = exports.serializeAws_restXmlDeleteBucketLifecycleCommand = exports.serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = exports.serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = exports.serializeAws_restXmlDeleteBucketEncryptionCommand = exports.serializeAws_restXmlDeleteBucketCorsCommand = exports.serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = exports.serializeAws_restXmlDeleteBucketCommand = exports.serializeAws_restXmlCreateMultipartUploadCommand = exports.serializeAws_restXmlCreateBucketCommand = exports.serializeAws_restXmlCopyObjectCommand = exports.serializeAws_restXmlCompleteMultipartUploadCommand = exports.serializeAws_restXmlAbortMultipartUploadCommand = void 0;\nexports.deserializeAws_restXmlDeleteBucketCorsCommand = exports.deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = exports.deserializeAws_restXmlDeleteBucketCommand = exports.deserializeAws_restXmlCreateMultipartUploadCommand = exports.deserializeAws_restXmlCreateBucketCommand = exports.deserializeAws_restXmlCopyObjectCommand = exports.deserializeAws_restXmlCompleteMultipartUploadCommand = exports.deserializeAws_restXmlAbortMultipartUploadCommand = exports.serializeAws_restXmlWriteGetObjectResponseCommand = exports.serializeAws_restXmlUploadPartCopyCommand = exports.serializeAws_restXmlUploadPartCommand = exports.serializeAws_restXmlSelectObjectContentCommand = exports.serializeAws_restXmlRestoreObjectCommand = exports.serializeAws_restXmlPutPublicAccessBlockCommand = exports.serializeAws_restXmlPutObjectTaggingCommand = exports.serializeAws_restXmlPutObjectRetentionCommand = exports.serializeAws_restXmlPutObjectLockConfigurationCommand = exports.serializeAws_restXmlPutObjectLegalHoldCommand = exports.serializeAws_restXmlPutObjectAclCommand = exports.serializeAws_restXmlPutObjectCommand = exports.serializeAws_restXmlPutBucketWebsiteCommand = exports.serializeAws_restXmlPutBucketVersioningCommand = exports.serializeAws_restXmlPutBucketTaggingCommand = exports.serializeAws_restXmlPutBucketRequestPaymentCommand = exports.serializeAws_restXmlPutBucketReplicationCommand = exports.serializeAws_restXmlPutBucketPolicyCommand = exports.serializeAws_restXmlPutBucketOwnershipControlsCommand = exports.serializeAws_restXmlPutBucketNotificationConfigurationCommand = exports.serializeAws_restXmlPutBucketMetricsConfigurationCommand = exports.serializeAws_restXmlPutBucketLoggingCommand = exports.serializeAws_restXmlPutBucketLifecycleConfigurationCommand = exports.serializeAws_restXmlPutBucketInventoryConfigurationCommand = exports.serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = exports.serializeAws_restXmlPutBucketEncryptionCommand = exports.serializeAws_restXmlPutBucketCorsCommand = exports.serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = exports.serializeAws_restXmlPutBucketAclCommand = exports.serializeAws_restXmlPutBucketAccelerateConfigurationCommand = exports.serializeAws_restXmlListPartsCommand = exports.serializeAws_restXmlListObjectVersionsCommand = exports.serializeAws_restXmlListObjectsV2Command = exports.serializeAws_restXmlListObjectsCommand = exports.serializeAws_restXmlListMultipartUploadsCommand = exports.serializeAws_restXmlListBucketsCommand = exports.serializeAws_restXmlListBucketMetricsConfigurationsCommand = exports.serializeAws_restXmlListBucketInventoryConfigurationsCommand = exports.serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = exports.serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = exports.serializeAws_restXmlHeadObjectCommand = exports.serializeAws_restXmlHeadBucketCommand = void 0;\nexports.deserializeAws_restXmlListMultipartUploadsCommand = exports.deserializeAws_restXmlListBucketsCommand = exports.deserializeAws_restXmlListBucketMetricsConfigurationsCommand = exports.deserializeAws_restXmlListBucketInventoryConfigurationsCommand = exports.deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = exports.deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = exports.deserializeAws_restXmlHeadObjectCommand = exports.deserializeAws_restXmlHeadBucketCommand = exports.deserializeAws_restXmlGetPublicAccessBlockCommand = exports.deserializeAws_restXmlGetObjectTorrentCommand = exports.deserializeAws_restXmlGetObjectTaggingCommand = exports.deserializeAws_restXmlGetObjectRetentionCommand = exports.deserializeAws_restXmlGetObjectLockConfigurationCommand = exports.deserializeAws_restXmlGetObjectLegalHoldCommand = exports.deserializeAws_restXmlGetObjectAclCommand = exports.deserializeAws_restXmlGetObjectCommand = exports.deserializeAws_restXmlGetBucketWebsiteCommand = exports.deserializeAws_restXmlGetBucketVersioningCommand = exports.deserializeAws_restXmlGetBucketTaggingCommand = exports.deserializeAws_restXmlGetBucketRequestPaymentCommand = exports.deserializeAws_restXmlGetBucketReplicationCommand = exports.deserializeAws_restXmlGetBucketPolicyStatusCommand = exports.deserializeAws_restXmlGetBucketPolicyCommand = exports.deserializeAws_restXmlGetBucketOwnershipControlsCommand = exports.deserializeAws_restXmlGetBucketNotificationConfigurationCommand = exports.deserializeAws_restXmlGetBucketMetricsConfigurationCommand = exports.deserializeAws_restXmlGetBucketLoggingCommand = exports.deserializeAws_restXmlGetBucketLocationCommand = exports.deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = exports.deserializeAws_restXmlGetBucketInventoryConfigurationCommand = exports.deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = exports.deserializeAws_restXmlGetBucketEncryptionCommand = exports.deserializeAws_restXmlGetBucketCorsCommand = exports.deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = exports.deserializeAws_restXmlGetBucketAclCommand = exports.deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = exports.deserializeAws_restXmlDeletePublicAccessBlockCommand = exports.deserializeAws_restXmlDeleteObjectTaggingCommand = exports.deserializeAws_restXmlDeleteObjectsCommand = exports.deserializeAws_restXmlDeleteObjectCommand = exports.deserializeAws_restXmlDeleteBucketWebsiteCommand = exports.deserializeAws_restXmlDeleteBucketTaggingCommand = exports.deserializeAws_restXmlDeleteBucketReplicationCommand = exports.deserializeAws_restXmlDeleteBucketPolicyCommand = exports.deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = exports.deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = exports.deserializeAws_restXmlDeleteBucketLifecycleCommand = exports.deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = exports.deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = exports.deserializeAws_restXmlDeleteBucketEncryptionCommand = void 0;\nexports.deserializeAws_restXmlWriteGetObjectResponseCommand = exports.deserializeAws_restXmlUploadPartCopyCommand = exports.deserializeAws_restXmlUploadPartCommand = exports.deserializeAws_restXmlSelectObjectContentCommand = exports.deserializeAws_restXmlRestoreObjectCommand = exports.deserializeAws_restXmlPutPublicAccessBlockCommand = exports.deserializeAws_restXmlPutObjectTaggingCommand = exports.deserializeAws_restXmlPutObjectRetentionCommand = exports.deserializeAws_restXmlPutObjectLockConfigurationCommand = exports.deserializeAws_restXmlPutObjectLegalHoldCommand = exports.deserializeAws_restXmlPutObjectAclCommand = exports.deserializeAws_restXmlPutObjectCommand = exports.deserializeAws_restXmlPutBucketWebsiteCommand = exports.deserializeAws_restXmlPutBucketVersioningCommand = exports.deserializeAws_restXmlPutBucketTaggingCommand = exports.deserializeAws_restXmlPutBucketRequestPaymentCommand = exports.deserializeAws_restXmlPutBucketReplicationCommand = exports.deserializeAws_restXmlPutBucketPolicyCommand = exports.deserializeAws_restXmlPutBucketOwnershipControlsCommand = exports.deserializeAws_restXmlPutBucketNotificationConfigurationCommand = exports.deserializeAws_restXmlPutBucketMetricsConfigurationCommand = exports.deserializeAws_restXmlPutBucketLoggingCommand = exports.deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = exports.deserializeAws_restXmlPutBucketInventoryConfigurationCommand = exports.deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = exports.deserializeAws_restXmlPutBucketEncryptionCommand = exports.deserializeAws_restXmlPutBucketCorsCommand = exports.deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = exports.deserializeAws_restXmlPutBucketAclCommand = exports.deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = exports.deserializeAws_restXmlListPartsCommand = exports.deserializeAws_restXmlListObjectVersionsCommand = exports.deserializeAws_restXmlListObjectsV2Command = exports.deserializeAws_restXmlListObjectsCommand = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst xml_builder_1 = require(\"@aws-sdk/xml-builder\");\nconst entities_1 = require(\"entities\");\nconst fast_xml_parser_1 = require(\"fast-xml-parser\");\nconst models_0_1 = require(\"../models/models_0\");\nconst serializeAws_restXmlAbortMultipartUploadCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        \"x-id\": \"AbortMultipartUpload\",\n        ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlAbortMultipartUploadCommand = serializeAws_restXmlAbortMultipartUploadCommand;\nconst serializeAws_restXmlCompleteMultipartUploadCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        \"x-id\": \"CompleteMultipartUpload\",\n        ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n    };\n    let body;\n    if (input.MultipartUpload !== undefined) {\n        body = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);\n    }\n    let contents;\n    if (input.MultipartUpload !== undefined) {\n        contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);\n        contents = contents.withName(\"CompleteMultipartUpload\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlCompleteMultipartUploadCommand = serializeAws_restXmlCompleteMultipartUploadCommand;\nconst serializeAws_restXmlCopyObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL }),\n        ...(isSerializableHeaderValue(input.CacheControl) && { \"cache-control\": input.CacheControl }),\n        ...(isSerializableHeaderValue(input.ContentDisposition) && { \"content-disposition\": input.ContentDisposition }),\n        ...(isSerializableHeaderValue(input.ContentEncoding) && { \"content-encoding\": input.ContentEncoding }),\n        ...(isSerializableHeaderValue(input.ContentLanguage) && { \"content-language\": input.ContentLanguage }),\n        ...(isSerializableHeaderValue(input.ContentType) && { \"content-type\": input.ContentType }),\n        ...(isSerializableHeaderValue(input.CopySource) && { \"x-amz-copy-source\": input.CopySource }),\n        ...(isSerializableHeaderValue(input.CopySourceIfMatch) && {\n            \"x-amz-copy-source-if-match\": input.CopySourceIfMatch,\n        }),\n        ...(isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {\n            \"x-amz-copy-source-if-modified-since\": smithy_client_1.dateToUtcString(input.CopySourceIfModifiedSince).toString(),\n        }),\n        ...(isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {\n            \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch,\n        }),\n        ...(isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {\n            \"x-amz-copy-source-if-unmodified-since\": smithy_client_1.dateToUtcString(input.CopySourceIfUnmodifiedSince).toString(),\n        }),\n        ...(isSerializableHeaderValue(input.Expires) && { expires: smithy_client_1.dateToUtcString(input.Expires).toString() }),\n        ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl }),\n        ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead }),\n        ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP }),\n        ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP }),\n        ...(isSerializableHeaderValue(input.MetadataDirective) && { \"x-amz-metadata-directive\": input.MetadataDirective }),\n        ...(isSerializableHeaderValue(input.TaggingDirective) && { \"x-amz-tagging-directive\": input.TaggingDirective }),\n        ...(isSerializableHeaderValue(input.ServerSideEncryption) && {\n            \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n        }),\n        ...(isSerializableHeaderValue(input.StorageClass) && { \"x-amz-storage-class\": input.StorageClass }),\n        ...(isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n            \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        }),\n        ...(isSerializableHeaderValue(input.SSEKMSKeyId) && {\n            \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        }),\n        ...(isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n            \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n        }),\n        ...(isSerializableHeaderValue(input.BucketKeyEnabled) && {\n            \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled.toString(),\n        }),\n        ...(isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {\n            \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm,\n        }),\n        ...(isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {\n            \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey,\n        }),\n        ...(isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {\n            \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5,\n        }),\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.Tagging) && { \"x-amz-tagging\": input.Tagging }),\n        ...(isSerializableHeaderValue(input.ObjectLockMode) && { \"x-amz-object-lock-mode\": input.ObjectLockMode }),\n        ...(isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n            \"x-amz-object-lock-retain-until-date\": (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        }),\n        ...(isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n            \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n        ...(isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {\n            \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner,\n        }),\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => ({\n                ...acc,\n                [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata[suffix],\n            }), {})),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        \"x-id\": \"CopyObject\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlCopyObjectCommand = serializeAws_restXmlCopyObjectCommand;\nconst serializeAws_restXmlCreateBucketCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL }),\n        ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl }),\n        ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead }),\n        ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP }),\n        ...(isSerializableHeaderValue(input.GrantWrite) && { \"x-amz-grant-write\": input.GrantWrite }),\n        ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP }),\n        ...(isSerializableHeaderValue(input.ObjectLockEnabledForBucket) && {\n            \"x-amz-bucket-object-lock-enabled\": input.ObjectLockEnabledForBucket.toString(),\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    let body;\n    if (input.CreateBucketConfiguration !== undefined) {\n        body = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);\n    }\n    let contents;\n    if (input.CreateBucketConfiguration !== undefined) {\n        contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateBucketCommand = serializeAws_restXmlCreateBucketCommand;\nconst serializeAws_restXmlCreateMultipartUploadCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL }),\n        ...(isSerializableHeaderValue(input.CacheControl) && { \"cache-control\": input.CacheControl }),\n        ...(isSerializableHeaderValue(input.ContentDisposition) && { \"content-disposition\": input.ContentDisposition }),\n        ...(isSerializableHeaderValue(input.ContentEncoding) && { \"content-encoding\": input.ContentEncoding }),\n        ...(isSerializableHeaderValue(input.ContentLanguage) && { \"content-language\": input.ContentLanguage }),\n        ...(isSerializableHeaderValue(input.ContentType) && { \"content-type\": input.ContentType }),\n        ...(isSerializableHeaderValue(input.Expires) && { expires: smithy_client_1.dateToUtcString(input.Expires).toString() }),\n        ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl }),\n        ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead }),\n        ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP }),\n        ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP }),\n        ...(isSerializableHeaderValue(input.ServerSideEncryption) && {\n            \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n        }),\n        ...(isSerializableHeaderValue(input.StorageClass) && { \"x-amz-storage-class\": input.StorageClass }),\n        ...(isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n            \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        }),\n        ...(isSerializableHeaderValue(input.SSEKMSKeyId) && {\n            \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        }),\n        ...(isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n            \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n        }),\n        ...(isSerializableHeaderValue(input.BucketKeyEnabled) && {\n            \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled.toString(),\n        }),\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.Tagging) && { \"x-amz-tagging\": input.Tagging }),\n        ...(isSerializableHeaderValue(input.ObjectLockMode) && { \"x-amz-object-lock-mode\": input.ObjectLockMode }),\n        ...(isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n            \"x-amz-object-lock-retain-until-date\": (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        }),\n        ...(isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n            \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => ({\n                ...acc,\n                [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata[suffix],\n            }), {})),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        uploads: \"\",\n        \"x-id\": \"CreateMultipartUpload\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlCreateMultipartUploadCommand = serializeAws_restXmlCreateMultipartUploadCommand;\nconst serializeAws_restXmlDeleteBucketCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteBucketCommand = serializeAws_restXmlDeleteBucketCommand;\nconst serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        analytics: \"\",\n        ...(input.Id !== undefined && { id: input.Id }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand;\nconst serializeAws_restXmlDeleteBucketCorsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        cors: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteBucketCorsCommand = serializeAws_restXmlDeleteBucketCorsCommand;\nconst serializeAws_restXmlDeleteBucketEncryptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        encryption: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteBucketEncryptionCommand = serializeAws_restXmlDeleteBucketEncryptionCommand;\nconst serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        \"intelligent-tiering\": \"\",\n        ...(input.Id !== undefined && { id: input.Id }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand;\nconst serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        inventory: \"\",\n        ...(input.Id !== undefined && { id: input.Id }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = serializeAws_restXmlDeleteBucketInventoryConfigurationCommand;\nconst serializeAws_restXmlDeleteBucketLifecycleCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        lifecycle: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteBucketLifecycleCommand = serializeAws_restXmlDeleteBucketLifecycleCommand;\nconst serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        metrics: \"\",\n        ...(input.Id !== undefined && { id: input.Id }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = serializeAws_restXmlDeleteBucketMetricsConfigurationCommand;\nconst serializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        ownershipControls: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteBucketOwnershipControlsCommand = serializeAws_restXmlDeleteBucketOwnershipControlsCommand;\nconst serializeAws_restXmlDeleteBucketPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        policy: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteBucketPolicyCommand = serializeAws_restXmlDeleteBucketPolicyCommand;\nconst serializeAws_restXmlDeleteBucketReplicationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        replication: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteBucketReplicationCommand = serializeAws_restXmlDeleteBucketReplicationCommand;\nconst serializeAws_restXmlDeleteBucketTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        tagging: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteBucketTaggingCommand = serializeAws_restXmlDeleteBucketTaggingCommand;\nconst serializeAws_restXmlDeleteBucketWebsiteCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        website: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteBucketWebsiteCommand = serializeAws_restXmlDeleteBucketWebsiteCommand;\nconst serializeAws_restXmlDeleteObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.MFA) && { \"x-amz-mfa\": input.MFA }),\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n            \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention.toString(),\n        }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        \"x-id\": \"DeleteObject\",\n        ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteObjectCommand = serializeAws_restXmlDeleteObjectCommand;\nconst serializeAws_restXmlDeleteObjectsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.MFA) && { \"x-amz-mfa\": input.MFA }),\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n            \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention.toString(),\n        }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        delete: \"\",\n        \"x-id\": \"DeleteObjects\",\n    };\n    let body;\n    if (input.Delete !== undefined) {\n        body = serializeAws_restXmlDelete(input.Delete, context);\n    }\n    let contents;\n    if (input.Delete !== undefined) {\n        contents = serializeAws_restXmlDelete(input.Delete, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteObjectsCommand = serializeAws_restXmlDeleteObjectsCommand;\nconst serializeAws_restXmlDeleteObjectTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        tagging: \"\",\n        ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeleteObjectTaggingCommand = serializeAws_restXmlDeleteObjectTaggingCommand;\nconst serializeAws_restXmlDeletePublicAccessBlockCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        publicAccessBlock: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"DELETE\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlDeletePublicAccessBlockCommand = serializeAws_restXmlDeletePublicAccessBlockCommand;\nconst serializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        accelerate: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketAccelerateConfigurationCommand = serializeAws_restXmlGetBucketAccelerateConfigurationCommand;\nconst serializeAws_restXmlGetBucketAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        acl: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketAclCommand = serializeAws_restXmlGetBucketAclCommand;\nconst serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        analytics: \"\",\n        \"x-id\": \"GetBucketAnalyticsConfiguration\",\n        ...(input.Id !== undefined && { id: input.Id }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = serializeAws_restXmlGetBucketAnalyticsConfigurationCommand;\nconst serializeAws_restXmlGetBucketCorsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        cors: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketCorsCommand = serializeAws_restXmlGetBucketCorsCommand;\nconst serializeAws_restXmlGetBucketEncryptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        encryption: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketEncryptionCommand = serializeAws_restXmlGetBucketEncryptionCommand;\nconst serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        \"intelligent-tiering\": \"\",\n        \"x-id\": \"GetBucketIntelligentTieringConfiguration\",\n        ...(input.Id !== undefined && { id: input.Id }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand;\nconst serializeAws_restXmlGetBucketInventoryConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        inventory: \"\",\n        \"x-id\": \"GetBucketInventoryConfiguration\",\n        ...(input.Id !== undefined && { id: input.Id }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketInventoryConfigurationCommand = serializeAws_restXmlGetBucketInventoryConfigurationCommand;\nconst serializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        lifecycle: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketLifecycleConfigurationCommand = serializeAws_restXmlGetBucketLifecycleConfigurationCommand;\nconst serializeAws_restXmlGetBucketLocationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        location: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketLocationCommand = serializeAws_restXmlGetBucketLocationCommand;\nconst serializeAws_restXmlGetBucketLoggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        logging: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketLoggingCommand = serializeAws_restXmlGetBucketLoggingCommand;\nconst serializeAws_restXmlGetBucketMetricsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        metrics: \"\",\n        \"x-id\": \"GetBucketMetricsConfiguration\",\n        ...(input.Id !== undefined && { id: input.Id }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketMetricsConfigurationCommand = serializeAws_restXmlGetBucketMetricsConfigurationCommand;\nconst serializeAws_restXmlGetBucketNotificationConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        notification: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketNotificationConfigurationCommand = serializeAws_restXmlGetBucketNotificationConfigurationCommand;\nconst serializeAws_restXmlGetBucketOwnershipControlsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        ownershipControls: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketOwnershipControlsCommand = serializeAws_restXmlGetBucketOwnershipControlsCommand;\nconst serializeAws_restXmlGetBucketPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        policy: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketPolicyCommand = serializeAws_restXmlGetBucketPolicyCommand;\nconst serializeAws_restXmlGetBucketPolicyStatusCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        policyStatus: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketPolicyStatusCommand = serializeAws_restXmlGetBucketPolicyStatusCommand;\nconst serializeAws_restXmlGetBucketReplicationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        replication: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketReplicationCommand = serializeAws_restXmlGetBucketReplicationCommand;\nconst serializeAws_restXmlGetBucketRequestPaymentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        requestPayment: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketRequestPaymentCommand = serializeAws_restXmlGetBucketRequestPaymentCommand;\nconst serializeAws_restXmlGetBucketTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        tagging: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketTaggingCommand = serializeAws_restXmlGetBucketTaggingCommand;\nconst serializeAws_restXmlGetBucketVersioningCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        versioning: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketVersioningCommand = serializeAws_restXmlGetBucketVersioningCommand;\nconst serializeAws_restXmlGetBucketWebsiteCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        website: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetBucketWebsiteCommand = serializeAws_restXmlGetBucketWebsiteCommand;\nconst serializeAws_restXmlGetObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n        ...(isSerializableHeaderValue(input.IfModifiedSince) && {\n            \"if-modified-since\": smithy_client_1.dateToUtcString(input.IfModifiedSince).toString(),\n        }),\n        ...(isSerializableHeaderValue(input.IfNoneMatch) && { \"if-none-match\": input.IfNoneMatch }),\n        ...(isSerializableHeaderValue(input.IfUnmodifiedSince) && {\n            \"if-unmodified-since\": smithy_client_1.dateToUtcString(input.IfUnmodifiedSince).toString(),\n        }),\n        ...(isSerializableHeaderValue(input.Range) && { range: input.Range }),\n        ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        }),\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        \"x-id\": \"GetObject\",\n        ...(input.ResponseCacheControl !== undefined && { \"response-cache-control\": input.ResponseCacheControl }),\n        ...(input.ResponseContentDisposition !== undefined && {\n            \"response-content-disposition\": input.ResponseContentDisposition,\n        }),\n        ...(input.ResponseContentEncoding !== undefined && { \"response-content-encoding\": input.ResponseContentEncoding }),\n        ...(input.ResponseContentLanguage !== undefined && { \"response-content-language\": input.ResponseContentLanguage }),\n        ...(input.ResponseContentType !== undefined && { \"response-content-type\": input.ResponseContentType }),\n        ...(input.ResponseExpires !== undefined && {\n            \"response-expires\": smithy_client_1.dateToUtcString(input.ResponseExpires).toString(),\n        }),\n        ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n        ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetObjectCommand = serializeAws_restXmlGetObjectCommand;\nconst serializeAws_restXmlGetObjectAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        acl: \"\",\n        ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetObjectAclCommand = serializeAws_restXmlGetObjectAclCommand;\nconst serializeAws_restXmlGetObjectLegalHoldCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        \"legal-hold\": \"\",\n        ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetObjectLegalHoldCommand = serializeAws_restXmlGetObjectLegalHoldCommand;\nconst serializeAws_restXmlGetObjectLockConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        \"object-lock\": \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetObjectLockConfigurationCommand = serializeAws_restXmlGetObjectLockConfigurationCommand;\nconst serializeAws_restXmlGetObjectRetentionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        retention: \"\",\n        ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetObjectRetentionCommand = serializeAws_restXmlGetObjectRetentionCommand;\nconst serializeAws_restXmlGetObjectTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        tagging: \"\",\n        ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetObjectTaggingCommand = serializeAws_restXmlGetObjectTaggingCommand;\nconst serializeAws_restXmlGetObjectTorrentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        torrent: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetObjectTorrentCommand = serializeAws_restXmlGetObjectTorrentCommand;\nconst serializeAws_restXmlGetPublicAccessBlockCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        publicAccessBlock: \"\",\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlGetPublicAccessBlockCommand = serializeAws_restXmlGetPublicAccessBlockCommand;\nconst serializeAws_restXmlHeadBucketCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"HEAD\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlHeadBucketCommand = serializeAws_restXmlHeadBucketCommand;\nconst serializeAws_restXmlHeadObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.IfMatch) && { \"if-match\": input.IfMatch }),\n        ...(isSerializableHeaderValue(input.IfModifiedSince) && {\n            \"if-modified-since\": smithy_client_1.dateToUtcString(input.IfModifiedSince).toString(),\n        }),\n        ...(isSerializableHeaderValue(input.IfNoneMatch) && { \"if-none-match\": input.IfNoneMatch }),\n        ...(isSerializableHeaderValue(input.IfUnmodifiedSince) && {\n            \"if-unmodified-since\": smithy_client_1.dateToUtcString(input.IfUnmodifiedSince).toString(),\n        }),\n        ...(isSerializableHeaderValue(input.Range) && { range: input.Range }),\n        ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        }),\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n        ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"HEAD\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlHeadObjectCommand = serializeAws_restXmlHeadObjectCommand;\nconst serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        analytics: \"\",\n        \"x-id\": \"ListBucketAnalyticsConfigurations\",\n        ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = serializeAws_restXmlListBucketAnalyticsConfigurationsCommand;\nconst serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {};\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        \"intelligent-tiering\": \"\",\n        \"x-id\": \"ListBucketIntelligentTieringConfigurations\",\n        ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand;\nconst serializeAws_restXmlListBucketInventoryConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        inventory: \"\",\n        \"x-id\": \"ListBucketInventoryConfigurations\",\n        ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListBucketInventoryConfigurationsCommand = serializeAws_restXmlListBucketInventoryConfigurationsCommand;\nconst serializeAws_restXmlListBucketMetricsConfigurationsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        metrics: \"\",\n        \"x-id\": \"ListBucketMetricsConfigurations\",\n        ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListBucketMetricsConfigurationsCommand = serializeAws_restXmlListBucketMetricsConfigurationsCommand;\nconst serializeAws_restXmlListBucketsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/\";\n    let body;\n    body = \"\";\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restXmlListBucketsCommand = serializeAws_restXmlListBucketsCommand;\nconst serializeAws_restXmlListMultipartUploadsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        uploads: \"\",\n        ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n        ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n        ...(input.KeyMarker !== undefined && { \"key-marker\": input.KeyMarker }),\n        ...(input.MaxUploads !== undefined && { \"max-uploads\": input.MaxUploads.toString() }),\n        ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n        ...(input.UploadIdMarker !== undefined && { \"upload-id-marker\": input.UploadIdMarker }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListMultipartUploadsCommand = serializeAws_restXmlListMultipartUploadsCommand;\nconst serializeAws_restXmlListObjectsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n        ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n        ...(input.Marker !== undefined && { marker: input.Marker }),\n        ...(input.MaxKeys !== undefined && { \"max-keys\": input.MaxKeys.toString() }),\n        ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListObjectsCommand = serializeAws_restXmlListObjectsCommand;\nconst serializeAws_restXmlListObjectsV2Command = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        \"list-type\": \"2\",\n        ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n        ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n        ...(input.MaxKeys !== undefined && { \"max-keys\": input.MaxKeys.toString() }),\n        ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n        ...(input.ContinuationToken !== undefined && { \"continuation-token\": input.ContinuationToken }),\n        ...(input.FetchOwner !== undefined && { \"fetch-owner\": input.FetchOwner.toString() }),\n        ...(input.StartAfter !== undefined && { \"start-after\": input.StartAfter }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListObjectsV2Command = serializeAws_restXmlListObjectsV2Command;\nconst serializeAws_restXmlListObjectVersionsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        versions: \"\",\n        ...(input.Delimiter !== undefined && { delimiter: input.Delimiter }),\n        ...(input.EncodingType !== undefined && { \"encoding-type\": input.EncodingType }),\n        ...(input.KeyMarker !== undefined && { \"key-marker\": input.KeyMarker }),\n        ...(input.MaxKeys !== undefined && { \"max-keys\": input.MaxKeys.toString() }),\n        ...(input.Prefix !== undefined && { prefix: input.Prefix }),\n        ...(input.VersionIdMarker !== undefined && { \"version-id-marker\": input.VersionIdMarker }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListObjectVersionsCommand = serializeAws_restXmlListObjectVersionsCommand;\nconst serializeAws_restXmlListPartsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        \"x-id\": \"ListParts\",\n        ...(input.MaxParts !== undefined && { \"max-parts\": input.MaxParts.toString() }),\n        ...(input.PartNumberMarker !== undefined && { \"part-number-marker\": input.PartNumberMarker }),\n        ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlListPartsCommand = serializeAws_restXmlListPartsCommand;\nconst serializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        accelerate: \"\",\n    };\n    let body;\n    if (input.AccelerateConfiguration !== undefined) {\n        body = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);\n    }\n    let contents;\n    if (input.AccelerateConfiguration !== undefined) {\n        contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketAccelerateConfigurationCommand = serializeAws_restXmlPutBucketAccelerateConfigurationCommand;\nconst serializeAws_restXmlPutBucketAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL }),\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl }),\n        ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead }),\n        ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP }),\n        ...(isSerializableHeaderValue(input.GrantWrite) && { \"x-amz-grant-write\": input.GrantWrite }),\n        ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        acl: \"\",\n    };\n    let body;\n    if (input.AccessControlPolicy !== undefined) {\n        body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n    }\n    let contents;\n    if (input.AccessControlPolicy !== undefined) {\n        contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketAclCommand = serializeAws_restXmlPutBucketAclCommand;\nconst serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        analytics: \"\",\n        ...(input.Id !== undefined && { id: input.Id }),\n    };\n    let body;\n    if (input.AnalyticsConfiguration !== undefined) {\n        body = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);\n    }\n    let contents;\n    if (input.AnalyticsConfiguration !== undefined) {\n        contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = serializeAws_restXmlPutBucketAnalyticsConfigurationCommand;\nconst serializeAws_restXmlPutBucketCorsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        cors: \"\",\n    };\n    let body;\n    if (input.CORSConfiguration !== undefined) {\n        body = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);\n    }\n    let contents;\n    if (input.CORSConfiguration !== undefined) {\n        contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketCorsCommand = serializeAws_restXmlPutBucketCorsCommand;\nconst serializeAws_restXmlPutBucketEncryptionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        encryption: \"\",\n    };\n    let body;\n    if (input.ServerSideEncryptionConfiguration !== undefined) {\n        body = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n    }\n    let contents;\n    if (input.ServerSideEncryptionConfiguration !== undefined) {\n        contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketEncryptionCommand = serializeAws_restXmlPutBucketEncryptionCommand;\nconst serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        \"intelligent-tiering\": \"\",\n        ...(input.Id !== undefined && { id: input.Id }),\n    };\n    let body;\n    if (input.IntelligentTieringConfiguration !== undefined) {\n        body = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n    }\n    let contents;\n    if (input.IntelligentTieringConfiguration !== undefined) {\n        contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand;\nconst serializeAws_restXmlPutBucketInventoryConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        inventory: \"\",\n        ...(input.Id !== undefined && { id: input.Id }),\n    };\n    let body;\n    if (input.InventoryConfiguration !== undefined) {\n        body = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);\n    }\n    let contents;\n    if (input.InventoryConfiguration !== undefined) {\n        contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketInventoryConfigurationCommand = serializeAws_restXmlPutBucketInventoryConfigurationCommand;\nconst serializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        lifecycle: \"\",\n    };\n    let body;\n    if (input.LifecycleConfiguration !== undefined) {\n        body = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n    }\n    let contents;\n    if (input.LifecycleConfiguration !== undefined) {\n        contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);\n        contents = contents.withName(\"LifecycleConfiguration\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketLifecycleConfigurationCommand = serializeAws_restXmlPutBucketLifecycleConfigurationCommand;\nconst serializeAws_restXmlPutBucketLoggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        logging: \"\",\n    };\n    let body;\n    if (input.BucketLoggingStatus !== undefined) {\n        body = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);\n    }\n    let contents;\n    if (input.BucketLoggingStatus !== undefined) {\n        contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketLoggingCommand = serializeAws_restXmlPutBucketLoggingCommand;\nconst serializeAws_restXmlPutBucketMetricsConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        metrics: \"\",\n        ...(input.Id !== undefined && { id: input.Id }),\n    };\n    let body;\n    if (input.MetricsConfiguration !== undefined) {\n        body = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);\n    }\n    let contents;\n    if (input.MetricsConfiguration !== undefined) {\n        contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketMetricsConfigurationCommand = serializeAws_restXmlPutBucketMetricsConfigurationCommand;\nconst serializeAws_restXmlPutBucketNotificationConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        notification: \"\",\n    };\n    let body;\n    if (input.NotificationConfiguration !== undefined) {\n        body = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);\n    }\n    let contents;\n    if (input.NotificationConfiguration !== undefined) {\n        contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketNotificationConfigurationCommand = serializeAws_restXmlPutBucketNotificationConfigurationCommand;\nconst serializeAws_restXmlPutBucketOwnershipControlsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        ownershipControls: \"\",\n    };\n    let body;\n    if (input.OwnershipControls !== undefined) {\n        body = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);\n    }\n    let contents;\n    if (input.OwnershipControls !== undefined) {\n        contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketOwnershipControlsCommand = serializeAws_restXmlPutBucketOwnershipControlsCommand;\nconst serializeAws_restXmlPutBucketPolicyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"text/plain\",\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess) && {\n            \"x-amz-confirm-remove-self-bucket-access\": input.ConfirmRemoveSelfBucketAccess.toString(),\n        }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        policy: \"\",\n    };\n    let body;\n    if (input.Policy !== undefined) {\n        body = input.Policy;\n    }\n    let contents;\n    if (input.Policy !== undefined) {\n        contents = input.Policy;\n        body = contents;\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketPolicyCommand = serializeAws_restXmlPutBucketPolicyCommand;\nconst serializeAws_restXmlPutBucketReplicationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.Token) && { \"x-amz-bucket-object-lock-token\": input.Token }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        replication: \"\",\n    };\n    let body;\n    if (input.ReplicationConfiguration !== undefined) {\n        body = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);\n    }\n    let contents;\n    if (input.ReplicationConfiguration !== undefined) {\n        contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketReplicationCommand = serializeAws_restXmlPutBucketReplicationCommand;\nconst serializeAws_restXmlPutBucketRequestPaymentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        requestPayment: \"\",\n    };\n    let body;\n    if (input.RequestPaymentConfiguration !== undefined) {\n        body = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n    }\n    let contents;\n    if (input.RequestPaymentConfiguration !== undefined) {\n        contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketRequestPaymentCommand = serializeAws_restXmlPutBucketRequestPaymentCommand;\nconst serializeAws_restXmlPutBucketTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        tagging: \"\",\n    };\n    let body;\n    if (input.Tagging !== undefined) {\n        body = serializeAws_restXmlTagging(input.Tagging, context);\n    }\n    let contents;\n    if (input.Tagging !== undefined) {\n        contents = serializeAws_restXmlTagging(input.Tagging, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketTaggingCommand = serializeAws_restXmlPutBucketTaggingCommand;\nconst serializeAws_restXmlPutBucketVersioningCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.MFA) && { \"x-amz-mfa\": input.MFA }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        versioning: \"\",\n    };\n    let body;\n    if (input.VersioningConfiguration !== undefined) {\n        body = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);\n    }\n    let contents;\n    if (input.VersioningConfiguration !== undefined) {\n        contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketVersioningCommand = serializeAws_restXmlPutBucketVersioningCommand;\nconst serializeAws_restXmlPutBucketWebsiteCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        website: \"\",\n    };\n    let body;\n    if (input.WebsiteConfiguration !== undefined) {\n        body = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);\n    }\n    let contents;\n    if (input.WebsiteConfiguration !== undefined) {\n        contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutBucketWebsiteCommand = serializeAws_restXmlPutBucketWebsiteCommand;\nconst serializeAws_restXmlPutObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/octet-stream\",\n        ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL }),\n        ...(isSerializableHeaderValue(input.CacheControl) && { \"cache-control\": input.CacheControl }),\n        ...(isSerializableHeaderValue(input.ContentDisposition) && { \"content-disposition\": input.ContentDisposition }),\n        ...(isSerializableHeaderValue(input.ContentEncoding) && { \"content-encoding\": input.ContentEncoding }),\n        ...(isSerializableHeaderValue(input.ContentLanguage) && { \"content-language\": input.ContentLanguage }),\n        ...(isSerializableHeaderValue(input.ContentLength) && { \"content-length\": input.ContentLength.toString() }),\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.ContentType) && { \"content-type\": input.ContentType }),\n        ...(isSerializableHeaderValue(input.Expires) && { expires: smithy_client_1.dateToUtcString(input.Expires).toString() }),\n        ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl }),\n        ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead }),\n        ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP }),\n        ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP }),\n        ...(isSerializableHeaderValue(input.ServerSideEncryption) && {\n            \"x-amz-server-side-encryption\": input.ServerSideEncryption,\n        }),\n        ...(isSerializableHeaderValue(input.StorageClass) && { \"x-amz-storage-class\": input.StorageClass }),\n        ...(isSerializableHeaderValue(input.WebsiteRedirectLocation) && {\n            \"x-amz-website-redirect-location\": input.WebsiteRedirectLocation,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        }),\n        ...(isSerializableHeaderValue(input.SSEKMSKeyId) && {\n            \"x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        }),\n        ...(isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {\n            \"x-amz-server-side-encryption-context\": input.SSEKMSEncryptionContext,\n        }),\n        ...(isSerializableHeaderValue(input.BucketKeyEnabled) && {\n            \"x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled.toString(),\n        }),\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.Tagging) && { \"x-amz-tagging\": input.Tagging }),\n        ...(isSerializableHeaderValue(input.ObjectLockMode) && { \"x-amz-object-lock-mode\": input.ObjectLockMode }),\n        ...(isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n            \"x-amz-object-lock-retain-until-date\": (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        }),\n        ...(isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n            \"x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => ({\n                ...acc,\n                [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata[suffix],\n            }), {})),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        \"x-id\": \"PutObject\",\n    };\n    let body;\n    if (input.Body !== undefined) {\n        body = input.Body;\n    }\n    let contents;\n    if (input.Body !== undefined) {\n        contents = input.Body;\n        body = contents;\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutObjectCommand = serializeAws_restXmlPutObjectCommand;\nconst serializeAws_restXmlPutObjectAclCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ACL) && { \"x-amz-acl\": input.ACL }),\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.GrantFullControl) && { \"x-amz-grant-full-control\": input.GrantFullControl }),\n        ...(isSerializableHeaderValue(input.GrantRead) && { \"x-amz-grant-read\": input.GrantRead }),\n        ...(isSerializableHeaderValue(input.GrantReadACP) && { \"x-amz-grant-read-acp\": input.GrantReadACP }),\n        ...(isSerializableHeaderValue(input.GrantWrite) && { \"x-amz-grant-write\": input.GrantWrite }),\n        ...(isSerializableHeaderValue(input.GrantWriteACP) && { \"x-amz-grant-write-acp\": input.GrantWriteACP }),\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        acl: \"\",\n        ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    };\n    let body;\n    if (input.AccessControlPolicy !== undefined) {\n        body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n    }\n    let contents;\n    if (input.AccessControlPolicy !== undefined) {\n        contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutObjectAclCommand = serializeAws_restXmlPutObjectAclCommand;\nconst serializeAws_restXmlPutObjectLegalHoldCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        \"legal-hold\": \"\",\n        ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    };\n    let body;\n    if (input.LegalHold !== undefined) {\n        body = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);\n    }\n    let contents;\n    if (input.LegalHold !== undefined) {\n        contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);\n        contents = contents.withName(\"LegalHold\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutObjectLegalHoldCommand = serializeAws_restXmlPutObjectLegalHoldCommand;\nconst serializeAws_restXmlPutObjectLockConfigurationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.Token) && { \"x-amz-bucket-object-lock-token\": input.Token }),\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        \"object-lock\": \"\",\n    };\n    let body;\n    if (input.ObjectLockConfiguration !== undefined) {\n        body = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);\n    }\n    let contents;\n    if (input.ObjectLockConfiguration !== undefined) {\n        contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutObjectLockConfigurationCommand = serializeAws_restXmlPutObjectLockConfigurationCommand;\nconst serializeAws_restXmlPutObjectRetentionCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.BypassGovernanceRetention) && {\n            \"x-amz-bypass-governance-retention\": input.BypassGovernanceRetention.toString(),\n        }),\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        retention: \"\",\n        ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    };\n    let body;\n    if (input.Retention !== undefined) {\n        body = serializeAws_restXmlObjectLockRetention(input.Retention, context);\n    }\n    let contents;\n    if (input.Retention !== undefined) {\n        contents = serializeAws_restXmlObjectLockRetention(input.Retention, context);\n        contents = contents.withName(\"Retention\");\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutObjectRetentionCommand = serializeAws_restXmlPutObjectRetentionCommand;\nconst serializeAws_restXmlPutObjectTaggingCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        tagging: \"\",\n        ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    };\n    let body;\n    if (input.Tagging !== undefined) {\n        body = serializeAws_restXmlTagging(input.Tagging, context);\n    }\n    let contents;\n    if (input.Tagging !== undefined) {\n        contents = serializeAws_restXmlTagging(input.Tagging, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutObjectTaggingCommand = serializeAws_restXmlPutObjectTaggingCommand;\nconst serializeAws_restXmlPutPublicAccessBlockCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    const query = {\n        publicAccessBlock: \"\",\n    };\n    let body;\n    if (input.PublicAccessBlockConfiguration !== undefined) {\n        body = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n    }\n    let contents;\n    if (input.PublicAccessBlockConfiguration !== undefined) {\n        contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlPutPublicAccessBlockCommand = serializeAws_restXmlPutPublicAccessBlockCommand;\nconst serializeAws_restXmlRestoreObjectCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        restore: \"\",\n        \"x-id\": \"RestoreObject\",\n        ...(input.VersionId !== undefined && { versionId: input.VersionId }),\n    };\n    let body;\n    if (input.RestoreRequest !== undefined) {\n        body = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);\n    }\n    let contents;\n    if (input.RestoreRequest !== undefined) {\n        contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);\n        body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n        contents.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n        body += contents.toString();\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlRestoreObjectCommand = serializeAws_restXmlRestoreObjectCommand;\nconst serializeAws_restXmlSelectObjectContentCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/xml\",\n        ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        select: \"\",\n        \"select-type\": \"2\",\n        \"x-id\": \"SelectObjectContent\",\n    };\n    let body;\n    body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n    const bodyNode = new xml_builder_1.XmlNode(\"SelectObjectContentRequest\");\n    bodyNode.addAttribute(\"xmlns\", \"http://s3.amazonaws.com/doc/2006-03-01/\");\n    if (input.Expression !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"Expression\").addChildNode(new xml_builder_1.XmlText(input.Expression)).withName(\"Expression\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExpressionType !== undefined) {\n        const node = new xml_builder_1.XmlNode(\"ExpressionType\")\n            .addChildNode(new xml_builder_1.XmlText(input.ExpressionType))\n            .withName(\"ExpressionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.InputSerialization !== undefined) {\n        const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OutputSerialization !== undefined) {\n        const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RequestProgress !== undefined) {\n        const node = serializeAws_restXmlRequestProgress(input.RequestProgress, context).withName(\"RequestProgress\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ScanRange !== undefined) {\n        const node = serializeAws_restXmlScanRange(input.ScanRange, context).withName(\"ScanRange\");\n        bodyNode.addChildNode(node);\n    }\n    body += bodyNode.toString();\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlSelectObjectContentCommand = serializeAws_restXmlSelectObjectContentCommand;\nconst serializeAws_restXmlUploadPartCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/octet-stream\",\n        ...(isSerializableHeaderValue(input.ContentLength) && { \"content-length\": input.ContentLength.toString() }),\n        ...(isSerializableHeaderValue(input.ContentMD5) && { \"content-md5\": input.ContentMD5 }),\n        ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        }),\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        \"x-id\": \"UploadPart\",\n        ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n        ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n    };\n    let body;\n    if (input.Body !== undefined) {\n        body = input.Body;\n    }\n    let contents;\n    if (input.Body !== undefined) {\n        contents = input.Body;\n        body = contents;\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlUploadPartCommand = serializeAws_restXmlUploadPartCommand;\nconst serializeAws_restXmlUploadPartCopyCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.CopySource) && { \"x-amz-copy-source\": input.CopySource }),\n        ...(isSerializableHeaderValue(input.CopySourceIfMatch) && {\n            \"x-amz-copy-source-if-match\": input.CopySourceIfMatch,\n        }),\n        ...(isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {\n            \"x-amz-copy-source-if-modified-since\": smithy_client_1.dateToUtcString(input.CopySourceIfModifiedSince).toString(),\n        }),\n        ...(isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {\n            \"x-amz-copy-source-if-none-match\": input.CopySourceIfNoneMatch,\n        }),\n        ...(isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {\n            \"x-amz-copy-source-if-unmodified-since\": smithy_client_1.dateToUtcString(input.CopySourceIfUnmodifiedSince).toString(),\n        }),\n        ...(isSerializableHeaderValue(input.CopySourceRange) && { \"x-amz-copy-source-range\": input.CopySourceRange }),\n        ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKey) && {\n            \"x-amz-server-side-encryption-customer-key\": input.SSECustomerKey,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        }),\n        ...(isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {\n            \"x-amz-copy-source-server-side-encryption-customer-algorithm\": input.CopySourceSSECustomerAlgorithm,\n        }),\n        ...(isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {\n            \"x-amz-copy-source-server-side-encryption-customer-key\": input.CopySourceSSECustomerKey,\n        }),\n        ...(isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {\n            \"x-amz-copy-source-server-side-encryption-customer-key-md5\": input.CopySourceSSECustomerKeyMD5,\n        }),\n        ...(isSerializableHeaderValue(input.RequestPayer) && { \"x-amz-request-payer\": input.RequestPayer }),\n        ...(isSerializableHeaderValue(input.ExpectedBucketOwner) && {\n            \"x-amz-expected-bucket-owner\": input.ExpectedBucketOwner,\n        }),\n        ...(isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {\n            \"x-amz-source-expected-bucket-owner\": input.ExpectedSourceBucketOwner,\n        }),\n    };\n    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/{Bucket}/{Key+}\";\n    if (input.Bucket !== undefined) {\n        const labelValue = input.Bucket;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Bucket.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Bucket}\", smithy_client_1.extendedEncodeURIComponent(labelValue));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Bucket.\");\n    }\n    if (input.Key !== undefined) {\n        const labelValue = input.Key;\n        if (labelValue.length <= 0) {\n            throw new Error(\"Empty value provided for input HTTP label: Key.\");\n        }\n        resolvedPath = resolvedPath.replace(\"{Key+}\", labelValue\n            .split(\"/\")\n            .map((segment) => smithy_client_1.extendedEncodeURIComponent(segment))\n            .join(\"/\"));\n    }\n    else {\n        throw new Error(\"No value provided for input HTTP label: Key.\");\n    }\n    const query = {\n        \"x-id\": \"UploadPartCopy\",\n        ...(input.PartNumber !== undefined && { partNumber: input.PartNumber.toString() }),\n        ...(input.UploadId !== undefined && { uploadId: input.UploadId }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"PUT\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlUploadPartCopyCommand = serializeAws_restXmlUploadPartCopyCommand;\nconst serializeAws_restXmlWriteGetObjectResponseCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/octet-stream\",\n        \"x-amz-content-sha256\": \"UNSIGNED-PAYLOAD\",\n        ...(isSerializableHeaderValue(input.RequestRoute) && { \"x-amz-request-route\": input.RequestRoute }),\n        ...(isSerializableHeaderValue(input.RequestToken) && { \"x-amz-request-token\": input.RequestToken }),\n        ...(isSerializableHeaderValue(input.StatusCode) && { \"x-amz-fwd-status\": input.StatusCode.toString() }),\n        ...(isSerializableHeaderValue(input.ErrorCode) && { \"x-amz-fwd-error-code\": input.ErrorCode }),\n        ...(isSerializableHeaderValue(input.ErrorMessage) && { \"x-amz-fwd-error-message\": input.ErrorMessage }),\n        ...(isSerializableHeaderValue(input.AcceptRanges) && { \"x-amz-fwd-header-accept-ranges\": input.AcceptRanges }),\n        ...(isSerializableHeaderValue(input.CacheControl) && { \"x-amz-fwd-header-cache-control\": input.CacheControl }),\n        ...(isSerializableHeaderValue(input.ContentDisposition) && {\n            \"x-amz-fwd-header-content-disposition\": input.ContentDisposition,\n        }),\n        ...(isSerializableHeaderValue(input.ContentEncoding) && {\n            \"x-amz-fwd-header-content-encoding\": input.ContentEncoding,\n        }),\n        ...(isSerializableHeaderValue(input.ContentLanguage) && {\n            \"x-amz-fwd-header-content-language\": input.ContentLanguage,\n        }),\n        ...(isSerializableHeaderValue(input.ContentLength) && { \"content-length\": input.ContentLength.toString() }),\n        ...(isSerializableHeaderValue(input.ContentRange) && { \"x-amz-fwd-header-content-range\": input.ContentRange }),\n        ...(isSerializableHeaderValue(input.ContentType) && { \"x-amz-fwd-header-content-type\": input.ContentType }),\n        ...(isSerializableHeaderValue(input.DeleteMarker) && {\n            \"x-amz-fwd-header-x-amz-delete-marker\": input.DeleteMarker.toString(),\n        }),\n        ...(isSerializableHeaderValue(input.ETag) && { \"x-amz-fwd-header-etag\": input.ETag }),\n        ...(isSerializableHeaderValue(input.Expires) && {\n            \"x-amz-fwd-header-expires\": smithy_client_1.dateToUtcString(input.Expires).toString(),\n        }),\n        ...(isSerializableHeaderValue(input.Expiration) && { \"x-amz-fwd-header-x-amz-expiration\": input.Expiration }),\n        ...(isSerializableHeaderValue(input.LastModified) && {\n            \"x-amz-fwd-header-last-modified\": smithy_client_1.dateToUtcString(input.LastModified).toString(),\n        }),\n        ...(isSerializableHeaderValue(input.MissingMeta) && {\n            \"x-amz-fwd-header-x-amz-missing-meta\": input.MissingMeta.toString(),\n        }),\n        ...(isSerializableHeaderValue(input.ObjectLockMode) && {\n            \"x-amz-fwd-header-x-amz-object-lock-mode\": input.ObjectLockMode,\n        }),\n        ...(isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {\n            \"x-amz-fwd-header-x-amz-object-lock-legal-hold\": input.ObjectLockLegalHoldStatus,\n        }),\n        ...(isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {\n            \"x-amz-fwd-header-x-amz-object-lock-retain-until-date\": (input.ObjectLockRetainUntilDate.toISOString().split(\".\")[0] + \"Z\").toString(),\n        }),\n        ...(isSerializableHeaderValue(input.PartsCount) && {\n            \"x-amz-fwd-header-x-amz-mp-parts-count\": input.PartsCount.toString(),\n        }),\n        ...(isSerializableHeaderValue(input.ReplicationStatus) && {\n            \"x-amz-fwd-header-x-amz-replication-status\": input.ReplicationStatus,\n        }),\n        ...(isSerializableHeaderValue(input.RequestCharged) && {\n            \"x-amz-fwd-header-x-amz-request-charged\": input.RequestCharged,\n        }),\n        ...(isSerializableHeaderValue(input.Restore) && { \"x-amz-fwd-header-x-amz-restore\": input.Restore }),\n        ...(isSerializableHeaderValue(input.ServerSideEncryption) && {\n            \"x-amz-fwd-header-x-amz-server-side-encryption\": input.ServerSideEncryption,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerAlgorithm) && {\n            \"x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm\": input.SSECustomerAlgorithm,\n        }),\n        ...(isSerializableHeaderValue(input.SSEKMSKeyId) && {\n            \"x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id\": input.SSEKMSKeyId,\n        }),\n        ...(isSerializableHeaderValue(input.SSECustomerKeyMD5) && {\n            \"x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5\": input.SSECustomerKeyMD5,\n        }),\n        ...(isSerializableHeaderValue(input.StorageClass) && {\n            \"x-amz-fwd-header-x-amz-storage-class\": input.StorageClass,\n        }),\n        ...(isSerializableHeaderValue(input.TagCount) && {\n            \"x-amz-fwd-header-x-amz-tagging-count\": input.TagCount.toString(),\n        }),\n        ...(isSerializableHeaderValue(input.VersionId) && { \"x-amz-fwd-header-x-amz-version-id\": input.VersionId }),\n        ...(isSerializableHeaderValue(input.BucketKeyEnabled) && {\n            \"x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled\": input.BucketKeyEnabled.toString(),\n        }),\n        ...(input.Metadata !== undefined &&\n            Object.keys(input.Metadata).reduce((acc, suffix) => ({\n                ...acc,\n                [`x-amz-meta-${suffix.toLowerCase()}`]: input.Metadata[suffix],\n            }), {})),\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/WriteGetObjectResponse\";\n    const query = {\n        \"x-id\": \"WriteGetObjectResponse\",\n    };\n    let body;\n    if (input.Body !== undefined) {\n        body = input.Body;\n    }\n    let contents;\n    if (input.Body !== undefined) {\n        contents = input.Body;\n        body = contents;\n    }\n    let { hostname: resolvedHostname } = await context.endpoint();\n    if (context.disableHostPrefix !== true) {\n        resolvedHostname = \"{RequestRoute}.\" + resolvedHostname;\n        if (input.RequestRoute === undefined) {\n            throw new Error(\"Empty value provided for input host prefix: RequestRoute.\");\n        }\n        resolvedHostname = resolvedHostname.replace(\"{RequestRoute}\", input.RequestRoute);\n        if (!protocol_http_1.isValidHostname(resolvedHostname)) {\n            throw new Error(\"ValidationError: prefixed hostname must be hostname compatible.\");\n        }\n    }\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname: resolvedHostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restXmlWriteGetObjectResponseCommand = serializeAws_restXmlWriteGetObjectResponseCommand;\nconst deserializeAws_restXmlAbortMultipartUploadCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlAbortMultipartUploadCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        RequestCharged: undefined,\n    };\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlAbortMultipartUploadCommand = deserializeAws_restXmlAbortMultipartUploadCommand;\nconst deserializeAws_restXmlAbortMultipartUploadCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchUpload\":\n        case \"com.amazonaws.s3#NoSuchUpload\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchUploadResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCompleteMultipartUploadCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Bucket: undefined,\n        BucketKeyEnabled: undefined,\n        ETag: undefined,\n        Expiration: undefined,\n        Key: undefined,\n        Location: undefined,\n        RequestCharged: undefined,\n        SSEKMSKeyId: undefined,\n        ServerSideEncryption: undefined,\n        VersionId: undefined,\n    };\n    if (output.headers[\"x-amz-expiration\"] !== undefined) {\n        contents.Expiration = output.headers[\"x-amz-expiration\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n        contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n    }\n    if (output.headers[\"x-amz-version-id\"] !== undefined) {\n        contents.VersionId = output.headers[\"x-amz-version-id\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n        contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n        contents.BucketKeyEnabled = smithy_client_1.parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]);\n    }\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = smithy_client_1.expectString(data[\"Bucket\"]);\n    }\n    if (data[\"ETag\"] !== undefined) {\n        contents.ETag = smithy_client_1.expectString(data[\"ETag\"]);\n    }\n    if (data[\"Key\"] !== undefined) {\n        contents.Key = smithy_client_1.expectString(data[\"Key\"]);\n    }\n    if (data[\"Location\"] !== undefined) {\n        contents.Location = smithy_client_1.expectString(data[\"Location\"]);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCompleteMultipartUploadCommand = deserializeAws_restXmlCompleteMultipartUploadCommand;\nconst deserializeAws_restXmlCompleteMultipartUploadCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCopyObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCopyObjectCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        BucketKeyEnabled: undefined,\n        CopyObjectResult: undefined,\n        CopySourceVersionId: undefined,\n        Expiration: undefined,\n        RequestCharged: undefined,\n        SSECustomerAlgorithm: undefined,\n        SSECustomerKeyMD5: undefined,\n        SSEKMSEncryptionContext: undefined,\n        SSEKMSKeyId: undefined,\n        ServerSideEncryption: undefined,\n        VersionId: undefined,\n    };\n    if (output.headers[\"x-amz-expiration\"] !== undefined) {\n        contents.Expiration = output.headers[\"x-amz-expiration\"];\n    }\n    if (output.headers[\"x-amz-copy-source-version-id\"] !== undefined) {\n        contents.CopySourceVersionId = output.headers[\"x-amz-copy-source-version-id\"];\n    }\n    if (output.headers[\"x-amz-version-id\"] !== undefined) {\n        contents.VersionId = output.headers[\"x-amz-version-id\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n        contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n        contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n        contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n        contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n        contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n        contents.BucketKeyEnabled = smithy_client_1.parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]);\n    }\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCopyObjectCommand = deserializeAws_restXmlCopyObjectCommand;\nconst deserializeAws_restXmlCopyObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ObjectNotInActiveTierError\":\n        case \"com.amazonaws.s3#ObjectNotInActiveTierError\":\n            response = {\n                ...(await deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateBucketCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateBucketCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Location: undefined,\n    };\n    if (output.headers[\"location\"] !== undefined) {\n        contents.Location = output.headers[\"location\"];\n    }\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateBucketCommand = deserializeAws_restXmlCreateBucketCommand;\nconst deserializeAws_restXmlCreateBucketCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"BucketAlreadyExists\":\n        case \"com.amazonaws.s3#BucketAlreadyExists\":\n            response = {\n                ...(await deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"BucketAlreadyOwnedByYou\":\n        case \"com.amazonaws.s3#BucketAlreadyOwnedByYou\":\n            response = {\n                ...(await deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlCreateMultipartUploadCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlCreateMultipartUploadCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        AbortDate: undefined,\n        AbortRuleId: undefined,\n        Bucket: undefined,\n        BucketKeyEnabled: undefined,\n        Key: undefined,\n        RequestCharged: undefined,\n        SSECustomerAlgorithm: undefined,\n        SSECustomerKeyMD5: undefined,\n        SSEKMSEncryptionContext: undefined,\n        SSEKMSKeyId: undefined,\n        ServerSideEncryption: undefined,\n        UploadId: undefined,\n    };\n    if (output.headers[\"x-amz-abort-date\"] !== undefined) {\n        contents.AbortDate = smithy_client_1.expectNonNull(smithy_client_1.parseRfc7231DateTime(output.headers[\"x-amz-abort-date\"]));\n    }\n    if (output.headers[\"x-amz-abort-rule-id\"] !== undefined) {\n        contents.AbortRuleId = output.headers[\"x-amz-abort-rule-id\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n        contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n        contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n        contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n        contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n        contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n        contents.BucketKeyEnabled = smithy_client_1.parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]);\n    }\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = smithy_client_1.expectString(data[\"Bucket\"]);\n    }\n    if (data[\"Key\"] !== undefined) {\n        contents.Key = smithy_client_1.expectString(data[\"Key\"]);\n    }\n    if (data[\"UploadId\"] !== undefined) {\n        contents.UploadId = smithy_client_1.expectString(data[\"UploadId\"]);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlCreateMultipartUploadCommand = deserializeAws_restXmlCreateMultipartUploadCommand;\nconst deserializeAws_restXmlCreateMultipartUploadCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteBucketCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteBucketCommand = deserializeAws_restXmlDeleteBucketCommand;\nconst deserializeAws_restXmlDeleteBucketCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand;\nconst deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteBucketCorsCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketCorsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteBucketCorsCommand = deserializeAws_restXmlDeleteBucketCorsCommand;\nconst deserializeAws_restXmlDeleteBucketCorsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteBucketEncryptionCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteBucketEncryptionCommand = deserializeAws_restXmlDeleteBucketEncryptionCommand;\nconst deserializeAws_restXmlDeleteBucketEncryptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand;\nconst deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand;\nconst deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteBucketLifecycleCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteBucketLifecycleCommand = deserializeAws_restXmlDeleteBucketLifecycleCommand;\nconst deserializeAws_restXmlDeleteBucketLifecycleCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand;\nconst deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = deserializeAws_restXmlDeleteBucketOwnershipControlsCommand;\nconst deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteBucketPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteBucketPolicyCommand = deserializeAws_restXmlDeleteBucketPolicyCommand;\nconst deserializeAws_restXmlDeleteBucketPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteBucketReplicationCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteBucketReplicationCommand = deserializeAws_restXmlDeleteBucketReplicationCommand;\nconst deserializeAws_restXmlDeleteBucketReplicationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteBucketTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteBucketTaggingCommand = deserializeAws_restXmlDeleteBucketTaggingCommand;\nconst deserializeAws_restXmlDeleteBucketTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteBucketWebsiteCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteBucketWebsiteCommand = deserializeAws_restXmlDeleteBucketWebsiteCommand;\nconst deserializeAws_restXmlDeleteBucketWebsiteCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteObjectCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteObjectCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        DeleteMarker: undefined,\n        RequestCharged: undefined,\n        VersionId: undefined,\n    };\n    if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n        contents.DeleteMarker = smithy_client_1.parseBoolean(output.headers[\"x-amz-delete-marker\"]);\n    }\n    if (output.headers[\"x-amz-version-id\"] !== undefined) {\n        contents.VersionId = output.headers[\"x-amz-version-id\"];\n    }\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteObjectCommand = deserializeAws_restXmlDeleteObjectCommand;\nconst deserializeAws_restXmlDeleteObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteObjectsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteObjectsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Deleted: undefined,\n        Errors: undefined,\n        RequestCharged: undefined,\n    };\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.Deleted === \"\") {\n        contents.Deleted = [];\n    }\n    if (data[\"Deleted\"] !== undefined) {\n        contents.Deleted = deserializeAws_restXmlDeletedObjects(smithy_client_1.getArrayIfSingleItem(data[\"Deleted\"]), context);\n    }\n    if (data.Error === \"\") {\n        contents.Errors = [];\n    }\n    if (data[\"Error\"] !== undefined) {\n        contents.Errors = deserializeAws_restXmlErrors(smithy_client_1.getArrayIfSingleItem(data[\"Error\"]), context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteObjectsCommand = deserializeAws_restXmlDeleteObjectsCommand;\nconst deserializeAws_restXmlDeleteObjectsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeleteObjectTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        VersionId: undefined,\n    };\n    if (output.headers[\"x-amz-version-id\"] !== undefined) {\n        contents.VersionId = output.headers[\"x-amz-version-id\"];\n    }\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeleteObjectTaggingCommand = deserializeAws_restXmlDeleteObjectTaggingCommand;\nconst deserializeAws_restXmlDeleteObjectTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlDeletePublicAccessBlockCommand = async (output, context) => {\n    if (output.statusCode !== 204 && output.statusCode >= 300) {\n        return deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlDeletePublicAccessBlockCommand = deserializeAws_restXmlDeletePublicAccessBlockCommand;\nconst deserializeAws_restXmlDeletePublicAccessBlockCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Status: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(data[\"Status\"]);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = deserializeAws_restXmlGetBucketAccelerateConfigurationCommand;\nconst deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketAclCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Grants: undefined,\n        Owner: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.AccessControlList === \"\") {\n        contents.Grants = [];\n    }\n    if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n        contents.Grants = deserializeAws_restXmlGrants(smithy_client_1.getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketAclCommand = deserializeAws_restXmlGetBucketAclCommand;\nconst deserializeAws_restXmlGetBucketAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        AnalyticsConfiguration: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand;\nconst deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketCorsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketCorsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        CORSRules: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.CORSRule === \"\") {\n        contents.CORSRules = [];\n    }\n    if (data[\"CORSRule\"] !== undefined) {\n        contents.CORSRules = deserializeAws_restXmlCORSRules(smithy_client_1.getArrayIfSingleItem(data[\"CORSRule\"]), context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketCorsCommand = deserializeAws_restXmlGetBucketCorsCommand;\nconst deserializeAws_restXmlGetBucketCorsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketEncryptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketEncryptionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ServerSideEncryptionConfiguration: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketEncryptionCommand = deserializeAws_restXmlGetBucketEncryptionCommand;\nconst deserializeAws_restXmlGetBucketEncryptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        IntelligentTieringConfiguration: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand;\nconst deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketInventoryConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        InventoryConfiguration: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketInventoryConfigurationCommand = deserializeAws_restXmlGetBucketInventoryConfigurationCommand;\nconst deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Rules: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.Rule === \"\") {\n        contents.Rules = [];\n    }\n    if (data[\"Rule\"] !== undefined) {\n        contents.Rules = deserializeAws_restXmlLifecycleRules(smithy_client_1.getArrayIfSingleItem(data[\"Rule\"]), context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = deserializeAws_restXmlGetBucketLifecycleConfigurationCommand;\nconst deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketLocationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketLocationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        LocationConstraint: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"LocationConstraint\"] !== undefined) {\n        contents.LocationConstraint = smithy_client_1.expectString(data[\"LocationConstraint\"]);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketLocationCommand = deserializeAws_restXmlGetBucketLocationCommand;\nconst deserializeAws_restXmlGetBucketLocationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketLoggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketLoggingCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        LoggingEnabled: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"LoggingEnabled\"] !== undefined) {\n        contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data[\"LoggingEnabled\"], context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketLoggingCommand = deserializeAws_restXmlGetBucketLoggingCommand;\nconst deserializeAws_restXmlGetBucketLoggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketMetricsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        MetricsConfiguration: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketMetricsConfigurationCommand = deserializeAws_restXmlGetBucketMetricsConfigurationCommand;\nconst deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketNotificationConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        LambdaFunctionConfigurations: undefined,\n        QueueConfigurations: undefined,\n        TopicConfigurations: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.CloudFunctionConfiguration === \"\") {\n        contents.LambdaFunctionConfigurations = [];\n    }\n    if (data[\"CloudFunctionConfiguration\"] !== undefined) {\n        contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList(smithy_client_1.getArrayIfSingleItem(data[\"CloudFunctionConfiguration\"]), context);\n    }\n    if (data.QueueConfiguration === \"\") {\n        contents.QueueConfigurations = [];\n    }\n    if (data[\"QueueConfiguration\"] !== undefined) {\n        contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList(smithy_client_1.getArrayIfSingleItem(data[\"QueueConfiguration\"]), context);\n    }\n    if (data.TopicConfiguration === \"\") {\n        contents.TopicConfigurations = [];\n    }\n    if (data[\"TopicConfiguration\"] !== undefined) {\n        contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList(smithy_client_1.getArrayIfSingleItem(data[\"TopicConfiguration\"]), context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketNotificationConfigurationCommand = deserializeAws_restXmlGetBucketNotificationConfigurationCommand;\nconst deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketOwnershipControlsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        OwnershipControls: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketOwnershipControlsCommand = deserializeAws_restXmlGetBucketOwnershipControlsCommand;\nconst deserializeAws_restXmlGetBucketOwnershipControlsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketPolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Policy: undefined,\n    };\n    const data = await collectBodyString(output.body, context);\n    contents.Policy = smithy_client_1.expectString(data);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketPolicyCommand = deserializeAws_restXmlGetBucketPolicyCommand;\nconst deserializeAws_restXmlGetBucketPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketPolicyStatusCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        PolicyStatus: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketPolicyStatusCommand = deserializeAws_restXmlGetBucketPolicyStatusCommand;\nconst deserializeAws_restXmlGetBucketPolicyStatusCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketReplicationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketReplicationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ReplicationConfiguration: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketReplicationCommand = deserializeAws_restXmlGetBucketReplicationCommand;\nconst deserializeAws_restXmlGetBucketReplicationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketRequestPaymentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Payer: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Payer\"] !== undefined) {\n        contents.Payer = smithy_client_1.expectString(data[\"Payer\"]);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketRequestPaymentCommand = deserializeAws_restXmlGetBucketRequestPaymentCommand;\nconst deserializeAws_restXmlGetBucketRequestPaymentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketTaggingCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        TagSet: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.TagSet === \"\") {\n        contents.TagSet = [];\n    }\n    if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n        contents.TagSet = deserializeAws_restXmlTagSet(smithy_client_1.getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketTaggingCommand = deserializeAws_restXmlGetBucketTaggingCommand;\nconst deserializeAws_restXmlGetBucketTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketVersioningCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketVersioningCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        MFADelete: undefined,\n        Status: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"MfaDelete\"] !== undefined) {\n        contents.MFADelete = smithy_client_1.expectString(data[\"MfaDelete\"]);\n    }\n    if (data[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(data[\"Status\"]);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketVersioningCommand = deserializeAws_restXmlGetBucketVersioningCommand;\nconst deserializeAws_restXmlGetBucketVersioningCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetBucketWebsiteCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetBucketWebsiteCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ErrorDocument: undefined,\n        IndexDocument: undefined,\n        RedirectAllRequestsTo: undefined,\n        RoutingRules: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"ErrorDocument\"] !== undefined) {\n        contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data[\"ErrorDocument\"], context);\n    }\n    if (data[\"IndexDocument\"] !== undefined) {\n        contents.IndexDocument = deserializeAws_restXmlIndexDocument(data[\"IndexDocument\"], context);\n    }\n    if (data[\"RedirectAllRequestsTo\"] !== undefined) {\n        contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(data[\"RedirectAllRequestsTo\"], context);\n    }\n    if (data.RoutingRules === \"\") {\n        contents.RoutingRules = [];\n    }\n    if (data[\"RoutingRules\"] !== undefined && data[\"RoutingRules\"][\"RoutingRule\"] !== undefined) {\n        contents.RoutingRules = deserializeAws_restXmlRoutingRules(smithy_client_1.getArrayIfSingleItem(data[\"RoutingRules\"][\"RoutingRule\"]), context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetBucketWebsiteCommand = deserializeAws_restXmlGetBucketWebsiteCommand;\nconst deserializeAws_restXmlGetBucketWebsiteCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        AcceptRanges: undefined,\n        Body: undefined,\n        BucketKeyEnabled: undefined,\n        CacheControl: undefined,\n        ContentDisposition: undefined,\n        ContentEncoding: undefined,\n        ContentLanguage: undefined,\n        ContentLength: undefined,\n        ContentRange: undefined,\n        ContentType: undefined,\n        DeleteMarker: undefined,\n        ETag: undefined,\n        Expiration: undefined,\n        Expires: undefined,\n        LastModified: undefined,\n        Metadata: undefined,\n        MissingMeta: undefined,\n        ObjectLockLegalHoldStatus: undefined,\n        ObjectLockMode: undefined,\n        ObjectLockRetainUntilDate: undefined,\n        PartsCount: undefined,\n        ReplicationStatus: undefined,\n        RequestCharged: undefined,\n        Restore: undefined,\n        SSECustomerAlgorithm: undefined,\n        SSECustomerKeyMD5: undefined,\n        SSEKMSKeyId: undefined,\n        ServerSideEncryption: undefined,\n        StorageClass: undefined,\n        TagCount: undefined,\n        VersionId: undefined,\n        WebsiteRedirectLocation: undefined,\n    };\n    if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n        contents.DeleteMarker = smithy_client_1.parseBoolean(output.headers[\"x-amz-delete-marker\"]);\n    }\n    if (output.headers[\"accept-ranges\"] !== undefined) {\n        contents.AcceptRanges = output.headers[\"accept-ranges\"];\n    }\n    if (output.headers[\"x-amz-expiration\"] !== undefined) {\n        contents.Expiration = output.headers[\"x-amz-expiration\"];\n    }\n    if (output.headers[\"x-amz-restore\"] !== undefined) {\n        contents.Restore = output.headers[\"x-amz-restore\"];\n    }\n    if (output.headers[\"last-modified\"] !== undefined) {\n        contents.LastModified = smithy_client_1.expectNonNull(smithy_client_1.parseRfc7231DateTime(output.headers[\"last-modified\"]));\n    }\n    if (output.headers[\"content-length\"] !== undefined) {\n        contents.ContentLength = smithy_client_1.strictParseLong(output.headers[\"content-length\"]);\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    if (output.headers[\"x-amz-missing-meta\"] !== undefined) {\n        contents.MissingMeta = smithy_client_1.strictParseInt32(output.headers[\"x-amz-missing-meta\"]);\n    }\n    if (output.headers[\"x-amz-version-id\"] !== undefined) {\n        contents.VersionId = output.headers[\"x-amz-version-id\"];\n    }\n    if (output.headers[\"cache-control\"] !== undefined) {\n        contents.CacheControl = output.headers[\"cache-control\"];\n    }\n    if (output.headers[\"content-disposition\"] !== undefined) {\n        contents.ContentDisposition = output.headers[\"content-disposition\"];\n    }\n    if (output.headers[\"content-encoding\"] !== undefined) {\n        contents.ContentEncoding = output.headers[\"content-encoding\"];\n    }\n    if (output.headers[\"content-language\"] !== undefined) {\n        contents.ContentLanguage = output.headers[\"content-language\"];\n    }\n    if (output.headers[\"content-range\"] !== undefined) {\n        contents.ContentRange = output.headers[\"content-range\"];\n    }\n    if (output.headers[\"content-type\"] !== undefined) {\n        contents.ContentType = output.headers[\"content-type\"];\n    }\n    if (output.headers[\"expires\"] !== undefined) {\n        contents.Expires = smithy_client_1.expectNonNull(smithy_client_1.parseRfc7231DateTime(output.headers[\"expires\"]));\n    }\n    if (output.headers[\"x-amz-website-redirect-location\"] !== undefined) {\n        contents.WebsiteRedirectLocation = output.headers[\"x-amz-website-redirect-location\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n        contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n        contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n        contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n        contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n        contents.BucketKeyEnabled = smithy_client_1.parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]);\n    }\n    if (output.headers[\"x-amz-storage-class\"] !== undefined) {\n        contents.StorageClass = output.headers[\"x-amz-storage-class\"];\n    }\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    if (output.headers[\"x-amz-replication-status\"] !== undefined) {\n        contents.ReplicationStatus = output.headers[\"x-amz-replication-status\"];\n    }\n    if (output.headers[\"x-amz-mp-parts-count\"] !== undefined) {\n        contents.PartsCount = smithy_client_1.strictParseInt32(output.headers[\"x-amz-mp-parts-count\"]);\n    }\n    if (output.headers[\"x-amz-tagging-count\"] !== undefined) {\n        contents.TagCount = smithy_client_1.strictParseInt32(output.headers[\"x-amz-tagging-count\"]);\n    }\n    if (output.headers[\"x-amz-object-lock-mode\"] !== undefined) {\n        contents.ObjectLockMode = output.headers[\"x-amz-object-lock-mode\"];\n    }\n    if (output.headers[\"x-amz-object-lock-retain-until-date\"] !== undefined) {\n        contents.ObjectLockRetainUntilDate = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output.headers[\"x-amz-object-lock-retain-until-date\"]));\n    }\n    if (output.headers[\"x-amz-object-lock-legal-hold\"] !== undefined) {\n        contents.ObjectLockLegalHoldStatus = output.headers[\"x-amz-object-lock-legal-hold\"];\n    }\n    Object.keys(output.headers).forEach((header) => {\n        if (contents.Metadata === undefined) {\n            contents.Metadata = {};\n        }\n        if (header.startsWith(\"x-amz-meta-\")) {\n            contents.Metadata[header.substring(11)] = output.headers[header];\n        }\n    });\n    const data = output.body;\n    contents.Body = data;\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetObjectCommand = deserializeAws_restXmlGetObjectCommand;\nconst deserializeAws_restXmlGetObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidObjectState\":\n        case \"com.amazonaws.s3#InvalidObjectState\":\n            response = {\n                ...(await deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetObjectAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectAclCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Grants: undefined,\n        Owner: undefined,\n        RequestCharged: undefined,\n    };\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.AccessControlList === \"\") {\n        contents.Grants = [];\n    }\n    if (data[\"AccessControlList\"] !== undefined && data[\"AccessControlList\"][\"Grant\"] !== undefined) {\n        contents.Grants = deserializeAws_restXmlGrants(smithy_client_1.getArrayIfSingleItem(data[\"AccessControlList\"][\"Grant\"]), context);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetObjectAclCommand = deserializeAws_restXmlGetObjectAclCommand;\nconst deserializeAws_restXmlGetObjectAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetObjectLegalHoldCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        LegalHold: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetObjectLegalHoldCommand = deserializeAws_restXmlGetObjectLegalHoldCommand;\nconst deserializeAws_restXmlGetObjectLegalHoldCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetObjectLockConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ObjectLockConfiguration: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetObjectLockConfigurationCommand = deserializeAws_restXmlGetObjectLockConfigurationCommand;\nconst deserializeAws_restXmlGetObjectLockConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetObjectRetentionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectRetentionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Retention: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.Retention = deserializeAws_restXmlObjectLockRetention(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetObjectRetentionCommand = deserializeAws_restXmlGetObjectRetentionCommand;\nconst deserializeAws_restXmlGetObjectRetentionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetObjectTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectTaggingCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        TagSet: undefined,\n        VersionId: undefined,\n    };\n    if (output.headers[\"x-amz-version-id\"] !== undefined) {\n        contents.VersionId = output.headers[\"x-amz-version-id\"];\n    }\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.TagSet === \"\") {\n        contents.TagSet = [];\n    }\n    if (data[\"TagSet\"] !== undefined && data[\"TagSet\"][\"Tag\"] !== undefined) {\n        contents.TagSet = deserializeAws_restXmlTagSet(smithy_client_1.getArrayIfSingleItem(data[\"TagSet\"][\"Tag\"]), context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetObjectTaggingCommand = deserializeAws_restXmlGetObjectTaggingCommand;\nconst deserializeAws_restXmlGetObjectTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetObjectTorrentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetObjectTorrentCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Body: undefined,\n        RequestCharged: undefined,\n    };\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    const data = output.body;\n    contents.Body = data;\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetObjectTorrentCommand = deserializeAws_restXmlGetObjectTorrentCommand;\nconst deserializeAws_restXmlGetObjectTorrentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlGetPublicAccessBlockCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        PublicAccessBlockConfiguration: undefined,\n    };\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlGetPublicAccessBlockCommand = deserializeAws_restXmlGetPublicAccessBlockCommand;\nconst deserializeAws_restXmlGetPublicAccessBlockCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlHeadBucketCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlHeadBucketCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlHeadBucketCommand = deserializeAws_restXmlHeadBucketCommand;\nconst deserializeAws_restXmlHeadBucketCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NotFound\":\n        case \"com.amazonaws.s3#NotFound\":\n            response = {\n                ...(await deserializeAws_restXmlNotFoundResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlHeadObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlHeadObjectCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        AcceptRanges: undefined,\n        ArchiveStatus: undefined,\n        BucketKeyEnabled: undefined,\n        CacheControl: undefined,\n        ContentDisposition: undefined,\n        ContentEncoding: undefined,\n        ContentLanguage: undefined,\n        ContentLength: undefined,\n        ContentType: undefined,\n        DeleteMarker: undefined,\n        ETag: undefined,\n        Expiration: undefined,\n        Expires: undefined,\n        LastModified: undefined,\n        Metadata: undefined,\n        MissingMeta: undefined,\n        ObjectLockLegalHoldStatus: undefined,\n        ObjectLockMode: undefined,\n        ObjectLockRetainUntilDate: undefined,\n        PartsCount: undefined,\n        ReplicationStatus: undefined,\n        RequestCharged: undefined,\n        Restore: undefined,\n        SSECustomerAlgorithm: undefined,\n        SSECustomerKeyMD5: undefined,\n        SSEKMSKeyId: undefined,\n        ServerSideEncryption: undefined,\n        StorageClass: undefined,\n        VersionId: undefined,\n        WebsiteRedirectLocation: undefined,\n    };\n    if (output.headers[\"x-amz-delete-marker\"] !== undefined) {\n        contents.DeleteMarker = smithy_client_1.parseBoolean(output.headers[\"x-amz-delete-marker\"]);\n    }\n    if (output.headers[\"accept-ranges\"] !== undefined) {\n        contents.AcceptRanges = output.headers[\"accept-ranges\"];\n    }\n    if (output.headers[\"x-amz-expiration\"] !== undefined) {\n        contents.Expiration = output.headers[\"x-amz-expiration\"];\n    }\n    if (output.headers[\"x-amz-restore\"] !== undefined) {\n        contents.Restore = output.headers[\"x-amz-restore\"];\n    }\n    if (output.headers[\"x-amz-archive-status\"] !== undefined) {\n        contents.ArchiveStatus = output.headers[\"x-amz-archive-status\"];\n    }\n    if (output.headers[\"last-modified\"] !== undefined) {\n        contents.LastModified = smithy_client_1.expectNonNull(smithy_client_1.parseRfc7231DateTime(output.headers[\"last-modified\"]));\n    }\n    if (output.headers[\"content-length\"] !== undefined) {\n        contents.ContentLength = smithy_client_1.strictParseLong(output.headers[\"content-length\"]);\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    if (output.headers[\"x-amz-missing-meta\"] !== undefined) {\n        contents.MissingMeta = smithy_client_1.strictParseInt32(output.headers[\"x-amz-missing-meta\"]);\n    }\n    if (output.headers[\"x-amz-version-id\"] !== undefined) {\n        contents.VersionId = output.headers[\"x-amz-version-id\"];\n    }\n    if (output.headers[\"cache-control\"] !== undefined) {\n        contents.CacheControl = output.headers[\"cache-control\"];\n    }\n    if (output.headers[\"content-disposition\"] !== undefined) {\n        contents.ContentDisposition = output.headers[\"content-disposition\"];\n    }\n    if (output.headers[\"content-encoding\"] !== undefined) {\n        contents.ContentEncoding = output.headers[\"content-encoding\"];\n    }\n    if (output.headers[\"content-language\"] !== undefined) {\n        contents.ContentLanguage = output.headers[\"content-language\"];\n    }\n    if (output.headers[\"content-type\"] !== undefined) {\n        contents.ContentType = output.headers[\"content-type\"];\n    }\n    if (output.headers[\"expires\"] !== undefined) {\n        contents.Expires = smithy_client_1.expectNonNull(smithy_client_1.parseRfc7231DateTime(output.headers[\"expires\"]));\n    }\n    if (output.headers[\"x-amz-website-redirect-location\"] !== undefined) {\n        contents.WebsiteRedirectLocation = output.headers[\"x-amz-website-redirect-location\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n        contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n        contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n        contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n        contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n        contents.BucketKeyEnabled = smithy_client_1.parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]);\n    }\n    if (output.headers[\"x-amz-storage-class\"] !== undefined) {\n        contents.StorageClass = output.headers[\"x-amz-storage-class\"];\n    }\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    if (output.headers[\"x-amz-replication-status\"] !== undefined) {\n        contents.ReplicationStatus = output.headers[\"x-amz-replication-status\"];\n    }\n    if (output.headers[\"x-amz-mp-parts-count\"] !== undefined) {\n        contents.PartsCount = smithy_client_1.strictParseInt32(output.headers[\"x-amz-mp-parts-count\"]);\n    }\n    if (output.headers[\"x-amz-object-lock-mode\"] !== undefined) {\n        contents.ObjectLockMode = output.headers[\"x-amz-object-lock-mode\"];\n    }\n    if (output.headers[\"x-amz-object-lock-retain-until-date\"] !== undefined) {\n        contents.ObjectLockRetainUntilDate = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output.headers[\"x-amz-object-lock-retain-until-date\"]));\n    }\n    if (output.headers[\"x-amz-object-lock-legal-hold\"] !== undefined) {\n        contents.ObjectLockLegalHoldStatus = output.headers[\"x-amz-object-lock-legal-hold\"];\n    }\n    Object.keys(output.headers).forEach((header) => {\n        if (contents.Metadata === undefined) {\n            contents.Metadata = {};\n        }\n        if (header.startsWith(\"x-amz-meta-\")) {\n            contents.Metadata[header.substring(11)] = output.headers[header];\n        }\n    });\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlHeadObjectCommand = deserializeAws_restXmlHeadObjectCommand;\nconst deserializeAws_restXmlHeadObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NotFound\":\n        case \"com.amazonaws.s3#NotFound\":\n            response = {\n                ...(await deserializeAws_restXmlNotFoundResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        AnalyticsConfigurationList: undefined,\n        ContinuationToken: undefined,\n        IsTruncated: undefined,\n        NextContinuationToken: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.AnalyticsConfiguration === \"\") {\n        contents.AnalyticsConfigurationList = [];\n    }\n    if (data[\"AnalyticsConfiguration\"] !== undefined) {\n        contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList(smithy_client_1.getArrayIfSingleItem(data[\"AnalyticsConfiguration\"]), context);\n    }\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = smithy_client_1.expectString(data[\"ContinuationToken\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = smithy_client_1.expectString(data[\"NextContinuationToken\"]);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand;\nconst deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ContinuationToken: undefined,\n        IntelligentTieringConfigurationList: undefined,\n        IsTruncated: undefined,\n        NextContinuationToken: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = smithy_client_1.expectString(data[\"ContinuationToken\"]);\n    }\n    if (data.IntelligentTieringConfiguration === \"\") {\n        contents.IntelligentTieringConfigurationList = [];\n    }\n    if (data[\"IntelligentTieringConfiguration\"] !== undefined) {\n        contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList(smithy_client_1.getArrayIfSingleItem(data[\"IntelligentTieringConfiguration\"]), context);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = smithy_client_1.expectString(data[\"NextContinuationToken\"]);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand;\nconst deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListBucketInventoryConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ContinuationToken: undefined,\n        InventoryConfigurationList: undefined,\n        IsTruncated: undefined,\n        NextContinuationToken: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = smithy_client_1.expectString(data[\"ContinuationToken\"]);\n    }\n    if (data.InventoryConfiguration === \"\") {\n        contents.InventoryConfigurationList = [];\n    }\n    if (data[\"InventoryConfiguration\"] !== undefined) {\n        contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList(smithy_client_1.getArrayIfSingleItem(data[\"InventoryConfiguration\"]), context);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = smithy_client_1.expectString(data[\"NextContinuationToken\"]);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListBucketInventoryConfigurationsCommand = deserializeAws_restXmlListBucketInventoryConfigurationsCommand;\nconst deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListBucketMetricsConfigurationsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        ContinuationToken: undefined,\n        IsTruncated: undefined,\n        MetricsConfigurationList: undefined,\n        NextContinuationToken: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = smithy_client_1.expectString(data[\"ContinuationToken\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data.MetricsConfiguration === \"\") {\n        contents.MetricsConfigurationList = [];\n    }\n    if (data[\"MetricsConfiguration\"] !== undefined) {\n        contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList(smithy_client_1.getArrayIfSingleItem(data[\"MetricsConfiguration\"]), context);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = smithy_client_1.expectString(data[\"NextContinuationToken\"]);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListBucketMetricsConfigurationsCommand = deserializeAws_restXmlListBucketMetricsConfigurationsCommand;\nconst deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListBucketsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListBucketsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Buckets: undefined,\n        Owner: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.Buckets === \"\") {\n        contents.Buckets = [];\n    }\n    if (data[\"Buckets\"] !== undefined && data[\"Buckets\"][\"Bucket\"] !== undefined) {\n        contents.Buckets = deserializeAws_restXmlBuckets(smithy_client_1.getArrayIfSingleItem(data[\"Buckets\"][\"Bucket\"]), context);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListBucketsCommand = deserializeAws_restXmlListBucketsCommand;\nconst deserializeAws_restXmlListBucketsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListMultipartUploadsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListMultipartUploadsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Bucket: undefined,\n        CommonPrefixes: undefined,\n        Delimiter: undefined,\n        EncodingType: undefined,\n        IsTruncated: undefined,\n        KeyMarker: undefined,\n        MaxUploads: undefined,\n        NextKeyMarker: undefined,\n        NextUploadIdMarker: undefined,\n        Prefix: undefined,\n        UploadIdMarker: undefined,\n        Uploads: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = smithy_client_1.expectString(data[\"Bucket\"]);\n    }\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(smithy_client_1.getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = smithy_client_1.expectString(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = smithy_client_1.expectString(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"KeyMarker\"] !== undefined) {\n        contents.KeyMarker = smithy_client_1.expectString(data[\"KeyMarker\"]);\n    }\n    if (data[\"MaxUploads\"] !== undefined) {\n        contents.MaxUploads = smithy_client_1.strictParseInt32(data[\"MaxUploads\"]);\n    }\n    if (data[\"NextKeyMarker\"] !== undefined) {\n        contents.NextKeyMarker = smithy_client_1.expectString(data[\"NextKeyMarker\"]);\n    }\n    if (data[\"NextUploadIdMarker\"] !== undefined) {\n        contents.NextUploadIdMarker = smithy_client_1.expectString(data[\"NextUploadIdMarker\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(data[\"Prefix\"]);\n    }\n    if (data[\"UploadIdMarker\"] !== undefined) {\n        contents.UploadIdMarker = smithy_client_1.expectString(data[\"UploadIdMarker\"]);\n    }\n    if (data.Upload === \"\") {\n        contents.Uploads = [];\n    }\n    if (data[\"Upload\"] !== undefined) {\n        contents.Uploads = deserializeAws_restXmlMultipartUploadList(smithy_client_1.getArrayIfSingleItem(data[\"Upload\"]), context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListMultipartUploadsCommand = deserializeAws_restXmlListMultipartUploadsCommand;\nconst deserializeAws_restXmlListMultipartUploadsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListObjectsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListObjectsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        CommonPrefixes: undefined,\n        Contents: undefined,\n        Delimiter: undefined,\n        EncodingType: undefined,\n        IsTruncated: undefined,\n        Marker: undefined,\n        MaxKeys: undefined,\n        Name: undefined,\n        NextMarker: undefined,\n        Prefix: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(smithy_client_1.getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n    }\n    if (data.Contents === \"\") {\n        contents.Contents = [];\n    }\n    if (data[\"Contents\"] !== undefined) {\n        contents.Contents = deserializeAws_restXmlObjectList(smithy_client_1.getArrayIfSingleItem(data[\"Contents\"]), context);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = smithy_client_1.expectString(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = smithy_client_1.expectString(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"Marker\"] !== undefined) {\n        contents.Marker = smithy_client_1.expectString(data[\"Marker\"]);\n    }\n    if (data[\"MaxKeys\"] !== undefined) {\n        contents.MaxKeys = smithy_client_1.strictParseInt32(data[\"MaxKeys\"]);\n    }\n    if (data[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(data[\"Name\"]);\n    }\n    if (data[\"NextMarker\"] !== undefined) {\n        contents.NextMarker = smithy_client_1.expectString(data[\"NextMarker\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(data[\"Prefix\"]);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListObjectsCommand = deserializeAws_restXmlListObjectsCommand;\nconst deserializeAws_restXmlListObjectsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchBucket\":\n        case \"com.amazonaws.s3#NoSuchBucket\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListObjectsV2Command = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListObjectsV2CommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        CommonPrefixes: undefined,\n        Contents: undefined,\n        ContinuationToken: undefined,\n        Delimiter: undefined,\n        EncodingType: undefined,\n        IsTruncated: undefined,\n        KeyCount: undefined,\n        MaxKeys: undefined,\n        Name: undefined,\n        NextContinuationToken: undefined,\n        Prefix: undefined,\n        StartAfter: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(smithy_client_1.getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n    }\n    if (data.Contents === \"\") {\n        contents.Contents = [];\n    }\n    if (data[\"Contents\"] !== undefined) {\n        contents.Contents = deserializeAws_restXmlObjectList(smithy_client_1.getArrayIfSingleItem(data[\"Contents\"]), context);\n    }\n    if (data[\"ContinuationToken\"] !== undefined) {\n        contents.ContinuationToken = smithy_client_1.expectString(data[\"ContinuationToken\"]);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = smithy_client_1.expectString(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = smithy_client_1.expectString(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"KeyCount\"] !== undefined) {\n        contents.KeyCount = smithy_client_1.strictParseInt32(data[\"KeyCount\"]);\n    }\n    if (data[\"MaxKeys\"] !== undefined) {\n        contents.MaxKeys = smithy_client_1.strictParseInt32(data[\"MaxKeys\"]);\n    }\n    if (data[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(data[\"Name\"]);\n    }\n    if (data[\"NextContinuationToken\"] !== undefined) {\n        contents.NextContinuationToken = smithy_client_1.expectString(data[\"NextContinuationToken\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(data[\"Prefix\"]);\n    }\n    if (data[\"StartAfter\"] !== undefined) {\n        contents.StartAfter = smithy_client_1.expectString(data[\"StartAfter\"]);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListObjectsV2Command = deserializeAws_restXmlListObjectsV2Command;\nconst deserializeAws_restXmlListObjectsV2CommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchBucket\":\n        case \"com.amazonaws.s3#NoSuchBucket\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListObjectVersionsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListObjectVersionsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        CommonPrefixes: undefined,\n        DeleteMarkers: undefined,\n        Delimiter: undefined,\n        EncodingType: undefined,\n        IsTruncated: undefined,\n        KeyMarker: undefined,\n        MaxKeys: undefined,\n        Name: undefined,\n        NextKeyMarker: undefined,\n        NextVersionIdMarker: undefined,\n        Prefix: undefined,\n        VersionIdMarker: undefined,\n        Versions: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.CommonPrefixes === \"\") {\n        contents.CommonPrefixes = [];\n    }\n    if (data[\"CommonPrefixes\"] !== undefined) {\n        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList(smithy_client_1.getArrayIfSingleItem(data[\"CommonPrefixes\"]), context);\n    }\n    if (data.DeleteMarker === \"\") {\n        contents.DeleteMarkers = [];\n    }\n    if (data[\"DeleteMarker\"] !== undefined) {\n        contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers(smithy_client_1.getArrayIfSingleItem(data[\"DeleteMarker\"]), context);\n    }\n    if (data[\"Delimiter\"] !== undefined) {\n        contents.Delimiter = smithy_client_1.expectString(data[\"Delimiter\"]);\n    }\n    if (data[\"EncodingType\"] !== undefined) {\n        contents.EncodingType = smithy_client_1.expectString(data[\"EncodingType\"]);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"KeyMarker\"] !== undefined) {\n        contents.KeyMarker = smithy_client_1.expectString(data[\"KeyMarker\"]);\n    }\n    if (data[\"MaxKeys\"] !== undefined) {\n        contents.MaxKeys = smithy_client_1.strictParseInt32(data[\"MaxKeys\"]);\n    }\n    if (data[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(data[\"Name\"]);\n    }\n    if (data[\"NextKeyMarker\"] !== undefined) {\n        contents.NextKeyMarker = smithy_client_1.expectString(data[\"NextKeyMarker\"]);\n    }\n    if (data[\"NextVersionIdMarker\"] !== undefined) {\n        contents.NextVersionIdMarker = smithy_client_1.expectString(data[\"NextVersionIdMarker\"]);\n    }\n    if (data[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(data[\"Prefix\"]);\n    }\n    if (data[\"VersionIdMarker\"] !== undefined) {\n        contents.VersionIdMarker = smithy_client_1.expectString(data[\"VersionIdMarker\"]);\n    }\n    if (data.Version === \"\") {\n        contents.Versions = [];\n    }\n    if (data[\"Version\"] !== undefined) {\n        contents.Versions = deserializeAws_restXmlObjectVersionList(smithy_client_1.getArrayIfSingleItem(data[\"Version\"]), context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListObjectVersionsCommand = deserializeAws_restXmlListObjectVersionsCommand;\nconst deserializeAws_restXmlListObjectVersionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlListPartsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlListPartsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        AbortDate: undefined,\n        AbortRuleId: undefined,\n        Bucket: undefined,\n        Initiator: undefined,\n        IsTruncated: undefined,\n        Key: undefined,\n        MaxParts: undefined,\n        NextPartNumberMarker: undefined,\n        Owner: undefined,\n        PartNumberMarker: undefined,\n        Parts: undefined,\n        RequestCharged: undefined,\n        StorageClass: undefined,\n        UploadId: undefined,\n    };\n    if (output.headers[\"x-amz-abort-date\"] !== undefined) {\n        contents.AbortDate = smithy_client_1.expectNonNull(smithy_client_1.parseRfc7231DateTime(output.headers[\"x-amz-abort-date\"]));\n    }\n    if (output.headers[\"x-amz-abort-rule-id\"] !== undefined) {\n        contents.AbortRuleId = output.headers[\"x-amz-abort-rule-id\"];\n    }\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data[\"Bucket\"] !== undefined) {\n        contents.Bucket = smithy_client_1.expectString(data[\"Bucket\"]);\n    }\n    if (data[\"Initiator\"] !== undefined) {\n        contents.Initiator = deserializeAws_restXmlInitiator(data[\"Initiator\"], context);\n    }\n    if (data[\"IsTruncated\"] !== undefined) {\n        contents.IsTruncated = smithy_client_1.parseBoolean(data[\"IsTruncated\"]);\n    }\n    if (data[\"Key\"] !== undefined) {\n        contents.Key = smithy_client_1.expectString(data[\"Key\"]);\n    }\n    if (data[\"MaxParts\"] !== undefined) {\n        contents.MaxParts = smithy_client_1.strictParseInt32(data[\"MaxParts\"]);\n    }\n    if (data[\"NextPartNumberMarker\"] !== undefined) {\n        contents.NextPartNumberMarker = smithy_client_1.expectString(data[\"NextPartNumberMarker\"]);\n    }\n    if (data[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(data[\"Owner\"], context);\n    }\n    if (data[\"PartNumberMarker\"] !== undefined) {\n        contents.PartNumberMarker = smithy_client_1.expectString(data[\"PartNumberMarker\"]);\n    }\n    if (data.Part === \"\") {\n        contents.Parts = [];\n    }\n    if (data[\"Part\"] !== undefined) {\n        contents.Parts = deserializeAws_restXmlParts(smithy_client_1.getArrayIfSingleItem(data[\"Part\"]), context);\n    }\n    if (data[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = smithy_client_1.expectString(data[\"StorageClass\"]);\n    }\n    if (data[\"UploadId\"] !== undefined) {\n        contents.UploadId = smithy_client_1.expectString(data[\"UploadId\"]);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlListPartsCommand = deserializeAws_restXmlListPartsCommand;\nconst deserializeAws_restXmlListPartsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = deserializeAws_restXmlPutBucketAccelerateConfigurationCommand;\nconst deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketAclCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketAclCommand = deserializeAws_restXmlPutBucketAclCommand;\nconst deserializeAws_restXmlPutBucketAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand;\nconst deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketCorsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketCorsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketCorsCommand = deserializeAws_restXmlPutBucketCorsCommand;\nconst deserializeAws_restXmlPutBucketCorsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketEncryptionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketEncryptionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketEncryptionCommand = deserializeAws_restXmlPutBucketEncryptionCommand;\nconst deserializeAws_restXmlPutBucketEncryptionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand;\nconst deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketInventoryConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketInventoryConfigurationCommand = deserializeAws_restXmlPutBucketInventoryConfigurationCommand;\nconst deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = deserializeAws_restXmlPutBucketLifecycleConfigurationCommand;\nconst deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketLoggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketLoggingCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketLoggingCommand = deserializeAws_restXmlPutBucketLoggingCommand;\nconst deserializeAws_restXmlPutBucketLoggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketMetricsConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketMetricsConfigurationCommand = deserializeAws_restXmlPutBucketMetricsConfigurationCommand;\nconst deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketNotificationConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketNotificationConfigurationCommand = deserializeAws_restXmlPutBucketNotificationConfigurationCommand;\nconst deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketOwnershipControlsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketOwnershipControlsCommand = deserializeAws_restXmlPutBucketOwnershipControlsCommand;\nconst deserializeAws_restXmlPutBucketOwnershipControlsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketPolicyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketPolicyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketPolicyCommand = deserializeAws_restXmlPutBucketPolicyCommand;\nconst deserializeAws_restXmlPutBucketPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketReplicationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketReplicationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketReplicationCommand = deserializeAws_restXmlPutBucketReplicationCommand;\nconst deserializeAws_restXmlPutBucketReplicationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketRequestPaymentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketRequestPaymentCommand = deserializeAws_restXmlPutBucketRequestPaymentCommand;\nconst deserializeAws_restXmlPutBucketRequestPaymentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketTaggingCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketTaggingCommand = deserializeAws_restXmlPutBucketTaggingCommand;\nconst deserializeAws_restXmlPutBucketTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketVersioningCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketVersioningCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketVersioningCommand = deserializeAws_restXmlPutBucketVersioningCommand;\nconst deserializeAws_restXmlPutBucketVersioningCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutBucketWebsiteCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutBucketWebsiteCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutBucketWebsiteCommand = deserializeAws_restXmlPutBucketWebsiteCommand;\nconst deserializeAws_restXmlPutBucketWebsiteCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        BucketKeyEnabled: undefined,\n        ETag: undefined,\n        Expiration: undefined,\n        RequestCharged: undefined,\n        SSECustomerAlgorithm: undefined,\n        SSECustomerKeyMD5: undefined,\n        SSEKMSEncryptionContext: undefined,\n        SSEKMSKeyId: undefined,\n        ServerSideEncryption: undefined,\n        VersionId: undefined,\n    };\n    if (output.headers[\"x-amz-expiration\"] !== undefined) {\n        contents.Expiration = output.headers[\"x-amz-expiration\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n        contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n    }\n    if (output.headers[\"x-amz-version-id\"] !== undefined) {\n        contents.VersionId = output.headers[\"x-amz-version-id\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n        contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n        contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n        contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-context\"] !== undefined) {\n        contents.SSEKMSEncryptionContext = output.headers[\"x-amz-server-side-encryption-context\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n        contents.BucketKeyEnabled = smithy_client_1.parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]);\n    }\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutObjectCommand = deserializeAws_restXmlPutObjectCommand;\nconst deserializeAws_restXmlPutObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutObjectAclCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectAclCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        RequestCharged: undefined,\n    };\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutObjectAclCommand = deserializeAws_restXmlPutObjectAclCommand;\nconst deserializeAws_restXmlPutObjectAclCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"NoSuchKey\":\n        case \"com.amazonaws.s3#NoSuchKey\":\n            response = {\n                ...(await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutObjectLegalHoldCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        RequestCharged: undefined,\n    };\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutObjectLegalHoldCommand = deserializeAws_restXmlPutObjectLegalHoldCommand;\nconst deserializeAws_restXmlPutObjectLegalHoldCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutObjectLockConfigurationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        RequestCharged: undefined,\n    };\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutObjectLockConfigurationCommand = deserializeAws_restXmlPutObjectLockConfigurationCommand;\nconst deserializeAws_restXmlPutObjectLockConfigurationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutObjectRetentionCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectRetentionCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        RequestCharged: undefined,\n    };\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutObjectRetentionCommand = deserializeAws_restXmlPutObjectRetentionCommand;\nconst deserializeAws_restXmlPutObjectRetentionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutObjectTaggingCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutObjectTaggingCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        VersionId: undefined,\n    };\n    if (output.headers[\"x-amz-version-id\"] !== undefined) {\n        contents.VersionId = output.headers[\"x-amz-version-id\"];\n    }\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutObjectTaggingCommand = deserializeAws_restXmlPutObjectTaggingCommand;\nconst deserializeAws_restXmlPutObjectTaggingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlPutPublicAccessBlockCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlPutPublicAccessBlockCommand = deserializeAws_restXmlPutPublicAccessBlockCommand;\nconst deserializeAws_restXmlPutPublicAccessBlockCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlRestoreObjectCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlRestoreObjectCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        RequestCharged: undefined,\n        RestoreOutputPath: undefined,\n    };\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    if (output.headers[\"x-amz-restore-output-path\"] !== undefined) {\n        contents.RestoreOutputPath = output.headers[\"x-amz-restore-output-path\"];\n    }\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlRestoreObjectCommand = deserializeAws_restXmlRestoreObjectCommand;\nconst deserializeAws_restXmlRestoreObjectCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ObjectAlreadyInActiveTierError\":\n        case \"com.amazonaws.s3#ObjectAlreadyInActiveTierError\":\n            response = {\n                ...(await deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlSelectObjectContentCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlSelectObjectContentCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        Payload: undefined,\n    };\n    const data = context.eventStreamMarshaller.deserialize(output.body, async (event) => {\n        const eventName = Object.keys(event)[0];\n        const eventHeaders = Object.entries(event[eventName].headers).reduce((accummulator, curr) => {\n            accummulator[curr[0]] = curr[1].value;\n            return accummulator;\n        }, {});\n        const eventMessage = {\n            headers: eventHeaders,\n            body: event[eventName].body,\n        };\n        const parsedEvent = {\n            [eventName]: eventMessage,\n        };\n        return await deserializeAws_restXmlSelectObjectContentEventStream_event(parsedEvent, context);\n    });\n    contents.Payload = data;\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlSelectObjectContentCommand = deserializeAws_restXmlSelectObjectContentCommand;\nconst deserializeAws_restXmlSelectObjectContentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUploadPartCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUploadPartCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        BucketKeyEnabled: undefined,\n        ETag: undefined,\n        RequestCharged: undefined,\n        SSECustomerAlgorithm: undefined,\n        SSECustomerKeyMD5: undefined,\n        SSEKMSKeyId: undefined,\n        ServerSideEncryption: undefined,\n    };\n    if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n        contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n    }\n    if (output.headers[\"etag\"] !== undefined) {\n        contents.ETag = output.headers[\"etag\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n        contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n        contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n        contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n        contents.BucketKeyEnabled = smithy_client_1.parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]);\n    }\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUploadPartCommand = deserializeAws_restXmlUploadPartCommand;\nconst deserializeAws_restXmlUploadPartCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlUploadPartCopyCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlUploadPartCopyCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        BucketKeyEnabled: undefined,\n        CopyPartResult: undefined,\n        CopySourceVersionId: undefined,\n        RequestCharged: undefined,\n        SSECustomerAlgorithm: undefined,\n        SSECustomerKeyMD5: undefined,\n        SSEKMSKeyId: undefined,\n        ServerSideEncryption: undefined,\n    };\n    if (output.headers[\"x-amz-copy-source-version-id\"] !== undefined) {\n        contents.CopySourceVersionId = output.headers[\"x-amz-copy-source-version-id\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption\"] !== undefined) {\n        contents.ServerSideEncryption = output.headers[\"x-amz-server-side-encryption\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-customer-algorithm\"] !== undefined) {\n        contents.SSECustomerAlgorithm = output.headers[\"x-amz-server-side-encryption-customer-algorithm\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-customer-key-md5\"] !== undefined) {\n        contents.SSECustomerKeyMD5 = output.headers[\"x-amz-server-side-encryption-customer-key-md5\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"] !== undefined) {\n        contents.SSEKMSKeyId = output.headers[\"x-amz-server-side-encryption-aws-kms-key-id\"];\n    }\n    if (output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"] !== undefined) {\n        contents.BucketKeyEnabled = smithy_client_1.parseBoolean(output.headers[\"x-amz-server-side-encryption-bucket-key-enabled\"]);\n    }\n    if (output.headers[\"x-amz-request-charged\"] !== undefined) {\n        contents.RequestCharged = output.headers[\"x-amz-request-charged\"];\n    }\n    const data = smithy_client_1.expectObject(await parseBody(output.body, context));\n    contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlUploadPartCopyCommand = deserializeAws_restXmlUploadPartCopyCommand;\nconst deserializeAws_restXmlUploadPartCopyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlWriteGetObjectResponseCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restXmlWriteGetObjectResponseCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restXmlWriteGetObjectResponseCommand = deserializeAws_restXmlWriteGetObjectResponseCommand;\nconst deserializeAws_restXmlWriteGetObjectResponseCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restXmlSelectObjectContentEventStream_event = async (output, context) => {\n    if (output[\"Records\"] !== undefined) {\n        return {\n            Records: await deserializeAws_restXmlRecordsEvent_event(output[\"Records\"], context),\n        };\n    }\n    if (output[\"Stats\"] !== undefined) {\n        return {\n            Stats: await deserializeAws_restXmlStatsEvent_event(output[\"Stats\"], context),\n        };\n    }\n    if (output[\"Progress\"] !== undefined) {\n        return {\n            Progress: await deserializeAws_restXmlProgressEvent_event(output[\"Progress\"], context),\n        };\n    }\n    if (output[\"Cont\"] !== undefined) {\n        return {\n            Cont: await deserializeAws_restXmlContinuationEvent_event(output[\"Cont\"], context),\n        };\n    }\n    if (output[\"End\"] !== undefined) {\n        return {\n            End: await deserializeAws_restXmlEndEvent_event(output[\"End\"], context),\n        };\n    }\n    return { $unknown: output };\n};\nconst deserializeAws_restXmlContinuationEvent_event = async (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst deserializeAws_restXmlEndEvent_event = async (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst deserializeAws_restXmlProgressEvent_event = async (output, context) => {\n    const contents = {};\n    contents.Details = await parseBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlRecordsEvent_event = async (output, context) => {\n    const contents = {};\n    contents.Payload = output.body;\n    return contents;\n};\nconst deserializeAws_restXmlStatsEvent_event = async (output, context) => {\n    const contents = {};\n    contents.Details = await parseBody(output.body, context);\n    return contents;\n};\nconst deserializeAws_restXmlBucketAlreadyExistsResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"BucketAlreadyExists\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n    };\n    const data = parsedOutput.body;\n    return contents;\n};\nconst deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"BucketAlreadyOwnedByYou\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n    };\n    const data = parsedOutput.body;\n    return contents;\n};\nconst deserializeAws_restXmlInvalidObjectStateResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidObjectState\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        AccessTier: undefined,\n        StorageClass: undefined,\n    };\n    const data = parsedOutput.body;\n    if (data[\"AccessTier\"] !== undefined) {\n        contents.AccessTier = smithy_client_1.expectString(data[\"AccessTier\"]);\n    }\n    if (data[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = smithy_client_1.expectString(data[\"StorageClass\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchBucketResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchBucket\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n    };\n    const data = parsedOutput.body;\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchKeyResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchKey\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n    };\n    const data = parsedOutput.body;\n    return contents;\n};\nconst deserializeAws_restXmlNoSuchUploadResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NoSuchUpload\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n    };\n    const data = parsedOutput.body;\n    return contents;\n};\nconst deserializeAws_restXmlNotFoundResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"NotFound\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n    };\n    const data = parsedOutput.body;\n    return contents;\n};\nconst deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"ObjectAlreadyInActiveTierError\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n    };\n    const data = parsedOutput.body;\n    return contents;\n};\nconst deserializeAws_restXmlObjectNotInActiveTierErrorResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"ObjectNotInActiveTierError\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n    };\n    const data = parsedOutput.body;\n    return contents;\n};\nconst serializeAws_restXmlAbortIncompleteMultipartUpload = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"AbortIncompleteMultipartUpload\");\n    if (input.DaysAfterInitiation !== undefined && input.DaysAfterInitiation !== null) {\n        const node = new xml_builder_1.XmlNode(\"DaysAfterInitiation\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.DaysAfterInitiation)))\n            .withName(\"DaysAfterInitiation\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAccelerateConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"AccelerateConfiguration\");\n    if (input.Status !== undefined && input.Status !== null) {\n        const node = new xml_builder_1.XmlNode(\"BucketAccelerateStatus\").addChildNode(new xml_builder_1.XmlText(input.Status)).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAccessControlPolicy = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"AccessControlPolicy\");\n    if (input.Grants !== undefined && input.Grants !== null) {\n        const nodes = serializeAws_restXmlGrants(input.Grants, context);\n        const containerNode = new xml_builder_1.XmlNode(\"AccessControlList\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Owner !== undefined && input.Owner !== null) {\n        const node = serializeAws_restXmlOwner(input.Owner, context).withName(\"Owner\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAccessControlTranslation = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"AccessControlTranslation\");\n    if (input.Owner !== undefined && input.Owner !== null) {\n        const node = new xml_builder_1.XmlNode(\"OwnerOverride\").addChildNode(new xml_builder_1.XmlText(input.Owner)).withName(\"Owner\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAllowedHeaders = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"AllowedHeader\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlAllowedMethods = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"AllowedMethod\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlAllowedOrigins = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"AllowedOrigin\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlAnalyticsAndOperator = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"AnalyticsAndOperator\");\n    if (input.Prefix !== undefined && input.Prefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags !== undefined && input.Tags !== null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"AnalyticsConfiguration\");\n    if (input.Id !== undefined && input.Id !== null) {\n        const node = new xml_builder_1.XmlNode(\"AnalyticsId\").addChildNode(new xml_builder_1.XmlText(input.Id)).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter !== undefined && input.Filter !== null) {\n        const node = serializeAws_restXmlAnalyticsFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClassAnalysis !== undefined && input.StorageClassAnalysis !== null) {\n        const node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis, context).withName(\"StorageClassAnalysis\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsExportDestination = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"AnalyticsExportDestination\");\n    if (input.S3BucketDestination !== undefined && input.S3BucketDestination !== null) {\n        const node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsFilter = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"AnalyticsFilter\");\n    models_0_1.AnalyticsFilter.visit(input, {\n        Prefix: (value) => {\n            const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(value)).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = serializeAws_restXmlAnalyticsAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst serializeAws_restXmlAnalyticsS3BucketDestination = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"AnalyticsS3BucketDestination\");\n    if (input.Format !== undefined && input.Format !== null) {\n        const node = new xml_builder_1.XmlNode(\"AnalyticsS3ExportFileFormat\")\n            .addChildNode(new xml_builder_1.XmlText(input.Format))\n            .withName(\"Format\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.BucketAccountId !== undefined && input.BucketAccountId !== null) {\n        const node = new xml_builder_1.XmlNode(\"AccountId\")\n            .addChildNode(new xml_builder_1.XmlText(input.BucketAccountId))\n            .withName(\"BucketAccountId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Bucket !== undefined && input.Bucket !== null) {\n        const node = new xml_builder_1.XmlNode(\"BucketName\").addChildNode(new xml_builder_1.XmlText(input.Bucket)).withName(\"Bucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix !== undefined && input.Prefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlBucketLifecycleConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"BucketLifecycleConfiguration\");\n    if (input.Rules !== undefined && input.Rules !== null) {\n        const nodes = serializeAws_restXmlLifecycleRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlBucketLoggingStatus = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"BucketLoggingStatus\");\n    if (input.LoggingEnabled !== undefined && input.LoggingEnabled !== null) {\n        const node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled, context).withName(\"LoggingEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCompletedMultipartUpload = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CompletedMultipartUpload\");\n    if (input.Parts !== undefined && input.Parts !== null) {\n        const nodes = serializeAws_restXmlCompletedPartList(input.Parts, context);\n        nodes.map((node) => {\n            node = node.withName(\"Part\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCompletedPart = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CompletedPart\");\n    if (input.ETag !== undefined && input.ETag !== null) {\n        const node = new xml_builder_1.XmlNode(\"ETag\").addChildNode(new xml_builder_1.XmlText(input.ETag)).withName(\"ETag\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.PartNumber !== undefined && input.PartNumber !== null) {\n        const node = new xml_builder_1.XmlNode(\"PartNumber\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.PartNumber)))\n            .withName(\"PartNumber\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCompletedPartList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlCompletedPart(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlCondition = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Condition\");\n    if (input.HttpErrorCodeReturnedEquals !== undefined && input.HttpErrorCodeReturnedEquals !== null) {\n        const node = new xml_builder_1.XmlNode(\"HttpErrorCodeReturnedEquals\")\n            .addChildNode(new xml_builder_1.XmlText(input.HttpErrorCodeReturnedEquals))\n            .withName(\"HttpErrorCodeReturnedEquals\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KeyPrefixEquals !== undefined && input.KeyPrefixEquals !== null) {\n        const node = new xml_builder_1.XmlNode(\"KeyPrefixEquals\")\n            .addChildNode(new xml_builder_1.XmlText(input.KeyPrefixEquals))\n            .withName(\"KeyPrefixEquals\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCORSConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CORSConfiguration\");\n    if (input.CORSRules !== undefined && input.CORSRules !== null) {\n        const nodes = serializeAws_restXmlCORSRules(input.CORSRules, context);\n        nodes.map((node) => {\n            node = node.withName(\"CORSRule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCORSRule = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CORSRule\");\n    if (input.ID !== undefined && input.ID !== null) {\n        const node = new xml_builder_1.XmlNode(\"ID\").addChildNode(new xml_builder_1.XmlText(input.ID)).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AllowedHeaders !== undefined && input.AllowedHeaders !== null) {\n        const nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders, context);\n        nodes.map((node) => {\n            node = node.withName(\"AllowedHeader\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.AllowedMethods !== undefined && input.AllowedMethods !== null) {\n        const nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context);\n        nodes.map((node) => {\n            node = node.withName(\"AllowedMethod\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.AllowedOrigins !== undefined && input.AllowedOrigins !== null) {\n        const nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins, context);\n        nodes.map((node) => {\n            node = node.withName(\"AllowedOrigin\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.ExposeHeaders !== undefined && input.ExposeHeaders !== null) {\n        const nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders, context);\n        nodes.map((node) => {\n            node = node.withName(\"ExposeHeader\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.MaxAgeSeconds !== undefined && input.MaxAgeSeconds !== null) {\n        const node = new xml_builder_1.XmlNode(\"MaxAgeSeconds\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.MaxAgeSeconds)))\n            .withName(\"MaxAgeSeconds\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCORSRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlCORSRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlCreateBucketConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CreateBucketConfiguration\");\n    if (input.LocationConstraint !== undefined && input.LocationConstraint !== null) {\n        const node = new xml_builder_1.XmlNode(\"BucketLocationConstraint\")\n            .addChildNode(new xml_builder_1.XmlText(input.LocationConstraint))\n            .withName(\"LocationConstraint\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCSVInput = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CSVInput\");\n    if (input.FileHeaderInfo !== undefined && input.FileHeaderInfo !== null) {\n        const node = new xml_builder_1.XmlNode(\"FileHeaderInfo\")\n            .addChildNode(new xml_builder_1.XmlText(input.FileHeaderInfo))\n            .withName(\"FileHeaderInfo\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Comments !== undefined && input.Comments !== null) {\n        const node = new xml_builder_1.XmlNode(\"Comments\").addChildNode(new xml_builder_1.XmlText(input.Comments)).withName(\"Comments\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteEscapeCharacter !== undefined && input.QuoteEscapeCharacter !== null) {\n        const node = new xml_builder_1.XmlNode(\"QuoteEscapeCharacter\")\n            .addChildNode(new xml_builder_1.XmlText(input.QuoteEscapeCharacter))\n            .withName(\"QuoteEscapeCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n        const node = new xml_builder_1.XmlNode(\"RecordDelimiter\")\n            .addChildNode(new xml_builder_1.XmlText(input.RecordDelimiter))\n            .withName(\"RecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FieldDelimiter !== undefined && input.FieldDelimiter !== null) {\n        const node = new xml_builder_1.XmlNode(\"FieldDelimiter\")\n            .addChildNode(new xml_builder_1.XmlText(input.FieldDelimiter))\n            .withName(\"FieldDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteCharacter !== undefined && input.QuoteCharacter !== null) {\n        const node = new xml_builder_1.XmlNode(\"QuoteCharacter\")\n            .addChildNode(new xml_builder_1.XmlText(input.QuoteCharacter))\n            .withName(\"QuoteCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AllowQuotedRecordDelimiter !== undefined && input.AllowQuotedRecordDelimiter !== null) {\n        const node = new xml_builder_1.XmlNode(\"AllowQuotedRecordDelimiter\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.AllowQuotedRecordDelimiter)))\n            .withName(\"AllowQuotedRecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlCSVOutput = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"CSVOutput\");\n    if (input.QuoteFields !== undefined && input.QuoteFields !== null) {\n        const node = new xml_builder_1.XmlNode(\"QuoteFields\").addChildNode(new xml_builder_1.XmlText(input.QuoteFields)).withName(\"QuoteFields\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteEscapeCharacter !== undefined && input.QuoteEscapeCharacter !== null) {\n        const node = new xml_builder_1.XmlNode(\"QuoteEscapeCharacter\")\n            .addChildNode(new xml_builder_1.XmlText(input.QuoteEscapeCharacter))\n            .withName(\"QuoteEscapeCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n        const node = new xml_builder_1.XmlNode(\"RecordDelimiter\")\n            .addChildNode(new xml_builder_1.XmlText(input.RecordDelimiter))\n            .withName(\"RecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.FieldDelimiter !== undefined && input.FieldDelimiter !== null) {\n        const node = new xml_builder_1.XmlNode(\"FieldDelimiter\")\n            .addChildNode(new xml_builder_1.XmlText(input.FieldDelimiter))\n            .withName(\"FieldDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QuoteCharacter !== undefined && input.QuoteCharacter !== null) {\n        const node = new xml_builder_1.XmlNode(\"QuoteCharacter\")\n            .addChildNode(new xml_builder_1.XmlText(input.QuoteCharacter))\n            .withName(\"QuoteCharacter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDefaultRetention = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"DefaultRetention\");\n    if (input.Mode !== undefined && input.Mode !== null) {\n        const node = new xml_builder_1.XmlNode(\"ObjectLockRetentionMode\").addChildNode(new xml_builder_1.XmlText(input.Mode)).withName(\"Mode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Days !== undefined && input.Days !== null) {\n        const node = new xml_builder_1.XmlNode(\"Days\").addChildNode(new xml_builder_1.XmlText(String(input.Days))).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Years !== undefined && input.Years !== null) {\n        const node = new xml_builder_1.XmlNode(\"Years\").addChildNode(new xml_builder_1.XmlText(String(input.Years))).withName(\"Years\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDelete = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Delete\");\n    if (input.Objects !== undefined && input.Objects !== null) {\n        const nodes = serializeAws_restXmlObjectIdentifierList(input.Objects, context);\n        nodes.map((node) => {\n            node = node.withName(\"Object\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Quiet !== undefined && input.Quiet !== null) {\n        const node = new xml_builder_1.XmlNode(\"Quiet\").addChildNode(new xml_builder_1.XmlText(String(input.Quiet))).withName(\"Quiet\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDeleteMarkerReplication = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"DeleteMarkerReplication\");\n    if (input.Status !== undefined && input.Status !== null) {\n        const node = new xml_builder_1.XmlNode(\"DeleteMarkerReplicationStatus\")\n            .addChildNode(new xml_builder_1.XmlText(input.Status))\n            .withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlDestination = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Destination\");\n    if (input.Bucket !== undefined && input.Bucket !== null) {\n        const node = new xml_builder_1.XmlNode(\"BucketName\").addChildNode(new xml_builder_1.XmlText(input.Bucket)).withName(\"Bucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Account !== undefined && input.Account !== null) {\n        const node = new xml_builder_1.XmlNode(\"AccountId\").addChildNode(new xml_builder_1.XmlText(input.Account)).withName(\"Account\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClass !== undefined && input.StorageClass !== null) {\n        const node = new xml_builder_1.XmlNode(\"StorageClass\").addChildNode(new xml_builder_1.XmlText(input.StorageClass)).withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessControlTranslation !== undefined && input.AccessControlTranslation !== null) {\n        const node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation, context).withName(\"AccessControlTranslation\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EncryptionConfiguration !== undefined && input.EncryptionConfiguration !== null) {\n        const node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration, context).withName(\"EncryptionConfiguration\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplicationTime !== undefined && input.ReplicationTime !== null) {\n        const node = serializeAws_restXmlReplicationTime(input.ReplicationTime, context).withName(\"ReplicationTime\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Metrics !== undefined && input.Metrics !== null) {\n        const node = serializeAws_restXmlMetrics(input.Metrics, context).withName(\"Metrics\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlEncryption = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Encryption\");\n    if (input.EncryptionType !== undefined && input.EncryptionType !== null) {\n        const node = new xml_builder_1.XmlNode(\"ServerSideEncryption\")\n            .addChildNode(new xml_builder_1.XmlText(input.EncryptionType))\n            .withName(\"EncryptionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KMSKeyId !== undefined && input.KMSKeyId !== null) {\n        const node = new xml_builder_1.XmlNode(\"SSEKMSKeyId\").addChildNode(new xml_builder_1.XmlText(input.KMSKeyId)).withName(\"KMSKeyId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KMSContext !== undefined && input.KMSContext !== null) {\n        const node = new xml_builder_1.XmlNode(\"KMSContext\").addChildNode(new xml_builder_1.XmlText(input.KMSContext)).withName(\"KMSContext\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlEncryptionConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"EncryptionConfiguration\");\n    if (input.ReplicaKmsKeyID !== undefined && input.ReplicaKmsKeyID !== null) {\n        const node = new xml_builder_1.XmlNode(\"ReplicaKmsKeyID\")\n            .addChildNode(new xml_builder_1.XmlText(input.ReplicaKmsKeyID))\n            .withName(\"ReplicaKmsKeyID\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlErrorDocument = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ErrorDocument\");\n    if (input.Key !== undefined && input.Key !== null) {\n        const node = new xml_builder_1.XmlNode(\"ObjectKey\").addChildNode(new xml_builder_1.XmlText(input.Key)).withName(\"Key\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlEventList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"Event\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlExistingObjectReplication = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ExistingObjectReplication\");\n    if (input.Status !== undefined && input.Status !== null) {\n        const node = new xml_builder_1.XmlNode(\"ExistingObjectReplicationStatus\")\n            .addChildNode(new xml_builder_1.XmlText(input.Status))\n            .withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlExposeHeaders = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"ExposeHeader\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlFilterRule = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"FilterRule\");\n    if (input.Name !== undefined && input.Name !== null) {\n        const node = new xml_builder_1.XmlNode(\"FilterRuleName\").addChildNode(new xml_builder_1.XmlText(input.Name)).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Value !== undefined && input.Value !== null) {\n        const node = new xml_builder_1.XmlNode(\"FilterRuleValue\").addChildNode(new xml_builder_1.XmlText(input.Value)).withName(\"Value\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlFilterRuleList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlFilterRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlGlacierJobParameters = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"GlacierJobParameters\");\n    if (input.Tier !== undefined && input.Tier !== null) {\n        const node = new xml_builder_1.XmlNode(\"Tier\").addChildNode(new xml_builder_1.XmlText(input.Tier)).withName(\"Tier\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlGrant = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Grant\");\n    if (input.Grantee !== undefined && input.Grantee !== null) {\n        const node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n        node.addAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Permission !== undefined && input.Permission !== null) {\n        const node = new xml_builder_1.XmlNode(\"Permission\").addChildNode(new xml_builder_1.XmlText(input.Permission)).withName(\"Permission\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlGrantee = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Grantee\");\n    if (input.DisplayName !== undefined && input.DisplayName !== null) {\n        const node = new xml_builder_1.XmlNode(\"DisplayName\").addChildNode(new xml_builder_1.XmlText(input.DisplayName)).withName(\"DisplayName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EmailAddress !== undefined && input.EmailAddress !== null) {\n        const node = new xml_builder_1.XmlNode(\"EmailAddress\").addChildNode(new xml_builder_1.XmlText(input.EmailAddress)).withName(\"EmailAddress\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ID !== undefined && input.ID !== null) {\n        const node = new xml_builder_1.XmlNode(\"ID\").addChildNode(new xml_builder_1.XmlText(input.ID)).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.URI !== undefined && input.URI !== null) {\n        const node = new xml_builder_1.XmlNode(\"URI\").addChildNode(new xml_builder_1.XmlText(input.URI)).withName(\"URI\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Type !== undefined && input.Type !== null) {\n        bodyNode.addAttribute(\"xsi:type\", input.Type);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlGrants = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlGrant(entry, context);\n        return node.withName(\"Grant\");\n    });\n};\nconst serializeAws_restXmlIndexDocument = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"IndexDocument\");\n    if (input.Suffix !== undefined && input.Suffix !== null) {\n        const node = new xml_builder_1.XmlNode(\"Suffix\").addChildNode(new xml_builder_1.XmlText(input.Suffix)).withName(\"Suffix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInputSerialization = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"InputSerialization\");\n    if (input.CSV !== undefined && input.CSV !== null) {\n        const node = serializeAws_restXmlCSVInput(input.CSV, context).withName(\"CSV\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CompressionType !== undefined && input.CompressionType !== null) {\n        const node = new xml_builder_1.XmlNode(\"CompressionType\")\n            .addChildNode(new xml_builder_1.XmlText(input.CompressionType))\n            .withName(\"CompressionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.JSON !== undefined && input.JSON !== null) {\n        const node = serializeAws_restXmlJSONInput(input.JSON, context).withName(\"JSON\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Parquet !== undefined && input.Parquet !== null) {\n        const node = serializeAws_restXmlParquetInput(input.Parquet, context).withName(\"Parquet\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlIntelligentTieringAndOperator = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"IntelligentTieringAndOperator\");\n    if (input.Prefix !== undefined && input.Prefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags !== undefined && input.Tags !== null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlIntelligentTieringConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"IntelligentTieringConfiguration\");\n    if (input.Id !== undefined && input.Id !== null) {\n        const node = new xml_builder_1.XmlNode(\"IntelligentTieringId\").addChildNode(new xml_builder_1.XmlText(input.Id)).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter !== undefined && input.Filter !== null) {\n        const node = serializeAws_restXmlIntelligentTieringFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status !== undefined && input.Status !== null) {\n        const node = new xml_builder_1.XmlNode(\"IntelligentTieringStatus\").addChildNode(new xml_builder_1.XmlText(input.Status)).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tierings !== undefined && input.Tierings !== null) {\n        const nodes = serializeAws_restXmlTieringList(input.Tierings, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tiering\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlIntelligentTieringFilter = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"IntelligentTieringFilter\");\n    if (input.Prefix !== undefined && input.Prefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tag !== undefined && input.Tag !== null) {\n        const node = serializeAws_restXmlTag(input.Tag, context).withName(\"Tag\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.And !== undefined && input.And !== null) {\n        const node = serializeAws_restXmlIntelligentTieringAndOperator(input.And, context).withName(\"And\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"InventoryConfiguration\");\n    if (input.Destination !== undefined && input.Destination !== null) {\n        const node = serializeAws_restXmlInventoryDestination(input.Destination, context).withName(\"Destination\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IsEnabled !== undefined && input.IsEnabled !== null) {\n        const node = new xml_builder_1.XmlNode(\"IsEnabled\").addChildNode(new xml_builder_1.XmlText(String(input.IsEnabled))).withName(\"IsEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter !== undefined && input.Filter !== null) {\n        const node = serializeAws_restXmlInventoryFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Id !== undefined && input.Id !== null) {\n        const node = new xml_builder_1.XmlNode(\"InventoryId\").addChildNode(new xml_builder_1.XmlText(input.Id)).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IncludedObjectVersions !== undefined && input.IncludedObjectVersions !== null) {\n        const node = new xml_builder_1.XmlNode(\"InventoryIncludedObjectVersions\")\n            .addChildNode(new xml_builder_1.XmlText(input.IncludedObjectVersions))\n            .withName(\"IncludedObjectVersions\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OptionalFields !== undefined && input.OptionalFields !== null) {\n        const nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields, context);\n        const containerNode = new xml_builder_1.XmlNode(\"OptionalFields\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Schedule !== undefined && input.Schedule !== null) {\n        const node = serializeAws_restXmlInventorySchedule(input.Schedule, context).withName(\"Schedule\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryDestination = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"InventoryDestination\");\n    if (input.S3BucketDestination !== undefined && input.S3BucketDestination !== null) {\n        const node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination, context).withName(\"S3BucketDestination\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryEncryption = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"InventoryEncryption\");\n    if (input.SSES3 !== undefined && input.SSES3 !== null) {\n        const node = serializeAws_restXmlSSES3(input.SSES3, context).withName(\"SSE-S3\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SSEKMS !== undefined && input.SSEKMS !== null) {\n        const node = serializeAws_restXmlSSEKMS(input.SSEKMS, context).withName(\"SSE-KMS\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryFilter = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"InventoryFilter\");\n    if (input.Prefix !== undefined && input.Prefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventoryOptionalFields = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = new xml_builder_1.XmlNode(\"InventoryOptionalField\").addChildNode(new xml_builder_1.XmlText(entry));\n        return node.withName(\"Field\");\n    });\n};\nconst serializeAws_restXmlInventoryS3BucketDestination = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"InventoryS3BucketDestination\");\n    if (input.AccountId !== undefined && input.AccountId !== null) {\n        const node = new xml_builder_1.XmlNode(\"AccountId\").addChildNode(new xml_builder_1.XmlText(input.AccountId)).withName(\"AccountId\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Bucket !== undefined && input.Bucket !== null) {\n        const node = new xml_builder_1.XmlNode(\"BucketName\").addChildNode(new xml_builder_1.XmlText(input.Bucket)).withName(\"Bucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Format !== undefined && input.Format !== null) {\n        const node = new xml_builder_1.XmlNode(\"InventoryFormat\").addChildNode(new xml_builder_1.XmlText(input.Format)).withName(\"Format\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix !== undefined && input.Prefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Encryption !== undefined && input.Encryption !== null) {\n        const node = serializeAws_restXmlInventoryEncryption(input.Encryption, context).withName(\"Encryption\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlInventorySchedule = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"InventorySchedule\");\n    if (input.Frequency !== undefined && input.Frequency !== null) {\n        const node = new xml_builder_1.XmlNode(\"InventoryFrequency\").addChildNode(new xml_builder_1.XmlText(input.Frequency)).withName(\"Frequency\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlJSONInput = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"JSONInput\");\n    if (input.Type !== undefined && input.Type !== null) {\n        const node = new xml_builder_1.XmlNode(\"JSONType\").addChildNode(new xml_builder_1.XmlText(input.Type)).withName(\"Type\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlJSONOutput = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"JSONOutput\");\n    if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {\n        const node = new xml_builder_1.XmlNode(\"RecordDelimiter\")\n            .addChildNode(new xml_builder_1.XmlText(input.RecordDelimiter))\n            .withName(\"RecordDelimiter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLambdaFunctionConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"LambdaFunctionConfiguration\");\n    if (input.Id !== undefined && input.Id !== null) {\n        const node = new xml_builder_1.XmlNode(\"NotificationId\").addChildNode(new xml_builder_1.XmlText(input.Id)).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.LambdaFunctionArn !== undefined && input.LambdaFunctionArn !== null) {\n        const node = new xml_builder_1.XmlNode(\"LambdaFunctionArn\")\n            .addChildNode(new xml_builder_1.XmlText(input.LambdaFunctionArn))\n            .withName(\"CloudFunction\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Events !== undefined && input.Events !== null) {\n        const nodes = serializeAws_restXmlEventList(input.Events, context);\n        nodes.map((node) => {\n            node = node.withName(\"Event\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Filter !== undefined && input.Filter !== null) {\n        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLambdaFunctionConfigurationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlLifecycleExpiration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"LifecycleExpiration\");\n    if (input.Date !== undefined && input.Date !== null) {\n        const node = new xml_builder_1.XmlNode(\"Date\")\n            .addChildNode(new xml_builder_1.XmlText(input.Date.toISOString().split(\".\")[0] + \"Z\"))\n            .withName(\"Date\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Days !== undefined && input.Days !== null) {\n        const node = new xml_builder_1.XmlNode(\"Days\").addChildNode(new xml_builder_1.XmlText(String(input.Days))).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExpiredObjectDeleteMarker !== undefined && input.ExpiredObjectDeleteMarker !== null) {\n        const node = new xml_builder_1.XmlNode(\"ExpiredObjectDeleteMarker\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.ExpiredObjectDeleteMarker)))\n            .withName(\"ExpiredObjectDeleteMarker\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRule = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"LifecycleRule\");\n    if (input.Expiration !== undefined && input.Expiration !== null) {\n        const node = serializeAws_restXmlLifecycleExpiration(input.Expiration, context).withName(\"Expiration\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ID !== undefined && input.ID !== null) {\n        const node = new xml_builder_1.XmlNode(\"ID\").addChildNode(new xml_builder_1.XmlText(input.ID)).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix !== undefined && input.Prefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter !== undefined && input.Filter !== null) {\n        const node = serializeAws_restXmlLifecycleRuleFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status !== undefined && input.Status !== null) {\n        const node = new xml_builder_1.XmlNode(\"ExpirationStatus\").addChildNode(new xml_builder_1.XmlText(input.Status)).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Transitions !== undefined && input.Transitions !== null) {\n        const nodes = serializeAws_restXmlTransitionList(input.Transitions, context);\n        nodes.map((node) => {\n            node = node.withName(\"Transition\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.NoncurrentVersionTransitions !== undefined && input.NoncurrentVersionTransitions !== null) {\n        const nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);\n        nodes.map((node) => {\n            node = node.withName(\"NoncurrentVersionTransition\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.NoncurrentVersionExpiration !== undefined && input.NoncurrentVersionExpiration !== null) {\n        const node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName(\"NoncurrentVersionExpiration\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AbortIncompleteMultipartUpload !== undefined && input.AbortIncompleteMultipartUpload !== null) {\n        const node = serializeAws_restXmlAbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName(\"AbortIncompleteMultipartUpload\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRuleAndOperator = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"LifecycleRuleAndOperator\");\n    if (input.Prefix !== undefined && input.Prefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags !== undefined && input.Tags !== null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRuleFilter = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"LifecycleRuleFilter\");\n    models_0_1.LifecycleRuleFilter.visit(input, {\n        Prefix: (value) => {\n            const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(value)).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = serializeAws_restXmlLifecycleRuleAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst serializeAws_restXmlLifecycleRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlLifecycleRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlLoggingEnabled = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"LoggingEnabled\");\n    if (input.TargetBucket !== undefined && input.TargetBucket !== null) {\n        const node = new xml_builder_1.XmlNode(\"TargetBucket\").addChildNode(new xml_builder_1.XmlText(input.TargetBucket)).withName(\"TargetBucket\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.TargetGrants !== undefined && input.TargetGrants !== null) {\n        const nodes = serializeAws_restXmlTargetGrants(input.TargetGrants, context);\n        const containerNode = new xml_builder_1.XmlNode(\"TargetGrants\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.TargetPrefix !== undefined && input.TargetPrefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"TargetPrefix\").addChildNode(new xml_builder_1.XmlText(input.TargetPrefix)).withName(\"TargetPrefix\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetadataEntry = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"MetadataEntry\");\n    if (input.Name !== undefined && input.Name !== null) {\n        const node = new xml_builder_1.XmlNode(\"MetadataKey\").addChildNode(new xml_builder_1.XmlText(input.Name)).withName(\"Name\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Value !== undefined && input.Value !== null) {\n        const node = new xml_builder_1.XmlNode(\"MetadataValue\").addChildNode(new xml_builder_1.XmlText(input.Value)).withName(\"Value\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetrics = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Metrics\");\n    if (input.Status !== undefined && input.Status !== null) {\n        const node = new xml_builder_1.XmlNode(\"MetricsStatus\").addChildNode(new xml_builder_1.XmlText(input.Status)).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.EventThreshold !== undefined && input.EventThreshold !== null) {\n        const node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold, context).withName(\"EventThreshold\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetricsAndOperator = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"MetricsAndOperator\");\n    if (input.Prefix !== undefined && input.Prefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags !== undefined && input.Tags !== null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.AccessPointArn !== undefined && input.AccessPointArn !== null) {\n        const node = new xml_builder_1.XmlNode(\"AccessPointArn\")\n            .addChildNode(new xml_builder_1.XmlText(input.AccessPointArn))\n            .withName(\"AccessPointArn\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetricsConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"MetricsConfiguration\");\n    if (input.Id !== undefined && input.Id !== null) {\n        const node = new xml_builder_1.XmlNode(\"MetricsId\").addChildNode(new xml_builder_1.XmlText(input.Id)).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter !== undefined && input.Filter !== null) {\n        const node = serializeAws_restXmlMetricsFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlMetricsFilter = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"MetricsFilter\");\n    models_0_1.MetricsFilter.visit(input, {\n        Prefix: (value) => {\n            const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(value)).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        AccessPointArn: (value) => {\n            const node = new xml_builder_1.XmlNode(\"AccessPointArn\").addChildNode(new xml_builder_1.XmlText(value)).withName(\"AccessPointArn\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = serializeAws_restXmlMetricsAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst serializeAws_restXmlNoncurrentVersionExpiration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"NoncurrentVersionExpiration\");\n    if (input.NoncurrentDays !== undefined && input.NoncurrentDays !== null) {\n        const node = new xml_builder_1.XmlNode(\"Days\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.NoncurrentDays)))\n            .withName(\"NoncurrentDays\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlNoncurrentVersionTransition = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"NoncurrentVersionTransition\");\n    if (input.NoncurrentDays !== undefined && input.NoncurrentDays !== null) {\n        const node = new xml_builder_1.XmlNode(\"Days\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.NoncurrentDays)))\n            .withName(\"NoncurrentDays\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClass !== undefined && input.StorageClass !== null) {\n        const node = new xml_builder_1.XmlNode(\"TransitionStorageClass\")\n            .addChildNode(new xml_builder_1.XmlText(input.StorageClass))\n            .withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlNoncurrentVersionTransitionList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlNoncurrentVersionTransition(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlNotificationConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"NotificationConfiguration\");\n    if (input.TopicConfigurations !== undefined && input.TopicConfigurations !== null) {\n        const nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations, context);\n        nodes.map((node) => {\n            node = node.withName(\"TopicConfiguration\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.QueueConfigurations !== undefined && input.QueueConfigurations !== null) {\n        const nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations, context);\n        nodes.map((node) => {\n            node = node.withName(\"QueueConfiguration\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.LambdaFunctionConfigurations !== undefined && input.LambdaFunctionConfigurations !== null) {\n        const nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);\n        nodes.map((node) => {\n            node = node.withName(\"CloudFunctionConfiguration\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlNotificationConfigurationFilter = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"NotificationConfigurationFilter\");\n    if (input.Key !== undefined && input.Key !== null) {\n        const node = serializeAws_restXmlS3KeyFilter(input.Key, context).withName(\"S3Key\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectIdentifier = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ObjectIdentifier\");\n    if (input.Key !== undefined && input.Key !== null) {\n        const node = new xml_builder_1.XmlNode(\"ObjectKey\").addChildNode(new xml_builder_1.XmlText(input.Key)).withName(\"Key\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.VersionId !== undefined && input.VersionId !== null) {\n        const node = new xml_builder_1.XmlNode(\"ObjectVersionId\").addChildNode(new xml_builder_1.XmlText(input.VersionId)).withName(\"VersionId\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectIdentifierList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlObjectIdentifier(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlObjectLockConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ObjectLockConfiguration\");\n    if (input.ObjectLockEnabled !== undefined && input.ObjectLockEnabled !== null) {\n        const node = new xml_builder_1.XmlNode(\"ObjectLockEnabled\")\n            .addChildNode(new xml_builder_1.XmlText(input.ObjectLockEnabled))\n            .withName(\"ObjectLockEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Rule !== undefined && input.Rule !== null) {\n        const node = serializeAws_restXmlObjectLockRule(input.Rule, context).withName(\"Rule\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectLockLegalHold = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ObjectLockLegalHold\");\n    if (input.Status !== undefined && input.Status !== null) {\n        const node = new xml_builder_1.XmlNode(\"ObjectLockLegalHoldStatus\")\n            .addChildNode(new xml_builder_1.XmlText(input.Status))\n            .withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectLockRetention = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ObjectLockRetention\");\n    if (input.Mode !== undefined && input.Mode !== null) {\n        const node = new xml_builder_1.XmlNode(\"ObjectLockRetentionMode\").addChildNode(new xml_builder_1.XmlText(input.Mode)).withName(\"Mode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RetainUntilDate !== undefined && input.RetainUntilDate !== null) {\n        const node = new xml_builder_1.XmlNode(\"Date\")\n            .addChildNode(new xml_builder_1.XmlText(input.RetainUntilDate.toISOString().split(\".\")[0] + \"Z\"))\n            .withName(\"RetainUntilDate\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlObjectLockRule = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ObjectLockRule\");\n    if (input.DefaultRetention !== undefined && input.DefaultRetention !== null) {\n        const node = serializeAws_restXmlDefaultRetention(input.DefaultRetention, context).withName(\"DefaultRetention\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOutputLocation = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OutputLocation\");\n    if (input.S3 !== undefined && input.S3 !== null) {\n        const node = serializeAws_restXmlS3Location(input.S3, context).withName(\"S3\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOutputSerialization = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OutputSerialization\");\n    if (input.CSV !== undefined && input.CSV !== null) {\n        const node = serializeAws_restXmlCSVOutput(input.CSV, context).withName(\"CSV\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.JSON !== undefined && input.JSON !== null) {\n        const node = serializeAws_restXmlJSONOutput(input.JSON, context).withName(\"JSON\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOwner = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Owner\");\n    if (input.DisplayName !== undefined && input.DisplayName !== null) {\n        const node = new xml_builder_1.XmlNode(\"DisplayName\").addChildNode(new xml_builder_1.XmlText(input.DisplayName)).withName(\"DisplayName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ID !== undefined && input.ID !== null) {\n        const node = new xml_builder_1.XmlNode(\"ID\").addChildNode(new xml_builder_1.XmlText(input.ID)).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOwnershipControls = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OwnershipControls\");\n    if (input.Rules !== undefined && input.Rules !== null) {\n        const nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOwnershipControlsRule = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"OwnershipControlsRule\");\n    if (input.ObjectOwnership !== undefined && input.ObjectOwnership !== null) {\n        const node = new xml_builder_1.XmlNode(\"ObjectOwnership\")\n            .addChildNode(new xml_builder_1.XmlText(input.ObjectOwnership))\n            .withName(\"ObjectOwnership\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlOwnershipControlsRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlOwnershipControlsRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlParquetInput = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ParquetInput\");\n    return bodyNode;\n};\nconst serializeAws_restXmlPublicAccessBlockConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"PublicAccessBlockConfiguration\");\n    if (input.BlockPublicAcls !== undefined && input.BlockPublicAcls !== null) {\n        const node = new xml_builder_1.XmlNode(\"Setting\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.BlockPublicAcls)))\n            .withName(\"BlockPublicAcls\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IgnorePublicAcls !== undefined && input.IgnorePublicAcls !== null) {\n        const node = new xml_builder_1.XmlNode(\"Setting\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.IgnorePublicAcls)))\n            .withName(\"IgnorePublicAcls\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.BlockPublicPolicy !== undefined && input.BlockPublicPolicy !== null) {\n        const node = new xml_builder_1.XmlNode(\"Setting\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.BlockPublicPolicy)))\n            .withName(\"BlockPublicPolicy\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RestrictPublicBuckets !== undefined && input.RestrictPublicBuckets !== null) {\n        const node = new xml_builder_1.XmlNode(\"Setting\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.RestrictPublicBuckets)))\n            .withName(\"RestrictPublicBuckets\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlQueueConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"QueueConfiguration\");\n    if (input.Id !== undefined && input.Id !== null) {\n        const node = new xml_builder_1.XmlNode(\"NotificationId\").addChildNode(new xml_builder_1.XmlText(input.Id)).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.QueueArn !== undefined && input.QueueArn !== null) {\n        const node = new xml_builder_1.XmlNode(\"QueueArn\").addChildNode(new xml_builder_1.XmlText(input.QueueArn)).withName(\"Queue\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Events !== undefined && input.Events !== null) {\n        const nodes = serializeAws_restXmlEventList(input.Events, context);\n        nodes.map((node) => {\n            node = node.withName(\"Event\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Filter !== undefined && input.Filter !== null) {\n        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlQueueConfigurationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlQueueConfiguration(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlRedirect = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Redirect\");\n    if (input.HostName !== undefined && input.HostName !== null) {\n        const node = new xml_builder_1.XmlNode(\"HostName\").addChildNode(new xml_builder_1.XmlText(input.HostName)).withName(\"HostName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.HttpRedirectCode !== undefined && input.HttpRedirectCode !== null) {\n        const node = new xml_builder_1.XmlNode(\"HttpRedirectCode\")\n            .addChildNode(new xml_builder_1.XmlText(input.HttpRedirectCode))\n            .withName(\"HttpRedirectCode\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Protocol !== undefined && input.Protocol !== null) {\n        const node = new xml_builder_1.XmlNode(\"Protocol\").addChildNode(new xml_builder_1.XmlText(input.Protocol)).withName(\"Protocol\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplaceKeyPrefixWith !== undefined && input.ReplaceKeyPrefixWith !== null) {\n        const node = new xml_builder_1.XmlNode(\"ReplaceKeyPrefixWith\")\n            .addChildNode(new xml_builder_1.XmlText(input.ReplaceKeyPrefixWith))\n            .withName(\"ReplaceKeyPrefixWith\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplaceKeyWith !== undefined && input.ReplaceKeyWith !== null) {\n        const node = new xml_builder_1.XmlNode(\"ReplaceKeyWith\")\n            .addChildNode(new xml_builder_1.XmlText(input.ReplaceKeyWith))\n            .withName(\"ReplaceKeyWith\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRedirectAllRequestsTo = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"RedirectAllRequestsTo\");\n    if (input.HostName !== undefined && input.HostName !== null) {\n        const node = new xml_builder_1.XmlNode(\"HostName\").addChildNode(new xml_builder_1.XmlText(input.HostName)).withName(\"HostName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Protocol !== undefined && input.Protocol !== null) {\n        const node = new xml_builder_1.XmlNode(\"Protocol\").addChildNode(new xml_builder_1.XmlText(input.Protocol)).withName(\"Protocol\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicaModifications = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ReplicaModifications\");\n    if (input.Status !== undefined && input.Status !== null) {\n        const node = new xml_builder_1.XmlNode(\"ReplicaModificationsStatus\")\n            .addChildNode(new xml_builder_1.XmlText(input.Status))\n            .withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ReplicationConfiguration\");\n    if (input.Role !== undefined && input.Role !== null) {\n        const node = new xml_builder_1.XmlNode(\"Role\").addChildNode(new xml_builder_1.XmlText(input.Role)).withName(\"Role\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Rules !== undefined && input.Rules !== null) {\n        const nodes = serializeAws_restXmlReplicationRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationRule = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ReplicationRule\");\n    if (input.ID !== undefined && input.ID !== null) {\n        const node = new xml_builder_1.XmlNode(\"ID\").addChildNode(new xml_builder_1.XmlText(input.ID)).withName(\"ID\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Priority !== undefined && input.Priority !== null) {\n        const node = new xml_builder_1.XmlNode(\"Priority\").addChildNode(new xml_builder_1.XmlText(String(input.Priority))).withName(\"Priority\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix !== undefined && input.Prefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Filter !== undefined && input.Filter !== null) {\n        const node = serializeAws_restXmlReplicationRuleFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status !== undefined && input.Status !== null) {\n        const node = new xml_builder_1.XmlNode(\"ReplicationRuleStatus\").addChildNode(new xml_builder_1.XmlText(input.Status)).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SourceSelectionCriteria !== undefined && input.SourceSelectionCriteria !== null) {\n        const node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria, context).withName(\"SourceSelectionCriteria\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExistingObjectReplication !== undefined && input.ExistingObjectReplication !== null) {\n        const node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication, context).withName(\"ExistingObjectReplication\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Destination !== undefined && input.Destination !== null) {\n        const node = serializeAws_restXmlDestination(input.Destination, context).withName(\"Destination\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.DeleteMarkerReplication !== undefined && input.DeleteMarkerReplication !== null) {\n        const node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication, context).withName(\"DeleteMarkerReplication\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationRuleAndOperator = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ReplicationRuleAndOperator\");\n    if (input.Prefix !== undefined && input.Prefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tags !== undefined && input.Tags !== null) {\n        const nodes = serializeAws_restXmlTagSet(input.Tags, context);\n        nodes.map((node) => {\n            node = node.withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationRuleFilter = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ReplicationRuleFilter\");\n    models_0_1.ReplicationRuleFilter.visit(input, {\n        Prefix: (value) => {\n            const node = new xml_builder_1.XmlNode(\"Prefix\").addChildNode(new xml_builder_1.XmlText(value)).withName(\"Prefix\");\n            bodyNode.addChildNode(node);\n        },\n        Tag: (value) => {\n            const node = serializeAws_restXmlTag(value, context).withName(\"Tag\");\n            bodyNode.addChildNode(node);\n        },\n        And: (value) => {\n            const node = serializeAws_restXmlReplicationRuleAndOperator(value, context).withName(\"And\");\n            bodyNode.addChildNode(node);\n        },\n        _: (name, value) => {\n            if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {\n                throw new Error(\"Unable to serialize unknown union members in XML.\");\n            }\n            bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));\n        },\n    });\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlReplicationRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlReplicationTime = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ReplicationTime\");\n    if (input.Status !== undefined && input.Status !== null) {\n        const node = new xml_builder_1.XmlNode(\"ReplicationTimeStatus\").addChildNode(new xml_builder_1.XmlText(input.Status)).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Time !== undefined && input.Time !== null) {\n        const node = serializeAws_restXmlReplicationTimeValue(input.Time, context).withName(\"Time\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlReplicationTimeValue = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ReplicationTimeValue\");\n    if (input.Minutes !== undefined && input.Minutes !== null) {\n        const node = new xml_builder_1.XmlNode(\"Minutes\").addChildNode(new xml_builder_1.XmlText(String(input.Minutes))).withName(\"Minutes\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRequestPaymentConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"RequestPaymentConfiguration\");\n    if (input.Payer !== undefined && input.Payer !== null) {\n        const node = new xml_builder_1.XmlNode(\"Payer\").addChildNode(new xml_builder_1.XmlText(input.Payer)).withName(\"Payer\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRequestProgress = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"RequestProgress\");\n    if (input.Enabled !== undefined && input.Enabled !== null) {\n        const node = new xml_builder_1.XmlNode(\"EnableRequestProgress\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.Enabled)))\n            .withName(\"Enabled\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRestoreRequest = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"RestoreRequest\");\n    if (input.Days !== undefined && input.Days !== null) {\n        const node = new xml_builder_1.XmlNode(\"Days\").addChildNode(new xml_builder_1.XmlText(String(input.Days))).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.GlacierJobParameters !== undefined && input.GlacierJobParameters !== null) {\n        const node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters, context).withName(\"GlacierJobParameters\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Type !== undefined && input.Type !== null) {\n        const node = new xml_builder_1.XmlNode(\"RestoreRequestType\").addChildNode(new xml_builder_1.XmlText(input.Type)).withName(\"Type\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Tier !== undefined && input.Tier !== null) {\n        const node = new xml_builder_1.XmlNode(\"Tier\").addChildNode(new xml_builder_1.XmlText(input.Tier)).withName(\"Tier\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Description !== undefined && input.Description !== null) {\n        const node = new xml_builder_1.XmlNode(\"Description\").addChildNode(new xml_builder_1.XmlText(input.Description)).withName(\"Description\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.SelectParameters !== undefined && input.SelectParameters !== null) {\n        const node = serializeAws_restXmlSelectParameters(input.SelectParameters, context).withName(\"SelectParameters\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OutputLocation !== undefined && input.OutputLocation !== null) {\n        const node = serializeAws_restXmlOutputLocation(input.OutputLocation, context).withName(\"OutputLocation\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRoutingRule = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"RoutingRule\");\n    if (input.Condition !== undefined && input.Condition !== null) {\n        const node = serializeAws_restXmlCondition(input.Condition, context).withName(\"Condition\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Redirect !== undefined && input.Redirect !== null) {\n        const node = serializeAws_restXmlRedirect(input.Redirect, context).withName(\"Redirect\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlRoutingRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlRoutingRule(entry, context);\n        return node.withName(\"RoutingRule\");\n    });\n};\nconst serializeAws_restXmlS3KeyFilter = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"S3KeyFilter\");\n    if (input.FilterRules !== undefined && input.FilterRules !== null) {\n        const nodes = serializeAws_restXmlFilterRuleList(input.FilterRules, context);\n        nodes.map((node) => {\n            node = node.withName(\"FilterRule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlS3Location = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"S3Location\");\n    if (input.BucketName !== undefined && input.BucketName !== null) {\n        const node = new xml_builder_1.XmlNode(\"BucketName\").addChildNode(new xml_builder_1.XmlText(input.BucketName)).withName(\"BucketName\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Prefix !== undefined && input.Prefix !== null) {\n        const node = new xml_builder_1.XmlNode(\"LocationPrefix\").addChildNode(new xml_builder_1.XmlText(input.Prefix)).withName(\"Prefix\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Encryption !== undefined && input.Encryption !== null) {\n        const node = serializeAws_restXmlEncryption(input.Encryption, context).withName(\"Encryption\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.CannedACL !== undefined && input.CannedACL !== null) {\n        const node = new xml_builder_1.XmlNode(\"ObjectCannedACL\").addChildNode(new xml_builder_1.XmlText(input.CannedACL)).withName(\"CannedACL\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessControlList !== undefined && input.AccessControlList !== null) {\n        const nodes = serializeAws_restXmlGrants(input.AccessControlList, context);\n        const containerNode = new xml_builder_1.XmlNode(\"AccessControlList\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.Tagging !== undefined && input.Tagging !== null) {\n        const node = serializeAws_restXmlTagging(input.Tagging, context).withName(\"Tagging\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.UserMetadata !== undefined && input.UserMetadata !== null) {\n        const nodes = serializeAws_restXmlUserMetadata(input.UserMetadata, context);\n        const containerNode = new xml_builder_1.XmlNode(\"UserMetadata\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    if (input.StorageClass !== undefined && input.StorageClass !== null) {\n        const node = new xml_builder_1.XmlNode(\"StorageClass\").addChildNode(new xml_builder_1.XmlText(input.StorageClass)).withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlScanRange = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ScanRange\");\n    if (input.Start !== undefined && input.Start !== null) {\n        const node = new xml_builder_1.XmlNode(\"Start\").addChildNode(new xml_builder_1.XmlText(String(input.Start))).withName(\"Start\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.End !== undefined && input.End !== null) {\n        const node = new xml_builder_1.XmlNode(\"End\").addChildNode(new xml_builder_1.XmlText(String(input.End))).withName(\"End\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlSelectParameters = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"SelectParameters\");\n    if (input.InputSerialization !== undefined && input.InputSerialization !== null) {\n        const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName(\"InputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ExpressionType !== undefined && input.ExpressionType !== null) {\n        const node = new xml_builder_1.XmlNode(\"ExpressionType\")\n            .addChildNode(new xml_builder_1.XmlText(input.ExpressionType))\n            .withName(\"ExpressionType\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Expression !== undefined && input.Expression !== null) {\n        const node = new xml_builder_1.XmlNode(\"Expression\").addChildNode(new xml_builder_1.XmlText(input.Expression)).withName(\"Expression\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.OutputSerialization !== undefined && input.OutputSerialization !== null) {\n        const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName(\"OutputSerialization\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionByDefault = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ServerSideEncryptionByDefault\");\n    if (input.SSEAlgorithm !== undefined && input.SSEAlgorithm !== null) {\n        const node = new xml_builder_1.XmlNode(\"ServerSideEncryption\")\n            .addChildNode(new xml_builder_1.XmlText(input.SSEAlgorithm))\n            .withName(\"SSEAlgorithm\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.KMSMasterKeyID !== undefined && input.KMSMasterKeyID !== null) {\n        const node = new xml_builder_1.XmlNode(\"SSEKMSKeyId\")\n            .addChildNode(new xml_builder_1.XmlText(input.KMSMasterKeyID))\n            .withName(\"KMSMasterKeyID\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ServerSideEncryptionConfiguration\");\n    if (input.Rules !== undefined && input.Rules !== null) {\n        const nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules, context);\n        nodes.map((node) => {\n            node = node.withName(\"Rule\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionRule = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"ServerSideEncryptionRule\");\n    if (input.ApplyServerSideEncryptionByDefault !== undefined && input.ApplyServerSideEncryptionByDefault !== null) {\n        const node = serializeAws_restXmlServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName(\"ApplyServerSideEncryptionByDefault\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.BucketKeyEnabled !== undefined && input.BucketKeyEnabled !== null) {\n        const node = new xml_builder_1.XmlNode(\"BucketKeyEnabled\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.BucketKeyEnabled)))\n            .withName(\"BucketKeyEnabled\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlServerSideEncryptionRules = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlServerSideEncryptionRule(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlSourceSelectionCriteria = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"SourceSelectionCriteria\");\n    if (input.SseKmsEncryptedObjects !== undefined && input.SseKmsEncryptedObjects !== null) {\n        const node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName(\"SseKmsEncryptedObjects\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.ReplicaModifications !== undefined && input.ReplicaModifications !== null) {\n        const node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications, context).withName(\"ReplicaModifications\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlSSEKMS = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"SSE-KMS\");\n    if (input.KeyId !== undefined && input.KeyId !== null) {\n        const node = new xml_builder_1.XmlNode(\"SSEKMSKeyId\").addChildNode(new xml_builder_1.XmlText(input.KeyId)).withName(\"KeyId\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlSseKmsEncryptedObjects = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"SseKmsEncryptedObjects\");\n    if (input.Status !== undefined && input.Status !== null) {\n        const node = new xml_builder_1.XmlNode(\"SseKmsEncryptedObjectsStatus\")\n            .addChildNode(new xml_builder_1.XmlText(input.Status))\n            .withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlSSES3 = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"SSE-S3\");\n    return bodyNode;\n};\nconst serializeAws_restXmlStorageClassAnalysis = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"StorageClassAnalysis\");\n    if (input.DataExport !== undefined && input.DataExport !== null) {\n        const node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport, context).withName(\"DataExport\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlStorageClassAnalysisDataExport = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"StorageClassAnalysisDataExport\");\n    if (input.OutputSchemaVersion !== undefined && input.OutputSchemaVersion !== null) {\n        const node = new xml_builder_1.XmlNode(\"StorageClassAnalysisSchemaVersion\")\n            .addChildNode(new xml_builder_1.XmlText(input.OutputSchemaVersion))\n            .withName(\"OutputSchemaVersion\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Destination !== undefined && input.Destination !== null) {\n        const node = serializeAws_restXmlAnalyticsExportDestination(input.Destination, context).withName(\"Destination\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTag = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Tag\");\n    if (input.Key !== undefined && input.Key !== null) {\n        const node = new xml_builder_1.XmlNode(\"ObjectKey\").addChildNode(new xml_builder_1.XmlText(input.Key)).withName(\"Key\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Value !== undefined && input.Value !== null) {\n        const node = new xml_builder_1.XmlNode(\"Value\").addChildNode(new xml_builder_1.XmlText(input.Value)).withName(\"Value\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTagging = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Tagging\");\n    if (input.TagSet !== undefined && input.TagSet !== null) {\n        const nodes = serializeAws_restXmlTagSet(input.TagSet, context);\n        const containerNode = new xml_builder_1.XmlNode(\"TagSet\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTagSet = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlTag(entry, context);\n        return node.withName(\"Tag\");\n    });\n};\nconst serializeAws_restXmlTargetGrant = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"TargetGrant\");\n    if (input.Grantee !== undefined && input.Grantee !== null) {\n        const node = serializeAws_restXmlGrantee(input.Grantee, context).withName(\"Grantee\");\n        node.addAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Permission !== undefined && input.Permission !== null) {\n        const node = new xml_builder_1.XmlNode(\"BucketLogsPermission\")\n            .addChildNode(new xml_builder_1.XmlText(input.Permission))\n            .withName(\"Permission\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTargetGrants = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlTargetGrant(entry, context);\n        return node.withName(\"Grant\");\n    });\n};\nconst serializeAws_restXmlTiering = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Tiering\");\n    if (input.Days !== undefined && input.Days !== null) {\n        const node = new xml_builder_1.XmlNode(\"IntelligentTieringDays\")\n            .addChildNode(new xml_builder_1.XmlText(String(input.Days)))\n            .withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.AccessTier !== undefined && input.AccessTier !== null) {\n        const node = new xml_builder_1.XmlNode(\"IntelligentTieringAccessTier\")\n            .addChildNode(new xml_builder_1.XmlText(input.AccessTier))\n            .withName(\"AccessTier\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTieringList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlTiering(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlTopicConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"TopicConfiguration\");\n    if (input.Id !== undefined && input.Id !== null) {\n        const node = new xml_builder_1.XmlNode(\"NotificationId\").addChildNode(new xml_builder_1.XmlText(input.Id)).withName(\"Id\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.TopicArn !== undefined && input.TopicArn !== null) {\n        const node = new xml_builder_1.XmlNode(\"TopicArn\").addChildNode(new xml_builder_1.XmlText(input.TopicArn)).withName(\"Topic\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Events !== undefined && input.Events !== null) {\n        const nodes = serializeAws_restXmlEventList(input.Events, context);\n        nodes.map((node) => {\n            node = node.withName(\"Event\");\n            bodyNode.addChildNode(node);\n        });\n    }\n    if (input.Filter !== undefined && input.Filter !== null) {\n        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName(\"Filter\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTopicConfigurationList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlTopicConfiguration(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlTransition = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"Transition\");\n    if (input.Date !== undefined && input.Date !== null) {\n        const node = new xml_builder_1.XmlNode(\"Date\")\n            .addChildNode(new xml_builder_1.XmlText(input.Date.toISOString().split(\".\")[0] + \"Z\"))\n            .withName(\"Date\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Days !== undefined && input.Days !== null) {\n        const node = new xml_builder_1.XmlNode(\"Days\").addChildNode(new xml_builder_1.XmlText(String(input.Days))).withName(\"Days\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.StorageClass !== undefined && input.StorageClass !== null) {\n        const node = new xml_builder_1.XmlNode(\"TransitionStorageClass\")\n            .addChildNode(new xml_builder_1.XmlText(input.StorageClass))\n            .withName(\"StorageClass\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlTransitionList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlTransition(entry, context);\n        return node.withName(\"member\");\n    });\n};\nconst serializeAws_restXmlUserMetadata = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        const node = serializeAws_restXmlMetadataEntry(entry, context);\n        return node.withName(\"MetadataEntry\");\n    });\n};\nconst serializeAws_restXmlVersioningConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"VersioningConfiguration\");\n    if (input.MFADelete !== undefined && input.MFADelete !== null) {\n        const node = new xml_builder_1.XmlNode(\"MFADelete\").addChildNode(new xml_builder_1.XmlText(input.MFADelete)).withName(\"MfaDelete\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.Status !== undefined && input.Status !== null) {\n        const node = new xml_builder_1.XmlNode(\"BucketVersioningStatus\").addChildNode(new xml_builder_1.XmlText(input.Status)).withName(\"Status\");\n        bodyNode.addChildNode(node);\n    }\n    return bodyNode;\n};\nconst serializeAws_restXmlWebsiteConfiguration = (input, context) => {\n    const bodyNode = new xml_builder_1.XmlNode(\"WebsiteConfiguration\");\n    if (input.ErrorDocument !== undefined && input.ErrorDocument !== null) {\n        const node = serializeAws_restXmlErrorDocument(input.ErrorDocument, context).withName(\"ErrorDocument\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.IndexDocument !== undefined && input.IndexDocument !== null) {\n        const node = serializeAws_restXmlIndexDocument(input.IndexDocument, context).withName(\"IndexDocument\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RedirectAllRequestsTo !== undefined && input.RedirectAllRequestsTo !== null) {\n        const node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName(\"RedirectAllRequestsTo\");\n        bodyNode.addChildNode(node);\n    }\n    if (input.RoutingRules !== undefined && input.RoutingRules !== null) {\n        const nodes = serializeAws_restXmlRoutingRules(input.RoutingRules, context);\n        const containerNode = new xml_builder_1.XmlNode(\"RoutingRules\");\n        nodes.map((node) => {\n            containerNode.addChildNode(node);\n        });\n        bodyNode.addChildNode(containerNode);\n    }\n    return bodyNode;\n};\nconst deserializeAws_restXmlAbortIncompleteMultipartUpload = (output, context) => {\n    const contents = {\n        DaysAfterInitiation: undefined,\n    };\n    if (output[\"DaysAfterInitiation\"] !== undefined) {\n        contents.DaysAfterInitiation = smithy_client_1.strictParseInt32(output[\"DaysAfterInitiation\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAccessControlTranslation = (output, context) => {\n    const contents = {\n        Owner: undefined,\n    };\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = smithy_client_1.expectString(output[\"Owner\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAllowedHeaders = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlAllowedMethods = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlAllowedOrigins = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlAnalyticsAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet(smithy_client_1.getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAnalyticsConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        Filter: undefined,\n        StorageClassAnalysis: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlAnalyticsFilter(smithy_client_1.expectUnion(output[\"Filter\"]), context);\n    }\n    if (output[\"StorageClassAnalysis\"] !== undefined) {\n        contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output[\"StorageClassAnalysis\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAnalyticsConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlAnalyticsConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlAnalyticsExportDestination = (output, context) => {\n    const contents = {\n        S3BucketDestination: undefined,\n    };\n    if (output[\"S3BucketDestination\"] !== undefined) {\n        contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(output[\"S3BucketDestination\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlAnalyticsFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: smithy_client_1.expectString(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: deserializeAws_restXmlAnalyticsAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst deserializeAws_restXmlAnalyticsS3BucketDestination = (output, context) => {\n    const contents = {\n        Format: undefined,\n        BucketAccountId: undefined,\n        Bucket: undefined,\n        Prefix: undefined,\n    };\n    if (output[\"Format\"] !== undefined) {\n        contents.Format = smithy_client_1.expectString(output[\"Format\"]);\n    }\n    if (output[\"BucketAccountId\"] !== undefined) {\n        contents.BucketAccountId = smithy_client_1.expectString(output[\"BucketAccountId\"]);\n    }\n    if (output[\"Bucket\"] !== undefined) {\n        contents.Bucket = smithy_client_1.expectString(output[\"Bucket\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(output[\"Prefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlBucket = (output, context) => {\n    const contents = {\n        Name: undefined,\n        CreationDate: undefined,\n    };\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(output[\"Name\"]);\n    }\n    if (output[\"CreationDate\"] !== undefined) {\n        contents.CreationDate = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"CreationDate\"]));\n    }\n    return contents;\n};\nconst deserializeAws_restXmlBuckets = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlBucket(entry, context);\n    });\n};\nconst deserializeAws_restXmlCommonPrefix = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(output[\"Prefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCommonPrefixList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlCommonPrefix(entry, context);\n    });\n};\nconst deserializeAws_restXmlCondition = (output, context) => {\n    const contents = {\n        HttpErrorCodeReturnedEquals: undefined,\n        KeyPrefixEquals: undefined,\n    };\n    if (output[\"HttpErrorCodeReturnedEquals\"] !== undefined) {\n        contents.HttpErrorCodeReturnedEquals = smithy_client_1.expectString(output[\"HttpErrorCodeReturnedEquals\"]);\n    }\n    if (output[\"KeyPrefixEquals\"] !== undefined) {\n        contents.KeyPrefixEquals = smithy_client_1.expectString(output[\"KeyPrefixEquals\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlContinuationEvent = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst deserializeAws_restXmlCopyObjectResult = (output, context) => {\n    const contents = {\n        ETag: undefined,\n        LastModified: undefined,\n    };\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = smithy_client_1.expectString(output[\"ETag\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModified\"]));\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCopyPartResult = (output, context) => {\n    const contents = {\n        ETag: undefined,\n        LastModified: undefined,\n    };\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = smithy_client_1.expectString(output[\"ETag\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModified\"]));\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCORSRule = (output, context) => {\n    const contents = {\n        ID: undefined,\n        AllowedHeaders: undefined,\n        AllowedMethods: undefined,\n        AllowedOrigins: undefined,\n        ExposeHeaders: undefined,\n        MaxAgeSeconds: undefined,\n    };\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = smithy_client_1.expectString(output[\"ID\"]);\n    }\n    if (output.AllowedHeader === \"\") {\n        contents.AllowedHeaders = [];\n    }\n    if (output[\"AllowedHeader\"] !== undefined) {\n        contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders(smithy_client_1.getArrayIfSingleItem(output[\"AllowedHeader\"]), context);\n    }\n    if (output.AllowedMethod === \"\") {\n        contents.AllowedMethods = [];\n    }\n    if (output[\"AllowedMethod\"] !== undefined) {\n        contents.AllowedMethods = deserializeAws_restXmlAllowedMethods(smithy_client_1.getArrayIfSingleItem(output[\"AllowedMethod\"]), context);\n    }\n    if (output.AllowedOrigin === \"\") {\n        contents.AllowedOrigins = [];\n    }\n    if (output[\"AllowedOrigin\"] !== undefined) {\n        contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins(smithy_client_1.getArrayIfSingleItem(output[\"AllowedOrigin\"]), context);\n    }\n    if (output.ExposeHeader === \"\") {\n        contents.ExposeHeaders = [];\n    }\n    if (output[\"ExposeHeader\"] !== undefined) {\n        contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders(smithy_client_1.getArrayIfSingleItem(output[\"ExposeHeader\"]), context);\n    }\n    if (output[\"MaxAgeSeconds\"] !== undefined) {\n        contents.MaxAgeSeconds = smithy_client_1.strictParseInt32(output[\"MaxAgeSeconds\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlCORSRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlCORSRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlDefaultRetention = (output, context) => {\n    const contents = {\n        Mode: undefined,\n        Days: undefined,\n        Years: undefined,\n    };\n    if (output[\"Mode\"] !== undefined) {\n        contents.Mode = smithy_client_1.expectString(output[\"Mode\"]);\n    }\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = smithy_client_1.strictParseInt32(output[\"Days\"]);\n    }\n    if (output[\"Years\"] !== undefined) {\n        contents.Years = smithy_client_1.strictParseInt32(output[\"Years\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDeletedObject = (output, context) => {\n    const contents = {\n        Key: undefined,\n        VersionId: undefined,\n        DeleteMarker: undefined,\n        DeleteMarkerVersionId: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = smithy_client_1.expectString(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = smithy_client_1.expectString(output[\"VersionId\"]);\n    }\n    if (output[\"DeleteMarker\"] !== undefined) {\n        contents.DeleteMarker = smithy_client_1.parseBoolean(output[\"DeleteMarker\"]);\n    }\n    if (output[\"DeleteMarkerVersionId\"] !== undefined) {\n        contents.DeleteMarkerVersionId = smithy_client_1.expectString(output[\"DeleteMarkerVersionId\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDeletedObjects = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlDeletedObject(entry, context);\n    });\n};\nconst deserializeAws_restXmlDeleteMarkerEntry = (output, context) => {\n    const contents = {\n        Owner: undefined,\n        Key: undefined,\n        VersionId: undefined,\n        IsLatest: undefined,\n        LastModified: undefined,\n    };\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n    }\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = smithy_client_1.expectString(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = smithy_client_1.expectString(output[\"VersionId\"]);\n    }\n    if (output[\"IsLatest\"] !== undefined) {\n        contents.IsLatest = smithy_client_1.parseBoolean(output[\"IsLatest\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModified\"]));\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDeleteMarkerReplication = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlDeleteMarkers = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlDeleteMarkerEntry(entry, context);\n    });\n};\nconst deserializeAws_restXmlDestination = (output, context) => {\n    const contents = {\n        Bucket: undefined,\n        Account: undefined,\n        StorageClass: undefined,\n        AccessControlTranslation: undefined,\n        EncryptionConfiguration: undefined,\n        ReplicationTime: undefined,\n        Metrics: undefined,\n    };\n    if (output[\"Bucket\"] !== undefined) {\n        contents.Bucket = smithy_client_1.expectString(output[\"Bucket\"]);\n    }\n    if (output[\"Account\"] !== undefined) {\n        contents.Account = smithy_client_1.expectString(output[\"Account\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = smithy_client_1.expectString(output[\"StorageClass\"]);\n    }\n    if (output[\"AccessControlTranslation\"] !== undefined) {\n        contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(output[\"AccessControlTranslation\"], context);\n    }\n    if (output[\"EncryptionConfiguration\"] !== undefined) {\n        contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(output[\"EncryptionConfiguration\"], context);\n    }\n    if (output[\"ReplicationTime\"] !== undefined) {\n        contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output[\"ReplicationTime\"], context);\n    }\n    if (output[\"Metrics\"] !== undefined) {\n        contents.Metrics = deserializeAws_restXmlMetrics(output[\"Metrics\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlEncryptionConfiguration = (output, context) => {\n    const contents = {\n        ReplicaKmsKeyID: undefined,\n    };\n    if (output[\"ReplicaKmsKeyID\"] !== undefined) {\n        contents.ReplicaKmsKeyID = smithy_client_1.expectString(output[\"ReplicaKmsKeyID\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlEndEvent = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst deserializeAws_restXml_Error = (output, context) => {\n    const contents = {\n        Key: undefined,\n        VersionId: undefined,\n        Code: undefined,\n        Message: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = smithy_client_1.expectString(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = smithy_client_1.expectString(output[\"VersionId\"]);\n    }\n    if (output[\"Code\"] !== undefined) {\n        contents.Code = smithy_client_1.expectString(output[\"Code\"]);\n    }\n    if (output[\"Message\"] !== undefined) {\n        contents.Message = smithy_client_1.expectString(output[\"Message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlErrorDocument = (output, context) => {\n    const contents = {\n        Key: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = smithy_client_1.expectString(output[\"Key\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlErrors = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXml_Error(entry, context);\n    });\n};\nconst deserializeAws_restXmlEventList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlExistingObjectReplication = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlExposeHeaders = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlFilterRule = (output, context) => {\n    const contents = {\n        Name: undefined,\n        Value: undefined,\n    };\n    if (output[\"Name\"] !== undefined) {\n        contents.Name = smithy_client_1.expectString(output[\"Name\"]);\n    }\n    if (output[\"Value\"] !== undefined) {\n        contents.Value = smithy_client_1.expectString(output[\"Value\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlFilterRuleList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlFilterRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlGrant = (output, context) => {\n    const contents = {\n        Grantee: undefined,\n        Permission: undefined,\n    };\n    if (output[\"Grantee\"] !== undefined) {\n        contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n    }\n    if (output[\"Permission\"] !== undefined) {\n        contents.Permission = smithy_client_1.expectString(output[\"Permission\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGrantee = (output, context) => {\n    const contents = {\n        DisplayName: undefined,\n        EmailAddress: undefined,\n        ID: undefined,\n        URI: undefined,\n        Type: undefined,\n    };\n    if (output[\"DisplayName\"] !== undefined) {\n        contents.DisplayName = smithy_client_1.expectString(output[\"DisplayName\"]);\n    }\n    if (output[\"EmailAddress\"] !== undefined) {\n        contents.EmailAddress = smithy_client_1.expectString(output[\"EmailAddress\"]);\n    }\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = smithy_client_1.expectString(output[\"ID\"]);\n    }\n    if (output[\"URI\"] !== undefined) {\n        contents.URI = smithy_client_1.expectString(output[\"URI\"]);\n    }\n    if (output[\"xsi:type\"] !== undefined) {\n        contents.Type = smithy_client_1.expectString(output[\"xsi:type\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlGrants = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlGrant(entry, context);\n    });\n};\nconst deserializeAws_restXmlIndexDocument = (output, context) => {\n    const contents = {\n        Suffix: undefined,\n    };\n    if (output[\"Suffix\"] !== undefined) {\n        contents.Suffix = smithy_client_1.expectString(output[\"Suffix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInitiator = (output, context) => {\n    const contents = {\n        ID: undefined,\n        DisplayName: undefined,\n    };\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = smithy_client_1.expectString(output[\"ID\"]);\n    }\n    if (output[\"DisplayName\"] !== undefined) {\n        contents.DisplayName = smithy_client_1.expectString(output[\"DisplayName\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlIntelligentTieringAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet(smithy_client_1.getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlIntelligentTieringConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        Filter: undefined,\n        Status: undefined,\n        Tierings: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output[\"Filter\"], context);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    if (output.Tiering === \"\") {\n        contents.Tierings = [];\n    }\n    if (output[\"Tiering\"] !== undefined) {\n        contents.Tierings = deserializeAws_restXmlTieringList(smithy_client_1.getArrayIfSingleItem(output[\"Tiering\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlIntelligentTieringConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlIntelligentTieringConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlIntelligentTieringFilter = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tag: undefined,\n        And: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(output[\"Prefix\"]);\n    }\n    if (output[\"Tag\"] !== undefined) {\n        contents.Tag = deserializeAws_restXmlTag(output[\"Tag\"], context);\n    }\n    if (output[\"And\"] !== undefined) {\n        contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output[\"And\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryConfiguration = (output, context) => {\n    const contents = {\n        Destination: undefined,\n        IsEnabled: undefined,\n        Filter: undefined,\n        Id: undefined,\n        IncludedObjectVersions: undefined,\n        OptionalFields: undefined,\n        Schedule: undefined,\n    };\n    if (output[\"Destination\"] !== undefined) {\n        contents.Destination = deserializeAws_restXmlInventoryDestination(output[\"Destination\"], context);\n    }\n    if (output[\"IsEnabled\"] !== undefined) {\n        contents.IsEnabled = smithy_client_1.parseBoolean(output[\"IsEnabled\"]);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlInventoryFilter(output[\"Filter\"], context);\n    }\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"IncludedObjectVersions\"] !== undefined) {\n        contents.IncludedObjectVersions = smithy_client_1.expectString(output[\"IncludedObjectVersions\"]);\n    }\n    if (output.OptionalFields === \"\") {\n        contents.OptionalFields = [];\n    }\n    if (output[\"OptionalFields\"] !== undefined && output[\"OptionalFields\"][\"Field\"] !== undefined) {\n        contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields(smithy_client_1.getArrayIfSingleItem(output[\"OptionalFields\"][\"Field\"]), context);\n    }\n    if (output[\"Schedule\"] !== undefined) {\n        contents.Schedule = deserializeAws_restXmlInventorySchedule(output[\"Schedule\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlInventoryConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlInventoryDestination = (output, context) => {\n    const contents = {\n        S3BucketDestination: undefined,\n    };\n    if (output[\"S3BucketDestination\"] !== undefined) {\n        contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(output[\"S3BucketDestination\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryEncryption = (output, context) => {\n    const contents = {\n        SSES3: undefined,\n        SSEKMS: undefined,\n    };\n    if (output[\"SSE-S3\"] !== undefined) {\n        contents.SSES3 = deserializeAws_restXmlSSES3(output[\"SSE-S3\"], context);\n    }\n    if (output[\"SSE-KMS\"] !== undefined) {\n        contents.SSEKMS = deserializeAws_restXmlSSEKMS(output[\"SSE-KMS\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryFilter = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(output[\"Prefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventoryOptionalFields = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return smithy_client_1.expectString(entry);\n    });\n};\nconst deserializeAws_restXmlInventoryS3BucketDestination = (output, context) => {\n    const contents = {\n        AccountId: undefined,\n        Bucket: undefined,\n        Format: undefined,\n        Prefix: undefined,\n        Encryption: undefined,\n    };\n    if (output[\"AccountId\"] !== undefined) {\n        contents.AccountId = smithy_client_1.expectString(output[\"AccountId\"]);\n    }\n    if (output[\"Bucket\"] !== undefined) {\n        contents.Bucket = smithy_client_1.expectString(output[\"Bucket\"]);\n    }\n    if (output[\"Format\"] !== undefined) {\n        contents.Format = smithy_client_1.expectString(output[\"Format\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(output[\"Prefix\"]);\n    }\n    if (output[\"Encryption\"] !== undefined) {\n        contents.Encryption = deserializeAws_restXmlInventoryEncryption(output[\"Encryption\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlInventorySchedule = (output, context) => {\n    const contents = {\n        Frequency: undefined,\n    };\n    if (output[\"Frequency\"] !== undefined) {\n        contents.Frequency = smithy_client_1.expectString(output[\"Frequency\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLambdaFunctionConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        LambdaFunctionArn: undefined,\n        Events: undefined,\n        Filter: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"CloudFunction\"] !== undefined) {\n        contents.LambdaFunctionArn = smithy_client_1.expectString(output[\"CloudFunction\"]);\n    }\n    if (output.Event === \"\") {\n        contents.Events = [];\n    }\n    if (output[\"Event\"] !== undefined) {\n        contents.Events = deserializeAws_restXmlEventList(smithy_client_1.getArrayIfSingleItem(output[\"Event\"]), context);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLambdaFunctionConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlLambdaFunctionConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlLifecycleExpiration = (output, context) => {\n    const contents = {\n        Date: undefined,\n        Days: undefined,\n        ExpiredObjectDeleteMarker: undefined,\n    };\n    if (output[\"Date\"] !== undefined) {\n        contents.Date = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"Date\"]));\n    }\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = smithy_client_1.strictParseInt32(output[\"Days\"]);\n    }\n    if (output[\"ExpiredObjectDeleteMarker\"] !== undefined) {\n        contents.ExpiredObjectDeleteMarker = smithy_client_1.parseBoolean(output[\"ExpiredObjectDeleteMarker\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLifecycleRule = (output, context) => {\n    const contents = {\n        Expiration: undefined,\n        ID: undefined,\n        Prefix: undefined,\n        Filter: undefined,\n        Status: undefined,\n        Transitions: undefined,\n        NoncurrentVersionTransitions: undefined,\n        NoncurrentVersionExpiration: undefined,\n        AbortIncompleteMultipartUpload: undefined,\n    };\n    if (output[\"Expiration\"] !== undefined) {\n        contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output[\"Expiration\"], context);\n    }\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = smithy_client_1.expectString(output[\"ID\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(output[\"Prefix\"]);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlLifecycleRuleFilter(smithy_client_1.expectUnion(output[\"Filter\"]), context);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    if (output.Transition === \"\") {\n        contents.Transitions = [];\n    }\n    if (output[\"Transition\"] !== undefined) {\n        contents.Transitions = deserializeAws_restXmlTransitionList(smithy_client_1.getArrayIfSingleItem(output[\"Transition\"]), context);\n    }\n    if (output.NoncurrentVersionTransition === \"\") {\n        contents.NoncurrentVersionTransitions = [];\n    }\n    if (output[\"NoncurrentVersionTransition\"] !== undefined) {\n        contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList(smithy_client_1.getArrayIfSingleItem(output[\"NoncurrentVersionTransition\"]), context);\n    }\n    if (output[\"NoncurrentVersionExpiration\"] !== undefined) {\n        contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(output[\"NoncurrentVersionExpiration\"], context);\n    }\n    if (output[\"AbortIncompleteMultipartUpload\"] !== undefined) {\n        contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(output[\"AbortIncompleteMultipartUpload\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLifecycleRuleAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet(smithy_client_1.getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlLifecycleRuleFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: smithy_client_1.expectString(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: deserializeAws_restXmlLifecycleRuleAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst deserializeAws_restXmlLifecycleRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlLifecycleRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlLoggingEnabled = (output, context) => {\n    const contents = {\n        TargetBucket: undefined,\n        TargetGrants: undefined,\n        TargetPrefix: undefined,\n    };\n    if (output[\"TargetBucket\"] !== undefined) {\n        contents.TargetBucket = smithy_client_1.expectString(output[\"TargetBucket\"]);\n    }\n    if (output.TargetGrants === \"\") {\n        contents.TargetGrants = [];\n    }\n    if (output[\"TargetGrants\"] !== undefined && output[\"TargetGrants\"][\"Grant\"] !== undefined) {\n        contents.TargetGrants = deserializeAws_restXmlTargetGrants(smithy_client_1.getArrayIfSingleItem(output[\"TargetGrants\"][\"Grant\"]), context);\n    }\n    if (output[\"TargetPrefix\"] !== undefined) {\n        contents.TargetPrefix = smithy_client_1.expectString(output[\"TargetPrefix\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMetrics = (output, context) => {\n    const contents = {\n        Status: undefined,\n        EventThreshold: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    if (output[\"EventThreshold\"] !== undefined) {\n        contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output[\"EventThreshold\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMetricsAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n        AccessPointArn: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet(smithy_client_1.getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    if (output[\"AccessPointArn\"] !== undefined) {\n        contents.AccessPointArn = smithy_client_1.expectString(output[\"AccessPointArn\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMetricsConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        Filter: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlMetricsFilter(smithy_client_1.expectUnion(output[\"Filter\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMetricsConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlMetricsConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlMetricsFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: smithy_client_1.expectString(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"AccessPointArn\"] !== undefined) {\n        return {\n            AccessPointArn: smithy_client_1.expectString(output[\"AccessPointArn\"]),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: deserializeAws_restXmlMetricsAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst deserializeAws_restXmlMultipartUpload = (output, context) => {\n    const contents = {\n        UploadId: undefined,\n        Key: undefined,\n        Initiated: undefined,\n        StorageClass: undefined,\n        Owner: undefined,\n        Initiator: undefined,\n    };\n    if (output[\"UploadId\"] !== undefined) {\n        contents.UploadId = smithy_client_1.expectString(output[\"UploadId\"]);\n    }\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = smithy_client_1.expectString(output[\"Key\"]);\n    }\n    if (output[\"Initiated\"] !== undefined) {\n        contents.Initiated = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"Initiated\"]));\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = smithy_client_1.expectString(output[\"StorageClass\"]);\n    }\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n    }\n    if (output[\"Initiator\"] !== undefined) {\n        contents.Initiator = deserializeAws_restXmlInitiator(output[\"Initiator\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlMultipartUploadList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlMultipartUpload(entry, context);\n    });\n};\nconst deserializeAws_restXmlNoncurrentVersionExpiration = (output, context) => {\n    const contents = {\n        NoncurrentDays: undefined,\n    };\n    if (output[\"NoncurrentDays\"] !== undefined) {\n        contents.NoncurrentDays = smithy_client_1.strictParseInt32(output[\"NoncurrentDays\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoncurrentVersionTransition = (output, context) => {\n    const contents = {\n        NoncurrentDays: undefined,\n        StorageClass: undefined,\n    };\n    if (output[\"NoncurrentDays\"] !== undefined) {\n        contents.NoncurrentDays = smithy_client_1.strictParseInt32(output[\"NoncurrentDays\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = smithy_client_1.expectString(output[\"StorageClass\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlNoncurrentVersionTransitionList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlNoncurrentVersionTransition(entry, context);\n    });\n};\nconst deserializeAws_restXmlNotificationConfigurationFilter = (output, context) => {\n    const contents = {\n        Key: undefined,\n    };\n    if (output[\"S3Key\"] !== undefined) {\n        contents.Key = deserializeAws_restXmlS3KeyFilter(output[\"S3Key\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXml_Object = (output, context) => {\n    const contents = {\n        Key: undefined,\n        LastModified: undefined,\n        ETag: undefined,\n        Size: undefined,\n        StorageClass: undefined,\n        Owner: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = smithy_client_1.expectString(output[\"Key\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModified\"]));\n    }\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = smithy_client_1.expectString(output[\"ETag\"]);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = smithy_client_1.strictParseLong(output[\"Size\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = smithy_client_1.expectString(output[\"StorageClass\"]);\n    }\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXml_Object(entry, context);\n    });\n};\nconst deserializeAws_restXmlObjectLockConfiguration = (output, context) => {\n    const contents = {\n        ObjectLockEnabled: undefined,\n        Rule: undefined,\n    };\n    if (output[\"ObjectLockEnabled\"] !== undefined) {\n        contents.ObjectLockEnabled = smithy_client_1.expectString(output[\"ObjectLockEnabled\"]);\n    }\n    if (output[\"Rule\"] !== undefined) {\n        contents.Rule = deserializeAws_restXmlObjectLockRule(output[\"Rule\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectLockLegalHold = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectLockRetention = (output, context) => {\n    const contents = {\n        Mode: undefined,\n        RetainUntilDate: undefined,\n    };\n    if (output[\"Mode\"] !== undefined) {\n        contents.Mode = smithy_client_1.expectString(output[\"Mode\"]);\n    }\n    if (output[\"RetainUntilDate\"] !== undefined) {\n        contents.RetainUntilDate = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"RetainUntilDate\"]));\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectLockRule = (output, context) => {\n    const contents = {\n        DefaultRetention: undefined,\n    };\n    if (output[\"DefaultRetention\"] !== undefined) {\n        contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output[\"DefaultRetention\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectVersion = (output, context) => {\n    const contents = {\n        ETag: undefined,\n        Size: undefined,\n        StorageClass: undefined,\n        Key: undefined,\n        VersionId: undefined,\n        IsLatest: undefined,\n        LastModified: undefined,\n        Owner: undefined,\n    };\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = smithy_client_1.expectString(output[\"ETag\"]);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = smithy_client_1.strictParseLong(output[\"Size\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = smithy_client_1.expectString(output[\"StorageClass\"]);\n    }\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = smithy_client_1.expectString(output[\"Key\"]);\n    }\n    if (output[\"VersionId\"] !== undefined) {\n        contents.VersionId = smithy_client_1.expectString(output[\"VersionId\"]);\n    }\n    if (output[\"IsLatest\"] !== undefined) {\n        contents.IsLatest = smithy_client_1.parseBoolean(output[\"IsLatest\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModified\"]));\n    }\n    if (output[\"Owner\"] !== undefined) {\n        contents.Owner = deserializeAws_restXmlOwner(output[\"Owner\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlObjectVersionList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlObjectVersion(entry, context);\n    });\n};\nconst deserializeAws_restXmlOwner = (output, context) => {\n    const contents = {\n        DisplayName: undefined,\n        ID: undefined,\n    };\n    if (output[\"DisplayName\"] !== undefined) {\n        contents.DisplayName = smithy_client_1.expectString(output[\"DisplayName\"]);\n    }\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = smithy_client_1.expectString(output[\"ID\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOwnershipControls = (output, context) => {\n    const contents = {\n        Rules: undefined,\n    };\n    if (output.Rule === \"\") {\n        contents.Rules = [];\n    }\n    if (output[\"Rule\"] !== undefined) {\n        contents.Rules = deserializeAws_restXmlOwnershipControlsRules(smithy_client_1.getArrayIfSingleItem(output[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOwnershipControlsRule = (output, context) => {\n    const contents = {\n        ObjectOwnership: undefined,\n    };\n    if (output[\"ObjectOwnership\"] !== undefined) {\n        contents.ObjectOwnership = smithy_client_1.expectString(output[\"ObjectOwnership\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlOwnershipControlsRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlOwnershipControlsRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlPart = (output, context) => {\n    const contents = {\n        PartNumber: undefined,\n        LastModified: undefined,\n        ETag: undefined,\n        Size: undefined,\n    };\n    if (output[\"PartNumber\"] !== undefined) {\n        contents.PartNumber = smithy_client_1.strictParseInt32(output[\"PartNumber\"]);\n    }\n    if (output[\"LastModified\"] !== undefined) {\n        contents.LastModified = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"LastModified\"]));\n    }\n    if (output[\"ETag\"] !== undefined) {\n        contents.ETag = smithy_client_1.expectString(output[\"ETag\"]);\n    }\n    if (output[\"Size\"] !== undefined) {\n        contents.Size = smithy_client_1.strictParseLong(output[\"Size\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlParts = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlPart(entry, context);\n    });\n};\nconst deserializeAws_restXmlPolicyStatus = (output, context) => {\n    const contents = {\n        IsPublic: undefined,\n    };\n    if (output[\"IsPublic\"] !== undefined) {\n        contents.IsPublic = smithy_client_1.parseBoolean(output[\"IsPublic\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlProgress = (output, context) => {\n    const contents = {\n        BytesScanned: undefined,\n        BytesProcessed: undefined,\n        BytesReturned: undefined,\n    };\n    if (output[\"BytesScanned\"] !== undefined) {\n        contents.BytesScanned = smithy_client_1.strictParseLong(output[\"BytesScanned\"]);\n    }\n    if (output[\"BytesProcessed\"] !== undefined) {\n        contents.BytesProcessed = smithy_client_1.strictParseLong(output[\"BytesProcessed\"]);\n    }\n    if (output[\"BytesReturned\"] !== undefined) {\n        contents.BytesReturned = smithy_client_1.strictParseLong(output[\"BytesReturned\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlProgressEvent = (output, context) => {\n    const contents = {\n        Details: undefined,\n    };\n    if (output[\"Details\"] !== undefined) {\n        contents.Details = deserializeAws_restXmlProgress(output[\"Details\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlPublicAccessBlockConfiguration = (output, context) => {\n    const contents = {\n        BlockPublicAcls: undefined,\n        IgnorePublicAcls: undefined,\n        BlockPublicPolicy: undefined,\n        RestrictPublicBuckets: undefined,\n    };\n    if (output[\"BlockPublicAcls\"] !== undefined) {\n        contents.BlockPublicAcls = smithy_client_1.parseBoolean(output[\"BlockPublicAcls\"]);\n    }\n    if (output[\"IgnorePublicAcls\"] !== undefined) {\n        contents.IgnorePublicAcls = smithy_client_1.parseBoolean(output[\"IgnorePublicAcls\"]);\n    }\n    if (output[\"BlockPublicPolicy\"] !== undefined) {\n        contents.BlockPublicPolicy = smithy_client_1.parseBoolean(output[\"BlockPublicPolicy\"]);\n    }\n    if (output[\"RestrictPublicBuckets\"] !== undefined) {\n        contents.RestrictPublicBuckets = smithy_client_1.parseBoolean(output[\"RestrictPublicBuckets\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlQueueConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        QueueArn: undefined,\n        Events: undefined,\n        Filter: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"Queue\"] !== undefined) {\n        contents.QueueArn = smithy_client_1.expectString(output[\"Queue\"]);\n    }\n    if (output.Event === \"\") {\n        contents.Events = [];\n    }\n    if (output[\"Event\"] !== undefined) {\n        contents.Events = deserializeAws_restXmlEventList(smithy_client_1.getArrayIfSingleItem(output[\"Event\"]), context);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlQueueConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlQueueConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlRecordsEvent = (output, context) => {\n    const contents = {\n        Payload: undefined,\n    };\n    if (output[\"Payload\"] !== undefined) {\n        contents.Payload = context.base64Decoder(output[\"Payload\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRedirect = (output, context) => {\n    const contents = {\n        HostName: undefined,\n        HttpRedirectCode: undefined,\n        Protocol: undefined,\n        ReplaceKeyPrefixWith: undefined,\n        ReplaceKeyWith: undefined,\n    };\n    if (output[\"HostName\"] !== undefined) {\n        contents.HostName = smithy_client_1.expectString(output[\"HostName\"]);\n    }\n    if (output[\"HttpRedirectCode\"] !== undefined) {\n        contents.HttpRedirectCode = smithy_client_1.expectString(output[\"HttpRedirectCode\"]);\n    }\n    if (output[\"Protocol\"] !== undefined) {\n        contents.Protocol = smithy_client_1.expectString(output[\"Protocol\"]);\n    }\n    if (output[\"ReplaceKeyPrefixWith\"] !== undefined) {\n        contents.ReplaceKeyPrefixWith = smithy_client_1.expectString(output[\"ReplaceKeyPrefixWith\"]);\n    }\n    if (output[\"ReplaceKeyWith\"] !== undefined) {\n        contents.ReplaceKeyWith = smithy_client_1.expectString(output[\"ReplaceKeyWith\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRedirectAllRequestsTo = (output, context) => {\n    const contents = {\n        HostName: undefined,\n        Protocol: undefined,\n    };\n    if (output[\"HostName\"] !== undefined) {\n        contents.HostName = smithy_client_1.expectString(output[\"HostName\"]);\n    }\n    if (output[\"Protocol\"] !== undefined) {\n        contents.Protocol = smithy_client_1.expectString(output[\"Protocol\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicaModifications = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationConfiguration = (output, context) => {\n    const contents = {\n        Role: undefined,\n        Rules: undefined,\n    };\n    if (output[\"Role\"] !== undefined) {\n        contents.Role = smithy_client_1.expectString(output[\"Role\"]);\n    }\n    if (output.Rule === \"\") {\n        contents.Rules = [];\n    }\n    if (output[\"Rule\"] !== undefined) {\n        contents.Rules = deserializeAws_restXmlReplicationRules(smithy_client_1.getArrayIfSingleItem(output[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationRule = (output, context) => {\n    const contents = {\n        ID: undefined,\n        Priority: undefined,\n        Prefix: undefined,\n        Filter: undefined,\n        Status: undefined,\n        SourceSelectionCriteria: undefined,\n        ExistingObjectReplication: undefined,\n        Destination: undefined,\n        DeleteMarkerReplication: undefined,\n    };\n    if (output[\"ID\"] !== undefined) {\n        contents.ID = smithy_client_1.expectString(output[\"ID\"]);\n    }\n    if (output[\"Priority\"] !== undefined) {\n        contents.Priority = smithy_client_1.strictParseInt32(output[\"Priority\"]);\n    }\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(output[\"Prefix\"]);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlReplicationRuleFilter(smithy_client_1.expectUnion(output[\"Filter\"]), context);\n    }\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    if (output[\"SourceSelectionCriteria\"] !== undefined) {\n        contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(output[\"SourceSelectionCriteria\"], context);\n    }\n    if (output[\"ExistingObjectReplication\"] !== undefined) {\n        contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(output[\"ExistingObjectReplication\"], context);\n    }\n    if (output[\"Destination\"] !== undefined) {\n        contents.Destination = deserializeAws_restXmlDestination(output[\"Destination\"], context);\n    }\n    if (output[\"DeleteMarkerReplication\"] !== undefined) {\n        contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(output[\"DeleteMarkerReplication\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationRuleAndOperator = (output, context) => {\n    const contents = {\n        Prefix: undefined,\n        Tags: undefined,\n    };\n    if (output[\"Prefix\"] !== undefined) {\n        contents.Prefix = smithy_client_1.expectString(output[\"Prefix\"]);\n    }\n    if (output.Tag === \"\") {\n        contents.Tags = [];\n    }\n    if (output[\"Tag\"] !== undefined) {\n        contents.Tags = deserializeAws_restXmlTagSet(smithy_client_1.getArrayIfSingleItem(output[\"Tag\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationRuleFilter = (output, context) => {\n    if (output[\"Prefix\"] !== undefined) {\n        return {\n            Prefix: smithy_client_1.expectString(output[\"Prefix\"]),\n        };\n    }\n    if (output[\"Tag\"] !== undefined) {\n        return {\n            Tag: deserializeAws_restXmlTag(output[\"Tag\"], context),\n        };\n    }\n    if (output[\"And\"] !== undefined) {\n        return {\n            And: deserializeAws_restXmlReplicationRuleAndOperator(output[\"And\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst deserializeAws_restXmlReplicationRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlReplicationRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlReplicationTime = (output, context) => {\n    const contents = {\n        Status: undefined,\n        Time: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    if (output[\"Time\"] !== undefined) {\n        contents.Time = deserializeAws_restXmlReplicationTimeValue(output[\"Time\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlReplicationTimeValue = (output, context) => {\n    const contents = {\n        Minutes: undefined,\n    };\n    if (output[\"Minutes\"] !== undefined) {\n        contents.Minutes = smithy_client_1.strictParseInt32(output[\"Minutes\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRoutingRule = (output, context) => {\n    const contents = {\n        Condition: undefined,\n        Redirect: undefined,\n    };\n    if (output[\"Condition\"] !== undefined) {\n        contents.Condition = deserializeAws_restXmlCondition(output[\"Condition\"], context);\n    }\n    if (output[\"Redirect\"] !== undefined) {\n        contents.Redirect = deserializeAws_restXmlRedirect(output[\"Redirect\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlRoutingRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlRoutingRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlS3KeyFilter = (output, context) => {\n    const contents = {\n        FilterRules: undefined,\n    };\n    if (output.FilterRule === \"\") {\n        contents.FilterRules = [];\n    }\n    if (output[\"FilterRule\"] !== undefined) {\n        contents.FilterRules = deserializeAws_restXmlFilterRuleList(smithy_client_1.getArrayIfSingleItem(output[\"FilterRule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlSelectObjectContentEventStream = (output, context) => {\n    if (output[\"Records\"] !== undefined) {\n        return {\n            Records: deserializeAws_restXmlRecordsEvent(output[\"Records\"], context),\n        };\n    }\n    if (output[\"Stats\"] !== undefined) {\n        return {\n            Stats: deserializeAws_restXmlStatsEvent(output[\"Stats\"], context),\n        };\n    }\n    if (output[\"Progress\"] !== undefined) {\n        return {\n            Progress: deserializeAws_restXmlProgressEvent(output[\"Progress\"], context),\n        };\n    }\n    if (output[\"Cont\"] !== undefined) {\n        return {\n            Cont: deserializeAws_restXmlContinuationEvent(output[\"Cont\"], context),\n        };\n    }\n    if (output[\"End\"] !== undefined) {\n        return {\n            End: deserializeAws_restXmlEndEvent(output[\"End\"], context),\n        };\n    }\n    return { $unknown: Object.entries(output)[0] };\n};\nconst deserializeAws_restXmlServerSideEncryptionByDefault = (output, context) => {\n    const contents = {\n        SSEAlgorithm: undefined,\n        KMSMasterKeyID: undefined,\n    };\n    if (output[\"SSEAlgorithm\"] !== undefined) {\n        contents.SSEAlgorithm = smithy_client_1.expectString(output[\"SSEAlgorithm\"]);\n    }\n    if (output[\"KMSMasterKeyID\"] !== undefined) {\n        contents.KMSMasterKeyID = smithy_client_1.expectString(output[\"KMSMasterKeyID\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionConfiguration = (output, context) => {\n    const contents = {\n        Rules: undefined,\n    };\n    if (output.Rule === \"\") {\n        contents.Rules = [];\n    }\n    if (output[\"Rule\"] !== undefined) {\n        contents.Rules = deserializeAws_restXmlServerSideEncryptionRules(smithy_client_1.getArrayIfSingleItem(output[\"Rule\"]), context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionRule = (output, context) => {\n    const contents = {\n        ApplyServerSideEncryptionByDefault: undefined,\n        BucketKeyEnabled: undefined,\n    };\n    if (output[\"ApplyServerSideEncryptionByDefault\"] !== undefined) {\n        contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(output[\"ApplyServerSideEncryptionByDefault\"], context);\n    }\n    if (output[\"BucketKeyEnabled\"] !== undefined) {\n        contents.BucketKeyEnabled = smithy_client_1.parseBoolean(output[\"BucketKeyEnabled\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlServerSideEncryptionRules = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlServerSideEncryptionRule(entry, context);\n    });\n};\nconst deserializeAws_restXmlSourceSelectionCriteria = (output, context) => {\n    const contents = {\n        SseKmsEncryptedObjects: undefined,\n        ReplicaModifications: undefined,\n    };\n    if (output[\"SseKmsEncryptedObjects\"] !== undefined) {\n        contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(output[\"SseKmsEncryptedObjects\"], context);\n    }\n    if (output[\"ReplicaModifications\"] !== undefined) {\n        contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output[\"ReplicaModifications\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlSSEKMS = (output, context) => {\n    const contents = {\n        KeyId: undefined,\n    };\n    if (output[\"KeyId\"] !== undefined) {\n        contents.KeyId = smithy_client_1.expectString(output[\"KeyId\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlSseKmsEncryptedObjects = (output, context) => {\n    const contents = {\n        Status: undefined,\n    };\n    if (output[\"Status\"] !== undefined) {\n        contents.Status = smithy_client_1.expectString(output[\"Status\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlSSES3 = (output, context) => {\n    const contents = {};\n    return contents;\n};\nconst deserializeAws_restXmlStats = (output, context) => {\n    const contents = {\n        BytesScanned: undefined,\n        BytesProcessed: undefined,\n        BytesReturned: undefined,\n    };\n    if (output[\"BytesScanned\"] !== undefined) {\n        contents.BytesScanned = smithy_client_1.strictParseLong(output[\"BytesScanned\"]);\n    }\n    if (output[\"BytesProcessed\"] !== undefined) {\n        contents.BytesProcessed = smithy_client_1.strictParseLong(output[\"BytesProcessed\"]);\n    }\n    if (output[\"BytesReturned\"] !== undefined) {\n        contents.BytesReturned = smithy_client_1.strictParseLong(output[\"BytesReturned\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlStatsEvent = (output, context) => {\n    const contents = {\n        Details: undefined,\n    };\n    if (output[\"Details\"] !== undefined) {\n        contents.Details = deserializeAws_restXmlStats(output[\"Details\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlStorageClassAnalysis = (output, context) => {\n    const contents = {\n        DataExport: undefined,\n    };\n    if (output[\"DataExport\"] !== undefined) {\n        contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output[\"DataExport\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlStorageClassAnalysisDataExport = (output, context) => {\n    const contents = {\n        OutputSchemaVersion: undefined,\n        Destination: undefined,\n    };\n    if (output[\"OutputSchemaVersion\"] !== undefined) {\n        contents.OutputSchemaVersion = smithy_client_1.expectString(output[\"OutputSchemaVersion\"]);\n    }\n    if (output[\"Destination\"] !== undefined) {\n        contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output[\"Destination\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTag = (output, context) => {\n    const contents = {\n        Key: undefined,\n        Value: undefined,\n    };\n    if (output[\"Key\"] !== undefined) {\n        contents.Key = smithy_client_1.expectString(output[\"Key\"]);\n    }\n    if (output[\"Value\"] !== undefined) {\n        contents.Value = smithy_client_1.expectString(output[\"Value\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTagSet = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlTag(entry, context);\n    });\n};\nconst deserializeAws_restXmlTargetGrant = (output, context) => {\n    const contents = {\n        Grantee: undefined,\n        Permission: undefined,\n    };\n    if (output[\"Grantee\"] !== undefined) {\n        contents.Grantee = deserializeAws_restXmlGrantee(output[\"Grantee\"], context);\n    }\n    if (output[\"Permission\"] !== undefined) {\n        contents.Permission = smithy_client_1.expectString(output[\"Permission\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTargetGrants = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlTargetGrant(entry, context);\n    });\n};\nconst deserializeAws_restXmlTiering = (output, context) => {\n    const contents = {\n        Days: undefined,\n        AccessTier: undefined,\n    };\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = smithy_client_1.strictParseInt32(output[\"Days\"]);\n    }\n    if (output[\"AccessTier\"] !== undefined) {\n        contents.AccessTier = smithy_client_1.expectString(output[\"AccessTier\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTieringList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlTiering(entry, context);\n    });\n};\nconst deserializeAws_restXmlTopicConfiguration = (output, context) => {\n    const contents = {\n        Id: undefined,\n        TopicArn: undefined,\n        Events: undefined,\n        Filter: undefined,\n    };\n    if (output[\"Id\"] !== undefined) {\n        contents.Id = smithy_client_1.expectString(output[\"Id\"]);\n    }\n    if (output[\"Topic\"] !== undefined) {\n        contents.TopicArn = smithy_client_1.expectString(output[\"Topic\"]);\n    }\n    if (output.Event === \"\") {\n        contents.Events = [];\n    }\n    if (output[\"Event\"] !== undefined) {\n        contents.Events = deserializeAws_restXmlEventList(smithy_client_1.getArrayIfSingleItem(output[\"Event\"]), context);\n    }\n    if (output[\"Filter\"] !== undefined) {\n        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output[\"Filter\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTopicConfigurationList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlTopicConfiguration(entry, context);\n    });\n};\nconst deserializeAws_restXmlTransition = (output, context) => {\n    const contents = {\n        Date: undefined,\n        Days: undefined,\n        StorageClass: undefined,\n    };\n    if (output[\"Date\"] !== undefined) {\n        contents.Date = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"Date\"]));\n    }\n    if (output[\"Days\"] !== undefined) {\n        contents.Days = smithy_client_1.strictParseInt32(output[\"Days\"]);\n    }\n    if (output[\"StorageClass\"] !== undefined) {\n        contents.StorageClass = smithy_client_1.expectString(output[\"StorageClass\"]);\n    }\n    return contents;\n};\nconst deserializeAws_restXmlTransitionList = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restXmlTransition(entry, context);\n    });\n};\nconst deserializeMetadata = (output) => {\n    var _a;\n    return ({\n        httpStatusCode: output.statusCode,\n        requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n        extendedRequestId: output.headers[\"x-amz-id-2\"],\n        cfId: output.headers[\"x-amz-cf-id\"],\n    });\n};\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst isSerializableHeaderValue = (value) => value !== undefined &&\n    value !== null &&\n    value !== \"\" &&\n    (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n    (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        const parsedObj = fast_xml_parser_1.parse(encoded, {\n            attributeNamePrefix: \"\",\n            ignoreAttributes: false,\n            parseNodeValue: false,\n            trimValues: false,\n            tagValueProcessor: (val) => (val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : entities_1.decodeHTML(val)),\n        });\n        const textNodeName = \"#text\";\n        const key = Object.keys(parsedObj)[0];\n        const parsedObjToReturn = parsedObj[key];\n        if (parsedObjToReturn[textNodeName]) {\n            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n            delete parsedObjToReturn[textNodeName];\n        }\n        return smithy_client_1.getValueFromTextNode(parsedObjToReturn);\n    }\n    return {};\n});\nconst loadRestXmlErrorCode = (output, data) => {\n    if (data.Code !== undefined) {\n        return data.Code;\n    }\n    if (output.statusCode == 404) {\n        return \"NotFound\";\n    }\n    return \"\";\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRuntimeConfig = void 0;\nconst tslib_1 = require(\"tslib\");\nconst package_json_1 = tslib_1.__importDefault(require(\"../package.json\"));\nconst client_sts_1 = require(\"@aws-sdk/client-sts\");\nconst config_resolver_1 = require(\"@aws-sdk/config-resolver\");\nconst credential_provider_node_1 = require(\"@aws-sdk/credential-provider-node\");\nconst eventstream_serde_node_1 = require(\"@aws-sdk/eventstream-serde-node\");\nconst hash_node_1 = require(\"@aws-sdk/hash-node\");\nconst hash_stream_node_1 = require(\"@aws-sdk/hash-stream-node\");\nconst middleware_bucket_endpoint_1 = require(\"@aws-sdk/middleware-bucket-endpoint\");\nconst middleware_retry_1 = require(\"@aws-sdk/middleware-retry\");\nconst node_config_provider_1 = require(\"@aws-sdk/node-config-provider\");\nconst node_http_handler_1 = require(\"@aws-sdk/node-http-handler\");\nconst util_base64_node_1 = require(\"@aws-sdk/util-base64-node\");\nconst util_body_length_node_1 = require(\"@aws-sdk/util-body-length-node\");\nconst util_user_agent_node_1 = require(\"@aws-sdk/util-user-agent-node\");\nconst util_utf8_node_1 = require(\"@aws-sdk/util-utf8-node\");\nconst runtimeConfig_shared_1 = require(\"./runtimeConfig.shared\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst getRuntimeConfig = (config) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;\n    smithy_client_1.emitWarningIfUnsupportedVersion(process.version);\n    const clientSharedValues = runtimeConfig_shared_1.getRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,\n        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,\n        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,\n        credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : client_sts_1.decorateDefaultCredentialProvider(credential_provider_node_1.defaultProvider),\n        defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : util_user_agent_node_1.defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),\n        eventStreamSerdeProvider: (_f = config === null || config === void 0 ? void 0 : config.eventStreamSerdeProvider) !== null && _f !== void 0 ? _f : eventstream_serde_node_1.eventStreamSerdeProvider,\n        maxAttempts: (_g = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _g !== void 0 ? _g : node_config_provider_1.loadConfig(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n        md5: (_h = config === null || config === void 0 ? void 0 : config.md5) !== null && _h !== void 0 ? _h : hash_node_1.Hash.bind(null, \"md5\"),\n        region: (_j = config === null || config === void 0 ? void 0 : config.region) !== null && _j !== void 0 ? _j : node_config_provider_1.loadConfig(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),\n        requestHandler: (_k = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _k !== void 0 ? _k : new node_http_handler_1.NodeHttpHandler(),\n        retryMode: (_l = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _l !== void 0 ? _l : node_config_provider_1.loadConfig(middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS),\n        sha256: (_m = config === null || config === void 0 ? void 0 : config.sha256) !== null && _m !== void 0 ? _m : hash_node_1.Hash.bind(null, \"sha256\"),\n        streamCollector: (_o = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _o !== void 0 ? _o : node_http_handler_1.streamCollector,\n        streamHasher: (_p = config === null || config === void 0 ? void 0 : config.streamHasher) !== null && _p !== void 0 ? _p : hash_stream_node_1.fileStreamHasher,\n        useArnRegion: (_q = config === null || config === void 0 ? void 0 : config.useArnRegion) !== null && _q !== void 0 ? _q : node_config_provider_1.loadConfig(middleware_bucket_endpoint_1.NODE_USE_ARN_REGION_CONFIG_OPTIONS),\n        useDualstackEndpoint: (_r = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _r !== void 0 ? _r : node_config_provider_1.loadConfig(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n        useFipsEndpoint: (_s = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _s !== void 0 ? _s : node_config_provider_1.loadConfig(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n        utf8Decoder: (_t = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _t !== void 0 ? _t : util_utf8_node_1.fromUtf8,\n        utf8Encoder: (_u = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _u !== void 0 ? _u : util_utf8_node_1.toUtf8,\n    };\n};\nexports.getRuntimeConfig = getRuntimeConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRuntimeConfig = void 0;\nconst middleware_sdk_s3_1 = require(\"@aws-sdk/middleware-sdk-s3\");\nconst url_parser_1 = require(\"@aws-sdk/url-parser\");\nconst endpoints_1 = require(\"./endpoints\");\nconst getRuntimeConfig = (config) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    return ({\n        apiVersion: \"2006-03-01\",\n        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,\n        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},\n        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,\n        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : \"S3\",\n        signerConstructor: (_e = config === null || config === void 0 ? void 0 : config.signerConstructor) !== null && _e !== void 0 ? _e : middleware_sdk_s3_1.S3SignatureV4,\n        signingEscapePath: (_f = config === null || config === void 0 ? void 0 : config.signingEscapePath) !== null && _f !== void 0 ? _f : false,\n        urlParser: (_g = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _g !== void 0 ? _g : url_parser_1.parseUrl,\n        useArnRegion: (_h = config === null || config === void 0 ? void 0 : config.useArnRegion) !== null && _h !== void 0 ? _h : false,\n    });\n};\nexports.getRuntimeConfig = getRuntimeConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./waitForBucketExists\"), exports);\ntslib_1.__exportStar(require(\"./waitForBucketNotExists\"), exports);\ntslib_1.__exportStar(require(\"./waitForObjectExists\"), exports);\ntslib_1.__exportStar(require(\"./waitForObjectNotExists\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.waitUntilBucketExists = exports.waitForBucketExists = void 0;\nconst util_waiter_1 = require(\"@aws-sdk/util-waiter\");\nconst HeadBucketCommand_1 = require(\"../commands/HeadBucketCommand\");\nconst checkState = async (client, input) => {\n    let reason;\n    try {\n        const result = await client.send(new HeadBucketCommand_1.HeadBucketCommand(input));\n        reason = result;\n        return { state: util_waiter_1.WaiterState.SUCCESS, reason };\n    }\n    catch (exception) {\n        reason = exception;\n        if (exception.name && exception.name == \"NotFound\") {\n            return { state: util_waiter_1.WaiterState.RETRY, reason };\n        }\n    }\n    return { state: util_waiter_1.WaiterState.RETRY, reason };\n};\nconst waitForBucketExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    return util_waiter_1.createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\nexports.waitForBucketExists = waitForBucketExists;\nconst waitUntilBucketExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    const result = await util_waiter_1.createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n    return util_waiter_1.checkExceptions(result);\n};\nexports.waitUntilBucketExists = waitUntilBucketExists;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.waitUntilBucketNotExists = exports.waitForBucketNotExists = void 0;\nconst util_waiter_1 = require(\"@aws-sdk/util-waiter\");\nconst HeadBucketCommand_1 = require(\"../commands/HeadBucketCommand\");\nconst checkState = async (client, input) => {\n    let reason;\n    try {\n        const result = await client.send(new HeadBucketCommand_1.HeadBucketCommand(input));\n        reason = result;\n    }\n    catch (exception) {\n        reason = exception;\n        if (exception.name && exception.name == \"NotFound\") {\n            return { state: util_waiter_1.WaiterState.SUCCESS, reason };\n        }\n    }\n    return { state: util_waiter_1.WaiterState.RETRY, reason };\n};\nconst waitForBucketNotExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    return util_waiter_1.createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\nexports.waitForBucketNotExists = waitForBucketNotExists;\nconst waitUntilBucketNotExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    const result = await util_waiter_1.createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n    return util_waiter_1.checkExceptions(result);\n};\nexports.waitUntilBucketNotExists = waitUntilBucketNotExists;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.waitUntilObjectExists = exports.waitForObjectExists = void 0;\nconst util_waiter_1 = require(\"@aws-sdk/util-waiter\");\nconst HeadObjectCommand_1 = require(\"../commands/HeadObjectCommand\");\nconst checkState = async (client, input) => {\n    let reason;\n    try {\n        const result = await client.send(new HeadObjectCommand_1.HeadObjectCommand(input));\n        reason = result;\n        return { state: util_waiter_1.WaiterState.SUCCESS, reason };\n    }\n    catch (exception) {\n        reason = exception;\n        if (exception.name && exception.name == \"NotFound\") {\n            return { state: util_waiter_1.WaiterState.RETRY, reason };\n        }\n    }\n    return { state: util_waiter_1.WaiterState.RETRY, reason };\n};\nconst waitForObjectExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    return util_waiter_1.createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\nexports.waitForObjectExists = waitForObjectExists;\nconst waitUntilObjectExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    const result = await util_waiter_1.createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n    return util_waiter_1.checkExceptions(result);\n};\nexports.waitUntilObjectExists = waitUntilObjectExists;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.waitUntilObjectNotExists = exports.waitForObjectNotExists = void 0;\nconst util_waiter_1 = require(\"@aws-sdk/util-waiter\");\nconst HeadObjectCommand_1 = require(\"../commands/HeadObjectCommand\");\nconst checkState = async (client, input) => {\n    let reason;\n    try {\n        const result = await client.send(new HeadObjectCommand_1.HeadObjectCommand(input));\n        reason = result;\n    }\n    catch (exception) {\n        reason = exception;\n        if (exception.name && exception.name == \"NotFound\") {\n            return { state: util_waiter_1.WaiterState.SUCCESS, reason };\n        }\n    }\n    return { state: util_waiter_1.WaiterState.RETRY, reason };\n};\nconst waitForObjectNotExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    return util_waiter_1.createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n};\nexports.waitForObjectNotExists = waitForObjectNotExists;\nconst waitUntilObjectNotExists = async (params, input) => {\n    const serviceDefaults = { minDelay: 5, maxDelay: 120 };\n    const result = await util_waiter_1.createWaiter({ ...serviceDefaults, ...params }, input, checkState);\n    return util_waiter_1.checkExceptions(result);\n};\nexports.waitUntilObjectNotExists = waitUntilObjectNotExists;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SSO = void 0;\nconst GetRoleCredentialsCommand_1 = require(\"./commands/GetRoleCredentialsCommand\");\nconst ListAccountRolesCommand_1 = require(\"./commands/ListAccountRolesCommand\");\nconst ListAccountsCommand_1 = require(\"./commands/ListAccountsCommand\");\nconst LogoutCommand_1 = require(\"./commands/LogoutCommand\");\nconst SSOClient_1 = require(\"./SSOClient\");\nclass SSO extends SSOClient_1.SSOClient {\n    getRoleCredentials(args, optionsOrCb, cb) {\n        const command = new GetRoleCredentialsCommand_1.GetRoleCredentialsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listAccountRoles(args, optionsOrCb, cb) {\n        const command = new ListAccountRolesCommand_1.ListAccountRolesCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    listAccounts(args, optionsOrCb, cb) {\n        const command = new ListAccountsCommand_1.ListAccountsCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    logout(args, optionsOrCb, cb) {\n        const command = new LogoutCommand_1.LogoutCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n}\nexports.SSO = SSO;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SSOClient = void 0;\nconst config_resolver_1 = require(\"@aws-sdk/config-resolver\");\nconst middleware_content_length_1 = require(\"@aws-sdk/middleware-content-length\");\nconst middleware_host_header_1 = require(\"@aws-sdk/middleware-host-header\");\nconst middleware_logger_1 = require(\"@aws-sdk/middleware-logger\");\nconst middleware_retry_1 = require(\"@aws-sdk/middleware-retry\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/middleware-user-agent\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst runtimeConfig_1 = require(\"./runtimeConfig\");\nclass SSOClient extends smithy_client_1.Client {\n    constructor(configuration) {\n        const _config_0 = runtimeConfig_1.getRuntimeConfig(configuration);\n        const _config_1 = config_resolver_1.resolveRegionConfig(_config_0);\n        const _config_2 = config_resolver_1.resolveEndpointsConfig(_config_1);\n        const _config_3 = middleware_retry_1.resolveRetryConfig(_config_2);\n        const _config_4 = middleware_host_header_1.resolveHostHeaderConfig(_config_3);\n        const _config_5 = middleware_user_agent_1.resolveUserAgentConfig(_config_4);\n        super(_config_5);\n        this.config = _config_5;\n        this.middlewareStack.use(middleware_retry_1.getRetryPlugin(this.config));\n        this.middlewareStack.use(middleware_content_length_1.getContentLengthPlugin(this.config));\n        this.middlewareStack.use(middleware_host_header_1.getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(middleware_logger_1.getLoggerPlugin(this.config));\n        this.middlewareStack.use(middleware_user_agent_1.getUserAgentPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\nexports.SSOClient = SSOClient;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetRoleCredentialsCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restJson1_1 = require(\"../protocols/Aws_restJson1\");\nclass GetRoleCredentialsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"SSOClient\";\n        const commandName = \"GetRoleCredentialsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponse.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restJson1_1.serializeAws_restJson1GetRoleCredentialsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restJson1_1.deserializeAws_restJson1GetRoleCredentialsCommand(output, context);\n    }\n}\nexports.GetRoleCredentialsCommand = GetRoleCredentialsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListAccountRolesCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restJson1_1 = require(\"../protocols/Aws_restJson1\");\nclass ListAccountRolesCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"SSOClient\";\n        const commandName = \"ListAccountRolesCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.ListAccountRolesRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.ListAccountRolesResponse.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restJson1_1.serializeAws_restJson1ListAccountRolesCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restJson1_1.deserializeAws_restJson1ListAccountRolesCommand(output, context);\n    }\n}\nexports.ListAccountRolesCommand = ListAccountRolesCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListAccountsCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restJson1_1 = require(\"../protocols/Aws_restJson1\");\nclass ListAccountsCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"SSOClient\";\n        const commandName = \"ListAccountsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.ListAccountsRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.ListAccountsResponse.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restJson1_1.serializeAws_restJson1ListAccountsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restJson1_1.deserializeAws_restJson1ListAccountsCommand(output, context);\n    }\n}\nexports.ListAccountsCommand = ListAccountsCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LogoutCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_restJson1_1 = require(\"../protocols/Aws_restJson1\");\nclass LogoutCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"SSOClient\";\n        const commandName = \"LogoutCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.LogoutRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: (output) => output,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_restJson1_1.serializeAws_restJson1LogoutCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_restJson1_1.deserializeAws_restJson1LogoutCommand(output, context);\n    }\n}\nexports.LogoutCommand = LogoutCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./GetRoleCredentialsCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListAccountRolesCommand\"), exports);\ntslib_1.__exportStar(require(\"./ListAccountsCommand\"), exports);\ntslib_1.__exportStar(require(\"./LogoutCommand\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultRegionInfoProvider = void 0;\nconst config_resolver_1 = require(\"@aws-sdk/config-resolver\");\nconst regionHash = {\n    \"ap-northeast-1\": {\n        variants: [\n            {\n                hostname: \"portal.sso.ap-northeast-1.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"ap-northeast-1\",\n    },\n    \"ap-northeast-2\": {\n        variants: [\n            {\n                hostname: \"portal.sso.ap-northeast-2.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"ap-northeast-2\",\n    },\n    \"ap-south-1\": {\n        variants: [\n            {\n                hostname: \"portal.sso.ap-south-1.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"ap-south-1\",\n    },\n    \"ap-southeast-1\": {\n        variants: [\n            {\n                hostname: \"portal.sso.ap-southeast-1.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"ap-southeast-1\",\n    },\n    \"ap-southeast-2\": {\n        variants: [\n            {\n                hostname: \"portal.sso.ap-southeast-2.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"ap-southeast-2\",\n    },\n    \"ca-central-1\": {\n        variants: [\n            {\n                hostname: \"portal.sso.ca-central-1.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"ca-central-1\",\n    },\n    \"eu-central-1\": {\n        variants: [\n            {\n                hostname: \"portal.sso.eu-central-1.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"eu-central-1\",\n    },\n    \"eu-north-1\": {\n        variants: [\n            {\n                hostname: \"portal.sso.eu-north-1.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"eu-north-1\",\n    },\n    \"eu-west-1\": {\n        variants: [\n            {\n                hostname: \"portal.sso.eu-west-1.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"eu-west-1\",\n    },\n    \"eu-west-2\": {\n        variants: [\n            {\n                hostname: \"portal.sso.eu-west-2.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"eu-west-2\",\n    },\n    \"eu-west-3\": {\n        variants: [\n            {\n                hostname: \"portal.sso.eu-west-3.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"eu-west-3\",\n    },\n    \"sa-east-1\": {\n        variants: [\n            {\n                hostname: \"portal.sso.sa-east-1.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"sa-east-1\",\n    },\n    \"us-east-1\": {\n        variants: [\n            {\n                hostname: \"portal.sso.us-east-1.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"us-east-1\",\n    },\n    \"us-east-2\": {\n        variants: [\n            {\n                hostname: \"portal.sso.us-east-2.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"us-east-2\",\n    },\n    \"us-gov-west-1\": {\n        variants: [\n            {\n                hostname: \"portal.sso.us-gov-west-1.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"us-gov-west-1\",\n    },\n    \"us-west-2\": {\n        variants: [\n            {\n                hostname: \"portal.sso.us-west-2.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"us-west-2\",\n    },\n};\nconst partitionHash = {\n    aws: {\n        regions: [\n            \"af-south-1\",\n            \"ap-east-1\",\n            \"ap-northeast-1\",\n            \"ap-northeast-2\",\n            \"ap-northeast-3\",\n            \"ap-south-1\",\n            \"ap-southeast-1\",\n            \"ap-southeast-2\",\n            \"ca-central-1\",\n            \"eu-central-1\",\n            \"eu-north-1\",\n            \"eu-south-1\",\n            \"eu-west-1\",\n            \"eu-west-2\",\n            \"eu-west-3\",\n            \"me-south-1\",\n            \"sa-east-1\",\n            \"us-east-1\",\n            \"us-east-2\",\n            \"us-west-1\",\n            \"us-west-2\",\n        ],\n        regionRegex: \"^(us|eu|ap|sa|ca|me|af)\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"portal.sso.{region}.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"portal.sso-fips.{region}.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"portal.sso-fips.{region}.api.aws\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"portal.sso.{region}.api.aws\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"aws-cn\": {\n        regions: [\"cn-north-1\", \"cn-northwest-1\"],\n        regionRegex: \"^cn\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"portal.sso.{region}.amazonaws.com.cn\",\n                tags: [],\n            },\n            {\n                hostname: \"portal.sso-fips.{region}.amazonaws.com.cn\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"portal.sso-fips.{region}.api.amazonwebservices.com.cn\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"portal.sso.{region}.api.amazonwebservices.com.cn\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"aws-iso\": {\n        regions: [\"us-iso-east-1\", \"us-iso-west-1\"],\n        regionRegex: \"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"portal.sso.{region}.c2s.ic.gov\",\n                tags: [],\n            },\n            {\n                hostname: \"portal.sso-fips.{region}.c2s.ic.gov\",\n                tags: [\"fips\"],\n            },\n        ],\n    },\n    \"aws-iso-b\": {\n        regions: [\"us-isob-east-1\"],\n        regionRegex: \"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"portal.sso.{region}.sc2s.sgov.gov\",\n                tags: [],\n            },\n            {\n                hostname: \"portal.sso-fips.{region}.sc2s.sgov.gov\",\n                tags: [\"fips\"],\n            },\n        ],\n    },\n    \"aws-us-gov\": {\n        regions: [\"us-gov-east-1\", \"us-gov-west-1\"],\n        regionRegex: \"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"portal.sso.{region}.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"portal.sso-fips.{region}.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"portal.sso-fips.{region}.api.aws\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"portal.sso.{region}.api.aws\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n};\nconst defaultRegionInfoProvider = async (region, options) => config_resolver_1.getRegionInfo(region, {\n    ...options,\n    signingService: \"awsssoportal\",\n    regionHash,\n    partitionHash,\n});\nexports.defaultRegionInfoProvider = defaultRegionInfoProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./SSO\"), exports);\ntslib_1.__exportStar(require(\"./SSOClient\"), exports);\ntslib_1.__exportStar(require(\"./commands\"), exports);\ntslib_1.__exportStar(require(\"./models\"), exports);\ntslib_1.__exportStar(require(\"./pagination\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./models_0\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LogoutRequest = exports.ListAccountsResponse = exports.ListAccountsRequest = exports.ListAccountRolesResponse = exports.RoleInfo = exports.ListAccountRolesRequest = exports.UnauthorizedException = exports.TooManyRequestsException = exports.ResourceNotFoundException = exports.InvalidRequestException = exports.GetRoleCredentialsResponse = exports.RoleCredentials = exports.GetRoleCredentialsRequest = exports.AccountInfo = void 0;\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nvar AccountInfo;\n(function (AccountInfo) {\n    AccountInfo.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AccountInfo = exports.AccountInfo || (exports.AccountInfo = {}));\nvar GetRoleCredentialsRequest;\n(function (GetRoleCredentialsRequest) {\n    GetRoleCredentialsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(GetRoleCredentialsRequest = exports.GetRoleCredentialsRequest || (exports.GetRoleCredentialsRequest = {}));\nvar RoleCredentials;\n(function (RoleCredentials) {\n    RoleCredentials.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING }),\n        ...(obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(RoleCredentials = exports.RoleCredentials || (exports.RoleCredentials = {}));\nvar GetRoleCredentialsResponse;\n(function (GetRoleCredentialsResponse) {\n    GetRoleCredentialsResponse.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.roleCredentials && { roleCredentials: RoleCredentials.filterSensitiveLog(obj.roleCredentials) }),\n    });\n})(GetRoleCredentialsResponse = exports.GetRoleCredentialsResponse || (exports.GetRoleCredentialsResponse = {}));\nvar InvalidRequestException;\n(function (InvalidRequestException) {\n    InvalidRequestException.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidRequestException = exports.InvalidRequestException || (exports.InvalidRequestException = {}));\nvar ResourceNotFoundException;\n(function (ResourceNotFoundException) {\n    ResourceNotFoundException.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ResourceNotFoundException = exports.ResourceNotFoundException || (exports.ResourceNotFoundException = {}));\nvar TooManyRequestsException;\n(function (TooManyRequestsException) {\n    TooManyRequestsException.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(TooManyRequestsException = exports.TooManyRequestsException || (exports.TooManyRequestsException = {}));\nvar UnauthorizedException;\n(function (UnauthorizedException) {\n    UnauthorizedException.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(UnauthorizedException = exports.UnauthorizedException || (exports.UnauthorizedException = {}));\nvar ListAccountRolesRequest;\n(function (ListAccountRolesRequest) {\n    ListAccountRolesRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(ListAccountRolesRequest = exports.ListAccountRolesRequest || (exports.ListAccountRolesRequest = {}));\nvar RoleInfo;\n(function (RoleInfo) {\n    RoleInfo.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(RoleInfo = exports.RoleInfo || (exports.RoleInfo = {}));\nvar ListAccountRolesResponse;\n(function (ListAccountRolesResponse) {\n    ListAccountRolesResponse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListAccountRolesResponse = exports.ListAccountRolesResponse || (exports.ListAccountRolesResponse = {}));\nvar ListAccountsRequest;\n(function (ListAccountsRequest) {\n    ListAccountsRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(ListAccountsRequest = exports.ListAccountsRequest || (exports.ListAccountsRequest = {}));\nvar ListAccountsResponse;\n(function (ListAccountsResponse) {\n    ListAccountsResponse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ListAccountsResponse = exports.ListAccountsResponse || (exports.ListAccountsResponse = {}));\nvar LogoutRequest;\n(function (LogoutRequest) {\n    LogoutRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n        ...(obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }),\n    });\n})(LogoutRequest = exports.LogoutRequest || (exports.LogoutRequest = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paginateListAccountRoles = void 0;\nconst ListAccountRolesCommand_1 = require(\"../commands/ListAccountRolesCommand\");\nconst SSO_1 = require(\"../SSO\");\nconst SSOClient_1 = require(\"../SSOClient\");\nconst makePagedClientRequest = async (client, input, ...args) => {\n    return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);\n};\nconst makePagedRequest = async (client, input, ...args) => {\n    return await client.listAccountRoles(input, ...args);\n};\nasync function* paginateListAccountRoles(config, input, ...additionalArguments) {\n    let token = config.startingToken || undefined;\n    let hasNext = true;\n    let page;\n    while (hasNext) {\n        input.nextToken = token;\n        input[\"maxResults\"] = config.pageSize;\n        if (config.client instanceof SSO_1.SSO) {\n            page = await makePagedRequest(config.client, input, ...additionalArguments);\n        }\n        else if (config.client instanceof SSOClient_1.SSOClient) {\n            page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n        }\n        else {\n            throw new Error(\"Invalid client, expected SSO | SSOClient\");\n        }\n        yield page;\n        token = page.nextToken;\n        hasNext = !!token;\n    }\n    return undefined;\n}\nexports.paginateListAccountRoles = paginateListAccountRoles;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paginateListAccounts = void 0;\nconst ListAccountsCommand_1 = require(\"../commands/ListAccountsCommand\");\nconst SSO_1 = require(\"../SSO\");\nconst SSOClient_1 = require(\"../SSOClient\");\nconst makePagedClientRequest = async (client, input, ...args) => {\n    return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);\n};\nconst makePagedRequest = async (client, input, ...args) => {\n    return await client.listAccounts(input, ...args);\n};\nasync function* paginateListAccounts(config, input, ...additionalArguments) {\n    let token = config.startingToken || undefined;\n    let hasNext = true;\n    let page;\n    while (hasNext) {\n        input.nextToken = token;\n        input[\"maxResults\"] = config.pageSize;\n        if (config.client instanceof SSO_1.SSO) {\n            page = await makePagedRequest(config.client, input, ...additionalArguments);\n        }\n        else if (config.client instanceof SSOClient_1.SSOClient) {\n            page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n        }\n        else {\n            throw new Error(\"Invalid client, expected SSO | SSOClient\");\n        }\n        yield page;\n        token = page.nextToken;\n        hasNext = !!token;\n    }\n    return undefined;\n}\nexports.paginateListAccounts = paginateListAccounts;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./Interfaces\"), exports);\ntslib_1.__exportStar(require(\"./ListAccountRolesPaginator\"), exports);\ntslib_1.__exportStar(require(\"./ListAccountsPaginator\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeAws_restJson1LogoutCommand = exports.deserializeAws_restJson1ListAccountsCommand = exports.deserializeAws_restJson1ListAccountRolesCommand = exports.deserializeAws_restJson1GetRoleCredentialsCommand = exports.serializeAws_restJson1LogoutCommand = exports.serializeAws_restJson1ListAccountsCommand = exports.serializeAws_restJson1ListAccountRolesCommand = exports.serializeAws_restJson1GetRoleCredentialsCommand = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.accessToken) && { \"x-amz-sso_bearer_token\": input.accessToken }),\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/federation/credentials\";\n    const query = {\n        ...(input.roleName !== undefined && { role_name: input.roleName }),\n        ...(input.accountId !== undefined && { account_id: input.accountId }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;\nconst serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.accessToken) && { \"x-amz-sso_bearer_token\": input.accessToken }),\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/assignment/roles\";\n    const query = {\n        ...(input.nextToken !== undefined && { next_token: input.nextToken }),\n        ...(input.maxResults !== undefined && { max_result: input.maxResults.toString() }),\n        ...(input.accountId !== undefined && { account_id: input.accountId }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;\nconst serializeAws_restJson1ListAccountsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.accessToken) && { \"x-amz-sso_bearer_token\": input.accessToken }),\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/assignment/accounts\";\n    const query = {\n        ...(input.nextToken !== undefined && { next_token: input.nextToken }),\n        ...(input.maxResults !== undefined && { max_result: input.maxResults.toString() }),\n    };\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexports.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;\nconst serializeAws_restJson1LogoutCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        ...(isSerializableHeaderValue(input.accessToken) && { \"x-amz-sso_bearer_token\": input.accessToken }),\n    };\n    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\"/\")) ? basePath.slice(0, -1) : basePath || \"\"}` + \"/logout\";\n    let body;\n    return new protocol_http_1.HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexports.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;\nconst deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        roleCredentials: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.roleCredentials !== undefined && data.roleCredentials !== null) {\n        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;\nconst deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.sso#InvalidRequestException\":\n            response = {\n                ...(await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\n            response = {\n                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyRequestsException\":\n        case \"com.amazonaws.sso#TooManyRequestsException\":\n            response = {\n                ...(await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnauthorizedException\":\n        case \"com.amazonaws.sso#UnauthorizedException\":\n            response = {\n                ...(await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        nextToken: undefined,\n        roleList: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.nextToken !== undefined && data.nextToken !== null) {\n        contents.nextToken = smithy_client_1.expectString(data.nextToken);\n    }\n    if (data.roleList !== undefined && data.roleList !== null) {\n        contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;\nconst deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.sso#InvalidRequestException\":\n            response = {\n                ...(await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\n            response = {\n                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyRequestsException\":\n        case \"com.amazonaws.sso#TooManyRequestsException\":\n            response = {\n                ...(await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnauthorizedException\":\n        case \"com.amazonaws.sso#UnauthorizedException\":\n            response = {\n                ...(await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restJson1ListAccountsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restJson1ListAccountsCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n        accountList: undefined,\n        nextToken: undefined,\n    };\n    const data = smithy_client_1.expectNonNull(smithy_client_1.expectObject(await parseBody(output.body, context)), \"body\");\n    if (data.accountList !== undefined && data.accountList !== null) {\n        contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);\n    }\n    if (data.nextToken !== undefined && data.nextToken !== null) {\n        contents.nextToken = smithy_client_1.expectString(data.nextToken);\n    }\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;\nconst deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.sso#InvalidRequestException\":\n            response = {\n                ...(await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\n            response = {\n                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyRequestsException\":\n        case \"com.amazonaws.sso#TooManyRequestsException\":\n            response = {\n                ...(await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnauthorizedException\":\n        case \"com.amazonaws.sso#UnauthorizedException\":\n            response = {\n                ...(await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restJson1LogoutCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return deserializeAws_restJson1LogoutCommandError(output, context);\n    }\n    const contents = {\n        $metadata: deserializeMetadata(output),\n    };\n    await collectBody(output.body, context);\n    return Promise.resolve(contents);\n};\nexports.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;\nconst deserializeAws_restJson1LogoutCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.sso#InvalidRequestException\":\n            response = {\n                ...(await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"TooManyRequestsException\":\n        case \"com.amazonaws.sso#TooManyRequestsException\":\n            response = {\n                ...(await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"UnauthorizedException\":\n        case \"com.amazonaws.sso#UnauthorizedException\":\n            response = {\n                ...(await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.code || parsedBody.Code || errorCode;\n            response = {\n                ...parsedBody,\n                name: `${errorCode}`,\n                message: parsedBody.message || parsedBody.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"InvalidRequestException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined,\n    };\n    const data = parsedOutput.body;\n    if (data.message !== undefined && data.message !== null) {\n        contents.message = smithy_client_1.expectString(data.message);\n    }\n    return contents;\n};\nconst deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"ResourceNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined,\n    };\n    const data = parsedOutput.body;\n    if (data.message !== undefined && data.message !== null) {\n        contents.message = smithy_client_1.expectString(data.message);\n    }\n    return contents;\n};\nconst deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"TooManyRequestsException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined,\n    };\n    const data = parsedOutput.body;\n    if (data.message !== undefined && data.message !== null) {\n        contents.message = smithy_client_1.expectString(data.message);\n    }\n    return contents;\n};\nconst deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {\n    const contents = {\n        name: \"UnauthorizedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined,\n    };\n    const data = parsedOutput.body;\n    if (data.message !== undefined && data.message !== null) {\n        contents.message = smithy_client_1.expectString(data.message);\n    }\n    return contents;\n};\nconst deserializeAws_restJson1AccountInfo = (output, context) => {\n    return {\n        accountId: smithy_client_1.expectString(output.accountId),\n        accountName: smithy_client_1.expectString(output.accountName),\n        emailAddress: smithy_client_1.expectString(output.emailAddress),\n    };\n};\nconst deserializeAws_restJson1AccountListType = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1AccountInfo(entry, context);\n    });\n};\nconst deserializeAws_restJson1RoleCredentials = (output, context) => {\n    return {\n        accessKeyId: smithy_client_1.expectString(output.accessKeyId),\n        expiration: smithy_client_1.expectLong(output.expiration),\n        secretAccessKey: smithy_client_1.expectString(output.secretAccessKey),\n        sessionToken: smithy_client_1.expectString(output.sessionToken),\n    };\n};\nconst deserializeAws_restJson1RoleInfo = (output, context) => {\n    return {\n        accountId: smithy_client_1.expectString(output.accountId),\n        roleName: smithy_client_1.expectString(output.roleName),\n    };\n};\nconst deserializeAws_restJson1RoleListType = (output, context) => {\n    return (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        if (entry === null) {\n            return null;\n        }\n        return deserializeAws_restJson1RoleInfo(entry, context);\n    });\n};\nconst deserializeMetadata = (output) => {\n    var _a;\n    return ({\n        httpStatusCode: output.statusCode,\n        requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n        extendedRequestId: output.headers[\"x-amz-id-2\"],\n        cfId: output.headers[\"x-amz-cf-id\"],\n    });\n};\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst isSerializableHeaderValue = (value) => value !== undefined &&\n    value !== null &&\n    value !== \"\" &&\n    (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n    (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        return JSON.parse(encoded);\n    }\n    return {};\n});\nconst loadRestJsonErrorCode = (output, data) => {\n    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n    const sanitizeErrorCode = (rawValue) => {\n        let cleanValue = rawValue;\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data.code !== undefined) {\n        return sanitizeErrorCode(data.code);\n    }\n    if (data[\"__type\"] !== undefined) {\n        return sanitizeErrorCode(data[\"__type\"]);\n    }\n    return \"\";\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRuntimeConfig = void 0;\nconst tslib_1 = require(\"tslib\");\nconst package_json_1 = tslib_1.__importDefault(require(\"../package.json\"));\nconst config_resolver_1 = require(\"@aws-sdk/config-resolver\");\nconst hash_node_1 = require(\"@aws-sdk/hash-node\");\nconst middleware_retry_1 = require(\"@aws-sdk/middleware-retry\");\nconst node_config_provider_1 = require(\"@aws-sdk/node-config-provider\");\nconst node_http_handler_1 = require(\"@aws-sdk/node-http-handler\");\nconst util_base64_node_1 = require(\"@aws-sdk/util-base64-node\");\nconst util_body_length_node_1 = require(\"@aws-sdk/util-body-length-node\");\nconst util_user_agent_node_1 = require(\"@aws-sdk/util-user-agent-node\");\nconst util_utf8_node_1 = require(\"@aws-sdk/util-utf8-node\");\nconst runtimeConfig_shared_1 = require(\"./runtimeConfig.shared\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst getRuntimeConfig = (config) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n    smithy_client_1.emitWarningIfUnsupportedVersion(process.version);\n    const clientSharedValues = runtimeConfig_shared_1.getRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,\n        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,\n        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,\n        defaultUserAgentProvider: (_d = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _d !== void 0 ? _d : util_user_agent_node_1.defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),\n        maxAttempts: (_e = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _e !== void 0 ? _e : node_config_provider_1.loadConfig(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n        region: (_f = config === null || config === void 0 ? void 0 : config.region) !== null && _f !== void 0 ? _f : node_config_provider_1.loadConfig(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),\n        requestHandler: (_g = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _g !== void 0 ? _g : new node_http_handler_1.NodeHttpHandler(),\n        retryMode: (_h = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _h !== void 0 ? _h : node_config_provider_1.loadConfig(middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS),\n        sha256: (_j = config === null || config === void 0 ? void 0 : config.sha256) !== null && _j !== void 0 ? _j : hash_node_1.Hash.bind(null, \"sha256\"),\n        streamCollector: (_k = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _k !== void 0 ? _k : node_http_handler_1.streamCollector,\n        useDualstackEndpoint: (_l = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _l !== void 0 ? _l : node_config_provider_1.loadConfig(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n        useFipsEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _m !== void 0 ? _m : node_config_provider_1.loadConfig(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n        utf8Decoder: (_o = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _o !== void 0 ? _o : util_utf8_node_1.fromUtf8,\n        utf8Encoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.toUtf8,\n    };\n};\nexports.getRuntimeConfig = getRuntimeConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRuntimeConfig = void 0;\nconst url_parser_1 = require(\"@aws-sdk/url-parser\");\nconst endpoints_1 = require(\"./endpoints\");\nconst getRuntimeConfig = (config) => {\n    var _a, _b, _c, _d, _e;\n    return ({\n        apiVersion: \"2019-06-10\",\n        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,\n        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},\n        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,\n        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : \"SSO\",\n        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl,\n    });\n};\nexports.getRuntimeConfig = getRuntimeConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.STS = void 0;\nconst AssumeRoleCommand_1 = require(\"./commands/AssumeRoleCommand\");\nconst AssumeRoleWithSAMLCommand_1 = require(\"./commands/AssumeRoleWithSAMLCommand\");\nconst AssumeRoleWithWebIdentityCommand_1 = require(\"./commands/AssumeRoleWithWebIdentityCommand\");\nconst DecodeAuthorizationMessageCommand_1 = require(\"./commands/DecodeAuthorizationMessageCommand\");\nconst GetAccessKeyInfoCommand_1 = require(\"./commands/GetAccessKeyInfoCommand\");\nconst GetCallerIdentityCommand_1 = require(\"./commands/GetCallerIdentityCommand\");\nconst GetFederationTokenCommand_1 = require(\"./commands/GetFederationTokenCommand\");\nconst GetSessionTokenCommand_1 = require(\"./commands/GetSessionTokenCommand\");\nconst STSClient_1 = require(\"./STSClient\");\nclass STS extends STSClient_1.STSClient {\n    assumeRole(args, optionsOrCb, cb) {\n        const command = new AssumeRoleCommand_1.AssumeRoleCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    assumeRoleWithSAML(args, optionsOrCb, cb) {\n        const command = new AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    assumeRoleWithWebIdentity(args, optionsOrCb, cb) {\n        const command = new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    decodeAuthorizationMessage(args, optionsOrCb, cb) {\n        const command = new DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getAccessKeyInfo(args, optionsOrCb, cb) {\n        const command = new GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getCallerIdentity(args, optionsOrCb, cb) {\n        const command = new GetCallerIdentityCommand_1.GetCallerIdentityCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getFederationToken(args, optionsOrCb, cb) {\n        const command = new GetFederationTokenCommand_1.GetFederationTokenCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n    getSessionToken(args, optionsOrCb, cb) {\n        const command = new GetSessionTokenCommand_1.GetSessionTokenCommand(args);\n        if (typeof optionsOrCb === \"function\") {\n            this.send(command, optionsOrCb);\n        }\n        else if (typeof cb === \"function\") {\n            if (typeof optionsOrCb !== \"object\")\n                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n            this.send(command, optionsOrCb || {}, cb);\n        }\n        else {\n            return this.send(command, optionsOrCb);\n        }\n    }\n}\nexports.STS = STS;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.STSClient = void 0;\nconst config_resolver_1 = require(\"@aws-sdk/config-resolver\");\nconst middleware_content_length_1 = require(\"@aws-sdk/middleware-content-length\");\nconst middleware_host_header_1 = require(\"@aws-sdk/middleware-host-header\");\nconst middleware_logger_1 = require(\"@aws-sdk/middleware-logger\");\nconst middleware_retry_1 = require(\"@aws-sdk/middleware-retry\");\nconst middleware_sdk_sts_1 = require(\"@aws-sdk/middleware-sdk-sts\");\nconst middleware_user_agent_1 = require(\"@aws-sdk/middleware-user-agent\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst runtimeConfig_1 = require(\"./runtimeConfig\");\nclass STSClient extends smithy_client_1.Client {\n    constructor(configuration) {\n        const _config_0 = runtimeConfig_1.getRuntimeConfig(configuration);\n        const _config_1 = config_resolver_1.resolveRegionConfig(_config_0);\n        const _config_2 = config_resolver_1.resolveEndpointsConfig(_config_1);\n        const _config_3 = middleware_retry_1.resolveRetryConfig(_config_2);\n        const _config_4 = middleware_host_header_1.resolveHostHeaderConfig(_config_3);\n        const _config_5 = middleware_sdk_sts_1.resolveStsAuthConfig(_config_4, { stsClientCtor: STSClient });\n        const _config_6 = middleware_user_agent_1.resolveUserAgentConfig(_config_5);\n        super(_config_6);\n        this.config = _config_6;\n        this.middlewareStack.use(middleware_retry_1.getRetryPlugin(this.config));\n        this.middlewareStack.use(middleware_content_length_1.getContentLengthPlugin(this.config));\n        this.middlewareStack.use(middleware_host_header_1.getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(middleware_logger_1.getLoggerPlugin(this.config));\n        this.middlewareStack.use(middleware_user_agent_1.getUserAgentPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\nexports.STSClient = STSClient;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AssumeRoleCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst middleware_signing_1 = require(\"@aws-sdk/middleware-signing\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_query_1 = require(\"../protocols/Aws_query\");\nclass AssumeRoleCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"STSClient\";\n        const commandName = \"AssumeRoleCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.AssumeRoleRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.AssumeRoleResponse.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_query_1.serializeAws_queryAssumeRoleCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_query_1.deserializeAws_queryAssumeRoleCommand(output, context);\n    }\n}\nexports.AssumeRoleCommand = AssumeRoleCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AssumeRoleWithSAMLCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_query_1 = require(\"../protocols/Aws_query\");\nclass AssumeRoleWithSAMLCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"STSClient\";\n        const commandName = \"AssumeRoleWithSAMLCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponse.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_query_1.serializeAws_queryAssumeRoleWithSAMLCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_query_1.deserializeAws_queryAssumeRoleWithSAMLCommand(output, context);\n    }\n}\nexports.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AssumeRoleWithWebIdentityCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_query_1 = require(\"../protocols/Aws_query\");\nclass AssumeRoleWithWebIdentityCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"STSClient\";\n        const commandName = \"AssumeRoleWithWebIdentityCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponse.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_query_1.serializeAws_queryAssumeRoleWithWebIdentityCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_query_1.deserializeAws_queryAssumeRoleWithWebIdentityCommand(output, context);\n    }\n}\nexports.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DecodeAuthorizationMessageCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst middleware_signing_1 = require(\"@aws-sdk/middleware-signing\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_query_1 = require(\"../protocols/Aws_query\");\nclass DecodeAuthorizationMessageCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"STSClient\";\n        const commandName = \"DecodeAuthorizationMessageCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageResponse.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_query_1.serializeAws_queryDecodeAuthorizationMessageCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_query_1.deserializeAws_queryDecodeAuthorizationMessageCommand(output, context);\n    }\n}\nexports.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetAccessKeyInfoCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst middleware_signing_1 = require(\"@aws-sdk/middleware-signing\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_query_1 = require(\"../protocols/Aws_query\");\nclass GetAccessKeyInfoCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"STSClient\";\n        const commandName = \"GetAccessKeyInfoCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetAccessKeyInfoRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetAccessKeyInfoResponse.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_query_1.serializeAws_queryGetAccessKeyInfoCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_query_1.deserializeAws_queryGetAccessKeyInfoCommand(output, context);\n    }\n}\nexports.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetCallerIdentityCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst middleware_signing_1 = require(\"@aws-sdk/middleware-signing\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_query_1 = require(\"../protocols/Aws_query\");\nclass GetCallerIdentityCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"STSClient\";\n        const commandName = \"GetCallerIdentityCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetCallerIdentityRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetCallerIdentityResponse.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_query_1.serializeAws_queryGetCallerIdentityCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_query_1.deserializeAws_queryGetCallerIdentityCommand(output, context);\n    }\n}\nexports.GetCallerIdentityCommand = GetCallerIdentityCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetFederationTokenCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst middleware_signing_1 = require(\"@aws-sdk/middleware-signing\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_query_1 = require(\"../protocols/Aws_query\");\nclass GetFederationTokenCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"STSClient\";\n        const commandName = \"GetFederationTokenCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetFederationTokenRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetFederationTokenResponse.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_query_1.serializeAws_queryGetFederationTokenCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_query_1.deserializeAws_queryGetFederationTokenCommand(output, context);\n    }\n}\nexports.GetFederationTokenCommand = GetFederationTokenCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetSessionTokenCommand = void 0;\nconst middleware_serde_1 = require(\"@aws-sdk/middleware-serde\");\nconst middleware_signing_1 = require(\"@aws-sdk/middleware-signing\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst Aws_query_1 = require(\"../protocols/Aws_query\");\nclass GetSessionTokenCommand extends smithy_client_1.Command {\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(middleware_signing_1.getAwsAuthPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"STSClient\";\n        const commandName = \"GetSessionTokenCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: models_0_1.GetSessionTokenRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: models_0_1.GetSessionTokenResponse.filterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return Aws_query_1.serializeAws_queryGetSessionTokenCommand(input, context);\n    }\n    deserialize(output, context) {\n        return Aws_query_1.deserializeAws_queryGetSessionTokenCommand(output, context);\n    }\n}\nexports.GetSessionTokenCommand = GetSessionTokenCommand;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./AssumeRoleCommand\"), exports);\ntslib_1.__exportStar(require(\"./AssumeRoleWithSAMLCommand\"), exports);\ntslib_1.__exportStar(require(\"./AssumeRoleWithWebIdentityCommand\"), exports);\ntslib_1.__exportStar(require(\"./DecodeAuthorizationMessageCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetAccessKeyInfoCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetCallerIdentityCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetFederationTokenCommand\"), exports);\ntslib_1.__exportStar(require(\"./GetSessionTokenCommand\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;\nconst defaultStsRoleAssumers_1 = require(\"./defaultStsRoleAssumers\");\nconst STSClient_1 = require(\"./STSClient\");\nconst getDefaultRoleAssumer = (stsOptions = {}) => defaultStsRoleAssumers_1.getDefaultRoleAssumer(stsOptions, STSClient_1.STSClient);\nexports.getDefaultRoleAssumer = getDefaultRoleAssumer;\nconst getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}) => defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity(stsOptions, STSClient_1.STSClient);\nexports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;\nconst decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: exports.getDefaultRoleAssumer(input),\n    roleAssumerWithWebIdentity: exports.getDefaultRoleAssumerWithWebIdentity(input),\n    ...input,\n});\nexports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;\nconst AssumeRoleCommand_1 = require(\"./commands/AssumeRoleCommand\");\nconst AssumeRoleWithWebIdentityCommand_1 = require(\"./commands/AssumeRoleWithWebIdentityCommand\");\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\nconst decorateDefaultRegion = (region) => {\n    if (typeof region !== \"function\") {\n        return region === undefined ? ASSUME_ROLE_DEFAULT_REGION : region;\n    }\n    return async () => {\n        try {\n            return await region();\n        }\n        catch (e) {\n            return ASSUME_ROLE_DEFAULT_REGION;\n        }\n    };\n};\nconst getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    let closureSourceCreds;\n    return async (sourceCreds, params) => {\n        closureSourceCreds = sourceCreds;\n        if (!stsClient) {\n            const { logger, region, requestHandler } = stsOptions;\n            stsClient = new stsClientCtor({\n                logger,\n                credentialDefaultProvider: () => async () => closureSourceCreds,\n                region: decorateDefaultRegion(region || stsOptions.region),\n                ...(requestHandler ? { requestHandler } : {}),\n            });\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n        };\n    };\n};\nexports.getDefaultRoleAssumer = getDefaultRoleAssumer;\nconst getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    return async (params) => {\n        if (!stsClient) {\n            const { logger, region, requestHandler } = stsOptions;\n            stsClient = new stsClientCtor({\n                logger,\n                region: decorateDefaultRegion(region || stsOptions.region),\n                ...(requestHandler ? { requestHandler } : {}),\n            });\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n        };\n    };\n};\nexports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;\nconst decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: exports.getDefaultRoleAssumer(input, input.stsClientCtor),\n    roleAssumerWithWebIdentity: exports.getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor),\n    ...input,\n});\nexports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultRegionInfoProvider = void 0;\nconst config_resolver_1 = require(\"@aws-sdk/config-resolver\");\nconst regionHash = {\n    \"aws-global\": {\n        variants: [\n            {\n                hostname: \"sts.amazonaws.com\",\n                tags: [],\n            },\n        ],\n        signingRegion: \"us-east-1\",\n    },\n    \"us-east-1\": {\n        variants: [\n            {\n                hostname: \"sts.us-east-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"sts-fips.us-east-1.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n        ],\n    },\n    \"us-east-2\": {\n        variants: [\n            {\n                hostname: \"sts.us-east-2.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"sts-fips.us-east-2.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n        ],\n    },\n    \"us-gov-east-1\": {\n        variants: [\n            {\n                hostname: \"sts.us-gov-east-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"sts.us-gov-east-1.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n        ],\n    },\n    \"us-gov-west-1\": {\n        variants: [\n            {\n                hostname: \"sts.us-gov-west-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"sts.us-gov-west-1.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n        ],\n    },\n    \"us-west-1\": {\n        variants: [\n            {\n                hostname: \"sts.us-west-1.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"sts-fips.us-west-1.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n        ],\n    },\n    \"us-west-2\": {\n        variants: [\n            {\n                hostname: \"sts.us-west-2.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"sts-fips.us-west-2.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n        ],\n    },\n};\nconst partitionHash = {\n    aws: {\n        regions: [\n            \"af-south-1\",\n            \"ap-east-1\",\n            \"ap-northeast-1\",\n            \"ap-northeast-2\",\n            \"ap-northeast-3\",\n            \"ap-south-1\",\n            \"ap-southeast-1\",\n            \"ap-southeast-2\",\n            \"aws-global\",\n            \"ca-central-1\",\n            \"eu-central-1\",\n            \"eu-north-1\",\n            \"eu-south-1\",\n            \"eu-west-1\",\n            \"eu-west-2\",\n            \"eu-west-3\",\n            \"me-south-1\",\n            \"sa-east-1\",\n            \"us-east-1\",\n            \"us-east-1-fips\",\n            \"us-east-2\",\n            \"us-east-2-fips\",\n            \"us-west-1\",\n            \"us-west-1-fips\",\n            \"us-west-2\",\n            \"us-west-2-fips\",\n        ],\n        regionRegex: \"^(us|eu|ap|sa|ca|me|af)\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"sts.{region}.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"sts-fips.{region}.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"sts-fips.{region}.api.aws\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"sts.{region}.api.aws\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"aws-cn\": {\n        regions: [\"cn-north-1\", \"cn-northwest-1\"],\n        regionRegex: \"^cn\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"sts.{region}.amazonaws.com.cn\",\n                tags: [],\n            },\n            {\n                hostname: \"sts-fips.{region}.amazonaws.com.cn\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"sts-fips.{region}.api.amazonwebservices.com.cn\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"sts.{region}.api.amazonwebservices.com.cn\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n    \"aws-iso\": {\n        regions: [\"us-iso-east-1\", \"us-iso-west-1\"],\n        regionRegex: \"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"sts.{region}.c2s.ic.gov\",\n                tags: [],\n            },\n            {\n                hostname: \"sts-fips.{region}.c2s.ic.gov\",\n                tags: [\"fips\"],\n            },\n        ],\n    },\n    \"aws-iso-b\": {\n        regions: [\"us-isob-east-1\"],\n        regionRegex: \"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"sts.{region}.sc2s.sgov.gov\",\n                tags: [],\n            },\n            {\n                hostname: \"sts-fips.{region}.sc2s.sgov.gov\",\n                tags: [\"fips\"],\n            },\n        ],\n    },\n    \"aws-us-gov\": {\n        regions: [\"us-gov-east-1\", \"us-gov-east-1-fips\", \"us-gov-west-1\", \"us-gov-west-1-fips\"],\n        regionRegex: \"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$\",\n        variants: [\n            {\n                hostname: \"sts.{region}.amazonaws.com\",\n                tags: [],\n            },\n            {\n                hostname: \"sts.{region}.amazonaws.com\",\n                tags: [\"fips\"],\n            },\n            {\n                hostname: \"sts-fips.{region}.api.aws\",\n                tags: [\"dualstack\", \"fips\"],\n            },\n            {\n                hostname: \"sts.{region}.api.aws\",\n                tags: [\"dualstack\"],\n            },\n        ],\n    },\n};\nconst defaultRegionInfoProvider = async (region, options) => config_resolver_1.getRegionInfo(region, {\n    ...options,\n    signingService: \"sts\",\n    regionHash,\n    partitionHash,\n});\nexports.defaultRegionInfoProvider = defaultRegionInfoProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./STS\"), exports);\ntslib_1.__exportStar(require(\"./STSClient\"), exports);\ntslib_1.__exportStar(require(\"./commands\"), exports);\ntslib_1.__exportStar(require(\"./defaultRoleAssumers\"), exports);\ntslib_1.__exportStar(require(\"./models\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./models_0\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetSessionTokenResponse = exports.GetSessionTokenRequest = exports.GetFederationTokenResponse = exports.FederatedUser = exports.GetFederationTokenRequest = exports.GetCallerIdentityResponse = exports.GetCallerIdentityRequest = exports.GetAccessKeyInfoResponse = exports.GetAccessKeyInfoRequest = exports.InvalidAuthorizationMessageException = exports.DecodeAuthorizationMessageResponse = exports.DecodeAuthorizationMessageRequest = exports.IDPCommunicationErrorException = exports.AssumeRoleWithWebIdentityResponse = exports.AssumeRoleWithWebIdentityRequest = exports.InvalidIdentityTokenException = exports.IDPRejectedClaimException = exports.AssumeRoleWithSAMLResponse = exports.AssumeRoleWithSAMLRequest = exports.RegionDisabledException = exports.PackedPolicyTooLargeException = exports.MalformedPolicyDocumentException = exports.ExpiredTokenException = exports.AssumeRoleResponse = exports.Credentials = exports.AssumeRoleRequest = exports.Tag = exports.PolicyDescriptorType = exports.AssumedRoleUser = void 0;\nvar AssumedRoleUser;\n(function (AssumedRoleUser) {\n    AssumedRoleUser.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AssumedRoleUser = exports.AssumedRoleUser || (exports.AssumedRoleUser = {}));\nvar PolicyDescriptorType;\n(function (PolicyDescriptorType) {\n    PolicyDescriptorType.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PolicyDescriptorType = exports.PolicyDescriptorType || (exports.PolicyDescriptorType = {}));\nvar Tag;\n(function (Tag) {\n    Tag.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Tag = exports.Tag || (exports.Tag = {}));\nvar AssumeRoleRequest;\n(function (AssumeRoleRequest) {\n    AssumeRoleRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AssumeRoleRequest = exports.AssumeRoleRequest || (exports.AssumeRoleRequest = {}));\nvar Credentials;\n(function (Credentials) {\n    Credentials.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(Credentials = exports.Credentials || (exports.Credentials = {}));\nvar AssumeRoleResponse;\n(function (AssumeRoleResponse) {\n    AssumeRoleResponse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AssumeRoleResponse = exports.AssumeRoleResponse || (exports.AssumeRoleResponse = {}));\nvar ExpiredTokenException;\n(function (ExpiredTokenException) {\n    ExpiredTokenException.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(ExpiredTokenException = exports.ExpiredTokenException || (exports.ExpiredTokenException = {}));\nvar MalformedPolicyDocumentException;\n(function (MalformedPolicyDocumentException) {\n    MalformedPolicyDocumentException.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(MalformedPolicyDocumentException = exports.MalformedPolicyDocumentException || (exports.MalformedPolicyDocumentException = {}));\nvar PackedPolicyTooLargeException;\n(function (PackedPolicyTooLargeException) {\n    PackedPolicyTooLargeException.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(PackedPolicyTooLargeException = exports.PackedPolicyTooLargeException || (exports.PackedPolicyTooLargeException = {}));\nvar RegionDisabledException;\n(function (RegionDisabledException) {\n    RegionDisabledException.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(RegionDisabledException = exports.RegionDisabledException || (exports.RegionDisabledException = {}));\nvar AssumeRoleWithSAMLRequest;\n(function (AssumeRoleWithSAMLRequest) {\n    AssumeRoleWithSAMLRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AssumeRoleWithSAMLRequest = exports.AssumeRoleWithSAMLRequest || (exports.AssumeRoleWithSAMLRequest = {}));\nvar AssumeRoleWithSAMLResponse;\n(function (AssumeRoleWithSAMLResponse) {\n    AssumeRoleWithSAMLResponse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AssumeRoleWithSAMLResponse = exports.AssumeRoleWithSAMLResponse || (exports.AssumeRoleWithSAMLResponse = {}));\nvar IDPRejectedClaimException;\n(function (IDPRejectedClaimException) {\n    IDPRejectedClaimException.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(IDPRejectedClaimException = exports.IDPRejectedClaimException || (exports.IDPRejectedClaimException = {}));\nvar InvalidIdentityTokenException;\n(function (InvalidIdentityTokenException) {\n    InvalidIdentityTokenException.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidIdentityTokenException = exports.InvalidIdentityTokenException || (exports.InvalidIdentityTokenException = {}));\nvar AssumeRoleWithWebIdentityRequest;\n(function (AssumeRoleWithWebIdentityRequest) {\n    AssumeRoleWithWebIdentityRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AssumeRoleWithWebIdentityRequest = exports.AssumeRoleWithWebIdentityRequest || (exports.AssumeRoleWithWebIdentityRequest = {}));\nvar AssumeRoleWithWebIdentityResponse;\n(function (AssumeRoleWithWebIdentityResponse) {\n    AssumeRoleWithWebIdentityResponse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(AssumeRoleWithWebIdentityResponse = exports.AssumeRoleWithWebIdentityResponse || (exports.AssumeRoleWithWebIdentityResponse = {}));\nvar IDPCommunicationErrorException;\n(function (IDPCommunicationErrorException) {\n    IDPCommunicationErrorException.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(IDPCommunicationErrorException = exports.IDPCommunicationErrorException || (exports.IDPCommunicationErrorException = {}));\nvar DecodeAuthorizationMessageRequest;\n(function (DecodeAuthorizationMessageRequest) {\n    DecodeAuthorizationMessageRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DecodeAuthorizationMessageRequest = exports.DecodeAuthorizationMessageRequest || (exports.DecodeAuthorizationMessageRequest = {}));\nvar DecodeAuthorizationMessageResponse;\n(function (DecodeAuthorizationMessageResponse) {\n    DecodeAuthorizationMessageResponse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(DecodeAuthorizationMessageResponse = exports.DecodeAuthorizationMessageResponse || (exports.DecodeAuthorizationMessageResponse = {}));\nvar InvalidAuthorizationMessageException;\n(function (InvalidAuthorizationMessageException) {\n    InvalidAuthorizationMessageException.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(InvalidAuthorizationMessageException = exports.InvalidAuthorizationMessageException || (exports.InvalidAuthorizationMessageException = {}));\nvar GetAccessKeyInfoRequest;\n(function (GetAccessKeyInfoRequest) {\n    GetAccessKeyInfoRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetAccessKeyInfoRequest = exports.GetAccessKeyInfoRequest || (exports.GetAccessKeyInfoRequest = {}));\nvar GetAccessKeyInfoResponse;\n(function (GetAccessKeyInfoResponse) {\n    GetAccessKeyInfoResponse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetAccessKeyInfoResponse = exports.GetAccessKeyInfoResponse || (exports.GetAccessKeyInfoResponse = {}));\nvar GetCallerIdentityRequest;\n(function (GetCallerIdentityRequest) {\n    GetCallerIdentityRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetCallerIdentityRequest = exports.GetCallerIdentityRequest || (exports.GetCallerIdentityRequest = {}));\nvar GetCallerIdentityResponse;\n(function (GetCallerIdentityResponse) {\n    GetCallerIdentityResponse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetCallerIdentityResponse = exports.GetCallerIdentityResponse || (exports.GetCallerIdentityResponse = {}));\nvar GetFederationTokenRequest;\n(function (GetFederationTokenRequest) {\n    GetFederationTokenRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetFederationTokenRequest = exports.GetFederationTokenRequest || (exports.GetFederationTokenRequest = {}));\nvar FederatedUser;\n(function (FederatedUser) {\n    FederatedUser.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(FederatedUser = exports.FederatedUser || (exports.FederatedUser = {}));\nvar GetFederationTokenResponse;\n(function (GetFederationTokenResponse) {\n    GetFederationTokenResponse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetFederationTokenResponse = exports.GetFederationTokenResponse || (exports.GetFederationTokenResponse = {}));\nvar GetSessionTokenRequest;\n(function (GetSessionTokenRequest) {\n    GetSessionTokenRequest.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetSessionTokenRequest = exports.GetSessionTokenRequest || (exports.GetSessionTokenRequest = {}));\nvar GetSessionTokenResponse;\n(function (GetSessionTokenResponse) {\n    GetSessionTokenResponse.filterSensitiveLog = (obj) => ({\n        ...obj,\n    });\n})(GetSessionTokenResponse = exports.GetSessionTokenResponse || (exports.GetSessionTokenResponse = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeAws_queryGetSessionTokenCommand = exports.deserializeAws_queryGetFederationTokenCommand = exports.deserializeAws_queryGetCallerIdentityCommand = exports.deserializeAws_queryGetAccessKeyInfoCommand = exports.deserializeAws_queryDecodeAuthorizationMessageCommand = exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = exports.deserializeAws_queryAssumeRoleWithSAMLCommand = exports.deserializeAws_queryAssumeRoleCommand = exports.serializeAws_queryGetSessionTokenCommand = exports.serializeAws_queryGetFederationTokenCommand = exports.serializeAws_queryGetCallerIdentityCommand = exports.serializeAws_queryGetAccessKeyInfoCommand = exports.serializeAws_queryDecodeAuthorizationMessageCommand = exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = exports.serializeAws_queryAssumeRoleWithSAMLCommand = exports.serializeAws_queryAssumeRoleCommand = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst entities_1 = require(\"entities\");\nconst fast_xml_parser_1 = require(\"fast-xml-parser\");\nconst serializeAws_queryAssumeRoleCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryAssumeRoleRequest(input, context),\n        Action: \"AssumeRole\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryAssumeRoleCommand = serializeAws_queryAssumeRoleCommand;\nconst serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),\n        Action: \"AssumeRoleWithSAML\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryAssumeRoleWithSAMLCommand = serializeAws_queryAssumeRoleWithSAMLCommand;\nconst serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),\n        Action: \"AssumeRoleWithWebIdentity\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryAssumeRoleWithWebIdentityCommand = serializeAws_queryAssumeRoleWithWebIdentityCommand;\nconst serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),\n        Action: \"DecodeAuthorizationMessage\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryDecodeAuthorizationMessageCommand = serializeAws_queryDecodeAuthorizationMessageCommand;\nconst serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryGetAccessKeyInfoRequest(input, context),\n        Action: \"GetAccessKeyInfo\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryGetAccessKeyInfoCommand = serializeAws_queryGetAccessKeyInfoCommand;\nconst serializeAws_queryGetCallerIdentityCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryGetCallerIdentityRequest(input, context),\n        Action: \"GetCallerIdentity\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryGetCallerIdentityCommand = serializeAws_queryGetCallerIdentityCommand;\nconst serializeAws_queryGetFederationTokenCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryGetFederationTokenRequest(input, context),\n        Action: \"GetFederationToken\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryGetFederationTokenCommand = serializeAws_queryGetFederationTokenCommand;\nconst serializeAws_queryGetSessionTokenCommand = async (input, context) => {\n    const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n    };\n    let body;\n    body = buildFormUrlencodedString({\n        ...serializeAws_queryGetSessionTokenRequest(input, context),\n        Action: \"GetSessionToken\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryGetSessionTokenCommand = serializeAws_queryGetSessionTokenCommand;\nconst deserializeAws_queryAssumeRoleCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryAssumeRoleCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nexports.deserializeAws_queryAssumeRoleCommand = deserializeAws_queryAssumeRoleCommand;\nconst deserializeAws_queryAssumeRoleCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            response = {\n                ...(await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"MalformedPolicyDocumentException\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            response = {\n                ...(await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PackedPolicyTooLargeException\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            response = {\n                ...(await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            response = {\n                ...(await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nexports.deserializeAws_queryAssumeRoleWithSAMLCommand = deserializeAws_queryAssumeRoleWithSAMLCommand;\nconst deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            response = {\n                ...(await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IDPRejectedClaimException\":\n        case \"com.amazonaws.sts#IDPRejectedClaimException\":\n            response = {\n                ...(await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIdentityTokenException\":\n        case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n            response = {\n                ...(await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"MalformedPolicyDocumentException\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            response = {\n                ...(await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PackedPolicyTooLargeException\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            response = {\n                ...(await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            response = {\n                ...(await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nexports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = deserializeAws_queryAssumeRoleWithWebIdentityCommand;\nconst deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            response = {\n                ...(await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IDPCommunicationErrorException\":\n        case \"com.amazonaws.sts#IDPCommunicationErrorException\":\n            response = {\n                ...(await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"IDPRejectedClaimException\":\n        case \"com.amazonaws.sts#IDPRejectedClaimException\":\n            response = {\n                ...(await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"InvalidIdentityTokenException\":\n        case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n            response = {\n                ...(await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"MalformedPolicyDocumentException\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            response = {\n                ...(await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PackedPolicyTooLargeException\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            response = {\n                ...(await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            response = {\n                ...(await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nexports.deserializeAws_queryDecodeAuthorizationMessageCommand = deserializeAws_queryDecodeAuthorizationMessageCommand;\nconst deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidAuthorizationMessageException\":\n        case \"com.amazonaws.sts#InvalidAuthorizationMessageException\":\n            response = {\n                ...(await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nexports.deserializeAws_queryGetAccessKeyInfoCommand = deserializeAws_queryGetAccessKeyInfoCommand;\nconst deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryGetCallerIdentityCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nexports.deserializeAws_queryGetCallerIdentityCommand = deserializeAws_queryGetCallerIdentityCommand;\nconst deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_queryGetFederationTokenCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryGetFederationTokenCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nexports.deserializeAws_queryGetFederationTokenCommand = deserializeAws_queryGetFederationTokenCommand;\nconst deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"MalformedPolicyDocumentException\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            response = {\n                ...(await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"PackedPolicyTooLargeException\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            response = {\n                ...(await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            response = {\n                ...(await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_queryGetSessionTokenCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return deserializeAws_queryGetSessionTokenCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return Promise.resolve(response);\n};\nexports.deserializeAws_queryGetSessionTokenCommand = deserializeAws_queryGetSessionTokenCommand;\nconst deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseBody(output.body, context),\n    };\n    let response;\n    let errorCode = \"UnknownError\";\n    errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            response = {\n                ...(await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context)),\n                name: errorCode,\n                $metadata: deserializeMetadata(output),\n            };\n            break;\n        default:\n            const parsedBody = parsedOutput.body;\n            errorCode = parsedBody.Error.code || parsedBody.Error.Code || errorCode;\n            response = {\n                ...parsedBody.Error,\n                name: `${errorCode}`,\n                message: parsedBody.Error.message || parsedBody.Error.Message || errorCode,\n                $fault: \"client\",\n                $metadata: deserializeMetadata(output),\n            };\n    }\n    const message = response.message || response.Message || errorCode;\n    response.message = message;\n    delete response.Message;\n    return Promise.reject(Object.assign(new Error(message), response));\n};\nconst deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);\n    const contents = {\n        name: \"ExpiredTokenException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    };\n    return contents;\n};\nconst deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);\n    const contents = {\n        name: \"IDPCommunicationErrorException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    };\n    return contents;\n};\nconst deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);\n    const contents = {\n        name: \"IDPRejectedClaimException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    };\n    return contents;\n};\nconst deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);\n    const contents = {\n        name: \"InvalidAuthorizationMessageException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    };\n    return contents;\n};\nconst deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);\n    const contents = {\n        name: \"InvalidIdentityTokenException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    };\n    return contents;\n};\nconst deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);\n    const contents = {\n        name: \"MalformedPolicyDocumentException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    };\n    return contents;\n};\nconst deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);\n    const contents = {\n        name: \"PackedPolicyTooLargeException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    };\n    return contents;\n};\nconst deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);\n    const contents = {\n        name: \"RegionDisabledException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    };\n    return contents;\n};\nconst serializeAws_queryAssumeRoleRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn !== undefined && input.RoleArn !== null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.RoleSessionName !== undefined && input.RoleSessionName !== null) {\n        entries[\"RoleSessionName\"] = input.RoleSessionName;\n    }\n    if (input.PolicyArns !== undefined && input.PolicyArns !== null) {\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy !== undefined && input.Policy !== null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds !== undefined && input.DurationSeconds !== null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.Tags !== undefined && input.Tags !== null) {\n        const memberEntries = serializeAws_querytagListType(input.Tags, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `Tags.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.TransitiveTagKeys !== undefined && input.TransitiveTagKeys !== null) {\n        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `TransitiveTagKeys.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.ExternalId !== undefined && input.ExternalId !== null) {\n        entries[\"ExternalId\"] = input.ExternalId;\n    }\n    if (input.SerialNumber !== undefined && input.SerialNumber !== null) {\n        entries[\"SerialNumber\"] = input.SerialNumber;\n    }\n    if (input.TokenCode !== undefined && input.TokenCode !== null) {\n        entries[\"TokenCode\"] = input.TokenCode;\n    }\n    if (input.SourceIdentity !== undefined && input.SourceIdentity !== null) {\n        entries[\"SourceIdentity\"] = input.SourceIdentity;\n    }\n    return entries;\n};\nconst serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn !== undefined && input.RoleArn !== null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.PrincipalArn !== undefined && input.PrincipalArn !== null) {\n        entries[\"PrincipalArn\"] = input.PrincipalArn;\n    }\n    if (input.SAMLAssertion !== undefined && input.SAMLAssertion !== null) {\n        entries[\"SAMLAssertion\"] = input.SAMLAssertion;\n    }\n    if (input.PolicyArns !== undefined && input.PolicyArns !== null) {\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy !== undefined && input.Policy !== null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds !== undefined && input.DurationSeconds !== null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    return entries;\n};\nconst serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn !== undefined && input.RoleArn !== null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.RoleSessionName !== undefined && input.RoleSessionName !== null) {\n        entries[\"RoleSessionName\"] = input.RoleSessionName;\n    }\n    if (input.WebIdentityToken !== undefined && input.WebIdentityToken !== null) {\n        entries[\"WebIdentityToken\"] = input.WebIdentityToken;\n    }\n    if (input.ProviderId !== undefined && input.ProviderId !== null) {\n        entries[\"ProviderId\"] = input.ProviderId;\n    }\n    if (input.PolicyArns !== undefined && input.PolicyArns !== null) {\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy !== undefined && input.Policy !== null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds !== undefined && input.DurationSeconds !== null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    return entries;\n};\nconst serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {\n    const entries = {};\n    if (input.EncodedMessage !== undefined && input.EncodedMessage !== null) {\n        entries[\"EncodedMessage\"] = input.EncodedMessage;\n    }\n    return entries;\n};\nconst serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {\n    const entries = {};\n    if (input.AccessKeyId !== undefined && input.AccessKeyId !== null) {\n        entries[\"AccessKeyId\"] = input.AccessKeyId;\n    }\n    return entries;\n};\nconst serializeAws_queryGetCallerIdentityRequest = (input, context) => {\n    const entries = {};\n    return entries;\n};\nconst serializeAws_queryGetFederationTokenRequest = (input, context) => {\n    const entries = {};\n    if (input.Name !== undefined && input.Name !== null) {\n        entries[\"Name\"] = input.Name;\n    }\n    if (input.Policy !== undefined && input.Policy !== null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.PolicyArns !== undefined && input.PolicyArns !== null) {\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.DurationSeconds !== undefined && input.DurationSeconds !== null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.Tags !== undefined && input.Tags !== null) {\n        const memberEntries = serializeAws_querytagListType(input.Tags, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `Tags.${key}`;\n            entries[loc] = value;\n        });\n    }\n    return entries;\n};\nconst serializeAws_queryGetSessionTokenRequest = (input, context) => {\n    const entries = {};\n    if (input.DurationSeconds !== undefined && input.DurationSeconds !== null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.SerialNumber !== undefined && input.SerialNumber !== null) {\n        entries[\"SerialNumber\"] = input.SerialNumber;\n    }\n    if (input.TokenCode !== undefined && input.TokenCode !== null) {\n        entries[\"TokenCode\"] = input.TokenCode;\n    }\n    return entries;\n};\nconst serializeAws_querypolicyDescriptorListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n    }\n    return entries;\n};\nconst serializeAws_queryPolicyDescriptorType = (input, context) => {\n    const entries = {};\n    if (input.arn !== undefined && input.arn !== null) {\n        entries[\"arn\"] = input.arn;\n    }\n    return entries;\n};\nconst serializeAws_queryTag = (input, context) => {\n    const entries = {};\n    if (input.Key !== undefined && input.Key !== null) {\n        entries[\"Key\"] = input.Key;\n    }\n    if (input.Value !== undefined && input.Value !== null) {\n        entries[\"Value\"] = input.Value;\n    }\n    return entries;\n};\nconst serializeAws_querytagKeyListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        entries[`member.${counter}`] = entry;\n        counter++;\n    }\n    return entries;\n};\nconst serializeAws_querytagListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        const memberEntries = serializeAws_queryTag(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n    }\n    return entries;\n};\nconst deserializeAws_queryAssumedRoleUser = (output, context) => {\n    const contents = {\n        AssumedRoleId: undefined,\n        Arn: undefined,\n    };\n    if (output[\"AssumedRoleId\"] !== undefined) {\n        contents.AssumedRoleId = smithy_client_1.expectString(output[\"AssumedRoleId\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = smithy_client_1.expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryAssumeRoleResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n        AssumedRoleUser: undefined,\n        PackedPolicySize: undefined,\n        SourceIdentity: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = smithy_client_1.strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = smithy_client_1.expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n        AssumedRoleUser: undefined,\n        PackedPolicySize: undefined,\n        Subject: undefined,\n        SubjectType: undefined,\n        Issuer: undefined,\n        Audience: undefined,\n        NameQualifier: undefined,\n        SourceIdentity: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = smithy_client_1.strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"Subject\"] !== undefined) {\n        contents.Subject = smithy_client_1.expectString(output[\"Subject\"]);\n    }\n    if (output[\"SubjectType\"] !== undefined) {\n        contents.SubjectType = smithy_client_1.expectString(output[\"SubjectType\"]);\n    }\n    if (output[\"Issuer\"] !== undefined) {\n        contents.Issuer = smithy_client_1.expectString(output[\"Issuer\"]);\n    }\n    if (output[\"Audience\"] !== undefined) {\n        contents.Audience = smithy_client_1.expectString(output[\"Audience\"]);\n    }\n    if (output[\"NameQualifier\"] !== undefined) {\n        contents.NameQualifier = smithy_client_1.expectString(output[\"NameQualifier\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = smithy_client_1.expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n        SubjectFromWebIdentityToken: undefined,\n        AssumedRoleUser: undefined,\n        PackedPolicySize: undefined,\n        Provider: undefined,\n        Audience: undefined,\n        SourceIdentity: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    if (output[\"SubjectFromWebIdentityToken\"] !== undefined) {\n        contents.SubjectFromWebIdentityToken = smithy_client_1.expectString(output[\"SubjectFromWebIdentityToken\"]);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = smithy_client_1.strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"Provider\"] !== undefined) {\n        contents.Provider = smithy_client_1.expectString(output[\"Provider\"]);\n    }\n    if (output[\"Audience\"] !== undefined) {\n        contents.Audience = smithy_client_1.expectString(output[\"Audience\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = smithy_client_1.expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryCredentials = (output, context) => {\n    const contents = {\n        AccessKeyId: undefined,\n        SecretAccessKey: undefined,\n        SessionToken: undefined,\n        Expiration: undefined,\n    };\n    if (output[\"AccessKeyId\"] !== undefined) {\n        contents.AccessKeyId = smithy_client_1.expectString(output[\"AccessKeyId\"]);\n    }\n    if (output[\"SecretAccessKey\"] !== undefined) {\n        contents.SecretAccessKey = smithy_client_1.expectString(output[\"SecretAccessKey\"]);\n    }\n    if (output[\"SessionToken\"] !== undefined) {\n        contents.SessionToken = smithy_client_1.expectString(output[\"SessionToken\"]);\n    }\n    if (output[\"Expiration\"] !== undefined) {\n        contents.Expiration = smithy_client_1.expectNonNull(smithy_client_1.parseRfc3339DateTime(output[\"Expiration\"]));\n    }\n    return contents;\n};\nconst deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {\n    const contents = {\n        DecodedMessage: undefined,\n    };\n    if (output[\"DecodedMessage\"] !== undefined) {\n        contents.DecodedMessage = smithy_client_1.expectString(output[\"DecodedMessage\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryExpiredTokenException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = smithy_client_1.expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryFederatedUser = (output, context) => {\n    const contents = {\n        FederatedUserId: undefined,\n        Arn: undefined,\n    };\n    if (output[\"FederatedUserId\"] !== undefined) {\n        contents.FederatedUserId = smithy_client_1.expectString(output[\"FederatedUserId\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = smithy_client_1.expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {\n    const contents = {\n        Account: undefined,\n    };\n    if (output[\"Account\"] !== undefined) {\n        contents.Account = smithy_client_1.expectString(output[\"Account\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryGetCallerIdentityResponse = (output, context) => {\n    const contents = {\n        UserId: undefined,\n        Account: undefined,\n        Arn: undefined,\n    };\n    if (output[\"UserId\"] !== undefined) {\n        contents.UserId = smithy_client_1.expectString(output[\"UserId\"]);\n    }\n    if (output[\"Account\"] !== undefined) {\n        contents.Account = smithy_client_1.expectString(output[\"Account\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = smithy_client_1.expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryGetFederationTokenResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n        FederatedUser: undefined,\n        PackedPolicySize: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    if (output[\"FederatedUser\"] !== undefined) {\n        contents.FederatedUser = deserializeAws_queryFederatedUser(output[\"FederatedUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = smithy_client_1.strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryGetSessionTokenResponse = (output, context) => {\n    const contents = {\n        Credentials: undefined,\n    };\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n    }\n    return contents;\n};\nconst deserializeAws_queryIDPCommunicationErrorException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = smithy_client_1.expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryIDPRejectedClaimException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = smithy_client_1.expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = smithy_client_1.expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryInvalidIdentityTokenException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = smithy_client_1.expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = smithy_client_1.expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = smithy_client_1.expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeAws_queryRegionDisabledException = (output, context) => {\n    const contents = {\n        message: undefined,\n    };\n    if (output[\"message\"] !== undefined) {\n        contents.message = smithy_client_1.expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeMetadata = (output) => {\n    var _a;\n    return ({\n        httpStatusCode: output.statusCode,\n        requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n        extendedRequestId: output.headers[\"x-amz-id-2\"],\n        cfId: output.headers[\"x-amz-cf-id\"],\n    });\n};\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const contents = {\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n        headers,\n    };\n    if (resolvedHostname !== undefined) {\n        contents.hostname = resolvedHostname;\n    }\n    if (body !== undefined) {\n        contents.body = body;\n    }\n    return new protocol_http_1.HttpRequest(contents);\n};\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        const parsedObj = fast_xml_parser_1.parse(encoded, {\n            attributeNamePrefix: \"\",\n            ignoreAttributes: false,\n            parseNodeValue: false,\n            trimValues: false,\n            tagValueProcessor: (val) => (val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : entities_1.decodeHTML(val)),\n        });\n        const textNodeName = \"#text\";\n        const key = Object.keys(parsedObj)[0];\n        const parsedObjToReturn = parsedObj[key];\n        if (parsedObjToReturn[textNodeName]) {\n            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n            delete parsedObjToReturn[textNodeName];\n        }\n        return smithy_client_1.getValueFromTextNode(parsedObjToReturn);\n    }\n    return {};\n});\nconst buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)\n    .map(([key, value]) => smithy_client_1.extendedEncodeURIComponent(key) + \"=\" + smithy_client_1.extendedEncodeURIComponent(value))\n    .join(\"&\");\nconst loadQueryErrorCode = (output, data) => {\n    if (data.Error.Code !== undefined) {\n        return data.Error.Code;\n    }\n    if (output.statusCode == 404) {\n        return \"NotFound\";\n    }\n    return \"\";\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRuntimeConfig = void 0;\nconst tslib_1 = require(\"tslib\");\nconst package_json_1 = tslib_1.__importDefault(require(\"../package.json\"));\nconst defaultStsRoleAssumers_1 = require(\"./defaultStsRoleAssumers\");\nconst config_resolver_1 = require(\"@aws-sdk/config-resolver\");\nconst credential_provider_node_1 = require(\"@aws-sdk/credential-provider-node\");\nconst hash_node_1 = require(\"@aws-sdk/hash-node\");\nconst middleware_retry_1 = require(\"@aws-sdk/middleware-retry\");\nconst node_config_provider_1 = require(\"@aws-sdk/node-config-provider\");\nconst node_http_handler_1 = require(\"@aws-sdk/node-http-handler\");\nconst util_base64_node_1 = require(\"@aws-sdk/util-base64-node\");\nconst util_body_length_node_1 = require(\"@aws-sdk/util-body-length-node\");\nconst util_user_agent_node_1 = require(\"@aws-sdk/util-user-agent-node\");\nconst util_utf8_node_1 = require(\"@aws-sdk/util-utf8-node\");\nconst runtimeConfig_shared_1 = require(\"./runtimeConfig.shared\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst getRuntimeConfig = (config) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n    smithy_client_1.emitWarningIfUnsupportedVersion(process.version);\n    const clientSharedValues = runtimeConfig_shared_1.getRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,\n        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,\n        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,\n        credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : defaultStsRoleAssumers_1.decorateDefaultCredentialProvider(credential_provider_node_1.defaultProvider),\n        defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : util_user_agent_node_1.defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),\n        maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : node_config_provider_1.loadConfig(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n        region: (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0 ? _g : node_config_provider_1.loadConfig(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),\n        requestHandler: (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0 ? _h : new node_http_handler_1.NodeHttpHandler(),\n        retryMode: (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0 ? _j : node_config_provider_1.loadConfig(middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS),\n        sha256: (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0 ? _k : hash_node_1.Hash.bind(null, \"sha256\"),\n        streamCollector: (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0 ? _l : node_http_handler_1.streamCollector,\n        useDualstackEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0 ? _m : node_config_provider_1.loadConfig(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n        useFipsEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0 ? _o : node_config_provider_1.loadConfig(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n        utf8Decoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.fromUtf8,\n        utf8Encoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0 ? _q : util_utf8_node_1.toUtf8,\n    };\n};\nexports.getRuntimeConfig = getRuntimeConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRuntimeConfig = void 0;\nconst url_parser_1 = require(\"@aws-sdk/url-parser\");\nconst endpoints_1 = require(\"./endpoints\");\nconst getRuntimeConfig = (config) => {\n    var _a, _b, _c, _d, _e;\n    return ({\n        apiVersion: \"2011-06-15\",\n        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,\n        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},\n        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,\n        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : \"STS\",\n        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl,\n    });\n};\nexports.getRuntimeConfig = getRuntimeConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_DUALSTACK_ENDPOINT = exports.CONFIG_USE_DUALSTACK_ENDPOINT = exports.ENV_USE_DUALSTACK_ENDPOINT = void 0;\nconst util_config_provider_1 = require(\"@aws-sdk/util-config-provider\");\nexports.ENV_USE_DUALSTACK_ENDPOINT = \"AWS_USE_DUALSTACK_ENDPOINT\";\nexports.CONFIG_USE_DUALSTACK_ENDPOINT = \"use_dualstack_endpoint\";\nexports.DEFAULT_USE_DUALSTACK_ENDPOINT = false;\nexports.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => util_config_provider_1.booleanSelector(env, exports.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),\n    configFileSelector: (profile) => util_config_provider_1.booleanSelector(profile, exports.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),\n    default: false,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports.DEFAULT_USE_FIPS_ENDPOINT = exports.CONFIG_USE_FIPS_ENDPOINT = exports.ENV_USE_FIPS_ENDPOINT = void 0;\nconst util_config_provider_1 = require(\"@aws-sdk/util-config-provider\");\nexports.ENV_USE_FIPS_ENDPOINT = \"AWS_USE_FIPS_ENDPOINT\";\nexports.CONFIG_USE_FIPS_ENDPOINT = \"use_fips_endpoint\";\nexports.DEFAULT_USE_FIPS_ENDPOINT = false;\nexports.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => util_config_provider_1.booleanSelector(env, exports.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),\n    configFileSelector: (profile) => util_config_provider_1.booleanSelector(profile, exports.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),\n    default: false,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./NodeUseDualstackEndpointConfigOptions\"), exports);\ntslib_1.__exportStar(require(\"./NodeUseFipsEndpointConfigOptions\"), exports);\ntslib_1.__exportStar(require(\"./resolveCustomEndpointsConfig\"), exports);\ntslib_1.__exportStar(require(\"./resolveEndpointsConfig\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveCustomEndpointsConfig = void 0;\nconst normalizeBoolean_1 = require(\"./utils/normalizeBoolean\");\nconst normalizeEndpoint_1 = require(\"./utils/normalizeEndpoint\");\nconst resolveCustomEndpointsConfig = (input) => {\n    var _a;\n    return ({\n        ...input,\n        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,\n        endpoint: normalizeEndpoint_1.normalizeEndpoint(input),\n        isCustomEndpoint: true,\n        useDualstackEndpoint: normalizeBoolean_1.normalizeBoolean(input.useDualstackEndpoint),\n    });\n};\nexports.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveEndpointsConfig = void 0;\nconst getEndpointFromRegion_1 = require(\"./utils/getEndpointFromRegion\");\nconst normalizeBoolean_1 = require(\"./utils/normalizeBoolean\");\nconst normalizeEndpoint_1 = require(\"./utils/normalizeEndpoint\");\nconst resolveEndpointsConfig = (input) => {\n    var _a;\n    const useDualstackEndpoint = normalizeBoolean_1.normalizeBoolean(input.useDualstackEndpoint);\n    const { endpoint, useFipsEndpoint } = input;\n    return {\n        ...input,\n        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,\n        endpoint: endpoint\n            ? normalizeEndpoint_1.normalizeEndpoint({ ...input, endpoint })\n            : () => getEndpointFromRegion_1.getEndpointFromRegion({ ...input, useDualstackEndpoint, useFipsEndpoint }),\n        isCustomEndpoint: endpoint ? true : false,\n        useDualstackEndpoint,\n    };\n};\nexports.resolveEndpointsConfig = resolveEndpointsConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getEndpointFromRegion = void 0;\nconst getEndpointFromRegion = async (input) => {\n    var _a;\n    const { tls = true } = input;\n    const region = await input.region();\n    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n    if (!dnsHostRegex.test(region)) {\n        throw new Error(\"Invalid region in client config\");\n    }\n    const useDualstackEndpoint = await input.useDualstackEndpoint();\n    const useFipsEndpoint = await input.useFipsEndpoint();\n    const { hostname } = (_a = (await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint }))) !== null && _a !== void 0 ? _a : {};\n    if (!hostname) {\n        throw new Error(\"Cannot resolve hostname from client config\");\n    }\n    return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n};\nexports.getEndpointFromRegion = getEndpointFromRegion;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeBoolean = void 0;\nconst normalizeBoolean = (value) => {\n    if (typeof value === \"boolean\") {\n        const promisified = Promise.resolve(value);\n        return () => promisified;\n    }\n    return value;\n};\nexports.normalizeBoolean = normalizeBoolean;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeEndpoint = void 0;\nconst normalizeEndpoint = ({ endpoint, urlParser }) => {\n    if (typeof endpoint === \"string\") {\n        const promisified = Promise.resolve(urlParser(endpoint));\n        return () => promisified;\n    }\n    else if (typeof endpoint === \"object\") {\n        const promisified = Promise.resolve(endpoint);\n        return () => promisified;\n    }\n    return endpoint;\n};\nexports.normalizeEndpoint = normalizeEndpoint;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./endpointsConfig\"), exports);\ntslib_1.__exportStar(require(\"./regionConfig\"), exports);\ntslib_1.__exportStar(require(\"./regionInfo\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NODE_REGION_CONFIG_FILE_OPTIONS = exports.NODE_REGION_CONFIG_OPTIONS = exports.REGION_INI_NAME = exports.REGION_ENV_NAME = void 0;\nexports.REGION_ENV_NAME = \"AWS_REGION\";\nexports.REGION_INI_NAME = \"region\";\nexports.NODE_REGION_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[exports.REGION_ENV_NAME],\n    configFileSelector: (profile) => profile[exports.REGION_INI_NAME],\n    default: () => {\n        throw new Error(\"Region is missing\");\n    },\n};\nexports.NODE_REGION_CONFIG_FILE_OPTIONS = {\n    preferredFile: \"credentials\",\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRealRegion = void 0;\nconst isFipsRegion_1 = require(\"./isFipsRegion\");\nconst getRealRegion = (region) => isFipsRegion_1.isFipsRegion(region)\n    ? [\"fips-aws-global\", \"aws-fips\"].includes(region)\n        ? \"us-east-1\"\n        : region.replace(/fips-(dkr-|prod-)?|-fips/, \"\")\n    : region;\nexports.getRealRegion = getRealRegion;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./config\"), exports);\ntslib_1.__exportStar(require(\"./resolveRegionConfig\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isFipsRegion = void 0;\nconst isFipsRegion = (region) => typeof region === \"string\" && (region.startsWith(\"fips-\") || region.endsWith(\"-fips\"));\nexports.isFipsRegion = isFipsRegion;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveRegionConfig = void 0;\nconst getRealRegion_1 = require(\"./getRealRegion\");\nconst isFipsRegion_1 = require(\"./isFipsRegion\");\nconst resolveRegionConfig = (input) => {\n    const { region, useFipsEndpoint } = input;\n    if (!region) {\n        throw new Error(\"Region is missing\");\n    }\n    return {\n        ...input,\n        region: async () => {\n            if (typeof region === \"string\") {\n                return getRealRegion_1.getRealRegion(region);\n            }\n            const providedRegion = await region();\n            return getRealRegion_1.getRealRegion(providedRegion);\n        },\n        useFipsEndpoint: async () => {\n            const providedRegion = typeof region === \"string\" ? region : await region();\n            if (isFipsRegion_1.isFipsRegion(providedRegion)) {\n                return true;\n            }\n            return typeof useFipsEndpoint === \"boolean\" ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint();\n        },\n    };\n};\nexports.resolveRegionConfig = resolveRegionConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getHostnameFromVariants = void 0;\nconst getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {\n    var _a;\n    return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes(\"fips\") && useDualstackEndpoint === tags.includes(\"dualstack\"))) === null || _a === void 0 ? void 0 : _a.hostname;\n};\nexports.getHostnameFromVariants = getHostnameFromVariants;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRegionInfo = void 0;\nconst getHostnameFromVariants_1 = require(\"./getHostnameFromVariants\");\nconst getResolvedHostname_1 = require(\"./getResolvedHostname\");\nconst getResolvedPartition_1 = require(\"./getResolvedPartition\");\nconst getResolvedSigningRegion_1 = require(\"./getResolvedSigningRegion\");\nconst getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash, }) => {\n    var _a, _b, _c, _d, _e, _f;\n    const partition = getResolvedPartition_1.getResolvedPartition(region, { partitionHash });\n    const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;\n    const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };\n    const regionHostname = getHostnameFromVariants_1.getHostnameFromVariants((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);\n    const partitionHostname = getHostnameFromVariants_1.getHostnameFromVariants((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);\n    const hostname = getResolvedHostname_1.getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });\n    if (hostname === undefined) {\n        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);\n    }\n    const signingRegion = getResolvedSigningRegion_1.getResolvedSigningRegion(hostname, {\n        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,\n        regionRegex: partitionHash[partition].regionRegex,\n        useFipsEndpoint,\n    });\n    return {\n        partition,\n        signingService,\n        hostname,\n        ...(signingRegion && { signingRegion }),\n        ...(((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {\n            signingService: regionHash[resolvedRegion].signingService,\n        }),\n    };\n};\nexports.getRegionInfo = getRegionInfo;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getResolvedHostname = void 0;\nconst getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname\n    ? regionHostname\n    : partitionHostname\n        ? partitionHostname.replace(\"{region}\", resolvedRegion)\n        : undefined;\nexports.getResolvedHostname = getResolvedHostname;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getResolvedPartition = void 0;\nconst getResolvedPartition = (region, { partitionHash }) => { var _a; return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : \"aws\"; };\nexports.getResolvedPartition = getResolvedPartition;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getResolvedSigningRegion = void 0;\nconst getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {\n    if (signingRegion) {\n        return signingRegion;\n    }\n    else if (useFipsEndpoint) {\n        const regionRegexJs = regionRegex.replace(\"\\\\\\\\\", \"\\\\\").replace(/^\\^/g, \"\\\\.\").replace(/\\$$/g, \"\\\\.\");\n        const regionRegexmatchArray = hostname.match(regionRegexJs);\n        if (regionRegexmatchArray) {\n            return regionRegexmatchArray[0].slice(1, -1);\n        }\n    }\n};\nexports.getResolvedSigningRegion = getResolvedSigningRegion;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./PartitionHash\"), exports);\ntslib_1.__exportStar(require(\"./RegionHash\"), exports);\ntslib_1.__exportStar(require(\"./getRegionInfo\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromEnv = exports.ENV_EXPIRATION = exports.ENV_SESSION = exports.ENV_SECRET = exports.ENV_KEY = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nexports.ENV_KEY = \"AWS_ACCESS_KEY_ID\";\nexports.ENV_SECRET = \"AWS_SECRET_ACCESS_KEY\";\nexports.ENV_SESSION = \"AWS_SESSION_TOKEN\";\nexports.ENV_EXPIRATION = \"AWS_CREDENTIAL_EXPIRATION\";\nfunction fromEnv() {\n    return () => {\n        const accessKeyId = process.env[exports.ENV_KEY];\n        const secretAccessKey = process.env[exports.ENV_SECRET];\n        const expiry = process.env[exports.ENV_EXPIRATION];\n        if (accessKeyId && secretAccessKey) {\n            return Promise.resolve({\n                accessKeyId,\n                secretAccessKey,\n                sessionToken: process.env[exports.ENV_SESSION],\n                expiration: expiry ? new Date(expiry) : undefined,\n            });\n        }\n        return Promise.reject(new property_provider_1.CredentialsProviderError(\"Unable to find environment variable credentials.\"));\n    };\n}\nexports.fromEnv = fromEnv;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Endpoint = void 0;\nvar Endpoint;\n(function (Endpoint) {\n    Endpoint[\"IPv4\"] = \"http://169.254.169.254\";\n    Endpoint[\"IPv6\"] = \"http://[fd00:ec2::254]\";\n})(Endpoint = exports.Endpoint || (exports.Endpoint = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ENDPOINT_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_NAME = exports.ENV_ENDPOINT_NAME = void 0;\nexports.ENV_ENDPOINT_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT\";\nexports.CONFIG_ENDPOINT_NAME = \"ec2_metadata_service_endpoint\";\nexports.ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_NAME],\n    configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_NAME],\n    default: undefined,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EndpointMode = void 0;\nvar EndpointMode;\n(function (EndpointMode) {\n    EndpointMode[\"IPv4\"] = \"IPv4\";\n    EndpointMode[\"IPv6\"] = \"IPv6\";\n})(EndpointMode = exports.EndpointMode || (exports.EndpointMode = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ENDPOINT_MODE_CONFIG_OPTIONS = exports.CONFIG_ENDPOINT_MODE_NAME = exports.ENV_ENDPOINT_MODE_NAME = void 0;\nconst EndpointMode_1 = require(\"./EndpointMode\");\nexports.ENV_ENDPOINT_MODE_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE\";\nexports.CONFIG_ENDPOINT_MODE_NAME = \"ec2_metadata_service_endpoint_mode\";\nexports.ENDPOINT_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[exports.ENV_ENDPOINT_MODE_NAME],\n    configFileSelector: (profile) => profile[exports.CONFIG_ENDPOINT_MODE_NAME],\n    default: EndpointMode_1.EndpointMode.IPv4,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromContainerMetadata = exports.ENV_CMDS_AUTH_TOKEN = exports.ENV_CMDS_RELATIVE_URI = exports.ENV_CMDS_FULL_URI = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst url_1 = require(\"url\");\nconst httpRequest_1 = require(\"./remoteProvider/httpRequest\");\nconst ImdsCredentials_1 = require(\"./remoteProvider/ImdsCredentials\");\nconst RemoteProviderInit_1 = require(\"./remoteProvider/RemoteProviderInit\");\nconst retry_1 = require(\"./remoteProvider/retry\");\nexports.ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nexports.ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nexports.ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nconst fromContainerMetadata = (init = {}) => {\n    const { timeout, maxRetries } = RemoteProviderInit_1.providerConfigFromInit(init);\n    return () => retry_1.retry(async () => {\n        const requestOptions = await getCmdsUri();\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n        if (!ImdsCredentials_1.isImdsCredentials(credsResponse)) {\n            throw new property_provider_1.CredentialsProviderError(\"Invalid response received from instance metadata service.\");\n        }\n        return ImdsCredentials_1.fromImdsCredentials(credsResponse);\n    }, maxRetries);\n};\nexports.fromContainerMetadata = fromContainerMetadata;\nconst requestFromEcsImds = async (timeout, options) => {\n    if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n            ...options.headers,\n            Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN],\n        };\n    }\n    const buffer = await httpRequest_1.httpRequest({\n        ...options,\n        timeout,\n    });\n    return buffer.toString();\n};\nconst CMDS_IP = \"169.254.170.2\";\nconst GREENGRASS_HOSTS = {\n    localhost: true,\n    \"127.0.0.1\": true,\n};\nconst GREENGRASS_PROTOCOLS = {\n    \"http:\": true,\n    \"https:\": true,\n};\nconst getCmdsUri = async () => {\n    if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {\n        return {\n            hostname: CMDS_IP,\n            path: process.env[exports.ENV_CMDS_RELATIVE_URI],\n        };\n    }\n    if (process.env[exports.ENV_CMDS_FULL_URI]) {\n        const parsed = url_1.parse(process.env[exports.ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n            throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n            throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);\n        }\n        return {\n            ...parsed,\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\n        };\n    }\n    throw new property_provider_1.CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" +\n        ` the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment` +\n        \" variable is set\", false);\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromInstanceMetadata = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst httpRequest_1 = require(\"./remoteProvider/httpRequest\");\nconst ImdsCredentials_1 = require(\"./remoteProvider/ImdsCredentials\");\nconst RemoteProviderInit_1 = require(\"./remoteProvider/RemoteProviderInit\");\nconst retry_1 = require(\"./remoteProvider/retry\");\nconst getInstanceMetadataEndpoint_1 = require(\"./utils/getInstanceMetadataEndpoint\");\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\nconst fromInstanceMetadata = (init = {}) => {\n    let disableFetchToken = false;\n    const { timeout, maxRetries } = RemoteProviderInit_1.providerConfigFromInit(init);\n    const getCredentials = async (maxRetries, options) => {\n        const profile = (await retry_1.retry(async () => {\n            let profile;\n            try {\n                profile = await getProfile(options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return profile;\n        }, maxRetries)).trim();\n        return retry_1.retry(async () => {\n            let creds;\n            try {\n                creds = await getCredentialsFromProfile(profile, options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return creds;\n        }, maxRetries);\n    };\n    return async () => {\n        const endpoint = await getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n            return getCredentials(maxRetries, { ...endpoint, timeout });\n        }\n        else {\n            let token;\n            try {\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\n            }\n            catch (error) {\n                if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {\n                    throw Object.assign(error, {\n                        message: \"EC2 Metadata token request returned error\",\n                    });\n                }\n                else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\n                    disableFetchToken = true;\n                }\n                return getCredentials(maxRetries, { ...endpoint, timeout });\n            }\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                headers: {\n                    \"x-aws-ec2-metadata-token\": token,\n                },\n                timeout,\n            });\n        }\n    };\n};\nexports.fromInstanceMetadata = fromInstanceMetadata;\nconst getMetadataToken = async (options) => httpRequest_1.httpRequest({\n    ...options,\n    path: IMDS_TOKEN_PATH,\n    method: \"PUT\",\n    headers: {\n        \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\",\n    },\n});\nconst getProfile = async (options) => (await httpRequest_1.httpRequest({ ...options, path: IMDS_PATH })).toString();\nconst getCredentialsFromProfile = async (profile, options) => {\n    const credsResponse = JSON.parse((await httpRequest_1.httpRequest({\n        ...options,\n        path: IMDS_PATH + profile,\n    })).toString());\n    if (!ImdsCredentials_1.isImdsCredentials(credsResponse)) {\n        throw new property_provider_1.CredentialsProviderError(\"Invalid response received from instance metadata service.\");\n    }\n    return ImdsCredentials_1.fromImdsCredentials(credsResponse);\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./fromContainerMetadata\"), exports);\ntslib_1.__exportStar(require(\"./fromInstanceMetadata\"), exports);\ntslib_1.__exportStar(require(\"./remoteProvider/RemoteProviderInit\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromImdsCredentials = exports.isImdsCredentials = void 0;\nconst isImdsCredentials = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.AccessKeyId === \"string\" &&\n    typeof arg.SecretAccessKey === \"string\" &&\n    typeof arg.Token === \"string\" &&\n    typeof arg.Expiration === \"string\";\nexports.isImdsCredentials = isImdsCredentials;\nconst fromImdsCredentials = (creds) => ({\n    accessKeyId: creds.AccessKeyId,\n    secretAccessKey: creds.SecretAccessKey,\n    sessionToken: creds.Token,\n    expiration: new Date(creds.Expiration),\n});\nexports.fromImdsCredentials = fromImdsCredentials;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.providerConfigFromInit = exports.DEFAULT_MAX_RETRIES = exports.DEFAULT_TIMEOUT = void 0;\nexports.DEFAULT_TIMEOUT = 1000;\nexports.DEFAULT_MAX_RETRIES = 0;\nconst providerConfigFromInit = ({ maxRetries = exports.DEFAULT_MAX_RETRIES, timeout = exports.DEFAULT_TIMEOUT, }) => ({ maxRetries, timeout });\nexports.providerConfigFromInit = providerConfigFromInit;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.httpRequest = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst buffer_1 = require(\"buffer\");\nconst http_1 = require(\"http\");\nfunction httpRequest(options) {\n    return new Promise((resolve, reject) => {\n        var _a;\n        const req = http_1.request({\n            method: \"GET\",\n            ...options,\n            hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\\[(.+)\\]$/, \"$1\"),\n        });\n        req.on(\"error\", (err) => {\n            reject(Object.assign(new property_provider_1.ProviderError(\"Unable to connect to instance metadata service\"), err));\n            req.destroy();\n        });\n        req.on(\"timeout\", () => {\n            reject(new property_provider_1.ProviderError(\"TimeoutError from instance metadata service\"));\n            req.destroy();\n        });\n        req.on(\"response\", (res) => {\n            const { statusCode = 400 } = res;\n            if (statusCode < 200 || 300 <= statusCode) {\n                reject(Object.assign(new property_provider_1.ProviderError(\"Error response received from instance metadata service\"), { statusCode }));\n                req.destroy();\n            }\n            const chunks = [];\n            res.on(\"data\", (chunk) => {\n                chunks.push(chunk);\n            });\n            res.on(\"end\", () => {\n                resolve(buffer_1.Buffer.concat(chunks));\n                req.destroy();\n            });\n        });\n        req.end();\n    });\n}\nexports.httpRequest = httpRequest;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.retry = void 0;\nconst retry = (toRetry, maxRetries) => {\n    let promise = toRetry();\n    for (let i = 0; i < maxRetries; i++) {\n        promise = promise.catch(toRetry);\n    }\n    return promise;\n};\nexports.retry = retry;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getInstanceMetadataEndpoint = void 0;\nconst node_config_provider_1 = require(\"@aws-sdk/node-config-provider\");\nconst url_parser_1 = require(\"@aws-sdk/url-parser\");\nconst Endpoint_1 = require(\"../config/Endpoint\");\nconst EndpointConfigOptions_1 = require(\"../config/EndpointConfigOptions\");\nconst EndpointMode_1 = require(\"../config/EndpointMode\");\nconst EndpointModeConfigOptions_1 = require(\"../config/EndpointModeConfigOptions\");\nconst getInstanceMetadataEndpoint = async () => url_parser_1.parseUrl((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));\nexports.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;\nconst getFromEndpointConfig = async () => node_config_provider_1.loadConfig(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();\nconst getFromEndpointModeConfig = async () => {\n    const endpointMode = await node_config_provider_1.loadConfig(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();\n    switch (endpointMode) {\n        case EndpointMode_1.EndpointMode.IPv4:\n            return Endpoint_1.Endpoint.IPv4;\n        case EndpointMode_1.EndpointMode.IPv6:\n            return Endpoint_1.Endpoint.IPv6;\n        default:\n            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode_1.EndpointMode)}`);\n    }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromIni = void 0;\nconst credential_provider_env_1 = require(\"@aws-sdk/credential-provider-env\");\nconst credential_provider_imds_1 = require(\"@aws-sdk/credential-provider-imds\");\nconst credential_provider_sso_1 = require(\"@aws-sdk/credential-provider-sso\");\nconst credential_provider_web_identity_1 = require(\"@aws-sdk/credential-provider-web-identity\");\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst util_credentials_1 = require(\"@aws-sdk/util-credentials\");\nconst isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1;\nconst isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nconst isAssumeRoleProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1;\nconst isAssumeRoleWithSourceProfile = (arg) => isAssumeRoleProfile(arg) && typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\nconst isAssumeRoleWithProviderProfile = (arg) => isAssumeRoleProfile(arg) && typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\nconst fromIni = (init = {}) => async () => {\n    const profiles = await util_credentials_1.parseKnownFiles(init);\n    return resolveProfileData(util_credentials_1.getMasterProfileName(init), profiles, init);\n};\nexports.fromIni = fromIni;\nconst resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data);\n    }\n    if (isAssumeRoleWithSourceProfile(data) || isAssumeRoleWithProviderProfile(data)) {\n        const { external_id: ExternalId, mfa_serial, role_arn: RoleArn, role_session_name: RoleSessionName = \"aws-sdk-js-\" + Date.now(), source_profile, credential_source, } = data;\n        if (!options.roleAssumer) {\n            throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no` + ` role assumption callback was provided.`, false);\n        }\n        if (source_profile && source_profile in visitedProfiles) {\n            throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n                ` ${util_credentials_1.getMasterProfileName(options)}. Profiles visited: ` +\n                Object.keys(visitedProfiles).join(\", \"), false);\n        }\n        const sourceCreds = source_profile\n            ? resolveProfileData(source_profile, profiles, options, {\n                ...visitedProfiles,\n                [source_profile]: true,\n            })\n            : resolveCredentialSource(credential_source, profileName)();\n        const params = { RoleArn, RoleSessionName, ExternalId };\n        if (mfa_serial) {\n            if (!options.mfaCodeProvider) {\n                throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication,` + ` but no MFA code callback was provided.`, false);\n            }\n            params.SerialNumber = mfa_serial;\n            params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n        }\n        return options.roleAssumer(await sourceCreds, params);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (credential_provider_sso_1.isSsoProfile(data)) {\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name } = credential_provider_sso_1.validateSsoProfile(data);\n        return credential_provider_sso_1.fromSSO({\n            ssoStartUrl: sso_start_url,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n        })();\n    }\n    throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared` + ` credentials file.`);\n};\nconst resolveCredentialSource = (credentialSource, profileName) => {\n    const sourceProvidersMap = {\n        EcsContainer: credential_provider_imds_1.fromContainerMetadata,\n        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,\n        Environment: credential_provider_env_1.fromEnv,\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource]();\n    }\n    else {\n        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`);\n    }\n};\nconst resolveStaticCredentials = (profile) => Promise.resolve({\n    accessKeyId: profile.aws_access_key_id,\n    secretAccessKey: profile.aws_secret_access_key,\n    sessionToken: profile.aws_session_token,\n});\nconst resolveWebIdentityCredentials = async (profile, options) => credential_provider_web_identity_1.fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n})();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultProvider = exports.ENV_IMDS_DISABLED = void 0;\nconst credential_provider_env_1 = require(\"@aws-sdk/credential-provider-env\");\nconst credential_provider_imds_1 = require(\"@aws-sdk/credential-provider-imds\");\nconst credential_provider_ini_1 = require(\"@aws-sdk/credential-provider-ini\");\nconst credential_provider_process_1 = require(\"@aws-sdk/credential-provider-process\");\nconst credential_provider_sso_1 = require(\"@aws-sdk/credential-provider-sso\");\nconst credential_provider_web_identity_1 = require(\"@aws-sdk/credential-provider-web-identity\");\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst shared_ini_file_loader_1 = require(\"@aws-sdk/shared-ini-file-loader\");\nconst util_credentials_1 = require(\"@aws-sdk/util-credentials\");\nexports.ENV_IMDS_DISABLED = \"AWS_EC2_METADATA_DISABLED\";\nconst defaultProvider = (init = {}) => {\n    const options = { profile: process.env[util_credentials_1.ENV_PROFILE], ...init };\n    if (!options.loadedConfig)\n        options.loadedConfig = shared_ini_file_loader_1.loadSharedConfigFiles(init);\n    const providers = [\n        credential_provider_sso_1.fromSSO(options),\n        credential_provider_ini_1.fromIni(options),\n        credential_provider_process_1.fromProcess(options),\n        credential_provider_web_identity_1.fromTokenFile(options),\n        remoteProvider(options),\n        async () => {\n            throw new property_provider_1.CredentialsProviderError(\"Could not load credentials from any providers\", false);\n        },\n    ];\n    if (!options.profile)\n        providers.unshift(credential_provider_env_1.fromEnv());\n    const providerChain = property_provider_1.chain(...providers);\n    return property_provider_1.memoize(providerChain, (credentials) => credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < 300000, (credentials) => credentials.expiration !== undefined);\n};\nexports.defaultProvider = defaultProvider;\nconst remoteProvider = (init) => {\n    if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {\n        return credential_provider_imds_1.fromContainerMetadata(init);\n    }\n    if (process.env[exports.ENV_IMDS_DISABLED]) {\n        return () => Promise.reject(new property_provider_1.CredentialsProviderError(\"EC2 Instance Metadata Service access disabled\"));\n    }\n    return credential_provider_imds_1.fromInstanceMetadata(init);\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromProcess = exports.ENV_PROFILE = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst util_credentials_1 = require(\"@aws-sdk/util-credentials\");\nconst child_process_1 = require(\"child_process\");\nexports.ENV_PROFILE = \"AWS_PROFILE\";\nconst fromProcess = (init = {}) => async () => {\n    const profiles = await util_credentials_1.parseKnownFiles(init);\n    return resolveProcessCredentials(util_credentials_1.getMasterProfileName(init), profiles);\n};\nexports.fromProcess = fromProcess;\nconst resolveProcessCredentials = async (profileName, profiles) => {\n    const profile = profiles[profileName];\n    if (profiles[profileName]) {\n        const credentialProcess = profile[\"credential_process\"];\n        if (credentialProcess !== undefined) {\n            return await execPromise(credentialProcess)\n                .then((processResult) => {\n                let data;\n                try {\n                    data = JSON.parse(processResult);\n                }\n                catch (_a) {\n                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);\n                }\n                const { Version: version, AccessKeyId: accessKeyId, SecretAccessKey: secretAccessKey, SessionToken: sessionToken, Expiration: expiration, } = data;\n                if (version !== 1) {\n                    throw Error(`Profile ${profileName} credential_process did not return Version 1.`);\n                }\n                if (accessKeyId === undefined || secretAccessKey === undefined) {\n                    throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);\n                }\n                let expirationUnix;\n                if (expiration) {\n                    const currentTime = new Date();\n                    const expireTime = new Date(expiration);\n                    if (expireTime < currentTime) {\n                        throw Error(`Profile ${profileName} credential_process returned expired credentials.`);\n                    }\n                    expirationUnix = Math.floor(new Date(expiration).valueOf() / 1000);\n                }\n                return {\n                    accessKeyId,\n                    secretAccessKey,\n                    sessionToken,\n                    expirationUnix,\n                };\n            })\n                .catch((error) => {\n                throw new property_provider_1.CredentialsProviderError(error.message);\n            });\n        }\n        else {\n            throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);\n        }\n    }\n    else {\n        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);\n    }\n};\nconst execPromise = (command) => new Promise(function (resolve, reject) {\n    child_process_1.exec(command, (error, stdout) => {\n        if (error) {\n            reject(error);\n            return;\n        }\n        resolve(stdout.trim());\n    });\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isSsoProfile = exports.validateSsoProfile = exports.fromSSO = exports.EXPIRE_WINDOW_MS = void 0;\nconst client_sso_1 = require(\"@aws-sdk/client-sso\");\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst shared_ini_file_loader_1 = require(\"@aws-sdk/shared-ini-file-loader\");\nconst util_credentials_1 = require(\"@aws-sdk/util-credentials\");\nconst crypto_1 = require(\"crypto\");\nconst fs_1 = require(\"fs\");\nconst path_1 = require(\"path\");\nexports.EXPIRE_WINDOW_MS = 15 * 60 * 1000;\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nconst fromSSO = (init = {}) => async () => {\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient } = init;\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName) {\n        const profiles = await util_credentials_1.parseKnownFiles(init);\n        const profileName = util_credentials_1.getMasterProfileName(init);\n        const profile = profiles[profileName];\n        if (!exports.isSsoProfile(profile)) {\n            throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);\n        }\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name } = exports.validateSsoProfile(profile);\n        return resolveSSOCredentials({\n            ssoStartUrl: sso_start_url,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n            ssoClient: ssoClient,\n        });\n    }\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include \"ssoStartUrl\",' +\n            ' \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"');\n    }\n    else {\n        return resolveSSOCredentials({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient });\n    }\n};\nexports.fromSSO = fromSSO;\nconst resolveSSOCredentials = async ({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, }) => {\n    const hasher = crypto_1.createHash(\"sha1\");\n    const cacheName = hasher.update(ssoStartUrl).digest(\"hex\");\n    const tokenFile = path_1.join(shared_ini_file_loader_1.getHomeDir(), \".aws\", \"sso\", \"cache\", `${cacheName}.json`);\n    let token;\n    try {\n        token = JSON.parse(fs_1.readFileSync(tokenFile, { encoding: \"utf-8\" }));\n        if (new Date(token.expiresAt).getTime() - Date.now() <= exports.EXPIRE_WINDOW_MS) {\n            throw new Error(\"SSO token is expired.\");\n        }\n    }\n    catch (e) {\n        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired or is otherwise invalid. To refresh this SSO session ` +\n            `run aws sso login with the corresponding profile.`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    const { accessToken } = token;\n    const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new property_provider_1.CredentialsProviderError(\"SSO returns an invalid temporary credential.\", SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };\n};\nconst validateSsoProfile = (profile) => {\n    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters \"sso_account_id\", \"sso_region\", ` +\n            `\"sso_role_name\", \"sso_start_url\". Got ${Object.keys(profile).join(\", \")}\\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    return profile;\n};\nexports.validateSsoProfile = validateSsoProfile;\nconst isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\nexports.isSsoProfile = isSsoProfile;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromTokenFile = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst fs_1 = require(\"fs\");\nconst fromWebToken_1 = require(\"./fromWebToken\");\nconst ENV_TOKEN_FILE = \"AWS_WEB_IDENTITY_TOKEN_FILE\";\nconst ENV_ROLE_ARN = \"AWS_ROLE_ARN\";\nconst ENV_ROLE_SESSION_NAME = \"AWS_ROLE_SESSION_NAME\";\nconst fromTokenFile = (init = {}) => async () => {\n    return resolveTokenFile(init);\n};\nexports.fromTokenFile = fromTokenFile;\nconst resolveTokenFile = (init) => {\n    var _a, _b, _c;\n    const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];\n    const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];\n    const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];\n    if (!webIdentityTokenFile || !roleArn) {\n        throw new property_provider_1.CredentialsProviderError(\"Web identity configuration not specified\");\n    }\n    return fromWebToken_1.fromWebToken({\n        ...init,\n        webIdentityToken: fs_1.readFileSync(webIdentityTokenFile, { encoding: \"ascii\" }),\n        roleArn,\n        roleSessionName,\n    })();\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromWebToken = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst fromWebToken = (init) => () => {\n    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity, } = init;\n    if (!roleAssumerWithWebIdentity) {\n        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity,` +\n            ` but no role assumption callback was provided.`, false);\n    }\n    return roleAssumerWithWebIdentity({\n        RoleArn: roleArn,\n        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,\n        WebIdentityToken: webIdentityToken,\n        ProviderId: providerId,\n        PolicyArns: policyArns,\n        Policy: policy,\n        DurationSeconds: durationSeconds,\n    });\n};\nexports.fromWebToken = fromWebToken;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./fromTokenFile\"), exports);\ntslib_1.__exportStar(require(\"./fromWebToken\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventStreamMarshaller = void 0;\nconst crc32_1 = require(\"@aws-crypto/crc32\");\nconst HeaderMarshaller_1 = require(\"./HeaderMarshaller\");\nconst splitMessage_1 = require(\"./splitMessage\");\nclass EventStreamMarshaller {\n    constructor(toUtf8, fromUtf8) {\n        this.headerMarshaller = new HeaderMarshaller_1.HeaderMarshaller(toUtf8, fromUtf8);\n    }\n    marshall({ headers: rawHeaders, body }) {\n        const headers = this.headerMarshaller.format(rawHeaders);\n        const length = headers.byteLength + body.byteLength + 16;\n        const out = new Uint8Array(length);\n        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n        const checksum = new crc32_1.Crc32();\n        view.setUint32(0, length, false);\n        view.setUint32(4, headers.byteLength, false);\n        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n        out.set(headers, 12);\n        out.set(body, headers.byteLength + 12);\n        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n        return out;\n    }\n    unmarshall(message) {\n        const { headers, body } = splitMessage_1.splitMessage(message);\n        return { headers: this.headerMarshaller.parse(headers), body };\n    }\n    formatHeaders(rawHeaders) {\n        return this.headerMarshaller.format(rawHeaders);\n    }\n}\nexports.EventStreamMarshaller = EventStreamMarshaller;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeaderMarshaller = void 0;\nconst util_hex_encoding_1 = require(\"@aws-sdk/util-hex-encoding\");\nconst Int64_1 = require(\"./Int64\");\nclass HeaderMarshaller {\n    constructor(toUtf8, fromUtf8) {\n        this.toUtf8 = toUtf8;\n        this.fromUtf8 = fromUtf8;\n    }\n    format(headers) {\n        const chunks = [];\n        for (const headerName of Object.keys(headers)) {\n            const bytes = this.fromUtf8(headerName);\n            chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n        }\n        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));\n        let position = 0;\n        for (const chunk of chunks) {\n            out.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return out;\n    }\n    formatHeaderValue(header) {\n        switch (header.type) {\n            case \"boolean\":\n                return Uint8Array.from([header.value ? 0 : 1]);\n            case \"byte\":\n                return Uint8Array.from([2, header.value]);\n            case \"short\":\n                const shortView = new DataView(new ArrayBuffer(3));\n                shortView.setUint8(0, 3);\n                shortView.setInt16(1, header.value, false);\n                return new Uint8Array(shortView.buffer);\n            case \"integer\":\n                const intView = new DataView(new ArrayBuffer(5));\n                intView.setUint8(0, 4);\n                intView.setInt32(1, header.value, false);\n                return new Uint8Array(intView.buffer);\n            case \"long\":\n                const longBytes = new Uint8Array(9);\n                longBytes[0] = 5;\n                longBytes.set(header.value.bytes, 1);\n                return longBytes;\n            case \"binary\":\n                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n                binView.setUint8(0, 6);\n                binView.setUint16(1, header.value.byteLength, false);\n                const binBytes = new Uint8Array(binView.buffer);\n                binBytes.set(header.value, 3);\n                return binBytes;\n            case \"string\":\n                const utf8Bytes = this.fromUtf8(header.value);\n                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n                strView.setUint8(0, 7);\n                strView.setUint16(1, utf8Bytes.byteLength, false);\n                const strBytes = new Uint8Array(strView.buffer);\n                strBytes.set(utf8Bytes, 3);\n                return strBytes;\n            case \"timestamp\":\n                const tsBytes = new Uint8Array(9);\n                tsBytes[0] = 8;\n                tsBytes.set(Int64_1.Int64.fromNumber(header.value.valueOf()).bytes, 1);\n                return tsBytes;\n            case \"uuid\":\n                if (!UUID_PATTERN.test(header.value)) {\n                    throw new Error(`Invalid UUID received: ${header.value}`);\n                }\n                const uuidBytes = new Uint8Array(17);\n                uuidBytes[0] = 9;\n                uuidBytes.set(util_hex_encoding_1.fromHex(header.value.replace(/\\-/g, \"\")), 1);\n                return uuidBytes;\n        }\n    }\n    parse(headers) {\n        const out = {};\n        let position = 0;\n        while (position < headers.byteLength) {\n            const nameLength = headers.getUint8(position++);\n            const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n            position += nameLength;\n            switch (headers.getUint8(position++)) {\n                case 0:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: true,\n                    };\n                    break;\n                case 1:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: false,\n                    };\n                    break;\n                case 2:\n                    out[name] = {\n                        type: BYTE_TAG,\n                        value: headers.getInt8(position++),\n                    };\n                    break;\n                case 3:\n                    out[name] = {\n                        type: SHORT_TAG,\n                        value: headers.getInt16(position, false),\n                    };\n                    position += 2;\n                    break;\n                case 4:\n                    out[name] = {\n                        type: INT_TAG,\n                        value: headers.getInt32(position, false),\n                    };\n                    position += 4;\n                    break;\n                case 5:\n                    out[name] = {\n                        type: LONG_TAG,\n                        value: new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)),\n                    };\n                    position += 8;\n                    break;\n                case 6:\n                    const binaryLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: BINARY_TAG,\n                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),\n                    };\n                    position += binaryLength;\n                    break;\n                case 7:\n                    const stringLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: STRING_TAG,\n                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),\n                    };\n                    position += stringLength;\n                    break;\n                case 8:\n                    out[name] = {\n                        type: TIMESTAMP_TAG,\n                        value: new Date(new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()),\n                    };\n                    position += 8;\n                    break;\n                case 9:\n                    const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n                    position += 16;\n                    out[name] = {\n                        type: UUID_TAG,\n                        value: `${util_hex_encoding_1.toHex(uuidBytes.subarray(0, 4))}-${util_hex_encoding_1.toHex(uuidBytes.subarray(4, 6))}-${util_hex_encoding_1.toHex(uuidBytes.subarray(6, 8))}-${util_hex_encoding_1.toHex(uuidBytes.subarray(8, 10))}-${util_hex_encoding_1.toHex(uuidBytes.subarray(10))}`,\n                    };\n                    break;\n                default:\n                    throw new Error(`Unrecognized header type tag`);\n            }\n        }\n        return out;\n    }\n}\nexports.HeaderMarshaller = HeaderMarshaller;\nvar HEADER_VALUE_TYPE;\n(function (HEADER_VALUE_TYPE) {\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\nconst BOOLEAN_TAG = \"boolean\";\nconst BYTE_TAG = \"byte\";\nconst SHORT_TAG = \"short\";\nconst INT_TAG = \"integer\";\nconst LONG_TAG = \"long\";\nconst BINARY_TAG = \"binary\";\nconst STRING_TAG = \"string\";\nconst TIMESTAMP_TAG = \"timestamp\";\nconst UUID_TAG = \"uuid\";\nconst UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Int64 = void 0;\nconst util_hex_encoding_1 = require(\"@aws-sdk/util-hex-encoding\");\nclass Int64 {\n    constructor(bytes) {\n        this.bytes = bytes;\n        if (bytes.byteLength !== 8) {\n            throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n        }\n    }\n    static fromNumber(number) {\n        if (number > 9223372036854775807 || number < -9223372036854775808) {\n            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);\n        }\n        const bytes = new Uint8Array(8);\n        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n            bytes[i] = remaining;\n        }\n        if (number < 0) {\n            negate(bytes);\n        }\n        return new Int64(bytes);\n    }\n    valueOf() {\n        const bytes = this.bytes.slice(0);\n        const negative = bytes[0] & 0b10000000;\n        if (negative) {\n            negate(bytes);\n        }\n        return parseInt(util_hex_encoding_1.toHex(bytes), 16) * (negative ? -1 : 1);\n    }\n    toString() {\n        return String(this.valueOf());\n    }\n}\nexports.Int64 = Int64;\nfunction negate(bytes) {\n    for (let i = 0; i < 8; i++) {\n        bytes[i] ^= 0xff;\n    }\n    for (let i = 7; i > -1; i--) {\n        bytes[i]++;\n        if (bytes[i] !== 0)\n            break;\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./EventStreamMarshaller\"), exports);\ntslib_1.__exportStar(require(\"./Int64\"), exports);\ntslib_1.__exportStar(require(\"./Message\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.splitMessage = void 0;\nconst crc32_1 = require(\"@aws-crypto/crc32\");\nconst PRELUDE_MEMBER_LENGTH = 4;\nconst PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\nconst CHECKSUM_LENGTH = 4;\nconst MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\nfunction splitMessage({ byteLength, byteOffset, buffer }) {\n    if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n        throw new Error(\"Provided message too short to accommodate event stream message overhead\");\n    }\n    const view = new DataView(buffer, byteOffset, byteLength);\n    const messageLength = view.getUint32(0, false);\n    if (byteLength !== messageLength) {\n        throw new Error(\"Reported message length does not match received message length\");\n    }\n    const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n    const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n    const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n    const checksummer = new crc32_1.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n    if (expectedPreludeChecksum !== checksummer.digest()) {\n        throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);\n    }\n    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n    if (expectedMessageChecksum !== checksummer.digest()) {\n        throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);\n    }\n    return {\n        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)),\n    };\n}\nexports.splitMessage = splitMessage;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveEventStreamSerdeConfig = void 0;\nconst resolveEventStreamSerdeConfig = (input) => ({\n    ...input,\n    eventStreamMarshaller: input.eventStreamSerdeProvider(input),\n});\nexports.resolveEventStreamSerdeConfig = resolveEventStreamSerdeConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./EventStreamSerdeConfig\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventStreamMarshaller = void 0;\nconst eventstream_marshaller_1 = require(\"@aws-sdk/eventstream-marshaller\");\nconst eventstream_serde_universal_1 = require(\"@aws-sdk/eventstream-serde-universal\");\nconst stream_1 = require(\"stream\");\nconst utils_1 = require(\"./utils\");\nclass EventStreamMarshaller {\n    constructor({ utf8Encoder, utf8Decoder }) {\n        this.eventMarshaller = new eventstream_marshaller_1.EventStreamMarshaller(utf8Encoder, utf8Decoder);\n        this.universalMarshaller = new eventstream_serde_universal_1.EventStreamMarshaller({\n            utf8Decoder,\n            utf8Encoder,\n        });\n    }\n    deserialize(body, deserializer) {\n        const bodyIterable = typeof body[Symbol.asyncIterator] === \"function\" ? body : utils_1.readabletoIterable(body);\n        return this.universalMarshaller.deserialize(bodyIterable, deserializer);\n    }\n    serialize(input, serializer) {\n        const serializedIterable = this.universalMarshaller.serialize(input, serializer);\n        if (typeof stream_1.Readable.from === \"function\") {\n            return stream_1.Readable.from(serializedIterable);\n        }\n        else {\n            const iterator = serializedIterable[Symbol.asyncIterator]();\n            const serializedStream = new stream_1.Readable({\n                autoDestroy: true,\n                objectMode: true,\n                async read() {\n                    iterator\n                        .next()\n                        .then(({ done, value }) => {\n                        if (done) {\n                            this.push(null);\n                        }\n                        else {\n                            this.push(value);\n                        }\n                    })\n                        .catch((err) => {\n                        this.destroy(err);\n                    });\n                },\n            });\n            serializedStream.on(\"error\", () => {\n                serializedStream.destroy();\n            });\n            serializedStream.on(\"end\", () => {\n                serializedStream.destroy();\n            });\n            return serializedStream;\n        }\n    }\n}\nexports.EventStreamMarshaller = EventStreamMarshaller;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./EventStreamMarshaller\"), exports);\ntslib_1.__exportStar(require(\"./provider\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.eventStreamSerdeProvider = void 0;\nconst EventStreamMarshaller_1 = require(\"./EventStreamMarshaller\");\nconst eventStreamSerdeProvider = (options) => new EventStreamMarshaller_1.EventStreamMarshaller(options);\nexports.eventStreamSerdeProvider = eventStreamSerdeProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readabletoIterable = void 0;\nasync function* readabletoIterable(readStream) {\n    let streamEnded = false;\n    let generationEnded = false;\n    const records = new Array();\n    readStream.on(\"error\", (err) => {\n        if (!streamEnded) {\n            streamEnded = true;\n        }\n        if (err) {\n            throw err;\n        }\n    });\n    readStream.on(\"data\", (data) => {\n        records.push(data);\n    });\n    readStream.on(\"end\", () => {\n        streamEnded = true;\n    });\n    while (!generationEnded) {\n        const value = await new Promise((resolve) => setTimeout(() => resolve(records.shift()), 0));\n        if (value) {\n            yield value;\n        }\n        generationEnded = streamEnded && records.length === 0;\n    }\n}\nexports.readabletoIterable = readabletoIterable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventStreamMarshaller = void 0;\nconst eventstream_marshaller_1 = require(\"@aws-sdk/eventstream-marshaller\");\nconst getChunkedStream_1 = require(\"./getChunkedStream\");\nconst getUnmarshalledStream_1 = require(\"./getUnmarshalledStream\");\nclass EventStreamMarshaller {\n    constructor({ utf8Encoder, utf8Decoder }) {\n        this.eventMarshaller = new eventstream_marshaller_1.EventStreamMarshaller(utf8Encoder, utf8Decoder);\n        this.utfEncoder = utf8Encoder;\n    }\n    deserialize(body, deserializer) {\n        const chunkedStream = getChunkedStream_1.getChunkedStream(body);\n        const unmarshalledStream = getUnmarshalledStream_1.getUnmarshalledStream(chunkedStream, {\n            eventMarshaller: this.eventMarshaller,\n            deserializer,\n            toUtf8: this.utfEncoder,\n        });\n        return unmarshalledStream;\n    }\n    serialize(input, serializer) {\n        const self = this;\n        const serializedIterator = async function* () {\n            for await (const chunk of input) {\n                const payloadBuf = self.eventMarshaller.marshall(serializer(chunk));\n                yield payloadBuf;\n            }\n            yield new Uint8Array(0);\n        };\n        return {\n            [Symbol.asyncIterator]: serializedIterator,\n        };\n    }\n}\nexports.EventStreamMarshaller = EventStreamMarshaller;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getChunkedStream = void 0;\nfunction getChunkedStream(source) {\n    let currentMessageTotalLength = 0;\n    let currentMessagePendingLength = 0;\n    let currentMessage = null;\n    let messageLengthBuffer = null;\n    const allocateMessage = (size) => {\n        if (typeof size !== \"number\") {\n            throw new Error(\"Attempted to allocate an event message where size was not a number: \" + size);\n        }\n        currentMessageTotalLength = size;\n        currentMessagePendingLength = 4;\n        currentMessage = new Uint8Array(size);\n        const currentMessageView = new DataView(currentMessage.buffer);\n        currentMessageView.setUint32(0, size, false);\n    };\n    const iterator = async function* () {\n        const sourceIterator = source[Symbol.asyncIterator]();\n        while (true) {\n            const { value, done } = await sourceIterator.next();\n            if (done) {\n                if (!currentMessageTotalLength) {\n                    return;\n                }\n                else if (currentMessageTotalLength === currentMessagePendingLength) {\n                    yield currentMessage;\n                }\n                else {\n                    throw new Error(\"Truncated event message received.\");\n                }\n                return;\n            }\n            const chunkLength = value.length;\n            let currentOffset = 0;\n            while (currentOffset < chunkLength) {\n                if (!currentMessage) {\n                    const bytesRemaining = chunkLength - currentOffset;\n                    if (!messageLengthBuffer) {\n                        messageLengthBuffer = new Uint8Array(4);\n                    }\n                    const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);\n                    messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);\n                    currentMessagePendingLength += numBytesForTotal;\n                    currentOffset += numBytesForTotal;\n                    if (currentMessagePendingLength < 4) {\n                        break;\n                    }\n                    allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));\n                    messageLengthBuffer = null;\n                }\n                const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);\n                currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);\n                currentMessagePendingLength += numBytesToWrite;\n                currentOffset += numBytesToWrite;\n                if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {\n                    yield currentMessage;\n                    currentMessage = null;\n                    currentMessageTotalLength = 0;\n                    currentMessagePendingLength = 0;\n                }\n            }\n        }\n    };\n    return {\n        [Symbol.asyncIterator]: iterator,\n    };\n}\nexports.getChunkedStream = getChunkedStream;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUnmarshalledStream = void 0;\nfunction getUnmarshalledStream(source, options) {\n    return {\n        [Symbol.asyncIterator]: async function* () {\n            for await (const chunk of source) {\n                const message = options.eventMarshaller.unmarshall(chunk);\n                const { value: messageType } = message.headers[\":message-type\"];\n                if (messageType === \"error\") {\n                    const unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n                    unmodeledError.name = message.headers[\":error-code\"].value;\n                    throw unmodeledError;\n                }\n                else if (messageType === \"exception\") {\n                    const code = message.headers[\":exception-type\"].value;\n                    const exception = { [code]: message };\n                    const deserializedException = await options.deserializer(exception);\n                    if (deserializedException.$unknown) {\n                        const error = new Error(options.toUtf8(message.body));\n                        error.name = code;\n                        throw error;\n                    }\n                    throw deserializedException[code];\n                }\n                else if (messageType === \"event\") {\n                    const event = {\n                        [message.headers[\":event-type\"].value]: message,\n                    };\n                    const deserialized = await options.deserializer(event);\n                    if (deserialized.$unknown)\n                        continue;\n                    yield deserialized;\n                }\n                else {\n                    throw Error(`Unrecognizable event type: ${message.headers[\":event-type\"].value}`);\n                }\n            }\n        },\n    };\n}\nexports.getUnmarshalledStream = getUnmarshalledStream;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./EventStreamMarshaller\"), exports);\ntslib_1.__exportStar(require(\"./provider\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.eventStreamSerdeProvider = void 0;\nconst EventStreamMarshaller_1 = require(\"./EventStreamMarshaller\");\nconst eventStreamSerdeProvider = (options) => new EventStreamMarshaller_1.EventStreamMarshaller(options);\nexports.eventStreamSerdeProvider = eventStreamSerdeProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Hash = void 0;\nconst util_buffer_from_1 = require(\"@aws-sdk/util-buffer-from\");\nconst buffer_1 = require(\"buffer\");\nconst crypto_1 = require(\"crypto\");\nclass Hash {\n    constructor(algorithmIdentifier, secret) {\n        this.hash = secret ? crypto_1.createHmac(algorithmIdentifier, castSourceData(secret)) : crypto_1.createHash(algorithmIdentifier);\n    }\n    update(toHash, encoding) {\n        this.hash.update(castSourceData(toHash, encoding));\n    }\n    digest() {\n        return Promise.resolve(this.hash.digest());\n    }\n}\nexports.Hash = Hash;\nfunction castSourceData(toCast, encoding) {\n    if (buffer_1.Buffer.isBuffer(toCast)) {\n        return toCast;\n    }\n    if (typeof toCast === \"string\") {\n        return util_buffer_from_1.fromString(toCast, encoding);\n    }\n    if (ArrayBuffer.isView(toCast)) {\n        return util_buffer_from_1.fromArrayBuffer(toCast.buffer, toCast.byteOffset, toCast.byteLength);\n    }\n    return util_buffer_from_1.fromArrayBuffer(toCast);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HashCalculator = void 0;\nconst stream_1 = require(\"stream\");\nclass HashCalculator extends stream_1.Writable {\n    constructor(hash, options) {\n        super(options);\n        this.hash = hash;\n    }\n    _write(chunk, encoding, callback) {\n        try {\n            this.hash.update(chunk);\n        }\n        catch (err) {\n            return callback(err);\n        }\n        callback();\n    }\n}\nexports.HashCalculator = HashCalculator;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fileStreamHasher = void 0;\nconst fs_1 = require(\"fs\");\nconst hash_calculator_1 = require(\"./hash-calculator\");\nconst fileStreamHasher = function fileStreamHasher(hashCtor, fileStream) {\n    return new Promise((resolve, reject) => {\n        if (!isReadStream(fileStream)) {\n            reject(new Error(\"Unable to calculate hash for non-file streams.\"));\n            return;\n        }\n        const fileStreamTee = fs_1.createReadStream(fileStream.path, {\n            start: fileStream.start,\n            end: fileStream.end,\n        });\n        const hash = new hashCtor();\n        const hashCalculator = new hash_calculator_1.HashCalculator(hash);\n        fileStreamTee.pipe(hashCalculator);\n        fileStreamTee.on(\"error\", (err) => {\n            hashCalculator.end();\n            reject(err);\n        });\n        hashCalculator.on(\"error\", reject);\n        hashCalculator.on(\"finish\", function () {\n            hash.digest().then(resolve).catch(reject);\n        });\n    });\n};\nexports.fileStreamHasher = fileStreamHasher;\nfunction isReadStream(stream) {\n    return typeof stream.path === \"string\";\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isArrayBuffer = void 0;\nconst isArrayBuffer = (arg) => (typeof ArrayBuffer === \"function\" && arg instanceof ArrayBuffer) ||\n    Object.prototype.toString.call(arg) === \"[object ArrayBuffer]\";\nexports.isArrayBuffer = isArrayBuffer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getApplyMd5BodyChecksumPlugin = exports.applyMd5BodyChecksumMiddlewareOptions = exports.applyMd5BodyChecksumMiddleware = void 0;\nconst is_array_buffer_1 = require(\"@aws-sdk/is-array-buffer\");\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst applyMd5BodyChecksumMiddleware = (options) => (next) => async (args) => {\n    let { request } = args;\n    if (protocol_http_1.HttpRequest.isInstance(request)) {\n        const { body, headers } = request;\n        if (!hasHeader(\"content-md5\", headers)) {\n            let digest;\n            if (body === undefined || typeof body === \"string\" || ArrayBuffer.isView(body) || is_array_buffer_1.isArrayBuffer(body)) {\n                const hash = new options.md5();\n                hash.update(body || \"\");\n                digest = hash.digest();\n            }\n            else {\n                digest = options.streamHasher(options.md5, body);\n            }\n            request = {\n                ...request,\n                headers: {\n                    ...headers,\n                    \"content-md5\": options.base64Encoder(await digest),\n                },\n            };\n        }\n    }\n    return next({\n        ...args,\n        request,\n    });\n};\nexports.applyMd5BodyChecksumMiddleware = applyMd5BodyChecksumMiddleware;\nexports.applyMd5BodyChecksumMiddlewareOptions = {\n    name: \"applyMd5BodyChecksumMiddleware\",\n    step: \"build\",\n    tags: [\"SET_CONTENT_MD5\", \"BODY_CHECKSUM\"],\n    override: true,\n};\nconst getApplyMd5BodyChecksumPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(exports.applyMd5BodyChecksumMiddleware(config), exports.applyMd5BodyChecksumMiddlewareOptions);\n    },\n});\nexports.getApplyMd5BodyChecksumPlugin = getApplyMd5BodyChecksumPlugin;\nconst hasHeader = (soughtHeader, headers) => {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true;\n        }\n    }\n    return false;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./applyMd5BodyChecksumMiddleware\"), exports);\ntslib_1.__exportStar(require(\"./md5Configuration\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveMd5BodyChecksumConfig = void 0;\nconst resolveMd5BodyChecksumConfig = (input) => input;\nexports.resolveMd5BodyChecksumConfig = resolveMd5BodyChecksumConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS = exports.NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME = exports.NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME = void 0;\nconst util_config_provider_1 = require(\"@aws-sdk/util-config-provider\");\nexports.NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME = \"AWS_S3_DISABLE_MULTIREGION_ACCESS_POINTS\";\nexports.NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME = \"s3_disable_multiregion_access_points\";\nexports.NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => util_config_provider_1.booleanSelector(env, exports.NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME, util_config_provider_1.SelectorType.ENV),\n    configFileSelector: (profile) => util_config_provider_1.booleanSelector(profile, exports.NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME, util_config_provider_1.SelectorType.CONFIG),\n    default: false,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NODE_USE_ARN_REGION_CONFIG_OPTIONS = exports.NODE_USE_ARN_REGION_INI_NAME = exports.NODE_USE_ARN_REGION_ENV_NAME = void 0;\nconst util_config_provider_1 = require(\"@aws-sdk/util-config-provider\");\nexports.NODE_USE_ARN_REGION_ENV_NAME = \"AWS_S3_USE_ARN_REGION\";\nexports.NODE_USE_ARN_REGION_INI_NAME = \"s3_use_arn_region\";\nexports.NODE_USE_ARN_REGION_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => util_config_provider_1.booleanSelector(env, exports.NODE_USE_ARN_REGION_ENV_NAME, util_config_provider_1.SelectorType.ENV),\n    configFileSelector: (profile) => util_config_provider_1.booleanSelector(profile, exports.NODE_USE_ARN_REGION_INI_NAME, util_config_provider_1.SelectorType.CONFIG),\n    default: false,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBucketEndpointPlugin = exports.bucketEndpointMiddlewareOptions = exports.bucketEndpointMiddleware = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst util_arn_parser_1 = require(\"@aws-sdk/util-arn-parser\");\nconst bucketHostname_1 = require(\"./bucketHostname\");\nconst bucketEndpointMiddleware = (options) => (next, context) => async (args) => {\n    const { Bucket: bucketName } = args.input;\n    let replaceBucketInPath = options.bucketEndpoint;\n    const request = args.request;\n    if (protocol_http_1.HttpRequest.isInstance(request)) {\n        if (options.bucketEndpoint) {\n            request.hostname = bucketName;\n        }\n        else if (util_arn_parser_1.validate(bucketName)) {\n            const bucketArn = util_arn_parser_1.parse(bucketName);\n            const clientRegion = await options.region();\n            const useDualstackEndpoint = await options.useDualstackEndpoint();\n            const useFipsEndpoint = await options.useFipsEndpoint();\n            const { partition, signingRegion = clientRegion } = (await options.regionInfoProvider(clientRegion, { useDualstackEndpoint, useFipsEndpoint })) || {};\n            const useArnRegion = await options.useArnRegion();\n            const { hostname, bucketEndpoint, signingRegion: modifiedSigningRegion, signingService, } = bucketHostname_1.bucketHostname({\n                bucketName: bucketArn,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint: useDualstackEndpoint,\n                fipsEndpoint: useFipsEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                useArnRegion,\n                clientPartition: partition,\n                clientSigningRegion: signingRegion,\n                clientRegion: clientRegion,\n                isCustomEndpoint: options.isCustomEndpoint,\n                disableMultiregionAccessPoints: await options.disableMultiregionAccessPoints(),\n            });\n            if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n                context[\"signing_region\"] = modifiedSigningRegion;\n            }\n            if (signingService && signingService !== \"s3\") {\n                context[\"signing_service\"] = signingService;\n            }\n            request.hostname = hostname;\n            replaceBucketInPath = bucketEndpoint;\n        }\n        else {\n            const clientRegion = await options.region();\n            const dualstackEndpoint = await options.useDualstackEndpoint();\n            const fipsEndpoint = await options.useFipsEndpoint();\n            const { hostname, bucketEndpoint } = bucketHostname_1.bucketHostname({\n                bucketName,\n                clientRegion,\n                baseHostname: request.hostname,\n                accelerateEndpoint: options.useAccelerateEndpoint,\n                dualstackEndpoint,\n                fipsEndpoint,\n                pathStyleEndpoint: options.forcePathStyle,\n                tlsCompatible: request.protocol === \"https:\",\n                isCustomEndpoint: options.isCustomEndpoint,\n            });\n            request.hostname = hostname;\n            replaceBucketInPath = bucketEndpoint;\n        }\n        if (replaceBucketInPath) {\n            request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n            if (request.path === \"\") {\n                request.path = \"/\";\n            }\n        }\n    }\n    return next({ ...args, request });\n};\nexports.bucketEndpointMiddleware = bucketEndpointMiddleware;\nexports.bucketEndpointMiddlewareOptions = {\n    tags: [\"BUCKET_ENDPOINT\"],\n    name: \"bucketEndpointMiddleware\",\n    relation: \"before\",\n    toMiddleware: \"hostHeaderMiddleware\",\n    override: true,\n};\nconst getBucketEndpointPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(exports.bucketEndpointMiddleware(options), exports.bucketEndpointMiddlewareOptions);\n    },\n});\nexports.getBucketEndpointPlugin = getBucketEndpointPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bucketHostname = void 0;\nconst bucketHostnameUtils_1 = require(\"./bucketHostnameUtils\");\nconst bucketHostname = (options) => {\n    bucketHostnameUtils_1.validateCustomEndpoint(options);\n    return bucketHostnameUtils_1.isBucketNameOptions(options)\n        ?\n            getEndpointFromBucketName(options)\n        :\n            getEndpointFromArn(options);\n};\nexports.bucketHostname = bucketHostname;\nconst getEndpointFromBucketName = ({ accelerateEndpoint = false, clientRegion: region, baseHostname, bucketName, dualstackEndpoint = false, fipsEndpoint = false, pathStyleEndpoint = false, tlsCompatible = true, isCustomEndpoint = false, }) => {\n    const [clientRegion, hostnameSuffix] = isCustomEndpoint ? [region, baseHostname] : bucketHostnameUtils_1.getSuffix(baseHostname);\n    if (pathStyleEndpoint || !bucketHostnameUtils_1.isDnsCompatibleBucketName(bucketName) || (tlsCompatible && bucketHostnameUtils_1.DOT_PATTERN.test(bucketName))) {\n        return {\n            bucketEndpoint: false,\n            hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname,\n        };\n    }\n    if (accelerateEndpoint) {\n        baseHostname = `s3-accelerate${dualstackEndpoint ? \".dualstack\" : \"\"}.${hostnameSuffix}`;\n    }\n    else if (dualstackEndpoint) {\n        baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;\n    }\n    return {\n        bucketEndpoint: true,\n        hostname: `${bucketName}.${baseHostname}`,\n    };\n};\nconst getEndpointFromArn = (options) => {\n    const { isCustomEndpoint, baseHostname, clientRegion } = options;\n    const hostnameSuffix = isCustomEndpoint ? baseHostname : bucketHostnameUtils_1.getSuffixForArnEndpoint(baseHostname)[1];\n    const { pathStyleEndpoint, accelerateEndpoint = false, fipsEndpoint = false, tlsCompatible = true, bucketName, clientPartition = \"aws\", } = options;\n    bucketHostnameUtils_1.validateArnEndpointOptions({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });\n    const { service, partition, accountId, region, resource } = bucketName;\n    bucketHostnameUtils_1.validateService(service);\n    bucketHostnameUtils_1.validatePartition(partition, { clientPartition });\n    bucketHostnameUtils_1.validateAccountId(accountId);\n    const { accesspointName, outpostId } = bucketHostnameUtils_1.getArnResources(resource);\n    if (service === \"s3-object-lambda\") {\n        return getEndpointFromObjectLambdaArn({ ...options, tlsCompatible, bucketName, accesspointName, hostnameSuffix });\n    }\n    if (region === \"\") {\n        return getEndpointFromMRAPArn({ ...options, clientRegion, mrapAlias: accesspointName, hostnameSuffix });\n    }\n    if (outpostId) {\n        return getEndpointFromOutpostArn({ ...options, clientRegion, outpostId, accesspointName, hostnameSuffix });\n    }\n    return getEndpointFromAccessPointArn({ ...options, clientRegion, accesspointName, hostnameSuffix });\n};\nconst getEndpointFromObjectLambdaArn = ({ dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, useArnRegion, clientRegion, clientSigningRegion = clientRegion, accesspointName, bucketName, hostnameSuffix, }) => {\n    const { accountId, region, service } = bucketName;\n    bucketHostnameUtils_1.validateRegionalClient(clientRegion);\n    bucketHostnameUtils_1.validateRegion(region, {\n        useArnRegion,\n        clientRegion,\n        clientSigningRegion,\n        allowFipsRegion: true,\n        useFipsEndpoint: fipsEndpoint,\n    });\n    bucketHostnameUtils_1.validateNoDualstack(dualstackEndpoint);\n    const DNSHostLabel = `${accesspointName}-${accountId}`;\n    bucketHostnameUtils_1.validateDNSHostLabel(DNSHostLabel, { tlsCompatible });\n    const endpointRegion = useArnRegion ? region : clientRegion;\n    const signingRegion = useArnRegion ? region : clientSigningRegion;\n    return {\n        bucketEndpoint: true,\n        hostname: `${DNSHostLabel}.${service}${fipsEndpoint ? \"-fips\" : \"\"}.${endpointRegion}.${hostnameSuffix}`,\n        signingRegion,\n        signingService: service,\n    };\n};\nconst getEndpointFromMRAPArn = ({ disableMultiregionAccessPoints, dualstackEndpoint = false, isCustomEndpoint, mrapAlias, hostnameSuffix, }) => {\n    if (disableMultiregionAccessPoints === true) {\n        throw new Error(\"SDK is attempting to use a MRAP ARN. Please enable to feature.\");\n    }\n    bucketHostnameUtils_1.validateMrapAlias(mrapAlias);\n    bucketHostnameUtils_1.validateNoDualstack(dualstackEndpoint);\n    return {\n        bucketEndpoint: true,\n        hostname: `${mrapAlias}${isCustomEndpoint ? \"\" : `.accesspoint.s3-global`}.${hostnameSuffix}`,\n        signingRegion: \"*\",\n    };\n};\nconst getEndpointFromOutpostArn = ({ useArnRegion, clientRegion, clientSigningRegion = clientRegion, bucketName, outpostId, dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, accesspointName, isCustomEndpoint, hostnameSuffix, }) => {\n    bucketHostnameUtils_1.validateRegionalClient(clientRegion);\n    bucketHostnameUtils_1.validateRegion(bucketName.region, { useArnRegion, clientRegion, clientSigningRegion, useFipsEndpoint: fipsEndpoint });\n    const DNSHostLabel = `${accesspointName}-${bucketName.accountId}`;\n    bucketHostnameUtils_1.validateDNSHostLabel(DNSHostLabel, { tlsCompatible });\n    const endpointRegion = useArnRegion ? bucketName.region : clientRegion;\n    const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;\n    bucketHostnameUtils_1.validateOutpostService(bucketName.service);\n    bucketHostnameUtils_1.validateDNSHostLabel(outpostId, { tlsCompatible });\n    bucketHostnameUtils_1.validateNoDualstack(dualstackEndpoint);\n    bucketHostnameUtils_1.validateNoFIPS(fipsEndpoint);\n    const hostnamePrefix = `${DNSHostLabel}.${outpostId}`;\n    return {\n        bucketEndpoint: true,\n        hostname: `${hostnamePrefix}${isCustomEndpoint ? \"\" : `.s3-outposts.${endpointRegion}`}.${hostnameSuffix}`,\n        signingRegion,\n        signingService: \"s3-outposts\",\n    };\n};\nconst getEndpointFromAccessPointArn = ({ useArnRegion, clientRegion, clientSigningRegion = clientRegion, bucketName, dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, accesspointName, isCustomEndpoint, hostnameSuffix, }) => {\n    bucketHostnameUtils_1.validateRegionalClient(clientRegion);\n    bucketHostnameUtils_1.validateRegion(bucketName.region, {\n        useArnRegion,\n        clientRegion,\n        clientSigningRegion,\n        allowFipsRegion: true,\n        useFipsEndpoint: fipsEndpoint,\n    });\n    const hostnamePrefix = `${accesspointName}-${bucketName.accountId}`;\n    bucketHostnameUtils_1.validateDNSHostLabel(hostnamePrefix, { tlsCompatible });\n    const endpointRegion = useArnRegion ? bucketName.region : clientRegion;\n    const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;\n    bucketHostnameUtils_1.validateS3Service(bucketName.service);\n    return {\n        bucketEndpoint: true,\n        hostname: `${hostnamePrefix}${isCustomEndpoint\n            ? \"\"\n            : `.s3-accesspoint${fipsEndpoint ? \"-fips\" : \"\"}${dualstackEndpoint ? \".dualstack\" : \"\"}.${endpointRegion}`}.${hostnameSuffix}`,\n        signingRegion,\n    };\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateMrapAlias = exports.validateNoFIPS = exports.validateNoDualstack = exports.getArnResources = exports.validateCustomEndpoint = exports.validateDNSHostLabel = exports.validateAccountId = exports.validateRegionalClient = exports.validateRegion = exports.validatePartition = exports.validateOutpostService = exports.validateS3Service = exports.validateService = exports.validateArnEndpointOptions = exports.getSuffixForArnEndpoint = exports.getSuffix = exports.isDnsCompatibleBucketName = exports.isBucketNameOptions = exports.S3_HOSTNAME_PATTERN = exports.DOT_PATTERN = void 0;\nconst DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nconst IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nconst DOTS_PATTERN = /\\.\\./;\nexports.DOT_PATTERN = /\\./;\nexports.S3_HOSTNAME_PATTERN = /^(.+\\.)?s3(-fips)?(\\.dualstack)?[.-]([a-z0-9-]+)\\./;\nconst S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\\.amazonaws\\.com$/;\nconst AWS_PARTITION_SUFFIX = \"amazonaws.com\";\nconst isBucketNameOptions = (options) => typeof options.bucketName === \"string\";\nexports.isBucketNameOptions = isBucketNameOptions;\nconst isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\nexports.isDnsCompatibleBucketName = isDnsCompatibleBucketName;\nconst getRegionalSuffix = (hostname) => {\n    const parts = hostname.match(exports.S3_HOSTNAME_PATTERN);\n    return [parts[4], hostname.replace(new RegExp(`^${parts[0]}`), \"\")];\n};\nconst getSuffix = (hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [\"us-east-1\", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);\nexports.getSuffix = getSuffix;\nconst getSuffixForArnEndpoint = (hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname)\n    ? [hostname.replace(`.${AWS_PARTITION_SUFFIX}`, \"\"), AWS_PARTITION_SUFFIX]\n    : getRegionalSuffix(hostname);\nexports.getSuffixForArnEndpoint = getSuffixForArnEndpoint;\nconst validateArnEndpointOptions = (options) => {\n    if (options.pathStyleEndpoint) {\n        throw new Error(\"Path-style S3 endpoint is not supported when bucket is an ARN\");\n    }\n    if (options.accelerateEndpoint) {\n        throw new Error(\"Accelerate endpoint is not supported when bucket is an ARN\");\n    }\n    if (!options.tlsCompatible) {\n        throw new Error(\"HTTPS is required when bucket is an ARN\");\n    }\n};\nexports.validateArnEndpointOptions = validateArnEndpointOptions;\nconst validateService = (service) => {\n    if (service !== \"s3\" && service !== \"s3-outposts\" && service !== \"s3-object-lambda\") {\n        throw new Error(\"Expect 's3' or 's3-outposts' or 's3-object-lambda' in ARN service component\");\n    }\n};\nexports.validateService = validateService;\nconst validateS3Service = (service) => {\n    if (service !== \"s3\") {\n        throw new Error(\"Expect 's3' in Accesspoint ARN service component\");\n    }\n};\nexports.validateS3Service = validateS3Service;\nconst validateOutpostService = (service) => {\n    if (service !== \"s3-outposts\") {\n        throw new Error(\"Expect 's3-posts' in Outpost ARN service component\");\n    }\n};\nexports.validateOutpostService = validateOutpostService;\nconst validatePartition = (partition, options) => {\n    if (partition !== options.clientPartition) {\n        throw new Error(`Partition in ARN is incompatible, got \"${partition}\" but expected \"${options.clientPartition}\"`);\n    }\n};\nexports.validatePartition = validatePartition;\nconst validateRegion = (region, options) => {\n    if (region === \"\") {\n        throw new Error(\"ARN region is empty\");\n    }\n    if (options.useFipsEndpoint) {\n        if (!options.allowFipsRegion) {\n            throw new Error(\"FIPS region is not supported\");\n        }\n        else if (!isEqualRegions(region, options.clientRegion)) {\n            throw new Error(`Client FIPS region ${options.clientRegion} doesn't match region ${region} in ARN`);\n        }\n    }\n    if (!options.useArnRegion &&\n        !isEqualRegions(region, options.clientRegion || \"\") &&\n        !isEqualRegions(region, options.clientSigningRegion || \"\")) {\n        throw new Error(`Region in ARN is incompatible, got ${region} but expected ${options.clientRegion}`);\n    }\n};\nexports.validateRegion = validateRegion;\nconst validateRegionalClient = (region) => {\n    if ([\"s3-external-1\", \"aws-global\"].includes(region)) {\n        throw new Error(`Client region ${region} is not regional`);\n    }\n};\nexports.validateRegionalClient = validateRegionalClient;\nconst isEqualRegions = (regionA, regionB) => regionA === regionB;\nconst validateAccountId = (accountId) => {\n    if (!/[0-9]{12}/.exec(accountId)) {\n        throw new Error(\"Access point ARN accountID does not match regex '[0-9]{12}'\");\n    }\n};\nexports.validateAccountId = validateAccountId;\nconst validateDNSHostLabel = (label, options = { tlsCompatible: true }) => {\n    if (label.length >= 64 ||\n        !/^[a-z0-9][a-z0-9.-]*[a-z0-9]$/.test(label) ||\n        /(\\d+\\.){3}\\d+/.test(label) ||\n        /[.-]{2}/.test(label) ||\n        ((options === null || options === void 0 ? void 0 : options.tlsCompatible) && exports.DOT_PATTERN.test(label))) {\n        throw new Error(`Invalid DNS label ${label}`);\n    }\n};\nexports.validateDNSHostLabel = validateDNSHostLabel;\nconst validateCustomEndpoint = (options) => {\n    if (options.isCustomEndpoint) {\n        if (options.dualstackEndpoint)\n            throw new Error(\"Dualstack endpoint is not supported with custom endpoint\");\n        if (options.accelerateEndpoint)\n            throw new Error(\"Accelerate endpoint is not supported with custom endpoint\");\n    }\n};\nexports.validateCustomEndpoint = validateCustomEndpoint;\nconst getArnResources = (resource) => {\n    const delimiter = resource.includes(\":\") ? \":\" : \"/\";\n    const [resourceType, ...rest] = resource.split(delimiter);\n    if (resourceType === \"accesspoint\") {\n        if (rest.length !== 1 || rest[0] === \"\") {\n            throw new Error(`Access Point ARN should have one resource accesspoint${delimiter}{accesspointname}`);\n        }\n        return { accesspointName: rest[0] };\n    }\n    else if (resourceType === \"outpost\") {\n        if (!rest[0] || rest[1] !== \"accesspoint\" || !rest[2] || rest.length !== 3) {\n            throw new Error(`Outpost ARN should have resource outpost${delimiter}{outpostId}${delimiter}accesspoint${delimiter}{accesspointName}`);\n        }\n        const [outpostId, _, accesspointName] = rest;\n        return { outpostId, accesspointName };\n    }\n    else {\n        throw new Error(`ARN resource should begin with 'accesspoint${delimiter}' or 'outpost${delimiter}'`);\n    }\n};\nexports.getArnResources = getArnResources;\nconst validateNoDualstack = (dualstackEndpoint) => {\n    if (dualstackEndpoint)\n        throw new Error(\"Dualstack endpoint is not supported with Outpost or Multi-region Access Point ARN.\");\n};\nexports.validateNoDualstack = validateNoDualstack;\nconst validateNoFIPS = (useFipsEndpoint) => {\n    if (useFipsEndpoint)\n        throw new Error(`FIPS region is not supported with Outpost.`);\n};\nexports.validateNoFIPS = validateNoFIPS;\nconst validateMrapAlias = (name) => {\n    try {\n        name.split(\".\").forEach((label) => {\n            exports.validateDNSHostLabel(label);\n        });\n    }\n    catch (e) {\n        throw new Error(`\"${name}\" is not a DNS compatible name.`);\n    }\n};\nexports.validateMrapAlias = validateMrapAlias;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveBucketEndpointConfig = void 0;\nfunction resolveBucketEndpointConfig(input) {\n    const { bucketEndpoint = false, forcePathStyle = false, useAccelerateEndpoint = false, useArnRegion = false, disableMultiregionAccessPoints = false, } = input;\n    return {\n        ...input,\n        bucketEndpoint,\n        forcePathStyle,\n        useAccelerateEndpoint,\n        useArnRegion: typeof useArnRegion === \"function\" ? useArnRegion : () => Promise.resolve(useArnRegion),\n        disableMultiregionAccessPoints: typeof disableMultiregionAccessPoints === \"function\"\n            ? disableMultiregionAccessPoints\n            : () => Promise.resolve(disableMultiregionAccessPoints),\n    };\n}\nexports.resolveBucketEndpointConfig = resolveBucketEndpointConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateNoFIPS = exports.validateNoDualstack = exports.validateDNSHostLabel = exports.validateRegion = exports.validateAccountId = exports.validatePartition = exports.validateOutpostService = exports.getSuffixForArnEndpoint = exports.getArnResources = void 0;\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./NodeDisableMultiregionAccessPointConfigOptions\"), exports);\ntslib_1.__exportStar(require(\"./NodeUseArnRegionConfigOptions\"), exports);\ntslib_1.__exportStar(require(\"./bucketEndpointMiddleware\"), exports);\ntslib_1.__exportStar(require(\"./bucketHostname\"), exports);\ntslib_1.__exportStar(require(\"./configurations\"), exports);\nvar bucketHostnameUtils_1 = require(\"./bucketHostnameUtils\");\nObject.defineProperty(exports, \"getArnResources\", { enumerable: true, get: function () { return bucketHostnameUtils_1.getArnResources; } });\nObject.defineProperty(exports, \"getSuffixForArnEndpoint\", { enumerable: true, get: function () { return bucketHostnameUtils_1.getSuffixForArnEndpoint; } });\nObject.defineProperty(exports, \"validateOutpostService\", { enumerable: true, get: function () { return bucketHostnameUtils_1.validateOutpostService; } });\nObject.defineProperty(exports, \"validatePartition\", { enumerable: true, get: function () { return bucketHostnameUtils_1.validatePartition; } });\nObject.defineProperty(exports, \"validateAccountId\", { enumerable: true, get: function () { return bucketHostnameUtils_1.validateAccountId; } });\nObject.defineProperty(exports, \"validateRegion\", { enumerable: true, get: function () { return bucketHostnameUtils_1.validateRegion; } });\nObject.defineProperty(exports, \"validateDNSHostLabel\", { enumerable: true, get: function () { return bucketHostnameUtils_1.validateDNSHostLabel; } });\nObject.defineProperty(exports, \"validateNoDualstack\", { enumerable: true, get: function () { return bucketHostnameUtils_1.validateNoDualstack; } });\nObject.defineProperty(exports, \"validateNoFIPS\", { enumerable: true, get: function () { return bucketHostnameUtils_1.validateNoFIPS; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContentLengthPlugin = exports.contentLengthMiddlewareOptions = exports.contentLengthMiddleware = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst CONTENT_LENGTH_HEADER = \"content-length\";\nfunction contentLengthMiddleware(bodyLengthChecker) {\n    return (next) => async (args) => {\n        const request = args.request;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            const { body, headers } = request;\n            if (body &&\n                Object.keys(headers)\n                    .map((str) => str.toLowerCase())\n                    .indexOf(CONTENT_LENGTH_HEADER) === -1) {\n                const length = bodyLengthChecker(body);\n                if (length !== undefined) {\n                    request.headers = {\n                        ...request.headers,\n                        [CONTENT_LENGTH_HEADER]: String(length),\n                    };\n                }\n            }\n        }\n        return next({\n            ...args,\n            request,\n        });\n    };\n}\nexports.contentLengthMiddleware = contentLengthMiddleware;\nexports.contentLengthMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"SET_CONTENT_LENGTH\", \"CONTENT_LENGTH\"],\n    name: \"contentLengthMiddleware\",\n    override: true,\n};\nconst getContentLengthPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports.contentLengthMiddlewareOptions);\n    },\n});\nexports.getContentLengthPlugin = getContentLengthPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAddExpectContinuePlugin = exports.addExpectContinueMiddlewareOptions = exports.addExpectContinueMiddleware = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nfunction addExpectContinueMiddleware(options) {\n    return (next) => async (args) => {\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request) && request.body && options.runtime === \"node\") {\n            request.headers = {\n                ...request.headers,\n                Expect: \"100-continue\",\n            };\n        }\n        return next({\n            ...args,\n            request,\n        });\n    };\n}\nexports.addExpectContinueMiddleware = addExpectContinueMiddleware;\nexports.addExpectContinueMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"SET_EXPECT_HEADER\", \"EXPECT_HEADER\"],\n    name: \"addExpectContinueMiddleware\",\n    override: true,\n};\nconst getAddExpectContinuePlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(addExpectContinueMiddleware(options), exports.addExpectContinueMiddlewareOptions);\n    },\n});\nexports.getAddExpectContinuePlugin = getAddExpectContinuePlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getHostHeaderPlugin = exports.hostHeaderMiddlewareOptions = exports.hostHeaderMiddleware = exports.resolveHostHeaderConfig = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nfunction resolveHostHeaderConfig(input) {\n    return input;\n}\nexports.resolveHostHeaderConfig = resolveHostHeaderConfig;\nconst hostHeaderMiddleware = (options) => (next) => async (args) => {\n    if (!protocol_http_1.HttpRequest.isInstance(args.request))\n        return next(args);\n    const { request } = args;\n    const { handlerProtocol = \"\" } = options.requestHandler.metadata || {};\n    if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n        delete request.headers[\"host\"];\n        request.headers[\":authority\"] = \"\";\n    }\n    else if (!request.headers[\"host\"]) {\n        request.headers[\"host\"] = request.hostname;\n    }\n    return next(args);\n};\nexports.hostHeaderMiddleware = hostHeaderMiddleware;\nexports.hostHeaderMiddlewareOptions = {\n    name: \"hostHeaderMiddleware\",\n    step: \"build\",\n    priority: \"low\",\n    tags: [\"HOST\"],\n    override: true,\n};\nconst getHostHeaderPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(exports.hostHeaderMiddleware(options), exports.hostHeaderMiddlewareOptions);\n    },\n});\nexports.getHostHeaderPlugin = getHostHeaderPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLocationConstraintPlugin = exports.locationConstraintMiddlewareOptions = exports.locationConstraintMiddleware = void 0;\nfunction locationConstraintMiddleware(options) {\n    return (next) => async (args) => {\n        const { CreateBucketConfiguration } = args.input;\n        const region = await options.region();\n        if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {\n            args = {\n                ...args,\n                input: {\n                    ...args.input,\n                    CreateBucketConfiguration: region === \"us-east-1\" ? undefined : { LocationConstraint: region },\n                },\n            };\n        }\n        return next(args);\n    };\n}\nexports.locationConstraintMiddleware = locationConstraintMiddleware;\nexports.locationConstraintMiddlewareOptions = {\n    step: \"initialize\",\n    tags: [\"LOCATION_CONSTRAINT\", \"CREATE_BUCKET_CONFIGURATION\"],\n    name: \"locationConstraintMiddleware\",\n    override: true,\n};\nconst getLocationConstraintPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(locationConstraintMiddleware(config), exports.locationConstraintMiddlewareOptions);\n    },\n});\nexports.getLocationConstraintPlugin = getLocationConstraintPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./loggerMiddleware\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLoggerPlugin = exports.loggerMiddlewareOptions = exports.loggerMiddleware = void 0;\nconst loggerMiddleware = () => (next, context) => async (args) => {\n    const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;\n    const response = await next(args);\n    if (!logger) {\n        return response;\n    }\n    if (typeof logger.info === \"function\") {\n        const { $metadata, ...outputWithoutMetadata } = response.output;\n        logger.info({\n            clientName,\n            commandName,\n            input: inputFilterSensitiveLog(args.input),\n            output: outputFilterSensitiveLog(outputWithoutMetadata),\n            metadata: $metadata,\n        });\n    }\n    return response;\n};\nexports.loggerMiddleware = loggerMiddleware;\nexports.loggerMiddlewareOptions = {\n    name: \"loggerMiddleware\",\n    tags: [\"LOGGER\"],\n    step: \"initialize\",\n    override: true,\n};\nconst getLoggerPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(exports.loggerMiddleware(), exports.loggerMiddlewareOptions);\n    },\n});\nexports.getLoggerPlugin = getLoggerPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AdaptiveRetryStrategy = void 0;\nconst config_1 = require(\"./config\");\nconst DefaultRateLimiter_1 = require(\"./DefaultRateLimiter\");\nconst StandardRetryStrategy_1 = require(\"./StandardRetryStrategy\");\nclass AdaptiveRetryStrategy extends StandardRetryStrategy_1.StandardRetryStrategy {\n    constructor(maxAttemptsProvider, options) {\n        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};\n        super(maxAttemptsProvider, superOptions);\n        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();\n        this.mode = config_1.RETRY_MODES.ADAPTIVE;\n    }\n    async retry(next, args) {\n        return super.retry(next, args, {\n            beforeRequest: async () => {\n                return this.rateLimiter.getSendToken();\n            },\n            afterRequest: (response) => {\n                this.rateLimiter.updateClientSendingRate(response);\n            },\n        });\n    }\n}\nexports.AdaptiveRetryStrategy = AdaptiveRetryStrategy;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultRateLimiter = void 0;\nconst service_error_classification_1 = require(\"@aws-sdk/service-error-classification\");\nclass DefaultRateLimiter {\n    constructor(options) {\n        var _a, _b, _c, _d, _e;\n        this.currentCapacity = 0;\n        this.enabled = false;\n        this.lastMaxRate = 0;\n        this.measuredTxRate = 0;\n        this.requestCount = 0;\n        this.lastTimestamp = 0;\n        this.timeWindow = 0;\n        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;\n        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;\n        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;\n        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;\n        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;\n        const currentTimeInSeconds = this.getCurrentTimeInSeconds();\n        this.lastThrottleTime = currentTimeInSeconds;\n        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());\n        this.fillRate = this.minFillRate;\n        this.maxCapacity = this.minCapacity;\n    }\n    getCurrentTimeInSeconds() {\n        return Date.now() / 1000;\n    }\n    async getSendToken() {\n        return this.acquireTokenBucket(1);\n    }\n    async acquireTokenBucket(amount) {\n        if (!this.enabled) {\n            return;\n        }\n        this.refillTokenBucket();\n        if (amount > this.currentCapacity) {\n            const delay = ((amount - this.currentCapacity) / this.fillRate) * 1000;\n            await new Promise((resolve) => setTimeout(resolve, delay));\n        }\n        this.currentCapacity = this.currentCapacity - amount;\n    }\n    refillTokenBucket() {\n        const timestamp = this.getCurrentTimeInSeconds();\n        if (!this.lastTimestamp) {\n            this.lastTimestamp = timestamp;\n            return;\n        }\n        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;\n        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);\n        this.lastTimestamp = timestamp;\n    }\n    updateClientSendingRate(response) {\n        let calculatedRate;\n        this.updateMeasuredRate();\n        if (service_error_classification_1.isThrottlingError(response)) {\n            const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);\n            this.lastMaxRate = rateToUse;\n            this.calculateTimeWindow();\n            this.lastThrottleTime = this.getCurrentTimeInSeconds();\n            calculatedRate = this.cubicThrottle(rateToUse);\n            this.enableTokenBucket();\n        }\n        else {\n            this.calculateTimeWindow();\n            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());\n        }\n        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);\n        this.updateTokenBucketRate(newRate);\n    }\n    calculateTimeWindow() {\n        this.timeWindow = this.getPrecise(Math.pow((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant, 1 / 3));\n    }\n    cubicThrottle(rateToUse) {\n        return this.getPrecise(rateToUse * this.beta);\n    }\n    cubicSuccess(timestamp) {\n        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);\n    }\n    enableTokenBucket() {\n        this.enabled = true;\n    }\n    updateTokenBucketRate(newRate) {\n        this.refillTokenBucket();\n        this.fillRate = Math.max(newRate, this.minFillRate);\n        this.maxCapacity = Math.max(newRate, this.minCapacity);\n        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);\n    }\n    updateMeasuredRate() {\n        const t = this.getCurrentTimeInSeconds();\n        const timeBucket = Math.floor(t * 2) / 2;\n        this.requestCount++;\n        if (timeBucket > this.lastTxRateBucket) {\n            const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);\n            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));\n            this.requestCount = 0;\n            this.lastTxRateBucket = timeBucket;\n        }\n    }\n    getPrecise(num) {\n        return parseFloat(num.toFixed(8));\n    }\n}\nexports.DefaultRateLimiter = DefaultRateLimiter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardRetryStrategy = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst service_error_classification_1 = require(\"@aws-sdk/service-error-classification\");\nconst uuid_1 = require(\"uuid\");\nconst config_1 = require(\"./config\");\nconst constants_1 = require(\"./constants\");\nconst defaultRetryQuota_1 = require(\"./defaultRetryQuota\");\nconst delayDecider_1 = require(\"./delayDecider\");\nconst retryDecider_1 = require(\"./retryDecider\");\nclass StandardRetryStrategy {\n    constructor(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = config_1.RETRY_MODES.STANDARD;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : defaultRetryQuota_1.getDefaultRetryQuota(constants_1.INITIAL_RETRY_TOKENS);\n    }\n    shouldRetry(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    }\n    async getMaxAttempts() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = config_1.DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    }\n    async retry(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n            request.headers[constants_1.INVOCATION_ID_HEADER] = uuid_1.v4();\n        }\n        while (true) {\n            try {\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\n                    request.headers[constants_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options === null || options === void 0 ? void 0 : options.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options === null || options === void 0 ? void 0 : options.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = asSdkError(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delay = this.delayDecider(service_error_classification_1.isThrottlingError(err) ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    }\n}\nexports.StandardRetryStrategy = StandardRetryStrategy;\nconst asSdkError = (error) => {\n    if (error instanceof Error)\n        return error;\n    if (error instanceof Object)\n        return Object.assign(new Error(), error);\n    if (typeof error === \"string\")\n        return new Error(error);\n    return new Error(`AWS SDK error wrapper for ${error}`);\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = exports.RETRY_MODES = void 0;\nvar RETRY_MODES;\n(function (RETRY_MODES) {\n    RETRY_MODES[\"STANDARD\"] = \"standard\";\n    RETRY_MODES[\"ADAPTIVE\"] = \"adaptive\";\n})(RETRY_MODES = exports.RETRY_MODES || (exports.RETRY_MODES = {}));\nexports.DEFAULT_MAX_ATTEMPTS = 3;\nexports.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NODE_RETRY_MODE_CONFIG_OPTIONS = exports.CONFIG_RETRY_MODE = exports.ENV_RETRY_MODE = exports.resolveRetryConfig = exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports.CONFIG_MAX_ATTEMPTS = exports.ENV_MAX_ATTEMPTS = void 0;\nconst AdaptiveRetryStrategy_1 = require(\"./AdaptiveRetryStrategy\");\nconst config_1 = require(\"./config\");\nconst StandardRetryStrategy_1 = require(\"./StandardRetryStrategy\");\nexports.ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexports.CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => {\n        const value = env[exports.ENV_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    configFileSelector: (profile) => {\n        const value = profile[exports.CONFIG_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    default: config_1.DEFAULT_MAX_ATTEMPTS,\n};\nconst resolveRetryConfig = (input) => {\n    const maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n    return {\n        ...input,\n        maxAttempts,\n        retryStrategy: async () => {\n            if (input.retryStrategy) {\n                return input.retryStrategy;\n            }\n            const retryMode = await getRetryMode(input.retryMode);\n            if (retryMode === config_1.RETRY_MODES.ADAPTIVE) {\n                return new AdaptiveRetryStrategy_1.AdaptiveRetryStrategy(maxAttempts);\n            }\n            return new StandardRetryStrategy_1.StandardRetryStrategy(maxAttempts);\n        },\n    };\n};\nexports.resolveRetryConfig = resolveRetryConfig;\nconst getRetryMode = async (retryMode) => {\n    if (typeof retryMode === \"string\") {\n        return retryMode;\n    }\n    return await retryMode();\n};\nconst normalizeMaxAttempts = (maxAttempts = config_1.DEFAULT_MAX_ATTEMPTS) => {\n    if (typeof maxAttempts === \"number\") {\n        const promisified = Promise.resolve(maxAttempts);\n        return () => promisified;\n    }\n    return maxAttempts;\n};\nexports.ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexports.CONFIG_RETRY_MODE = \"retry_mode\";\nexports.NODE_RETRY_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[exports.ENV_RETRY_MODE],\n    configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],\n    default: config_1.DEFAULT_RETRY_MODE,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.REQUEST_HEADER = exports.INVOCATION_ID_HEADER = exports.NO_RETRY_INCREMENT = exports.TIMEOUT_RETRY_COST = exports.RETRY_COST = exports.INITIAL_RETRY_TOKENS = exports.THROTTLING_RETRY_DELAY_BASE = exports.MAXIMUM_RETRY_DELAY = exports.DEFAULT_RETRY_DELAY_BASE = void 0;\nexports.DEFAULT_RETRY_DELAY_BASE = 100;\nexports.MAXIMUM_RETRY_DELAY = 20 * 1000;\nexports.THROTTLING_RETRY_DELAY_BASE = 500;\nexports.INITIAL_RETRY_TOKENS = 500;\nexports.RETRY_COST = 5;\nexports.TIMEOUT_RETRY_COST = 10;\nexports.NO_RETRY_INCREMENT = 1;\nexports.INVOCATION_ID_HEADER = \"amz-sdk-invocation-id\";\nexports.REQUEST_HEADER = \"amz-sdk-request\";\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDefaultRetryQuota = void 0;\nconst constants_1 = require(\"./constants\");\nconst getDefaultRetryQuota = (initialRetryTokens, options) => {\n    var _a, _b, _c;\n    const MAX_CAPACITY = initialRetryTokens;\n    const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : constants_1.NO_RETRY_INCREMENT;\n    const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : constants_1.RETRY_COST;\n    const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : constants_1.TIMEOUT_RETRY_COST;\n    let availableCapacity = initialRetryTokens;\n    const getCapacityAmount = (error) => (error.name === \"TimeoutError\" ? timeoutRetryCost : retryCost);\n    const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;\n    const retrieveRetryTokens = (error) => {\n        if (!hasRetryTokens(error)) {\n            throw new Error(\"No retry token available\");\n        }\n        const capacityAmount = getCapacityAmount(error);\n        availableCapacity -= capacityAmount;\n        return capacityAmount;\n    };\n    const releaseRetryTokens = (capacityReleaseAmount) => {\n        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;\n        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n    };\n    return Object.freeze({\n        hasRetryTokens,\n        retrieveRetryTokens,\n        releaseRetryTokens,\n    });\n};\nexports.getDefaultRetryQuota = getDefaultRetryQuota;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultDelayDecider = void 0;\nconst constants_1 = require(\"./constants\");\nconst defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));\nexports.defaultDelayDecider = defaultDelayDecider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./AdaptiveRetryStrategy\"), exports);\ntslib_1.__exportStar(require(\"./DefaultRateLimiter\"), exports);\ntslib_1.__exportStar(require(\"./StandardRetryStrategy\"), exports);\ntslib_1.__exportStar(require(\"./config\"), exports);\ntslib_1.__exportStar(require(\"./configurations\"), exports);\ntslib_1.__exportStar(require(\"./delayDecider\"), exports);\ntslib_1.__exportStar(require(\"./omitRetryHeadersMiddleware\"), exports);\ntslib_1.__exportStar(require(\"./retryDecider\"), exports);\ntslib_1.__exportStar(require(\"./retryMiddleware\"), exports);\ntslib_1.__exportStar(require(\"./types\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getOmitRetryHeadersPlugin = exports.omitRetryHeadersMiddlewareOptions = exports.omitRetryHeadersMiddleware = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst constants_1 = require(\"./constants\");\nconst omitRetryHeadersMiddleware = () => (next) => async (args) => {\n    const { request } = args;\n    if (protocol_http_1.HttpRequest.isInstance(request)) {\n        delete request.headers[constants_1.INVOCATION_ID_HEADER];\n        delete request.headers[constants_1.REQUEST_HEADER];\n    }\n    return next(args);\n};\nexports.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;\nexports.omitRetryHeadersMiddlewareOptions = {\n    name: \"omitRetryHeadersMiddleware\",\n    tags: [\"RETRY\", \"HEADERS\", \"OMIT_RETRY_HEADERS\"],\n    relation: \"before\",\n    toMiddleware: \"awsAuthMiddleware\",\n    override: true,\n};\nconst getOmitRetryHeadersPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(exports.omitRetryHeadersMiddleware(), exports.omitRetryHeadersMiddlewareOptions);\n    },\n});\nexports.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultRetryDecider = void 0;\nconst service_error_classification_1 = require(\"@aws-sdk/service-error-classification\");\nconst defaultRetryDecider = (error) => {\n    if (!error) {\n        return false;\n    }\n    return service_error_classification_1.isRetryableByTrait(error) || service_error_classification_1.isClockSkewError(error) || service_error_classification_1.isThrottlingError(error) || service_error_classification_1.isTransientError(error);\n};\nexports.defaultRetryDecider = defaultRetryDecider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;\nconst retryMiddleware = (options) => (next, context) => async (args) => {\n    const retryStrategy = await options.retryStrategy();\n    if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)\n        context.userAgent = [...(context.userAgent || []), [\"cfg/retry-mode\", retryStrategy.mode]];\n    return retryStrategy.retry(next, args);\n};\nexports.retryMiddleware = retryMiddleware;\nexports.retryMiddlewareOptions = {\n    name: \"retryMiddleware\",\n    tags: [\"RETRY\"],\n    step: \"finalizeRequest\",\n    priority: \"high\",\n    override: true,\n};\nconst getRetryPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(exports.retryMiddleware(options), exports.retryMiddlewareOptions);\n    },\n});\nexports.getRetryPlugin = getRetryPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.S3SignatureV4 = void 0;\nconst signature_v4_1 = require(\"@aws-sdk/signature-v4\");\nclass S3SignatureV4 {\n    constructor(options) {\n        this.sigv4Signer = new signature_v4_1.SignatureV4(options);\n        this.signerOptions = options;\n    }\n    async sign(requestToSign, options = {}) {\n        if (options.signingRegion === \"*\") {\n            if (this.signerOptions.runtime !== \"node\")\n                throw new Error(\"This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js\");\n            return this.getSigv4aSigner().sign(requestToSign, options);\n        }\n        return this.sigv4Signer.sign(requestToSign, options);\n    }\n    async presign(originalRequest, options = {}) {\n        if (options.signingRegion === \"*\") {\n            if (this.signerOptions.runtime !== \"node\")\n                throw new Error(\"This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js\");\n            return this.getSigv4aSigner().presign(originalRequest, options);\n        }\n        return this.sigv4Signer.presign(originalRequest, options);\n    }\n    getSigv4aSigner() {\n        if (!this.sigv4aSigner) {\n            let CrtSignerV4;\n            try {\n                CrtSignerV4 = require(\"@aws-sdk/signature-v4-crt\").CrtSignerV4;\n                if (typeof CrtSignerV4 !== \"function\")\n                    throw new Error();\n            }\n            catch (e) {\n                e.message =\n                    `${e.message}\\nPlease check if you have installed \"@aws-sdk/signature-v4-crt\" package explicitly. \\n` +\n                        \"For more information please go to https://github.com/aws/aws-sdk-js-v3#known-issues\";\n                throw e;\n            }\n            this.sigv4aSigner = new CrtSignerV4({\n                ...this.signerOptions,\n                signingAlgorithm: 1,\n            });\n        }\n        return this.sigv4aSigner;\n    }\n}\nexports.S3SignatureV4 = S3SignatureV4;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./S3SignatureV4\"), exports);\ntslib_1.__exportStar(require(\"./throw-200-exceptions\"), exports);\ntslib_1.__exportStar(require(\"./use-regional-endpoint\"), exports);\ntslib_1.__exportStar(require(\"./validate-bucket-name\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getThrow200ExceptionsPlugin = exports.throw200ExceptionsMiddlewareOptions = exports.throw200ExceptionsMiddleware = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst throw200ExceptionsMiddleware = (config) => (next) => async (args) => {\n    const result = await next(args);\n    const { response } = result;\n    if (!protocol_http_1.HttpResponse.isInstance(response))\n        return result;\n    const { statusCode, body } = response;\n    if (statusCode < 200 && statusCode >= 300)\n        return result;\n    const bodyBytes = await collectBody(body, config);\n    const bodyString = await collectBodyString(bodyBytes, config);\n    if (bodyBytes.length === 0) {\n        const err = new Error(\"S3 aborted request\");\n        err.name = \"InternalError\";\n        throw err;\n    }\n    if (bodyString && bodyString.match(\"<Error>\")) {\n        response.statusCode = 400;\n    }\n    response.body = bodyBytes;\n    return result;\n};\nexports.throw200ExceptionsMiddleware = throw200ExceptionsMiddleware;\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nexports.throw200ExceptionsMiddlewareOptions = {\n    relation: \"after\",\n    toMiddleware: \"deserializerMiddleware\",\n    tags: [\"THROW_200_EXCEPTIONS\", \"S3\"],\n    name: \"throw200ExceptionsMiddleware\",\n    override: true,\n};\nconst getThrow200ExceptionsPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(exports.throw200ExceptionsMiddleware(config), exports.throw200ExceptionsMiddlewareOptions);\n    },\n});\nexports.getThrow200ExceptionsPlugin = getThrow200ExceptionsPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUseRegionalEndpointPlugin = exports.useRegionalEndpointMiddlewareOptions = exports.useRegionalEndpointMiddleware = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst useRegionalEndpointMiddleware = (config) => (next) => async (args) => {\n    const { request } = args;\n    if (!protocol_http_1.HttpRequest.isInstance(request) || config.isCustomEndpoint)\n        return next({ ...args });\n    if (request.hostname === \"s3.amazonaws.com\") {\n        request.hostname = \"s3.us-east-1.amazonaws.com\";\n    }\n    else if (\"aws-global\" === (await config.region())) {\n        request.hostname = \"s3.amazonaws.com\";\n    }\n    return next({ ...args });\n};\nexports.useRegionalEndpointMiddleware = useRegionalEndpointMiddleware;\nexports.useRegionalEndpointMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"USE_REGIONAL_ENDPOINT\", \"S3\"],\n    name: \"useRegionalEndpointMiddleware\",\n    override: true,\n};\nconst getUseRegionalEndpointPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(exports.useRegionalEndpointMiddleware(config), exports.useRegionalEndpointMiddlewareOptions);\n    },\n});\nexports.getUseRegionalEndpointPlugin = getUseRegionalEndpointPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getValidateBucketNamePlugin = exports.validateBucketNameMiddlewareOptions = exports.validateBucketNameMiddleware = void 0;\nconst util_arn_parser_1 = require(\"@aws-sdk/util-arn-parser\");\nfunction validateBucketNameMiddleware() {\n    return (next) => async (args) => {\n        const { input: { Bucket }, } = args;\n        if (typeof Bucket === \"string\" && !util_arn_parser_1.validate(Bucket) && Bucket.indexOf(\"/\") >= 0) {\n            const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);\n            err.name = \"InvalidBucketName\";\n            throw err;\n        }\n        return next({ ...args });\n    };\n}\nexports.validateBucketNameMiddleware = validateBucketNameMiddleware;\nexports.validateBucketNameMiddlewareOptions = {\n    step: \"initialize\",\n    tags: [\"VALIDATE_BUCKET_NAME\"],\n    name: \"validateBucketNameMiddleware\",\n    override: true,\n};\nconst getValidateBucketNamePlugin = (unused) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(validateBucketNameMiddleware(), exports.validateBucketNameMiddlewareOptions);\n    },\n});\nexports.getValidateBucketNamePlugin = getValidateBucketNamePlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveStsAuthConfig = void 0;\nconst middleware_signing_1 = require(\"@aws-sdk/middleware-signing\");\nconst resolveStsAuthConfig = (input, { stsClientCtor }) => middleware_signing_1.resolveAwsAuthConfig({\n    ...input,\n    stsClientCtor,\n});\nexports.resolveStsAuthConfig = resolveStsAuthConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializerMiddleware = void 0;\nconst deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {\n    const { response } = await next(args);\n    const parsed = await deserializer(response, options);\n    return {\n        response,\n        output: parsed,\n    };\n};\nexports.deserializerMiddleware = deserializerMiddleware;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./deserializerMiddleware\"), exports);\ntslib_1.__exportStar(require(\"./serdePlugin\"), exports);\ntslib_1.__exportStar(require(\"./serializerMiddleware\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSerdePlugin = exports.serializerMiddlewareOption = exports.deserializerMiddlewareOption = void 0;\nconst deserializerMiddleware_1 = require(\"./deserializerMiddleware\");\nconst serializerMiddleware_1 = require(\"./serializerMiddleware\");\nexports.deserializerMiddlewareOption = {\n    name: \"deserializerMiddleware\",\n    step: \"deserialize\",\n    tags: [\"DESERIALIZER\"],\n    override: true,\n};\nexports.serializerMiddlewareOption = {\n    name: \"serializerMiddleware\",\n    step: \"serialize\",\n    tags: [\"SERIALIZER\"],\n    override: true,\n};\nfunction getSerdePlugin(config, serializer, deserializer) {\n    return {\n        applyToStack: (commandStack) => {\n            commandStack.add(deserializerMiddleware_1.deserializerMiddleware(config, deserializer), exports.deserializerMiddlewareOption);\n            commandStack.add(serializerMiddleware_1.serializerMiddleware(config, serializer), exports.serializerMiddlewareOption);\n        },\n    };\n}\nexports.getSerdePlugin = getSerdePlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializerMiddleware = void 0;\nconst serializerMiddleware = (options, serializer) => (next, context) => async (args) => {\n    const request = await serializer(args.input, options);\n    return next({\n        ...args,\n        request,\n    });\n};\nexports.serializerMiddleware = serializerMiddleware;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveSigV4AuthConfig = exports.resolveAwsAuthConfig = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst signature_v4_1 = require(\"@aws-sdk/signature-v4\");\nconst CREDENTIAL_EXPIRE_WINDOW = 300000;\nconst resolveAwsAuthConfig = (input) => {\n    const normalizedCreds = input.credentials\n        ? normalizeCredentialProvider(input.credentials)\n        : input.credentialDefaultProvider(input);\n    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n    let signer;\n    if (input.signer) {\n        signer = normalizeProvider(input.signer);\n    }\n    else {\n        signer = () => normalizeProvider(input.region)()\n            .then(async (region) => [\n            (await input.regionInfoProvider(region, {\n                useFipsEndpoint: await input.useFipsEndpoint(),\n                useDualstackEndpoint: await input.useDualstackEndpoint(),\n            })) || {},\n            region,\n        ])\n            .then(([regionInfo, region]) => {\n            const { signingRegion, signingService } = regionInfo;\n            input.signingRegion = input.signingRegion || signingRegion || region;\n            input.signingName = input.signingName || signingService || input.serviceId;\n            const params = {\n                ...input,\n                credentials: normalizedCreds,\n                region: input.signingRegion,\n                service: input.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const signerConstructor = input.signerConstructor || signature_v4_1.SignatureV4;\n            return new signerConstructor(params);\n        });\n    }\n    return {\n        ...input,\n        systemClockOffset,\n        signingEscapePath,\n        credentials: normalizedCreds,\n        signer,\n    };\n};\nexports.resolveAwsAuthConfig = resolveAwsAuthConfig;\nconst resolveSigV4AuthConfig = (input) => {\n    const normalizedCreds = input.credentials\n        ? normalizeCredentialProvider(input.credentials)\n        : input.credentialDefaultProvider(input);\n    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n    let signer;\n    if (input.signer) {\n        signer = normalizeProvider(input.signer);\n    }\n    else {\n        signer = normalizeProvider(new signature_v4_1.SignatureV4({\n            credentials: normalizedCreds,\n            region: input.region,\n            service: input.signingName,\n            sha256,\n            uriEscapePath: signingEscapePath,\n        }));\n    }\n    return {\n        ...input,\n        systemClockOffset,\n        signingEscapePath,\n        credentials: normalizedCreds,\n        signer,\n    };\n};\nexports.resolveSigV4AuthConfig = resolveSigV4AuthConfig;\nconst normalizeProvider = (input) => {\n    if (typeof input === \"object\") {\n        const promisified = Promise.resolve(input);\n        return () => promisified;\n    }\n    return input;\n};\nconst normalizeCredentialProvider = (credentials) => {\n    if (typeof credentials === \"function\") {\n        return property_provider_1.memoize(credentials, (credentials) => credentials.expiration !== undefined &&\n            credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials) => credentials.expiration !== undefined);\n    }\n    return normalizeProvider(credentials);\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./configurations\"), exports);\ntslib_1.__exportStar(require(\"./middleware\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSigV4AuthPlugin = exports.getAwsAuthPlugin = exports.awsAuthMiddlewareOptions = exports.awsAuthMiddleware = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst getSkewCorrectedDate_1 = require(\"./utils/getSkewCorrectedDate\");\nconst getUpdatedSystemClockOffset_1 = require(\"./utils/getUpdatedSystemClockOffset\");\nconst awsAuthMiddleware = (options) => (next, context) => async function (args) {\n    if (!protocol_http_1.HttpRequest.isInstance(args.request))\n        return next(args);\n    const signer = await options.signer();\n    const output = await next({\n        ...args,\n        request: await signer.sign(args.request, {\n            signingDate: getSkewCorrectedDate_1.getSkewCorrectedDate(options.systemClockOffset),\n            signingRegion: context[\"signing_region\"],\n            signingService: context[\"signing_service\"],\n        }),\n    }).catch((error) => {\n        if (error.ServerTime) {\n            options.systemClockOffset = getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset(error.ServerTime, options.systemClockOffset);\n        }\n        throw error;\n    });\n    const { headers } = output.response;\n    const dateHeader = headers && (headers.date || headers.Date);\n    if (dateHeader) {\n        options.systemClockOffset = getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);\n    }\n    return output;\n};\nexports.awsAuthMiddleware = awsAuthMiddleware;\nexports.awsAuthMiddlewareOptions = {\n    name: \"awsAuthMiddleware\",\n    tags: [\"SIGNATURE\", \"AWSAUTH\"],\n    relation: \"after\",\n    toMiddleware: \"retryMiddleware\",\n    override: true,\n};\nconst getAwsAuthPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(exports.awsAuthMiddleware(options), exports.awsAuthMiddlewareOptions);\n    },\n});\nexports.getAwsAuthPlugin = getAwsAuthPlugin;\nexports.getSigV4AuthPlugin = exports.getAwsAuthPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSkewCorrectedDate = void 0;\nconst getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);\nexports.getSkewCorrectedDate = getSkewCorrectedDate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUpdatedSystemClockOffset = void 0;\nconst isClockSkewed_1 = require(\"./isClockSkewed\");\nconst getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {\n    const clockTimeInMs = Date.parse(clockTime);\n    if (isClockSkewed_1.isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {\n        return clockTimeInMs - Date.now();\n    }\n    return currentSystemClockOffset;\n};\nexports.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isClockSkewed = void 0;\nconst getSkewCorrectedDate_1 = require(\"./getSkewCorrectedDate\");\nconst isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate_1.getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 300000;\nexports.isClockSkewed = isClockSkewed;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSsecPlugin = exports.ssecMiddlewareOptions = exports.ssecMiddleware = void 0;\nfunction ssecMiddleware(options) {\n    return (next) => async (args) => {\n        let input = { ...args.input };\n        const properties = [\n            {\n                target: \"SSECustomerKey\",\n                hash: \"SSECustomerKeyMD5\",\n            },\n            {\n                target: \"CopySourceSSECustomerKey\",\n                hash: \"CopySourceSSECustomerKeyMD5\",\n            },\n        ];\n        for (const prop of properties) {\n            const value = input[prop.target];\n            if (value) {\n                const valueView = ArrayBuffer.isView(value)\n                    ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength)\n                    : typeof value === \"string\"\n                        ? options.utf8Decoder(value)\n                        : new Uint8Array(value);\n                const encoded = options.base64Encoder(valueView);\n                const hash = new options.md5();\n                hash.update(valueView);\n                input = {\n                    ...input,\n                    [prop.target]: encoded,\n                    [prop.hash]: options.base64Encoder(await hash.digest()),\n                };\n            }\n        }\n        return next({\n            ...args,\n            input,\n        });\n    };\n}\nexports.ssecMiddleware = ssecMiddleware;\nexports.ssecMiddlewareOptions = {\n    name: \"ssecMiddleware\",\n    step: \"initialize\",\n    tags: [\"SSE\"],\n    override: true,\n};\nconst getSsecPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(ssecMiddleware(config), exports.ssecMiddlewareOptions);\n    },\n});\nexports.getSsecPlugin = getSsecPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.constructStack = void 0;\nconst constructStack = () => {\n    let absoluteEntries = [];\n    let relativeEntries = [];\n    const entriesNameSet = new Set();\n    const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]);\n    const removeByName = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            if (entry.name && entry.name === toRemove) {\n                isRemoved = true;\n                entriesNameSet.delete(toRemove);\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const removeByReference = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            if (entry.middleware === toRemove) {\n                isRemoved = true;\n                if (entry.name)\n                    entriesNameSet.delete(entry.name);\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const cloneTo = (toStack) => {\n        absoluteEntries.forEach((entry) => {\n            toStack.add(entry.middleware, { ...entry });\n        });\n        relativeEntries.forEach((entry) => {\n            toStack.addRelativeTo(entry.middleware, { ...entry });\n        });\n        return toStack;\n    };\n    const expandRelativeMiddlewareList = (from) => {\n        const expandedMiddlewareList = [];\n        from.before.forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        expandedMiddlewareList.push(from);\n        from.after.reverse().forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        return expandedMiddlewareList;\n    };\n    const getMiddlewareList = () => {\n        const normalizedAbsoluteEntries = [];\n        const normalizedRelativeEntries = [];\n        const normalizedEntriesNameMap = {};\n        absoluteEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            if (normalizedEntry.name)\n                normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n            normalizedAbsoluteEntries.push(normalizedEntry);\n        });\n        relativeEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            if (normalizedEntry.name)\n                normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n            normalizedRelativeEntries.push(normalizedEntry);\n        });\n        normalizedRelativeEntries.forEach((entry) => {\n            if (entry.toMiddleware) {\n                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n                if (toMiddleware === undefined) {\n                    throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || \"anonymous\"} middleware ${entry.relation} ${entry.toMiddleware}`);\n                }\n                if (entry.relation === \"after\") {\n                    toMiddleware.after.push(entry);\n                }\n                if (entry.relation === \"before\") {\n                    toMiddleware.before.push(entry);\n                }\n            }\n        });\n        const mainChain = sort(normalizedAbsoluteEntries)\n            .map(expandRelativeMiddlewareList)\n            .reduce((wholeList, expendedMiddlewareList) => {\n            wholeList.push(...expendedMiddlewareList);\n            return wholeList;\n        }, []);\n        return mainChain.map((entry) => entry.middleware);\n    };\n    const stack = {\n        add: (middleware, options = {}) => {\n            const { name, override } = options;\n            const entry = {\n                step: \"initialize\",\n                priority: \"normal\",\n                middleware,\n                ...options,\n            };\n            if (name) {\n                if (entriesNameSet.has(name)) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${name}'`);\n                    const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === name);\n                    const toOverride = absoluteEntries[toOverrideIndex];\n                    if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n                        throw new Error(`\"${name}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` +\n                            `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);\n                    }\n                    absoluteEntries.splice(toOverrideIndex, 1);\n                }\n                entriesNameSet.add(name);\n            }\n            absoluteEntries.push(entry);\n        },\n        addRelativeTo: (middleware, options) => {\n            const { name, override } = options;\n            const entry = {\n                middleware,\n                ...options,\n            };\n            if (name) {\n                if (entriesNameSet.has(name)) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${name}'`);\n                    const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === name);\n                    const toOverride = relativeEntries[toOverrideIndex];\n                    if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n                        throw new Error(`\"${name}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` +\n                            `by same-name middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`);\n                    }\n                    relativeEntries.splice(toOverrideIndex, 1);\n                }\n                entriesNameSet.add(name);\n            }\n            relativeEntries.push(entry);\n        },\n        clone: () => cloneTo(exports.constructStack()),\n        use: (plugin) => {\n            plugin.applyToStack(stack);\n        },\n        remove: (toRemove) => {\n            if (typeof toRemove === \"string\")\n                return removeByName(toRemove);\n            else\n                return removeByReference(toRemove);\n        },\n        removeByTag: (toRemove) => {\n            let isRemoved = false;\n            const filterCb = (entry) => {\n                const { tags, name } = entry;\n                if (tags && tags.includes(toRemove)) {\n                    if (name)\n                        entriesNameSet.delete(name);\n                    isRemoved = true;\n                    return false;\n                }\n                return true;\n            };\n            absoluteEntries = absoluteEntries.filter(filterCb);\n            relativeEntries = relativeEntries.filter(filterCb);\n            return isRemoved;\n        },\n        concat: (from) => {\n            const cloned = cloneTo(exports.constructStack());\n            cloned.use(from);\n            return cloned;\n        },\n        applyToStack: cloneTo,\n        resolve: (handler, context) => {\n            for (const middleware of getMiddlewareList().reverse()) {\n                handler = middleware(handler, context);\n            }\n            return handler;\n        },\n    };\n    return stack;\n};\nexports.constructStack = constructStack;\nconst stepWeights = {\n    initialize: 5,\n    serialize: 4,\n    build: 3,\n    finalizeRequest: 2,\n    deserialize: 1,\n};\nconst priorityWeights = {\n    high: 3,\n    normal: 2,\n    low: 1,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./MiddlewareStack\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveUserAgentConfig = void 0;\nfunction resolveUserAgentConfig(input) {\n    return {\n        ...input,\n        customUserAgent: typeof input.customUserAgent === \"string\" ? [[input.customUserAgent]] : input.customUserAgent,\n    };\n}\nexports.resolveUserAgentConfig = resolveUserAgentConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UA_ESCAPE_REGEX = exports.SPACE = exports.X_AMZ_USER_AGENT = exports.USER_AGENT = void 0;\nexports.USER_AGENT = \"user-agent\";\nexports.X_AMZ_USER_AGENT = \"x-amz-user-agent\";\nexports.SPACE = \" \";\nexports.UA_ESCAPE_REGEX = /[^\\!\\#\\$\\%\\&\\'\\*\\+\\-\\.\\^\\_\\`\\|\\~\\d\\w]/g;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./configurations\"), exports);\ntslib_1.__exportStar(require(\"./user-agent-middleware\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUserAgentPlugin = exports.getUserAgentMiddlewareOptions = exports.userAgentMiddleware = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst constants_1 = require(\"./constants\");\nconst userAgentMiddleware = (options) => (next, context) => async (args) => {\n    var _a, _b;\n    const { request } = args;\n    if (!protocol_http_1.HttpRequest.isInstance(request))\n        return next(args);\n    const { headers } = request;\n    const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];\n    const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);\n    const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];\n    const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);\n    const normalUAValue = [\n        ...defaultUserAgent.filter((section) => section.startsWith(\"aws-sdk-\")),\n        ...customUserAgent,\n    ].join(constants_1.SPACE);\n    if (options.runtime !== \"browser\") {\n        if (normalUAValue) {\n            headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT]\n                ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}`\n                : normalUAValue;\n        }\n        headers[constants_1.USER_AGENT] = sdkUserAgentValue;\n    }\n    else {\n        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;\n    }\n    return next({\n        ...args,\n        request,\n    });\n};\nexports.userAgentMiddleware = userAgentMiddleware;\nconst escapeUserAgent = ([name, version]) => {\n    const prefixSeparatorIndex = name.indexOf(\"/\");\n    const prefix = name.substring(0, prefixSeparatorIndex);\n    let uaName = name.substring(prefixSeparatorIndex + 1);\n    if (prefix === \"api\") {\n        uaName = uaName.toLowerCase();\n    }\n    return [prefix, uaName, version]\n        .filter((item) => item && item.length > 0)\n        .map((item) => item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, \"_\"))\n        .join(\"/\");\n};\nexports.getUserAgentMiddlewareOptions = {\n    name: \"getUserAgentMiddleware\",\n    step: \"build\",\n    priority: \"low\",\n    tags: [\"SET_USER_AGENT\", \"USER_AGENT\"],\n    override: true,\n};\nconst getUserAgentPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(exports.userAgentMiddleware(config), exports.getUserAgentMiddlewareOptions);\n    },\n});\nexports.getUserAgentPlugin = getUserAgentPlugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadConfig = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst fromEnv_1 = require(\"./fromEnv\");\nconst fromSharedConfigFiles_1 = require(\"./fromSharedConfigFiles\");\nconst fromStatic_1 = require(\"./fromStatic\");\nconst loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => property_provider_1.memoize(property_provider_1.chain(fromEnv_1.fromEnv(environmentVariableSelector), fromSharedConfigFiles_1.fromSharedConfigFiles(configFileSelector, configuration), fromStatic_1.fromStatic(defaultValue)));\nexports.loadConfig = loadConfig;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromEnv = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst fromEnv = (envVarSelector) => async () => {\n    try {\n        const config = envVarSelector(process.env);\n        if (config === undefined) {\n            throw new Error();\n        }\n        return config;\n    }\n    catch (e) {\n        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);\n    }\n};\nexports.fromEnv = fromEnv;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromSharedConfigFiles = exports.ENV_PROFILE = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst shared_ini_file_loader_1 = require(\"@aws-sdk/shared-ini-file-loader\");\nconst DEFAULT_PROFILE = \"default\";\nexports.ENV_PROFILE = \"AWS_PROFILE\";\nconst fromSharedConfigFiles = (configSelector, { preferredFile = \"config\", ...init } = {}) => async () => {\n    const { loadedConfig = shared_ini_file_loader_1.loadSharedConfigFiles(init), profile = process.env[exports.ENV_PROFILE] || DEFAULT_PROFILE } = init;\n    const { configFile, credentialsFile } = await loadedConfig;\n    const profileFromCredentials = credentialsFile[profile] || {};\n    const profileFromConfig = configFile[profile] || {};\n    const mergedProfile = preferredFile === \"config\"\n        ? { ...profileFromCredentials, ...profileFromConfig }\n        : { ...profileFromConfig, ...profileFromCredentials };\n    try {\n        const configValue = configSelector(mergedProfile);\n        if (configValue === undefined) {\n            throw new Error();\n        }\n        return configValue;\n    }\n    catch (e) {\n        throw new property_provider_1.CredentialsProviderError(e.message ||\n            `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);\n    }\n};\nexports.fromSharedConfigFiles = fromSharedConfigFiles;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromStatic = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst isFunction = (func) => typeof func === \"function\";\nconst fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => defaultValue() : property_provider_1.fromStatic(defaultValue);\nexports.fromStatic = fromStatic;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./configLoader\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NODEJS_TIMEOUT_ERROR_CODES = void 0;\nexports.NODEJS_TIMEOUT_ERROR_CODES = [\"ECONNRESET\", \"EPIPE\", \"ETIMEDOUT\"];\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTransformedHeaders = void 0;\nconst getTransformedHeaders = (headers) => {\n    const transformedHeaders = {};\n    for (const name of Object.keys(headers)) {\n        const headerValues = headers[name];\n        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(\",\") : headerValues;\n    }\n    return transformedHeaders;\n};\nexports.getTransformedHeaders = getTransformedHeaders;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./node-http-handler\"), exports);\ntslib_1.__exportStar(require(\"./node-http2-handler\"), exports);\ntslib_1.__exportStar(require(\"./stream-collector\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeHttpHandler = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst querystring_builder_1 = require(\"@aws-sdk/querystring-builder\");\nconst http_1 = require(\"http\");\nconst https_1 = require(\"https\");\nconst constants_1 = require(\"./constants\");\nconst get_transformed_headers_1 = require(\"./get-transformed-headers\");\nconst set_connection_timeout_1 = require(\"./set-connection-timeout\");\nconst set_socket_timeout_1 = require(\"./set-socket-timeout\");\nconst write_request_body_1 = require(\"./write-request-body\");\nclass NodeHttpHandler {\n    constructor({ connectionTimeout, socketTimeout, httpAgent, httpsAgent } = {}) {\n        this.metadata = { handlerProtocol: \"http/1.1\" };\n        this.connectionTimeout = connectionTimeout;\n        this.socketTimeout = socketTimeout;\n        const keepAlive = true;\n        const maxSockets = 50;\n        this.httpAgent = httpAgent || new http_1.Agent({ keepAlive, maxSockets });\n        this.httpsAgent = httpsAgent || new https_1.Agent({ keepAlive, maxSockets });\n    }\n    destroy() {\n        this.httpAgent.destroy();\n        this.httpsAgent.destroy();\n    }\n    handle(request, { abortSignal } = {}) {\n        return new Promise((resolve, reject) => {\n            if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n                const abortError = new Error(\"Request aborted\");\n                abortError.name = \"AbortError\";\n                reject(abortError);\n                return;\n            }\n            const isSSL = request.protocol === \"https:\";\n            const queryString = querystring_builder_1.buildQueryString(request.query || {});\n            const nodeHttpsOptions = {\n                headers: request.headers,\n                host: request.hostname,\n                method: request.method,\n                path: queryString ? `${request.path}?${queryString}` : request.path,\n                port: request.port,\n                agent: isSSL ? this.httpsAgent : this.httpAgent,\n            };\n            const requestFunc = isSSL ? https_1.request : http_1.request;\n            const req = requestFunc(nodeHttpsOptions, (res) => {\n                const httpResponse = new protocol_http_1.HttpResponse({\n                    statusCode: res.statusCode || -1,\n                    headers: get_transformed_headers_1.getTransformedHeaders(res.headers),\n                    body: res,\n                });\n                resolve({ response: httpResponse });\n            });\n            req.on(\"error\", (err) => {\n                if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {\n                    reject(Object.assign(err, { name: \"TimeoutError\" }));\n                }\n                else {\n                    reject(err);\n                }\n            });\n            set_connection_timeout_1.setConnectionTimeout(req, reject, this.connectionTimeout);\n            set_socket_timeout_1.setSocketTimeout(req, reject, this.socketTimeout);\n            if (abortSignal) {\n                abortSignal.onabort = () => {\n                    req.abort();\n                    const abortError = new Error(\"Request aborted\");\n                    abortError.name = \"AbortError\";\n                    reject(abortError);\n                };\n            }\n            write_request_body_1.writeRequestBody(req, request);\n        });\n    }\n}\nexports.NodeHttpHandler = NodeHttpHandler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeHttp2Handler = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst querystring_builder_1 = require(\"@aws-sdk/querystring-builder\");\nconst http2_1 = require(\"http2\");\nconst get_transformed_headers_1 = require(\"./get-transformed-headers\");\nconst write_request_body_1 = require(\"./write-request-body\");\nclass NodeHttp2Handler {\n    constructor({ requestTimeout, sessionTimeout, disableConcurrentStreams } = {}) {\n        this.metadata = { handlerProtocol: \"h2\" };\n        this.requestTimeout = requestTimeout;\n        this.sessionTimeout = sessionTimeout;\n        this.disableConcurrentStreams = disableConcurrentStreams;\n        this.sessionCache = new Map();\n    }\n    destroy() {\n        for (const sessions of this.sessionCache.values()) {\n            sessions.forEach((session) => this.destroySession(session));\n        }\n        this.sessionCache.clear();\n    }\n    handle(request, { abortSignal } = {}) {\n        return new Promise((resolve, rejectOriginal) => {\n            let fulfilled = false;\n            if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n                fulfilled = true;\n                const abortError = new Error(\"Request aborted\");\n                abortError.name = \"AbortError\";\n                rejectOriginal(abortError);\n                return;\n            }\n            const { hostname, method, port, protocol, path, query } = request;\n            const authority = `${protocol}//${hostname}${port ? `:${port}` : \"\"}`;\n            const session = this.getSession(authority, this.disableConcurrentStreams || false);\n            const reject = (err) => {\n                if (this.disableConcurrentStreams) {\n                    this.destroySession(session);\n                }\n                fulfilled = true;\n                rejectOriginal(err);\n            };\n            const queryString = querystring_builder_1.buildQueryString(query || {});\n            const req = session.request({\n                ...request.headers,\n                [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,\n                [http2_1.constants.HTTP2_HEADER_METHOD]: method,\n            });\n            req.on(\"response\", (headers) => {\n                const httpResponse = new protocol_http_1.HttpResponse({\n                    statusCode: headers[\":status\"] || -1,\n                    headers: get_transformed_headers_1.getTransformedHeaders(headers),\n                    body: req,\n                });\n                fulfilled = true;\n                resolve({ response: httpResponse });\n                if (this.disableConcurrentStreams) {\n                    session.close();\n                    this.deleteSessionFromCache(authority, session);\n                }\n            });\n            const requestTimeout = this.requestTimeout;\n            if (requestTimeout) {\n                req.setTimeout(requestTimeout, () => {\n                    req.close();\n                    const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);\n                    timeoutError.name = \"TimeoutError\";\n                    reject(timeoutError);\n                });\n            }\n            if (abortSignal) {\n                abortSignal.onabort = () => {\n                    req.close();\n                    const abortError = new Error(\"Request aborted\");\n                    abortError.name = \"AbortError\";\n                    reject(abortError);\n                };\n            }\n            req.on(\"frameError\", (type, code, id) => {\n                reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));\n            });\n            req.on(\"error\", reject);\n            req.on(\"aborted\", () => {\n                reject(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));\n            });\n            req.on(\"close\", () => {\n                if (this.disableConcurrentStreams) {\n                    session.destroy();\n                }\n                if (!fulfilled) {\n                    reject(new Error(\"Unexpected error: http2 request did not get a response\"));\n                }\n            });\n            write_request_body_1.writeRequestBody(req, request);\n        });\n    }\n    getSession(authority, disableConcurrentStreams) {\n        const sessionCache = this.sessionCache;\n        const existingSessions = sessionCache.get(authority) || [];\n        if (existingSessions.length > 0 && !disableConcurrentStreams)\n            return existingSessions[0];\n        const newSession = http2_1.connect(authority);\n        const destroySessionCb = () => {\n            this.destroySession(newSession);\n            this.deleteSessionFromCache(authority, newSession);\n        };\n        newSession.on(\"goaway\", destroySessionCb);\n        newSession.on(\"error\", destroySessionCb);\n        newSession.on(\"frameError\", destroySessionCb);\n        const sessionTimeout = this.sessionTimeout;\n        if (sessionTimeout) {\n            newSession.setTimeout(sessionTimeout, destroySessionCb);\n        }\n        existingSessions.push(newSession);\n        sessionCache.set(authority, existingSessions);\n        return newSession;\n    }\n    destroySession(session) {\n        if (!session.destroyed) {\n            session.destroy();\n        }\n    }\n    deleteSessionFromCache(authority, session) {\n        const existingSessions = this.sessionCache.get(authority) || [];\n        if (!existingSessions.includes(session)) {\n            return;\n        }\n        this.sessionCache.set(authority, existingSessions.filter((s) => s !== session));\n    }\n}\nexports.NodeHttp2Handler = NodeHttp2Handler;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setConnectionTimeout = void 0;\nconst setConnectionTimeout = (request, reject, timeoutInMs = 0) => {\n    if (!timeoutInMs) {\n        return;\n    }\n    request.on(\"socket\", (socket) => {\n        if (socket.connecting) {\n            const timeoutId = setTimeout(() => {\n                request.destroy();\n                reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {\n                    name: \"TimeoutError\",\n                }));\n            }, timeoutInMs);\n            socket.on(\"connect\", () => {\n                clearTimeout(timeoutId);\n            });\n        }\n    });\n};\nexports.setConnectionTimeout = setConnectionTimeout;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setSocketTimeout = void 0;\nconst setSocketTimeout = (request, reject, timeoutInMs = 0) => {\n    request.setTimeout(timeoutInMs, () => {\n        request.destroy();\n        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: \"TimeoutError\" }));\n    });\n};\nexports.setSocketTimeout = setSocketTimeout;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Collector = void 0;\nconst stream_1 = require(\"stream\");\nclass Collector extends stream_1.Writable {\n    constructor() {\n        super(...arguments);\n        this.bufferedBytes = [];\n    }\n    _write(chunk, encoding, callback) {\n        this.bufferedBytes.push(chunk);\n        callback();\n    }\n}\nexports.Collector = Collector;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.streamCollector = void 0;\nconst collector_1 = require(\"./collector\");\nconst streamCollector = (stream) => new Promise((resolve, reject) => {\n    const collector = new collector_1.Collector();\n    stream.pipe(collector);\n    stream.on(\"error\", (err) => {\n        collector.end();\n        reject(err);\n    });\n    collector.on(\"error\", reject);\n    collector.on(\"finish\", function () {\n        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));\n        resolve(bytes);\n    });\n});\nexports.streamCollector = streamCollector;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.writeRequestBody = void 0;\nconst stream_1 = require(\"stream\");\nfunction writeRequestBody(httpRequest, request) {\n    const expect = request.headers[\"Expect\"] || request.headers[\"expect\"];\n    if (expect === \"100-continue\") {\n        httpRequest.on(\"continue\", () => {\n            writeBody(httpRequest, request.body);\n        });\n    }\n    else {\n        writeBody(httpRequest, request.body);\n    }\n}\nexports.writeRequestBody = writeRequestBody;\nfunction writeBody(httpRequest, body) {\n    if (body instanceof stream_1.Readable) {\n        body.pipe(httpRequest);\n    }\n    else if (body) {\n        httpRequest.end(Buffer.from(body));\n    }\n    else {\n        httpRequest.end();\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CredentialsProviderError = exports.ProviderError = void 0;\nclass ProviderError extends Error {\n    constructor(message, tryNextLink = true) {\n        super(message);\n        this.tryNextLink = tryNextLink;\n    }\n    static from(error, tryNextLink = true) {\n        Object.defineProperty(error, \"tryNextLink\", {\n            value: tryNextLink,\n            configurable: false,\n            enumerable: false,\n            writable: false,\n        });\n        return error;\n    }\n}\nexports.ProviderError = ProviderError;\nclass CredentialsProviderError extends Error {\n    constructor(message, tryNextLink = true) {\n        super(message);\n        this.tryNextLink = tryNextLink;\n        this.name = \"CredentialsProviderError\";\n    }\n    static from(error, tryNextLink = true) {\n        Object.defineProperty(error, \"tryNextLink\", {\n            value: tryNextLink,\n            configurable: false,\n            enumerable: false,\n            writable: false,\n        });\n        return error;\n    }\n}\nexports.CredentialsProviderError = CredentialsProviderError;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.chain = void 0;\nconst ProviderError_1 = require(\"./ProviderError\");\nfunction chain(...providers) {\n    return () => {\n        let promise = Promise.reject(new ProviderError_1.ProviderError(\"No providers in chain\"));\n        for (const provider of providers) {\n            promise = promise.catch((err) => {\n                if (err === null || err === void 0 ? void 0 : err.tryNextLink) {\n                    return provider();\n                }\n                throw err;\n            });\n        }\n        return promise;\n    };\n}\nexports.chain = chain;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromStatic = void 0;\nconst fromStatic = (staticValue) => () => Promise.resolve(staticValue);\nexports.fromStatic = fromStatic;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./ProviderError\"), exports);\ntslib_1.__exportStar(require(\"./chain\"), exports);\ntslib_1.__exportStar(require(\"./fromStatic\"), exports);\ntslib_1.__exportStar(require(\"./memoize\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.memoize = void 0;\nconst memoize = (provider, isExpired, requiresRefresh) => {\n    let resolved;\n    let pending;\n    let hasResult;\n    const coalesceProvider = async () => {\n        if (!pending) {\n            pending = provider();\n        }\n        try {\n            resolved = await pending;\n            hasResult = true;\n        }\n        finally {\n            pending = undefined;\n        }\n        return resolved;\n    };\n    if (isExpired === undefined) {\n        return async () => {\n            if (!hasResult) {\n                resolved = await coalesceProvider();\n            }\n            return resolved;\n        };\n    }\n    let isConstant = false;\n    return async () => {\n        if (!hasResult) {\n            resolved = await coalesceProvider();\n        }\n        if (isConstant) {\n            return resolved;\n        }\n        if (requiresRefresh && !requiresRefresh(resolved)) {\n            isConstant = true;\n            return resolved;\n        }\n        if (isExpired(resolved)) {\n            await coalesceProvider();\n            return resolved;\n        }\n        return resolved;\n    };\n};\nexports.memoize = memoize;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpRequest = void 0;\nclass HttpRequest {\n    constructor(options) {\n        this.method = options.method || \"GET\";\n        this.hostname = options.hostname || \"localhost\";\n        this.port = options.port;\n        this.query = options.query || {};\n        this.headers = options.headers || {};\n        this.body = options.body;\n        this.protocol = options.protocol\n            ? options.protocol.substr(-1) !== \":\"\n                ? `${options.protocol}:`\n                : options.protocol\n            : \"https:\";\n        this.path = options.path ? (options.path.charAt(0) !== \"/\" ? `/${options.path}` : options.path) : \"/\";\n    }\n    static isInstance(request) {\n        if (!request)\n            return false;\n        const req = request;\n        return (\"method\" in req &&\n            \"protocol\" in req &&\n            \"hostname\" in req &&\n            \"path\" in req &&\n            typeof req[\"query\"] === \"object\" &&\n            typeof req[\"headers\"] === \"object\");\n    }\n    clone() {\n        const cloned = new HttpRequest({\n            ...this,\n            headers: { ...this.headers },\n        });\n        if (cloned.query)\n            cloned.query = cloneQuery(cloned.query);\n        return cloned;\n    }\n}\nexports.HttpRequest = HttpRequest;\nfunction cloneQuery(query) {\n    return Object.keys(query).reduce((carry, paramName) => {\n        const param = query[paramName];\n        return {\n            ...carry,\n            [paramName]: Array.isArray(param) ? [...param] : param,\n        };\n    }, {});\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpResponse = void 0;\nclass HttpResponse {\n    constructor(options) {\n        this.statusCode = options.statusCode;\n        this.headers = options.headers || {};\n        this.body = options.body;\n    }\n    static isInstance(response) {\n        if (!response)\n            return false;\n        const resp = response;\n        return typeof resp.statusCode === \"number\" && typeof resp.headers === \"object\";\n    }\n}\nexports.HttpResponse = HttpResponse;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./httpHandler\"), exports);\ntslib_1.__exportStar(require(\"./httpRequest\"), exports);\ntslib_1.__exportStar(require(\"./httpResponse\"), exports);\ntslib_1.__exportStar(require(\"./isValidHostname\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isValidHostname = void 0;\nfunction isValidHostname(hostname) {\n    const hostPattern = /^[a-z0-9][a-z0-9\\.\\-]*[a-z0-9]$/;\n    return hostPattern.test(hostname);\n}\nexports.isValidHostname = isValidHostname;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.buildQueryString = void 0;\nconst util_uri_escape_1 = require(\"@aws-sdk/util-uri-escape\");\nfunction buildQueryString(query) {\n    const parts = [];\n    for (let key of Object.keys(query).sort()) {\n        const value = query[key];\n        key = util_uri_escape_1.escapeUri(key);\n        if (Array.isArray(value)) {\n            for (let i = 0, iLen = value.length; i < iLen; i++) {\n                parts.push(`${key}=${util_uri_escape_1.escapeUri(value[i])}`);\n            }\n        }\n        else {\n            let qsEntry = key;\n            if (value || typeof value === \"string\") {\n                qsEntry += `=${util_uri_escape_1.escapeUri(value)}`;\n            }\n            parts.push(qsEntry);\n        }\n    }\n    return parts.join(\"&\");\n}\nexports.buildQueryString = buildQueryString;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseQueryString = void 0;\nfunction parseQueryString(querystring) {\n    const query = {};\n    querystring = querystring.replace(/^\\?/, \"\");\n    if (querystring) {\n        for (const pair of querystring.split(\"&\")) {\n            let [key, value = null] = pair.split(\"=\");\n            key = decodeURIComponent(key);\n            if (value) {\n                value = decodeURIComponent(value);\n            }\n            if (!(key in query)) {\n                query[key] = value;\n            }\n            else if (Array.isArray(query[key])) {\n                query[key].push(value);\n            }\n            else {\n                query[key] = [query[key], value];\n            }\n        }\n    }\n    return query;\n}\nexports.parseQueryString = parseQueryString;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TRANSIENT_ERROR_STATUS_CODES = exports.TRANSIENT_ERROR_CODES = exports.THROTTLING_ERROR_CODES = exports.CLOCK_SKEW_ERROR_CODES = void 0;\nexports.CLOCK_SKEW_ERROR_CODES = [\n    \"AuthFailure\",\n    \"InvalidSignatureException\",\n    \"RequestExpired\",\n    \"RequestInTheFuture\",\n    \"RequestTimeTooSkewed\",\n    \"SignatureDoesNotMatch\",\n];\nexports.THROTTLING_ERROR_CODES = [\n    \"BandwidthLimitExceeded\",\n    \"EC2ThrottledException\",\n    \"LimitExceededException\",\n    \"PriorRequestNotComplete\",\n    \"ProvisionedThroughputExceededException\",\n    \"RequestLimitExceeded\",\n    \"RequestThrottled\",\n    \"RequestThrottledException\",\n    \"SlowDown\",\n    \"ThrottledException\",\n    \"Throttling\",\n    \"ThrottlingException\",\n    \"TooManyRequestsException\",\n    \"TransactionInProgressException\",\n];\nexports.TRANSIENT_ERROR_CODES = [\"AbortError\", \"TimeoutError\", \"RequestTimeout\", \"RequestTimeoutException\"];\nexports.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTransientError = exports.isThrottlingError = exports.isClockSkewError = exports.isRetryableByTrait = void 0;\nconst constants_1 = require(\"./constants\");\nconst isRetryableByTrait = (error) => error.$retryable !== undefined;\nexports.isRetryableByTrait = isRetryableByTrait;\nconst isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);\nexports.isClockSkewError = isClockSkewError;\nconst isThrottlingError = (error) => {\n    var _a, _b;\n    return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 ||\n        constants_1.THROTTLING_ERROR_CODES.includes(error.name) ||\n        ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;\n};\nexports.isThrottlingError = isThrottlingError;\nconst isTransientError = (error) => {\n    var _a;\n    return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) ||\n        constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);\n};\nexports.isTransientError = isTransientError;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getHomeDir = exports.loadSharedConfigFiles = exports.ENV_CONFIG_PATH = exports.ENV_CREDENTIALS_PATH = void 0;\nconst fs_1 = require(\"fs\");\nconst os_1 = require(\"os\");\nconst path_1 = require(\"path\");\nexports.ENV_CREDENTIALS_PATH = \"AWS_SHARED_CREDENTIALS_FILE\";\nexports.ENV_CONFIG_PATH = \"AWS_CONFIG_FILE\";\nconst swallowError = () => ({});\nconst loadSharedConfigFiles = (init = {}) => {\n    const { filepath = process.env[exports.ENV_CREDENTIALS_PATH] || path_1.join(exports.getHomeDir(), \".aws\", \"credentials\"), configFilepath = process.env[exports.ENV_CONFIG_PATH] || path_1.join(exports.getHomeDir(), \".aws\", \"config\"), } = init;\n    return Promise.all([\n        slurpFile(configFilepath).then(parseIni).then(normalizeConfigFile).catch(swallowError),\n        slurpFile(filepath).then(parseIni).catch(swallowError),\n    ]).then((parsedFiles) => {\n        const [configFile, credentialsFile] = parsedFiles;\n        return {\n            configFile,\n            credentialsFile,\n        };\n    });\n};\nexports.loadSharedConfigFiles = loadSharedConfigFiles;\nconst profileKeyRegex = /^profile\\s([\"'])?([^\\1]+)\\1$/;\nconst normalizeConfigFile = (data) => {\n    const map = {};\n    for (const key of Object.keys(data)) {\n        let matches;\n        if (key === \"default\") {\n            map.default = data.default;\n        }\n        else if ((matches = profileKeyRegex.exec(key))) {\n            const [_1, _2, normalizedKey] = matches;\n            if (normalizedKey) {\n                map[normalizedKey] = data[key];\n            }\n        }\n    }\n    return map;\n};\nconst profileNameBlockList = [\"__proto__\", \"profile __proto__\"];\nconst parseIni = (iniData) => {\n    const map = {};\n    let currentSection;\n    for (let line of iniData.split(/\\r?\\n/)) {\n        line = line.split(/(^|\\s)[;#]/)[0];\n        const section = line.match(/^\\s*\\[([^\\[\\]]+)]\\s*$/);\n        if (section) {\n            currentSection = section[1];\n            if (profileNameBlockList.includes(currentSection)) {\n                throw new Error(`Found invalid profile name \"${currentSection}\"`);\n            }\n        }\n        else if (currentSection) {\n            const item = line.match(/^\\s*(.+?)\\s*=\\s*(.+?)\\s*$/);\n            if (item) {\n                map[currentSection] = map[currentSection] || {};\n                map[currentSection][item[1]] = item[2];\n            }\n        }\n    }\n    return map;\n};\nconst slurpFile = (path) => new Promise((resolve, reject) => {\n    fs_1.readFile(path, \"utf8\", (err, data) => {\n        if (err) {\n            reject(err);\n        }\n        else {\n            resolve(data);\n        }\n    });\n});\nconst getHomeDir = () => {\n    const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;\n    if (HOME)\n        return HOME;\n    if (USERPROFILE)\n        return USERPROFILE;\n    if (HOMEPATH)\n        return `${HOMEDRIVE}${HOMEPATH}`;\n    return os_1.homedir();\n};\nexports.getHomeDir = getHomeDir;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CrtSignerV4 = void 0;\nconst querystring_parser_1 = require(\"@aws-sdk/querystring-parser\");\nconst signature_v4_1 = require(\"@aws-sdk/signature-v4\");\nconst aws_crt_1 = require(\"aws-crt\");\nconst constants_1 = require(\"./constants\");\nconst headerUtil_1 = require(\"./headerUtil\");\nfunction sdkHttpRequest2crtHttpRequest(sdkRequest) {\n    headerUtil_1.deleteHeader(constants_1.SHA256_HEADER, sdkRequest.headers);\n    const headersArray = Object.entries(sdkRequest.headers);\n    const crtHttpHeaders = new aws_crt_1.http.HttpHeaders(headersArray);\n    const queryString = signature_v4_1.getCanonicalQuery(sdkRequest);\n    return new aws_crt_1.http.HttpRequest(sdkRequest.method, sdkRequest.path + \"?\" + queryString, crtHttpHeaders);\n}\nclass CrtSignerV4 {\n    constructor({ credentials, region, service, sha256, applyChecksum = true, uriEscapePath = true, signingAlgorithm = aws_crt_1.auth.AwsSigningAlgorithm.SigV4, }) {\n        this.service = service;\n        this.sha256 = sha256;\n        this.uriEscapePath = uriEscapePath;\n        this.signingAlgorithm = signingAlgorithm;\n        this.applyChecksum = applyChecksum;\n        this.regionProvider = signature_v4_1.normalizeRegionProvider(region);\n        this.credentialProvider = signature_v4_1.normalizeCredentialsProvider(credentials);\n        aws_crt_1.io.enable_logging(aws_crt_1.io.LogLevel.ERROR);\n    }\n    async options2crtConfigure({ signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService, } = {}, viaHeader, payloadHash, expiresIn) {\n        const credentials = await this.credentialProvider();\n        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : (await this.regionProvider());\n        const service = signingService !== null && signingService !== void 0 ? signingService : this.service;\n        if ((signableHeaders === null || signableHeaders === void 0 ? void 0 : signableHeaders.has(\"x-amzn-trace-id\")) || (signableHeaders === null || signableHeaders === void 0 ? void 0 : signableHeaders.has(\"user-agent\"))) {\n            throw new Error(\"internal check (x-amzn-trace-id, user-agent) is not supported to be included to sign with CRT.\");\n        }\n        const headersUnsignable = getHeadersUnsignable(unsignableHeaders, signableHeaders);\n        return {\n            algorithm: this.signingAlgorithm,\n            signature_type: viaHeader\n                ? aws_crt_1.auth.AwsSignatureType.HttpRequestViaHeaders\n                : aws_crt_1.auth.AwsSignatureType.HttpRequestViaQueryParams,\n            provider: sdk2crtCredentialsProvider(credentials),\n            region: region,\n            service: service,\n            date: new Date(signingDate),\n            header_blacklist: headersUnsignable,\n            use_double_uri_encode: this.uriEscapePath,\n            signed_body_value: payloadHash,\n            signed_body_header: this.applyChecksum && viaHeader\n                ? aws_crt_1.auth.AwsSignedBodyHeaderType.XAmzContentSha256\n                : aws_crt_1.auth.AwsSignedBodyHeaderType.None,\n            expiration_in_seconds: expiresIn,\n        };\n    }\n    async presign(originalRequest, options = {}) {\n        if (options.expiresIn && options.expiresIn > constants_1.MAX_PRESIGNED_TTL) {\n            return Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\");\n        }\n        const request = signature_v4_1.moveHeadersToQuery(signature_v4_1.prepareRequest(originalRequest));\n        const crtSignedRequest = await this.signRequest(request, await this.options2crtConfigure(options, false, await signature_v4_1.getPayloadHash(originalRequest, this.sha256), options.expiresIn ? options.expiresIn : 3600));\n        request.query = this.getQueryParam(crtSignedRequest.path);\n        return request;\n    }\n    async sign(toSign, options) {\n        const request = signature_v4_1.prepareRequest(toSign);\n        const crtSignedRequest = await this.signRequest(request, await this.options2crtConfigure(options, true, await signature_v4_1.getPayloadHash(toSign, this.sha256)));\n        request.headers = crtSignedRequest.headers._flatten().reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {});\n        return request;\n    }\n    getQueryParam(crtPath) {\n        const start = crtPath.search(/\\?/);\n        const startHash = crtPath.search(/\\#/);\n        const end = startHash == -1 ? undefined : startHash;\n        const queryParam = {};\n        if (start == -1) {\n            return queryParam;\n        }\n        const queryString = crtPath.slice(start + 1, end);\n        return querystring_parser_1.parseQueryString(queryString);\n    }\n    async signRequest(requestToSign, crtConfig) {\n        const request = sdkHttpRequest2crtHttpRequest(requestToSign);\n        try {\n            return await aws_crt_1.auth.aws_sign_request(request, crtConfig);\n        }\n        catch (error) {\n            throw new Error(error);\n        }\n    }\n    async verifySigv4aSigning(request, signature, expectedCanonicalRequest, eccPubKeyX, eccPubKeyY, options = {}) {\n        const sdkRequest = signature_v4_1.prepareRequest(request);\n        const crtRequest = sdkHttpRequest2crtHttpRequest(sdkRequest);\n        const payloadHash = await signature_v4_1.getPayloadHash(request, this.sha256);\n        const crtConfig = await this.options2crtConfigure(options, true, payloadHash);\n        return aws_crt_1.auth.aws_verify_sigv4a_signing(crtRequest, crtConfig, expectedCanonicalRequest, signature, eccPubKeyX, eccPubKeyY);\n    }\n    async verifySigv4aPreSigning(request, signature, expectedCanonicalRequest, eccPubKeyX, eccPubKeyY, options = {}) {\n        if (typeof signature != \"string\") {\n            return false;\n        }\n        const sdkRequest = signature_v4_1.prepareRequest(request);\n        const crtRequest = sdkHttpRequest2crtHttpRequest(sdkRequest);\n        const crtConfig = await this.options2crtConfigure(options, false, await signature_v4_1.getPayloadHash(request, this.sha256), options.expiresIn ? options.expiresIn : 3600);\n        return aws_crt_1.auth.aws_verify_sigv4a_signing(crtRequest, crtConfig, expectedCanonicalRequest, signature, eccPubKeyX, eccPubKeyY);\n    }\n}\nexports.CrtSignerV4 = CrtSignerV4;\nfunction sdk2crtCredentialsProvider(credentials) {\n    return aws_crt_1.auth.AwsCredentialsProvider.newStatic(credentials.accessKeyId, credentials.secretAccessKey, credentials.sessionToken);\n}\nfunction getHeadersUnsignable(unsignableHeaders, signableHeaders) {\n    if (!unsignableHeaders) {\n        return [];\n    }\n    if (!signableHeaders) {\n        return [...unsignableHeaders];\n    }\n    const result = new Set([...unsignableHeaders]);\n    for (let it = signableHeaders.values(), val = null; (val = it.next().value);) {\n        if (result.has(val)) {\n            result.delete(val);\n        }\n    }\n    return [...result];\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MAX_PRESIGNED_TTL = exports.KEY_TYPE_IDENTIFIER = exports.MAX_CACHE_SIZE = exports.UNSIGNED_PAYLOAD = exports.EVENT_ALGORITHM_IDENTIFIER = exports.ALGORITHM_IDENTIFIER_V4A = exports.ALGORITHM_IDENTIFIER = exports.UNSIGNABLE_PATTERNS = exports.SEC_HEADER_PATTERN = exports.PROXY_HEADER_PATTERN = exports.ALWAYS_UNSIGNABLE_HEADERS = exports.HOST_HEADER = exports.TOKEN_HEADER = exports.SHA256_HEADER = exports.SIGNATURE_HEADER = exports.GENERATED_HEADERS = exports.DATE_HEADER = exports.AMZ_DATE_HEADER = exports.AUTH_HEADER = exports.REGION_SET_PARAM = exports.TOKEN_QUERY_PARAM = exports.SIGNATURE_QUERY_PARAM = exports.EXPIRES_QUERY_PARAM = exports.SIGNED_HEADERS_QUERY_PARAM = exports.AMZ_DATE_QUERY_PARAM = exports.CREDENTIAL_QUERY_PARAM = exports.ALGORITHM_QUERY_PARAM = void 0;\nexports.ALGORITHM_QUERY_PARAM = \"X-Amz-Algorithm\";\nexports.CREDENTIAL_QUERY_PARAM = \"X-Amz-Credential\";\nexports.AMZ_DATE_QUERY_PARAM = \"X-Amz-Date\";\nexports.SIGNED_HEADERS_QUERY_PARAM = \"X-Amz-SignedHeaders\";\nexports.EXPIRES_QUERY_PARAM = \"X-Amz-Expires\";\nexports.SIGNATURE_QUERY_PARAM = \"X-Amz-Signature\";\nexports.TOKEN_QUERY_PARAM = \"X-Amz-Security-Token\";\nexports.REGION_SET_PARAM = \"X-Amz-Region-Set\";\nexports.AUTH_HEADER = \"authorization\";\nexports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();\nexports.DATE_HEADER = \"date\";\nexports.GENERATED_HEADERS = [exports.AUTH_HEADER, exports.AMZ_DATE_HEADER, exports.DATE_HEADER];\nexports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();\nexports.SHA256_HEADER = \"x-amz-content-sha256\";\nexports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();\nexports.HOST_HEADER = \"host\";\nexports.ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    \"cache-control\": true,\n    connection: true,\n    expect: true,\n    from: true,\n    \"keep-alive\": true,\n    \"max-forwards\": true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    \"transfer-encoding\": true,\n    upgrade: true,\n    \"user-agent\": true,\n    \"x-amzn-trace-id\": true,\n};\nexports.PROXY_HEADER_PATTERN = /^proxy-/;\nexports.SEC_HEADER_PATTERN = /^sec-/;\nexports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];\nexports.ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256\";\nexports.ALGORITHM_IDENTIFIER_V4A = \"AWS4-ECDSA-P256-SHA256\";\nexports.EVENT_ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256-PAYLOAD\";\nexports.UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\nexports.MAX_CACHE_SIZE = 50;\nexports.KEY_TYPE_IDENTIFIER = \"aws4_request\";\nexports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;\nfunction hasHeader(soughtHeader, headers) {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.hasHeader = hasHeader;\nfunction getHeaderValue(soughtHeader, headers) {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return headers[headerName];\n        }\n    }\n    return undefined;\n}\nexports.getHeaderValue = getHeaderValue;\nfunction deleteHeader(soughtHeader, headers) {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            delete headers[headerName];\n        }\n    }\n}\nexports.deleteHeader = deleteHeader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./CrtSignerV4\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SignatureV4 = void 0;\nconst util_hex_encoding_1 = require(\"@aws-sdk/util-hex-encoding\");\nconst constants_1 = require(\"./constants\");\nconst credentialDerivation_1 = require(\"./credentialDerivation\");\nconst getCanonicalHeaders_1 = require(\"./getCanonicalHeaders\");\nconst getCanonicalQuery_1 = require(\"./getCanonicalQuery\");\nconst getPayloadHash_1 = require(\"./getPayloadHash\");\nconst headerUtil_1 = require(\"./headerUtil\");\nconst moveHeadersToQuery_1 = require(\"./moveHeadersToQuery\");\nconst normalizeProvider_1 = require(\"./normalizeProvider\");\nconst prepareRequest_1 = require(\"./prepareRequest\");\nconst utilDate_1 = require(\"./utilDate\");\nclass SignatureV4 {\n    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true, }) {\n        this.service = service;\n        this.sha256 = sha256;\n        this.uriEscapePath = uriEscapePath;\n        this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n        this.regionProvider = normalizeProvider_1.normalizeRegionProvider(region);\n        this.credentialProvider = normalizeProvider_1.normalizeCredentialsProvider(credentials);\n    }\n    async presign(originalRequest, options = {}) {\n        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, } = options;\n        const credentials = await this.credentialProvider();\n        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : (await this.regionProvider());\n        const { longDate, shortDate } = formatDate(signingDate);\n        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {\n            return Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\");\n        }\n        const scope = credentialDerivation_1.createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);\n        const request = moveHeadersToQuery_1.moveHeadersToQuery(prepareRequest_1.prepareRequest(originalRequest), { unhoistableHeaders });\n        if (credentials.sessionToken) {\n            request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;\n        }\n        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;\n        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;\n        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n        const canonicalHeaders = getCanonicalHeaders_1.getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash_1.getPayloadHash(originalRequest, this.sha256)));\n        return request;\n    }\n    async sign(toSign, options) {\n        if (typeof toSign === \"string\") {\n            return this.signString(toSign, options);\n        }\n        else if (toSign.headers && toSign.payload) {\n            return this.signEvent(toSign, options);\n        }\n        else {\n            return this.signRequest(toSign, options);\n        }\n    }\n    async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {\n        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : (await this.regionProvider());\n        const { shortDate, longDate } = formatDate(signingDate);\n        const scope = credentialDerivation_1.createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);\n        const hashedPayload = await getPayloadHash_1.getPayloadHash({ headers: {}, body: payload }, this.sha256);\n        const hash = new this.sha256();\n        hash.update(headers);\n        const hashedHeaders = util_hex_encoding_1.toHex(await hash.digest());\n        const stringToSign = [\n            constants_1.EVENT_ALGORITHM_IDENTIFIER,\n            longDate,\n            scope,\n            priorSignature,\n            hashedHeaders,\n            hashedPayload,\n        ].join(\"\\n\");\n        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });\n    }\n    async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {\n        const credentials = await this.credentialProvider();\n        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : (await this.regionProvider());\n        const { shortDate } = formatDate(signingDate);\n        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n        hash.update(stringToSign);\n        return util_hex_encoding_1.toHex(await hash.digest());\n    }\n    async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService, } = {}) {\n        const credentials = await this.credentialProvider();\n        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : (await this.regionProvider());\n        const request = prepareRequest_1.prepareRequest(requestToSign);\n        const { longDate, shortDate } = formatDate(signingDate);\n        const scope = credentialDerivation_1.createScope(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);\n        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;\n        if (credentials.sessionToken) {\n            request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;\n        }\n        const payloadHash = await getPayloadHash_1.getPayloadHash(request, this.sha256);\n        if (!headerUtil_1.hasHeader(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {\n            request.headers[constants_1.SHA256_HEADER] = payloadHash;\n        }\n        const canonicalHeaders = getCanonicalHeaders_1.getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n        request.headers[constants_1.AUTH_HEADER] =\n            `${constants_1.ALGORITHM_IDENTIFIER} ` +\n                `Credential=${credentials.accessKeyId}/${scope}, ` +\n                `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` +\n                `Signature=${signature}`;\n        return request;\n    }\n    createCanonicalRequest(request, canonicalHeaders, payloadHash) {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort();\n        return `${request.method}\n${this.getCanonicalPath(request)}\n${getCanonicalQuery_1.getCanonicalQuery(request)}\n${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n    }\n    async createStringToSign(longDate, credentialScope, canonicalRequest) {\n        const hash = new this.sha256();\n        hash.update(canonicalRequest);\n        const hashedRequest = await hash.digest();\n        return `${constants_1.ALGORITHM_IDENTIFIER}\n${longDate}\n${credentialScope}\n${util_hex_encoding_1.toHex(hashedRequest)}`;\n    }\n    getCanonicalPath({ path }) {\n        if (this.uriEscapePath) {\n            const doubleEncoded = encodeURIComponent(path.replace(/^\\//, \"\"));\n            return `/${doubleEncoded.replace(/%2F/g, \"/\")}`;\n        }\n        return path;\n    }\n    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);\n        const hash = new this.sha256(await keyPromise);\n        hash.update(stringToSign);\n        return util_hex_encoding_1.toHex(await hash.digest());\n    }\n    getSigningKey(credentials, region, shortDate, service) {\n        return credentialDerivation_1.getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n    }\n}\nexports.SignatureV4 = SignatureV4;\nconst formatDate = (now) => {\n    const longDate = utilDate_1.iso8601(now).replace(/[\\-:]/g, \"\");\n    return {\n        longDate,\n        shortDate: longDate.substr(0, 8),\n    };\n};\nconst getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(\";\");\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cloneQuery = exports.cloneRequest = void 0;\nconst cloneRequest = ({ headers, query, ...rest }) => ({\n    ...rest,\n    headers: { ...headers },\n    query: query ? exports.cloneQuery(query) : undefined,\n});\nexports.cloneRequest = cloneRequest;\nconst cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {\n    const param = query[paramName];\n    return {\n        ...carry,\n        [paramName]: Array.isArray(param) ? [...param] : param,\n    };\n}, {});\nexports.cloneQuery = cloneQuery;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MAX_PRESIGNED_TTL = exports.KEY_TYPE_IDENTIFIER = exports.MAX_CACHE_SIZE = exports.UNSIGNED_PAYLOAD = exports.EVENT_ALGORITHM_IDENTIFIER = exports.ALGORITHM_IDENTIFIER_V4A = exports.ALGORITHM_IDENTIFIER = exports.UNSIGNABLE_PATTERNS = exports.SEC_HEADER_PATTERN = exports.PROXY_HEADER_PATTERN = exports.ALWAYS_UNSIGNABLE_HEADERS = exports.HOST_HEADER = exports.TOKEN_HEADER = exports.SHA256_HEADER = exports.SIGNATURE_HEADER = exports.GENERATED_HEADERS = exports.DATE_HEADER = exports.AMZ_DATE_HEADER = exports.AUTH_HEADER = exports.REGION_SET_PARAM = exports.TOKEN_QUERY_PARAM = exports.SIGNATURE_QUERY_PARAM = exports.EXPIRES_QUERY_PARAM = exports.SIGNED_HEADERS_QUERY_PARAM = exports.AMZ_DATE_QUERY_PARAM = exports.CREDENTIAL_QUERY_PARAM = exports.ALGORITHM_QUERY_PARAM = void 0;\nexports.ALGORITHM_QUERY_PARAM = \"X-Amz-Algorithm\";\nexports.CREDENTIAL_QUERY_PARAM = \"X-Amz-Credential\";\nexports.AMZ_DATE_QUERY_PARAM = \"X-Amz-Date\";\nexports.SIGNED_HEADERS_QUERY_PARAM = \"X-Amz-SignedHeaders\";\nexports.EXPIRES_QUERY_PARAM = \"X-Amz-Expires\";\nexports.SIGNATURE_QUERY_PARAM = \"X-Amz-Signature\";\nexports.TOKEN_QUERY_PARAM = \"X-Amz-Security-Token\";\nexports.REGION_SET_PARAM = \"X-Amz-Region-Set\";\nexports.AUTH_HEADER = \"authorization\";\nexports.AMZ_DATE_HEADER = exports.AMZ_DATE_QUERY_PARAM.toLowerCase();\nexports.DATE_HEADER = \"date\";\nexports.GENERATED_HEADERS = [exports.AUTH_HEADER, exports.AMZ_DATE_HEADER, exports.DATE_HEADER];\nexports.SIGNATURE_HEADER = exports.SIGNATURE_QUERY_PARAM.toLowerCase();\nexports.SHA256_HEADER = \"x-amz-content-sha256\";\nexports.TOKEN_HEADER = exports.TOKEN_QUERY_PARAM.toLowerCase();\nexports.HOST_HEADER = \"host\";\nexports.ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    \"cache-control\": true,\n    connection: true,\n    expect: true,\n    from: true,\n    \"keep-alive\": true,\n    \"max-forwards\": true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    \"transfer-encoding\": true,\n    upgrade: true,\n    \"user-agent\": true,\n    \"x-amzn-trace-id\": true,\n};\nexports.PROXY_HEADER_PATTERN = /^proxy-/;\nexports.SEC_HEADER_PATTERN = /^sec-/;\nexports.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];\nexports.ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256\";\nexports.ALGORITHM_IDENTIFIER_V4A = \"AWS4-ECDSA-P256-SHA256\";\nexports.EVENT_ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256-PAYLOAD\";\nexports.UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\nexports.MAX_CACHE_SIZE = 50;\nexports.KEY_TYPE_IDENTIFIER = \"aws4_request\";\nexports.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clearCredentialCache = exports.getSigningKey = exports.createScope = void 0;\nconst util_hex_encoding_1 = require(\"@aws-sdk/util-hex-encoding\");\nconst constants_1 = require(\"./constants\");\nconst signingKeyCache = {};\nconst cacheQueue = [];\nconst createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;\nexports.createScope = createScope;\nconst getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {\n    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n    const cacheKey = `${shortDate}:${region}:${service}:${util_hex_encoding_1.toHex(credsHash)}:${credentials.sessionToken}`;\n    if (cacheKey in signingKeyCache) {\n        return signingKeyCache[cacheKey];\n    }\n    cacheQueue.push(cacheKey);\n    while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {\n        delete signingKeyCache[cacheQueue.shift()];\n    }\n    let key = `AWS4${credentials.secretAccessKey}`;\n    for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {\n        key = await hmac(sha256Constructor, key, signable);\n    }\n    return (signingKeyCache[cacheKey] = key);\n};\nexports.getSigningKey = getSigningKey;\nconst clearCredentialCache = () => {\n    cacheQueue.length = 0;\n    Object.keys(signingKeyCache).forEach((cacheKey) => {\n        delete signingKeyCache[cacheKey];\n    });\n};\nexports.clearCredentialCache = clearCredentialCache;\nconst hmac = (ctor, secret, data) => {\n    const hash = new ctor(secret);\n    hash.update(data);\n    return hash.digest();\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCanonicalHeaders = void 0;\nconst constants_1 = require(\"./constants\");\nconst getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {\n    const canonical = {};\n    for (const headerName of Object.keys(headers).sort()) {\n        const canonicalHeaderName = headerName.toLowerCase();\n        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS ||\n            (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) ||\n            constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||\n            constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {\n            if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {\n                continue;\n            }\n        }\n        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n    }\n    return canonical;\n};\nexports.getCanonicalHeaders = getCanonicalHeaders;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCanonicalQuery = void 0;\nconst util_uri_escape_1 = require(\"@aws-sdk/util-uri-escape\");\nconst constants_1 = require(\"./constants\");\nconst getCanonicalQuery = ({ query = {} }) => {\n    const keys = [];\n    const serialized = {};\n    for (const key of Object.keys(query).sort()) {\n        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {\n            continue;\n        }\n        keys.push(key);\n        const value = query[key];\n        if (typeof value === \"string\") {\n            serialized[key] = `${util_uri_escape_1.escapeUri(key)}=${util_uri_escape_1.escapeUri(value)}`;\n        }\n        else if (Array.isArray(value)) {\n            serialized[key] = value\n                .slice(0)\n                .sort()\n                .reduce((encoded, value) => encoded.concat([`${util_uri_escape_1.escapeUri(key)}=${util_uri_escape_1.escapeUri(value)}`]), [])\n                .join(\"&\");\n        }\n    }\n    return keys\n        .map((key) => serialized[key])\n        .filter((serialized) => serialized)\n        .join(\"&\");\n};\nexports.getCanonicalQuery = getCanonicalQuery;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPayloadHash = void 0;\nconst is_array_buffer_1 = require(\"@aws-sdk/is-array-buffer\");\nconst util_hex_encoding_1 = require(\"@aws-sdk/util-hex-encoding\");\nconst constants_1 = require(\"./constants\");\nconst getPayloadHash = async ({ headers, body }, hashConstructor) => {\n    for (const headerName of Object.keys(headers)) {\n        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {\n            return headers[headerName];\n        }\n    }\n    if (body == undefined) {\n        return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n    }\n    else if (typeof body === \"string\" || ArrayBuffer.isView(body) || is_array_buffer_1.isArrayBuffer(body)) {\n        const hashCtor = new hashConstructor();\n        hashCtor.update(body);\n        return util_hex_encoding_1.toHex(await hashCtor.digest());\n    }\n    return constants_1.UNSIGNED_PAYLOAD;\n};\nexports.getPayloadHash = getPayloadHash;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deleteHeader = exports.getHeaderValue = exports.hasHeader = void 0;\nconst hasHeader = (soughtHeader, headers) => {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true;\n        }\n    }\n    return false;\n};\nexports.hasHeader = hasHeader;\nconst getHeaderValue = (soughtHeader, headers) => {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return headers[headerName];\n        }\n    }\n    return undefined;\n};\nexports.getHeaderValue = getHeaderValue;\nconst deleteHeader = (soughtHeader, headers) => {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            delete headers[headerName];\n        }\n    }\n};\nexports.deleteHeader = deleteHeader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeRegionProvider = exports.normalizeCredentialsProvider = exports.prepareRequest = exports.moveHeadersToQuery = exports.getPayloadHash = exports.getCanonicalQuery = exports.getCanonicalHeaders = void 0;\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./SignatureV4\"), exports);\nvar getCanonicalHeaders_1 = require(\"./getCanonicalHeaders\");\nObject.defineProperty(exports, \"getCanonicalHeaders\", { enumerable: true, get: function () { return getCanonicalHeaders_1.getCanonicalHeaders; } });\nvar getCanonicalQuery_1 = require(\"./getCanonicalQuery\");\nObject.defineProperty(exports, \"getCanonicalQuery\", { enumerable: true, get: function () { return getCanonicalQuery_1.getCanonicalQuery; } });\nvar getPayloadHash_1 = require(\"./getPayloadHash\");\nObject.defineProperty(exports, \"getPayloadHash\", { enumerable: true, get: function () { return getPayloadHash_1.getPayloadHash; } });\nvar moveHeadersToQuery_1 = require(\"./moveHeadersToQuery\");\nObject.defineProperty(exports, \"moveHeadersToQuery\", { enumerable: true, get: function () { return moveHeadersToQuery_1.moveHeadersToQuery; } });\nvar prepareRequest_1 = require(\"./prepareRequest\");\nObject.defineProperty(exports, \"prepareRequest\", { enumerable: true, get: function () { return prepareRequest_1.prepareRequest; } });\nvar normalizeProvider_1 = require(\"./normalizeProvider\");\nObject.defineProperty(exports, \"normalizeCredentialsProvider\", { enumerable: true, get: function () { return normalizeProvider_1.normalizeCredentialsProvider; } });\nObject.defineProperty(exports, \"normalizeRegionProvider\", { enumerable: true, get: function () { return normalizeProvider_1.normalizeRegionProvider; } });\ntslib_1.__exportStar(require(\"./credentialDerivation\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.moveHeadersToQuery = void 0;\nconst cloneRequest_1 = require(\"./cloneRequest\");\nconst moveHeadersToQuery = (request, options = {}) => {\n    var _a;\n    const { headers, query = {} } = typeof request.clone === \"function\" ? request.clone() : cloneRequest_1.cloneRequest(request);\n    for (const name of Object.keys(headers)) {\n        const lname = name.toLowerCase();\n        if (lname.substr(0, 6) === \"x-amz-\" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {\n            query[name] = headers[name];\n            delete headers[name];\n        }\n    }\n    return {\n        ...request,\n        headers,\n        query,\n    };\n};\nexports.moveHeadersToQuery = moveHeadersToQuery;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeCredentialsProvider = exports.normalizeRegionProvider = void 0;\nconst normalizeRegionProvider = (region) => {\n    if (typeof region === \"string\") {\n        const promisified = Promise.resolve(region);\n        return () => promisified;\n    }\n    else {\n        return region;\n    }\n};\nexports.normalizeRegionProvider = normalizeRegionProvider;\nconst normalizeCredentialsProvider = (credentials) => {\n    if (typeof credentials === \"object\") {\n        const promisified = Promise.resolve(credentials);\n        return () => promisified;\n    }\n    else {\n        return credentials;\n    }\n};\nexports.normalizeCredentialsProvider = normalizeCredentialsProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.prepareRequest = void 0;\nconst cloneRequest_1 = require(\"./cloneRequest\");\nconst constants_1 = require(\"./constants\");\nconst prepareRequest = (request) => {\n    request = typeof request.clone === \"function\" ? request.clone() : cloneRequest_1.cloneRequest(request);\n    for (const headerName of Object.keys(request.headers)) {\n        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n            delete request.headers[headerName];\n        }\n    }\n    return request;\n};\nexports.prepareRequest = prepareRequest;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toDate = exports.iso8601 = void 0;\nconst iso8601 = (time) => exports.toDate(time)\n    .toISOString()\n    .replace(/\\.\\d{3}Z$/, \"Z\");\nexports.iso8601 = iso8601;\nconst toDate = (time) => {\n    if (typeof time === \"number\") {\n        return new Date(time * 1000);\n    }\n    if (typeof time === \"string\") {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000);\n        }\n        return new Date(time);\n    }\n    return time;\n};\nexports.toDate = toDate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Client = void 0;\nconst middleware_stack_1 = require(\"@aws-sdk/middleware-stack\");\nclass Client {\n    constructor(config) {\n        this.middlewareStack = middleware_stack_1.constructStack();\n        this.config = config;\n    }\n    send(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    }\n    destroy() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    }\n}\nexports.Client = Client;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Command = void 0;\nconst middleware_stack_1 = require(\"@aws-sdk/middleware-stack\");\nclass Command {\n    constructor() {\n        this.middlewareStack = middleware_stack_1.constructStack();\n    }\n}\nexports.Command = Command;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SENSITIVE_STRING = void 0;\nexports.SENSITIVE_STRING = \"***SensitiveInformation***\";\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseEpochTimestamp = exports.parseRfc7231DateTime = exports.parseRfc3339DateTime = exports.dateToUtcString = void 0;\nconst parse_utils_1 = require(\"./parse-utils\");\nconst DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nconst MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nfunction dateToUtcString(date) {\n    const year = date.getUTCFullYear();\n    const month = date.getUTCMonth();\n    const dayOfWeek = date.getUTCDay();\n    const dayOfMonthInt = date.getUTCDate();\n    const hoursInt = date.getUTCHours();\n    const minutesInt = date.getUTCMinutes();\n    const secondsInt = date.getUTCSeconds();\n    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;\n    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;\n    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;\n    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;\n    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;\n}\nexports.dateToUtcString = dateToUtcString;\nconst RFC3339 = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?[zZ]$/);\nconst parseRfc3339DateTime = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    const match = RFC3339.exec(value);\n    if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n    const year = parse_utils_1.strictParseShort(stripLeadingZeroes(yearStr));\n    const month = parseDateValue(monthStr, \"month\", 1, 12);\n    const day = parseDateValue(dayStr, \"day\", 1, 31);\n    return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });\n};\nexports.parseRfc3339DateTime = parseRfc3339DateTime;\nconst IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nconst RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nconst ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? (\\d{4})$/);\nconst parseRfc7231DateTime = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n    }\n    let match = IMF_FIXDATE.exec(value);\n    if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n        return buildDate(parse_utils_1.strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });\n    }\n    match = RFC_850_DATE.exec(value);\n    if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n            hours,\n            minutes,\n            seconds,\n            fractionalMilliseconds,\n        }));\n    }\n    match = ASC_TIME.exec(value);\n    if (match) {\n        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;\n        return buildDate(parse_utils_1.strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), \"day\", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });\n    }\n    throw new TypeError(\"Invalid RFC-7231 date-time value\");\n};\nexports.parseRfc7231DateTime = parseRfc7231DateTime;\nconst parseEpochTimestamp = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    let valueAsDouble;\n    if (typeof value === \"number\") {\n        valueAsDouble = value;\n    }\n    else if (typeof value === \"string\") {\n        valueAsDouble = parse_utils_1.strictParseDouble(value);\n    }\n    else {\n        throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n    }\n    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n        throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n    }\n    return new Date(Math.round(valueAsDouble * 1000));\n};\nexports.parseEpochTimestamp = parseEpochTimestamp;\nconst buildDate = (year, month, day, time) => {\n    const adjustedMonth = month - 1;\n    validateDayOfMonth(year, adjustedMonth, day);\n    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, \"hour\", 0, 23), parseDateValue(time.minutes, \"minute\", 0, 59), parseDateValue(time.seconds, \"seconds\", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));\n};\nconst parseTwoDigitYear = (value) => {\n    const thisYear = new Date().getUTCFullYear();\n    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + parse_utils_1.strictParseShort(stripLeadingZeroes(value));\n    if (valueInThisCentury < thisYear) {\n        return valueInThisCentury + 100;\n    }\n    return valueInThisCentury;\n};\nconst FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;\nconst adjustRfc850Year = (input) => {\n    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n    }\n    return input;\n};\nconst parseMonthByShortName = (value) => {\n    const monthIdx = MONTHS.indexOf(value);\n    if (monthIdx < 0) {\n        throw new TypeError(`Invalid month: ${value}`);\n    }\n    return monthIdx + 1;\n};\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst validateDayOfMonth = (year, month, day) => {\n    let maxDays = DAYS_IN_MONTH[month];\n    if (month === 1 && isLeapYear(year)) {\n        maxDays = 29;\n    }\n    if (day > maxDays) {\n        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);\n    }\n};\nconst isLeapYear = (year) => {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n};\nconst parseDateValue = (value, type, lower, upper) => {\n    const dateVal = parse_utils_1.strictParseByte(stripLeadingZeroes(value));\n    if (dateVal < lower || dateVal > upper) {\n        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);\n    }\n    return dateVal;\n};\nconst parseMilliseconds = (value) => {\n    if (value === null || value === undefined) {\n        return 0;\n    }\n    return parse_utils_1.strictParseFloat32(\"0.\" + value) * 1000;\n};\nconst stripLeadingZeroes = (value) => {\n    let idx = 0;\n    while (idx < value.length - 1 && value.charAt(idx) === \"0\") {\n        idx++;\n    }\n    if (idx === 0) {\n        return value;\n    }\n    return value.slice(idx);\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.emitWarningIfUnsupportedVersion = void 0;\nlet warningEmitted = false;\nconst emitWarningIfUnsupportedVersion = (version) => {\n    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf(\".\"))) < 12) {\n        warningEmitted = true;\n        process.emitWarning(`The AWS SDK for JavaScript (v3) will\\n` +\n            `no longer support Node.js ${version} as of January 1, 2022.\\n` +\n            `To continue receiving updates to AWS services, bug fixes, and security\\n` +\n            `updates please upgrade to Node.js 12.x or later.\\n\\n` +\n            `More information can be found at: https://a.co/1l6FLnu`, `NodeDeprecationWarning`);\n    }\n};\nexports.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extendedEncodeURIComponent = void 0;\nfunction extendedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n}\nexports.extendedEncodeURIComponent = extendedEncodeURIComponent;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getArrayIfSingleItem = void 0;\nconst getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];\nexports.getArrayIfSingleItem = getArrayIfSingleItem;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getValueFromTextNode = void 0;\nconst getValueFromTextNode = (obj) => {\n    const textNodeName = \"#text\";\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) {\n            obj[key] = obj[key][textNodeName];\n        }\n        else if (typeof obj[key] === \"object\" && obj[key] !== null) {\n            obj[key] = exports.getValueFromTextNode(obj[key]);\n        }\n    }\n    return obj;\n};\nexports.getValueFromTextNode = getValueFromTextNode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./client\"), exports);\ntslib_1.__exportStar(require(\"./command\"), exports);\ntslib_1.__exportStar(require(\"./constants\"), exports);\ntslib_1.__exportStar(require(\"./date-utils\"), exports);\ntslib_1.__exportStar(require(\"./emitWarningIfUnsupportedVersion\"), exports);\ntslib_1.__exportStar(require(\"./extended-encode-uri-component\"), exports);\ntslib_1.__exportStar(require(\"./get-array-if-single-item\"), exports);\ntslib_1.__exportStar(require(\"./get-value-from-text-node\"), exports);\ntslib_1.__exportStar(require(\"./lazy-json\"), exports);\ntslib_1.__exportStar(require(\"./parse-utils\"), exports);\ntslib_1.__exportStar(require(\"./ser-utils\"), exports);\ntslib_1.__exportStar(require(\"./split-every\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LazyJsonString = exports.StringWrapper = void 0;\nconst StringWrapper = function () {\n    const Class = Object.getPrototypeOf(this).constructor;\n    const Constructor = Function.bind.apply(String, [null, ...arguments]);\n    const instance = new Constructor();\n    Object.setPrototypeOf(instance, Class.prototype);\n    return instance;\n};\nexports.StringWrapper = StringWrapper;\nexports.StringWrapper.prototype = Object.create(String.prototype, {\n    constructor: {\n        value: exports.StringWrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true,\n    },\n});\nObject.setPrototypeOf(exports.StringWrapper, String);\nclass LazyJsonString extends exports.StringWrapper {\n    deserializeJSON() {\n        return JSON.parse(super.toString());\n    }\n    toJSON() {\n        return super.toString();\n    }\n    static fromObject(object) {\n        if (object instanceof LazyJsonString) {\n            return object;\n        }\n        else if (object instanceof String || typeof object === \"string\") {\n            return new LazyJsonString(object);\n        }\n        return new LazyJsonString(JSON.stringify(object));\n    }\n}\nexports.LazyJsonString = LazyJsonString;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.strictParseByte = exports.strictParseShort = exports.strictParseInt32 = exports.strictParseInt = exports.strictParseLong = exports.limitedParseFloat32 = exports.limitedParseFloat = exports.handleFloat = exports.limitedParseDouble = exports.strictParseFloat32 = exports.strictParseFloat = exports.strictParseDouble = exports.expectUnion = exports.expectString = exports.expectObject = exports.expectNonNull = exports.expectByte = exports.expectShort = exports.expectInt32 = exports.expectInt = exports.expectLong = exports.expectFloat32 = exports.expectNumber = exports.expectBoolean = exports.parseBoolean = void 0;\nconst parseBoolean = (value) => {\n    switch (value) {\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n        default:\n            throw new Error(`Unable to parse boolean value \"${value}\"`);\n    }\n};\nexports.parseBoolean = parseBoolean;\nconst expectBoolean = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    throw new TypeError(`Expected boolean, got ${typeof value}`);\n};\nexports.expectBoolean = expectBoolean;\nconst expectNumber = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    throw new TypeError(`Expected number, got ${typeof value}`);\n};\nexports.expectNumber = expectNumber;\nconst MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));\nconst expectFloat32 = (value) => {\n    const expected = exports.expectNumber(value);\n    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n        if (Math.abs(expected) > MAX_FLOAT) {\n            throw new TypeError(`Expected 32-bit float, got ${value}`);\n        }\n    }\n    return expected;\n};\nexports.expectFloat32 = expectFloat32;\nconst expectLong = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (Number.isInteger(value) && !Number.isNaN(value)) {\n        return value;\n    }\n    throw new TypeError(`Expected integer, got ${typeof value}`);\n};\nexports.expectLong = expectLong;\nexports.expectInt = exports.expectLong;\nconst expectInt32 = (value) => expectSizedInt(value, 32);\nexports.expectInt32 = expectInt32;\nconst expectShort = (value) => expectSizedInt(value, 16);\nexports.expectShort = expectShort;\nconst expectByte = (value) => expectSizedInt(value, 8);\nexports.expectByte = expectByte;\nconst expectSizedInt = (value, size) => {\n    const expected = exports.expectLong(value);\n    if (expected !== undefined && castInt(expected, size) !== expected) {\n        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);\n    }\n    return expected;\n};\nconst castInt = (value, size) => {\n    switch (size) {\n        case 32:\n            return Int32Array.of(value)[0];\n        case 16:\n            return Int16Array.of(value)[0];\n        case 8:\n            return Int8Array.of(value)[0];\n    }\n};\nconst expectNonNull = (value, location) => {\n    if (value === null || value === undefined) {\n        if (location) {\n            throw new TypeError(`Expected a non-null value for ${location}`);\n        }\n        throw new TypeError(\"Expected a non-null value\");\n    }\n    return value;\n};\nexports.expectNonNull = expectNonNull;\nconst expectObject = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"object\" && !Array.isArray(value)) {\n        return value;\n    }\n    throw new TypeError(`Expected object, got ${typeof value}`);\n};\nexports.expectObject = expectObject;\nconst expectString = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    throw new TypeError(`Expected string, got ${typeof value}`);\n};\nexports.expectString = expectString;\nconst expectUnion = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    const asObject = exports.expectObject(value);\n    const setKeys = Object.entries(asObject)\n        .filter(([_, v]) => v !== null && v !== undefined)\n        .map(([k, _]) => k);\n    if (setKeys.length === 0) {\n        throw new TypeError(`Unions must have exactly one non-null member`);\n    }\n    if (setKeys.length > 1) {\n        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);\n    }\n    return asObject;\n};\nexports.expectUnion = expectUnion;\nconst strictParseDouble = (value) => {\n    if (typeof value == \"string\") {\n        return exports.expectNumber(parseNumber(value));\n    }\n    return exports.expectNumber(value);\n};\nexports.strictParseDouble = strictParseDouble;\nexports.strictParseFloat = exports.strictParseDouble;\nconst strictParseFloat32 = (value) => {\n    if (typeof value == \"string\") {\n        return exports.expectFloat32(parseNumber(value));\n    }\n    return exports.expectFloat32(value);\n};\nexports.strictParseFloat32 = strictParseFloat32;\nconst NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\nconst parseNumber = (value) => {\n    const matches = value.match(NUMBER_REGEX);\n    if (matches === null || matches[0].length !== value.length) {\n        throw new TypeError(`Expected real number, got implicit NaN`);\n    }\n    return parseFloat(value);\n};\nconst limitedParseDouble = (value) => {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return exports.expectNumber(value);\n};\nexports.limitedParseDouble = limitedParseDouble;\nexports.handleFloat = exports.limitedParseDouble;\nexports.limitedParseFloat = exports.limitedParseDouble;\nconst limitedParseFloat32 = (value) => {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return exports.expectFloat32(value);\n};\nexports.limitedParseFloat32 = limitedParseFloat32;\nconst parseFloatString = (value) => {\n    switch (value) {\n        case \"NaN\":\n            return NaN;\n        case \"Infinity\":\n            return Infinity;\n        case \"-Infinity\":\n            return -Infinity;\n        default:\n            throw new Error(`Unable to parse float value: ${value}`);\n    }\n};\nconst strictParseLong = (value) => {\n    if (typeof value === \"string\") {\n        return exports.expectLong(parseNumber(value));\n    }\n    return exports.expectLong(value);\n};\nexports.strictParseLong = strictParseLong;\nexports.strictParseInt = exports.strictParseLong;\nconst strictParseInt32 = (value) => {\n    if (typeof value === \"string\") {\n        return exports.expectInt32(parseNumber(value));\n    }\n    return exports.expectInt32(value);\n};\nexports.strictParseInt32 = strictParseInt32;\nconst strictParseShort = (value) => {\n    if (typeof value === \"string\") {\n        return exports.expectShort(parseNumber(value));\n    }\n    return exports.expectShort(value);\n};\nexports.strictParseShort = strictParseShort;\nconst strictParseByte = (value) => {\n    if (typeof value === \"string\") {\n        return exports.expectByte(parseNumber(value));\n    }\n    return exports.expectByte(value);\n};\nexports.strictParseByte = strictParseByte;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeFloat = void 0;\nconst serializeFloat = (value) => {\n    if (value !== value) {\n        return \"NaN\";\n    }\n    switch (value) {\n        case Infinity:\n            return \"Infinity\";\n        case -Infinity:\n            return \"-Infinity\";\n        default:\n            return value;\n    }\n};\nexports.serializeFloat = serializeFloat;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.splitEvery = void 0;\nfunction splitEvery(value, delimiter, numDelimiters) {\n    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n        throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n    }\n    const segments = value.split(delimiter);\n    if (numDelimiters === 1) {\n        return segments;\n    }\n    const compoundSegments = [];\n    let currentSegment = \"\";\n    for (let i = 0; i < segments.length; i++) {\n        if (currentSegment === \"\") {\n            currentSegment = segments[i];\n        }\n        else {\n            currentSegment += delimiter + segments[i];\n        }\n        if ((i + 1) % numDelimiters === 0) {\n            compoundSegments.push(currentSegment);\n            currentSegment = \"\";\n        }\n    }\n    if (currentSegment !== \"\") {\n        compoundSegments.push(currentSegment);\n    }\n    return compoundSegments;\n}\nexports.splitEvery = splitEvery;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseUrl = void 0;\nconst querystring_parser_1 = require(\"@aws-sdk/querystring-parser\");\nconst parseUrl = (url) => {\n    const { hostname, pathname, port, protocol, search } = new URL(url);\n    let query;\n    if (search) {\n        query = querystring_parser_1.parseQueryString(search);\n    }\n    return {\n        hostname,\n        port: port ? parseInt(port) : undefined,\n        protocol,\n        path: pathname,\n        query,\n    };\n};\nexports.parseUrl = parseUrl;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.build = exports.parse = exports.validate = void 0;\nconst validate = (str) => typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\nexports.validate = validate;\nconst parse = (arn) => {\n    const segments = arn.split(\":\");\n    if (segments.length < 6 || segments[0] !== \"arn\")\n        throw new Error(\"Malformed ARN\");\n    const [, partition, service, region, accountId, ...resource] = segments;\n    return {\n        partition,\n        service,\n        region,\n        accountId,\n        resource: resource.join(\":\"),\n    };\n};\nexports.parse = parse;\nconst build = (arnObject) => {\n    const { partition = \"aws\", service, region, accountId, resource } = arnObject;\n    if ([service, region, accountId, resource].some((segment) => typeof segment !== \"string\")) {\n        throw new Error(\"Input ARN object is invalid\");\n    }\n    return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;\n};\nexports.build = build;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toBase64 = exports.fromBase64 = void 0;\nconst util_buffer_from_1 = require(\"@aws-sdk/util-buffer-from\");\nconst BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;\nfunction fromBase64(input) {\n    if ((input.length * 3) % 4 !== 0) {\n        throw new TypeError(`Incorrect padding on base64 string.`);\n    }\n    if (!BASE64_REGEX.exec(input)) {\n        throw new TypeError(`Invalid base64 string.`);\n    }\n    const buffer = util_buffer_from_1.fromString(input, \"base64\");\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n}\nexports.fromBase64 = fromBase64;\nfunction toBase64(input) {\n    return util_buffer_from_1.fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString(\"base64\");\n}\nexports.toBase64 = toBase64;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateBodyLength = void 0;\nconst fs_1 = require(\"fs\");\nfunction calculateBodyLength(body) {\n    if (!body) {\n        return 0;\n    }\n    if (typeof body === \"string\") {\n        return Buffer.from(body).length;\n    }\n    else if (typeof body.byteLength === \"number\") {\n        return body.byteLength;\n    }\n    else if (typeof body.size === \"number\") {\n        return body.size;\n    }\n    else if (typeof body.path === \"string\") {\n        return fs_1.lstatSync(body.path).size;\n    }\n}\nexports.calculateBodyLength = calculateBodyLength;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromString = exports.fromArrayBuffer = void 0;\nconst is_array_buffer_1 = require(\"@aws-sdk/is-array-buffer\");\nconst buffer_1 = require(\"buffer\");\nconst fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {\n    if (!is_array_buffer_1.isArrayBuffer(input)) {\n        throw new TypeError(`The \"input\" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);\n    }\n    return buffer_1.Buffer.from(input, offset, length);\n};\nexports.fromArrayBuffer = fromArrayBuffer;\nconst fromString = (input, encoding) => {\n    if (typeof input !== \"string\") {\n        throw new TypeError(`The \"input\" argument must be of type string. Received type ${typeof input} (${input})`);\n    }\n    return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);\n};\nexports.fromString = fromString;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.booleanSelector = exports.SelectorType = void 0;\nvar SelectorType;\n(function (SelectorType) {\n    SelectorType[\"ENV\"] = \"env\";\n    SelectorType[\"CONFIG\"] = \"shared config entry\";\n})(SelectorType = exports.SelectorType || (exports.SelectorType = {}));\nconst booleanSelector = (obj, key, type) => {\n    if (!(key in obj))\n        return undefined;\n    if (obj[key] === \"true\")\n        return true;\n    if (obj[key] === \"false\")\n        return false;\n    throw new Error(`Cannot load ${type} \"${key}\". Expected \"true\" or \"false\", got ${obj[key]}.`);\n};\nexports.booleanSelector = booleanSelector;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./booleanSelector\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMasterProfileName = exports.parseKnownFiles = exports.DEFAULT_PROFILE = exports.ENV_PROFILE = void 0;\nconst shared_ini_file_loader_1 = require(\"@aws-sdk/shared-ini-file-loader\");\nexports.ENV_PROFILE = \"AWS_PROFILE\";\nexports.DEFAULT_PROFILE = \"default\";\nconst parseKnownFiles = async (init) => {\n    const { loadedConfig = shared_ini_file_loader_1.loadSharedConfigFiles(init) } = init;\n    const parsedFiles = await loadedConfig;\n    return {\n        ...parsedFiles.configFile,\n        ...parsedFiles.credentialsFile,\n    };\n};\nexports.parseKnownFiles = parseKnownFiles;\nconst getMasterProfileName = (init) => init.profile || process.env[exports.ENV_PROFILE] || exports.DEFAULT_PROFILE;\nexports.getMasterProfileName = getMasterProfileName;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toHex = exports.fromHex = void 0;\nconst SHORT_TO_HEX = {};\nconst HEX_TO_SHORT = {};\nfor (let i = 0; i < 256; i++) {\n    let encodedByte = i.toString(16).toLowerCase();\n    if (encodedByte.length === 1) {\n        encodedByte = `0${encodedByte}`;\n    }\n    SHORT_TO_HEX[i] = encodedByte;\n    HEX_TO_SHORT[encodedByte] = i;\n}\nfunction fromHex(encoded) {\n    if (encoded.length % 2 !== 0) {\n        throw new Error(\"Hex encoded strings must have an even number length\");\n    }\n    const out = new Uint8Array(encoded.length / 2);\n    for (let i = 0; i < encoded.length; i += 2) {\n        const encodedByte = encoded.substr(i, 2).toLowerCase();\n        if (encodedByte in HEX_TO_SHORT) {\n            out[i / 2] = HEX_TO_SHORT[encodedByte];\n        }\n        else {\n            throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\n        }\n    }\n    return out;\n}\nexports.fromHex = fromHex;\nfunction toHex(bytes) {\n    let out = \"\";\n    for (let i = 0; i < bytes.byteLength; i++) {\n        out += SHORT_TO_HEX[bytes[i]];\n    }\n    return out;\n}\nexports.toHex = toHex;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escapeUriPath = void 0;\nconst escape_uri_1 = require(\"./escape-uri\");\nconst escapeUriPath = (uri) => uri.split(\"/\").map(escape_uri_1.escapeUri).join(\"/\");\nexports.escapeUriPath = escapeUriPath;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escapeUri = void 0;\nconst escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);\nexports.escapeUri = escapeUri;\nconst hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./escape-uri\"), exports);\ntslib_1.__exportStar(require(\"./escape-uri-path\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultUserAgent = exports.UA_APP_ID_INI_NAME = exports.UA_APP_ID_ENV_NAME = void 0;\nconst node_config_provider_1 = require(\"@aws-sdk/node-config-provider\");\nconst os_1 = require(\"os\");\nconst process_1 = require(\"process\");\nconst is_crt_available_1 = require(\"./is-crt-available\");\nexports.UA_APP_ID_ENV_NAME = \"AWS_SDK_UA_APP_ID\";\nexports.UA_APP_ID_INI_NAME = \"sdk-ua-app-id\";\nconst defaultUserAgent = ({ serviceId, clientVersion }) => {\n    const sections = [\n        [\"aws-sdk-js\", clientVersion],\n        [`os/${os_1.platform()}`, os_1.release()],\n        [\"lang/js\"],\n        [\"md/nodejs\", `${process_1.versions.node}`],\n    ];\n    const crtAvailable = is_crt_available_1.isCrtAvailable();\n    if (crtAvailable) {\n        sections.push(crtAvailable);\n    }\n    if (serviceId) {\n        sections.push([`api/${serviceId}`, clientVersion]);\n    }\n    if (process_1.env.AWS_EXECUTION_ENV) {\n        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);\n    }\n    const appIdPromise = node_config_provider_1.loadConfig({\n        environmentVariableSelector: (env) => env[exports.UA_APP_ID_ENV_NAME],\n        configFileSelector: (profile) => profile[exports.UA_APP_ID_INI_NAME],\n        default: undefined,\n    })();\n    let resolvedUserAgent = undefined;\n    return async () => {\n        if (!resolvedUserAgent) {\n            const appId = await appIdPromise;\n            resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];\n        }\n        return resolvedUserAgent;\n    };\n};\nexports.defaultUserAgent = defaultUserAgent;\n",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toUtf8 = exports.fromUtf8 = void 0;\nconst pureJs_1 = require(\"./pureJs\");\nconst whatwgEncodingApi_1 = require(\"./whatwgEncodingApi\");\nconst fromUtf8 = (input) => typeof TextEncoder === \"function\" ? whatwgEncodingApi_1.fromUtf8(input) : pureJs_1.fromUtf8(input);\nexports.fromUtf8 = fromUtf8;\nconst toUtf8 = (input) => typeof TextDecoder === \"function\" ? whatwgEncodingApi_1.toUtf8(input) : pureJs_1.toUtf8(input);\nexports.toUtf8 = toUtf8;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toUtf8 = exports.fromUtf8 = void 0;\nconst fromUtf8 = (input) => {\n    const bytes = [];\n    for (let i = 0, len = input.length; i < len; i++) {\n        const value = input.charCodeAt(i);\n        if (value < 0x80) {\n            bytes.push(value);\n        }\n        else if (value < 0x800) {\n            bytes.push((value >> 6) | 0b11000000, (value & 0b111111) | 0b10000000);\n        }\n        else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n            const surrogatePair = 0x10000 + ((value & 0b1111111111) << 10) + (input.charCodeAt(++i) & 0b1111111111);\n            bytes.push((surrogatePair >> 18) | 0b11110000, ((surrogatePair >> 12) & 0b111111) | 0b10000000, ((surrogatePair >> 6) & 0b111111) | 0b10000000, (surrogatePair & 0b111111) | 0b10000000);\n        }\n        else {\n            bytes.push((value >> 12) | 0b11100000, ((value >> 6) & 0b111111) | 0b10000000, (value & 0b111111) | 0b10000000);\n        }\n    }\n    return Uint8Array.from(bytes);\n};\nexports.fromUtf8 = fromUtf8;\nconst toUtf8 = (input) => {\n    let decoded = \"\";\n    for (let i = 0, len = input.length; i < len; i++) {\n        const byte = input[i];\n        if (byte < 0x80) {\n            decoded += String.fromCharCode(byte);\n        }\n        else if (0b11000000 <= byte && byte < 0b11100000) {\n            const nextByte = input[++i];\n            decoded += String.fromCharCode(((byte & 0b11111) << 6) | (nextByte & 0b111111));\n        }\n        else if (0b11110000 <= byte && byte < 0b101101101) {\n            const surrogatePair = [byte, input[++i], input[++i], input[++i]];\n            const encoded = \"%\" + surrogatePair.map((byteValue) => byteValue.toString(16)).join(\"%\");\n            decoded += decodeURIComponent(encoded);\n        }\n        else {\n            decoded += String.fromCharCode(((byte & 0b1111) << 12) | ((input[++i] & 0b111111) << 6) | (input[++i] & 0b111111));\n        }\n    }\n    return decoded;\n};\nexports.toUtf8 = toUtf8;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toUtf8 = exports.fromUtf8 = void 0;\nfunction fromUtf8(input) {\n    return new TextEncoder().encode(input);\n}\nexports.fromUtf8 = fromUtf8;\nfunction toUtf8(input) {\n    return new TextDecoder(\"utf-8\").decode(input);\n}\nexports.toUtf8 = toUtf8;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toUtf8 = exports.fromUtf8 = void 0;\nconst util_buffer_from_1 = require(\"@aws-sdk/util-buffer-from\");\nconst fromUtf8 = (input) => {\n    const buf = util_buffer_from_1.fromString(input, \"utf8\");\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n};\nexports.fromUtf8 = fromUtf8;\nconst toUtf8 = (input) => util_buffer_from_1.fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString(\"utf8\");\nexports.toUtf8 = toUtf8;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createWaiter = void 0;\nconst poller_1 = require(\"./poller\");\nconst utils_1 = require(\"./utils\");\nconst waiter_1 = require(\"./waiter\");\nconst abortTimeout = async (abortSignal) => {\n    return new Promise((resolve) => {\n        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });\n    });\n};\nconst createWaiter = async (options, input, acceptorChecks) => {\n    const params = {\n        ...waiter_1.waiterServiceDefaults,\n        ...options,\n    };\n    utils_1.validateWaiterOptions(params);\n    const exitConditions = [poller_1.runPolling(params, input, acceptorChecks)];\n    if (options.abortController) {\n        exitConditions.push(abortTimeout(options.abortController.signal));\n    }\n    if (options.abortSignal) {\n        exitConditions.push(abortTimeout(options.abortSignal));\n    }\n    return Promise.race(exitConditions);\n};\nexports.createWaiter = createWaiter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./createWaiter\"), exports);\ntslib_1.__exportStar(require(\"./waiter\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.runPolling = void 0;\nconst sleep_1 = require(\"./utils/sleep\");\nconst waiter_1 = require(\"./waiter\");\nconst exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {\n    if (attempt > attemptCeiling)\n        return maxDelay;\n    const delay = minDelay * 2 ** (attempt - 1);\n    return randomInRange(minDelay, delay);\n};\nconst randomInRange = (min, max) => min + Math.random() * (max - min);\nconst runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {\n    var _a;\n    const { state } = await acceptorChecks(client, input);\n    if (state !== waiter_1.WaiterState.RETRY) {\n        return { state };\n    }\n    let currentAttempt = 1;\n    const waitUntil = Date.now() + maxWaitTime * 1000;\n    const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;\n    while (true) {\n        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {\n            return { state: waiter_1.WaiterState.ABORTED };\n        }\n        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);\n        if (Date.now() + delay * 1000 > waitUntil) {\n            return { state: waiter_1.WaiterState.TIMEOUT };\n        }\n        await sleep_1.sleep(delay);\n        const { state } = await acceptorChecks(client, input);\n        if (state !== waiter_1.WaiterState.RETRY) {\n            return { state };\n        }\n        currentAttempt += 1;\n    }\n};\nexports.runPolling = runPolling;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./sleep\"), exports);\ntslib_1.__exportStar(require(\"./validate\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sleep = void 0;\nconst sleep = (seconds) => {\n    return new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n};\nexports.sleep = sleep;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateWaiterOptions = void 0;\nconst validateWaiterOptions = (options) => {\n    if (options.maxWaitTime < 1) {\n        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);\n    }\n    else if (options.minDelay < 1) {\n        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);\n    }\n    else if (options.maxDelay < 1) {\n        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);\n    }\n    else if (options.maxWaitTime <= options.minDelay) {\n        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);\n    }\n    else if (options.maxDelay < options.minDelay) {\n        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);\n    }\n};\nexports.validateWaiterOptions = validateWaiterOptions;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkExceptions = exports.WaiterState = exports.waiterServiceDefaults = void 0;\nexports.waiterServiceDefaults = {\n    minDelay: 2,\n    maxDelay: 120,\n};\nvar WaiterState;\n(function (WaiterState) {\n    WaiterState[\"ABORTED\"] = \"ABORTED\";\n    WaiterState[\"FAILURE\"] = \"FAILURE\";\n    WaiterState[\"SUCCESS\"] = \"SUCCESS\";\n    WaiterState[\"RETRY\"] = \"RETRY\";\n    WaiterState[\"TIMEOUT\"] = \"TIMEOUT\";\n})(WaiterState = exports.WaiterState || (exports.WaiterState = {}));\nconst checkExceptions = (result) => {\n    if (result.state === WaiterState.ABORTED) {\n        const abortError = new Error(`${JSON.stringify({\n            ...result,\n            reason: \"Request was aborted\",\n        })}`);\n        abortError.name = \"AbortError\";\n        throw abortError;\n    }\n    else if (result.state === WaiterState.TIMEOUT) {\n        const timeoutError = new Error(`${JSON.stringify({\n            ...result,\n            reason: \"Waiter has timed out\",\n        })}`);\n        timeoutError.name = \"TimeoutError\";\n        throw timeoutError;\n    }\n    else if (result.state !== WaiterState.SUCCESS) {\n        throw new Error(`${JSON.stringify({ result })}`);\n    }\n    return result;\n};\nexports.checkExceptions = checkExceptions;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.XmlNode = void 0;\nconst escape_attribute_1 = require(\"./escape-attribute\");\nclass XmlNode {\n    constructor(name, children = []) {\n        this.name = name;\n        this.children = children;\n        this.attributes = {};\n    }\n    withName(name) {\n        this.name = name;\n        return this;\n    }\n    addAttribute(name, value) {\n        this.attributes[name] = value;\n        return this;\n    }\n    addChildNode(child) {\n        this.children.push(child);\n        return this;\n    }\n    removeAttribute(name) {\n        delete this.attributes[name];\n        return this;\n    }\n    toString() {\n        const hasChildren = Boolean(this.children.length);\n        let xmlText = `<${this.name}`;\n        const attributes = this.attributes;\n        for (const attributeName of Object.keys(attributes)) {\n            const attribute = attributes[attributeName];\n            if (typeof attribute !== \"undefined\" && attribute !== null) {\n                xmlText += ` ${attributeName}=\"${escape_attribute_1.escapeAttribute(\"\" + attribute)}\"`;\n            }\n        }\n        return (xmlText += !hasChildren ? \"/>\" : `>${this.children.map((c) => c.toString()).join(\"\")}</${this.name}>`);\n    }\n}\nexports.XmlNode = XmlNode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.XmlText = void 0;\nconst escape_element_1 = require(\"./escape-element\");\nclass XmlText {\n    constructor(value) {\n        this.value = value;\n    }\n    toString() {\n        return escape_element_1.escapeElement(\"\" + this.value);\n    }\n}\nexports.XmlText = XmlText;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escapeAttribute = void 0;\nfunction escapeAttribute(value) {\n    return value.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\");\n}\nexports.escapeAttribute = escapeAttribute;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escapeElement = void 0;\nfunction escapeElement(value) {\n    return value\n        .replace(/&/g, \"&amp;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&apos;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\\r/g, \"&#x0D;\")\n        .replace(/\\n/g, \"&#x0A;\")\n        .replace(/\\u0085/g, \"&#x85;\")\n        .replace(/\\u2028/, \"&#x2028;\");\n}\nexports.escapeElement = escapeElement;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./XmlNode\"), exports);\ntslib_1.__exportStar(require(\"./XmlText\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;\nconst fs = require(\"fs\");\nexports.FILE_SYSTEM_ADAPTER = {\n    lstat: fs.lstat,\n    stat: fs.stat,\n    lstatSync: fs.lstatSync,\n    statSync: fs.statSync,\n    readdir: fs.readdir,\n    readdirSync: fs.readdirSync\n};\nfunction createFileSystemAdapter(fsMethods) {\n    if (fsMethods === undefined) {\n        return exports.FILE_SYSTEM_ADAPTER;\n    }\n    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);\n}\nexports.createFileSystemAdapter = createFileSystemAdapter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;\nconst NODE_PROCESS_VERSION_PARTS = process.versions.node.split('.');\nif (NODE_PROCESS_VERSION_PARTS[0] === undefined || NODE_PROCESS_VERSION_PARTS[1] === undefined) {\n    throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);\n}\nconst MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);\nconst MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);\nconst SUPPORTED_MAJOR_VERSION = 10;\nconst SUPPORTED_MINOR_VERSION = 10;\nconst IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;\nconst IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;\n/**\n * IS `true` for Node.js 10.10 and greater.\n */\nexports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Settings = exports.scandirSync = exports.scandir = void 0;\nconst async = require(\"./providers/async\");\nconst sync = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nexports.Settings = settings_1.default;\nfunction scandir(path, optionsOrSettingsOrCallback, callback) {\n    if (typeof optionsOrSettingsOrCallback === 'function') {\n        async.read(path, getSettings(), optionsOrSettingsOrCallback);\n        return;\n    }\n    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);\n}\nexports.scandir = scandir;\nfunction scandirSync(path, optionsOrSettings) {\n    const settings = getSettings(optionsOrSettings);\n    return sync.read(path, settings);\n}\nexports.scandirSync = scandirSync;\nfunction getSettings(settingsOrOptions = {}) {\n    if (settingsOrOptions instanceof settings_1.default) {\n        return settingsOrOptions;\n    }\n    return new settings_1.default(settingsOrOptions);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst rpl = require(\"run-parallel\");\nconst constants_1 = require(\"../constants\");\nconst utils = require(\"../utils\");\nconst common = require(\"./common\");\nfunction read(directory, settings, callback) {\n    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n        readdirWithFileTypes(directory, settings, callback);\n        return;\n    }\n    readdir(directory, settings, callback);\n}\nexports.read = read;\nfunction readdirWithFileTypes(directory, settings, callback) {\n    settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {\n        if (readdirError !== null) {\n            callFailureCallback(callback, readdirError);\n            return;\n        }\n        const entries = dirents.map((dirent) => ({\n            dirent,\n            name: dirent.name,\n            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n        }));\n        if (!settings.followSymbolicLinks) {\n            callSuccessCallback(callback, entries);\n            return;\n        }\n        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));\n        rpl(tasks, (rplError, rplEntries) => {\n            if (rplError !== null) {\n                callFailureCallback(callback, rplError);\n                return;\n            }\n            callSuccessCallback(callback, rplEntries);\n        });\n    });\n}\nexports.readdirWithFileTypes = readdirWithFileTypes;\nfunction makeRplTaskEntry(entry, settings) {\n    return (done) => {\n        if (!entry.dirent.isSymbolicLink()) {\n            done(null, entry);\n            return;\n        }\n        settings.fs.stat(entry.path, (statError, stats) => {\n            if (statError !== null) {\n                if (settings.throwErrorOnBrokenSymbolicLink) {\n                    done(statError);\n                    return;\n                }\n                done(null, entry);\n                return;\n            }\n            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n            done(null, entry);\n        });\n    };\n}\nfunction readdir(directory, settings, callback) {\n    settings.fs.readdir(directory, (readdirError, names) => {\n        if (readdirError !== null) {\n            callFailureCallback(callback, readdirError);\n            return;\n        }\n        const tasks = names.map((name) => {\n            const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n            return (done) => {\n                fsStat.stat(path, settings.fsStatSettings, (error, stats) => {\n                    if (error !== null) {\n                        done(error);\n                        return;\n                    }\n                    const entry = {\n                        name,\n                        path,\n                        dirent: utils.fs.createDirentFromStats(name, stats)\n                    };\n                    if (settings.stats) {\n                        entry.stats = stats;\n                    }\n                    done(null, entry);\n                });\n            };\n        });\n        rpl(tasks, (rplError, entries) => {\n            if (rplError !== null) {\n                callFailureCallback(callback, rplError);\n                return;\n            }\n            callSuccessCallback(callback, entries);\n        });\n    });\n}\nexports.readdir = readdir;\nfunction callFailureCallback(callback, error) {\n    callback(error);\n}\nfunction callSuccessCallback(callback, result) {\n    callback(null, result);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.joinPathSegments = void 0;\nfunction joinPathSegments(a, b, separator) {\n    /**\n     * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).\n     */\n    if (a.endsWith(separator)) {\n        return a + b;\n    }\n    return a + separator + b;\n}\nexports.joinPathSegments = joinPathSegments;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readdir = exports.readdirWithFileTypes = exports.read = void 0;\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst constants_1 = require(\"../constants\");\nconst utils = require(\"../utils\");\nconst common = require(\"./common\");\nfunction read(directory, settings) {\n    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {\n        return readdirWithFileTypes(directory, settings);\n    }\n    return readdir(directory, settings);\n}\nexports.read = read;\nfunction readdirWithFileTypes(directory, settings) {\n    const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });\n    return dirents.map((dirent) => {\n        const entry = {\n            dirent,\n            name: dirent.name,\n            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)\n        };\n        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {\n            try {\n                const stats = settings.fs.statSync(entry.path);\n                entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);\n            }\n            catch (error) {\n                if (settings.throwErrorOnBrokenSymbolicLink) {\n                    throw error;\n                }\n            }\n        }\n        return entry;\n    });\n}\nexports.readdirWithFileTypes = readdirWithFileTypes;\nfunction readdir(directory, settings) {\n    const names = settings.fs.readdirSync(directory);\n    return names.map((name) => {\n        const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);\n        const stats = fsStat.statSync(entryPath, settings.fsStatSettings);\n        const entry = {\n            name,\n            path: entryPath,\n            dirent: utils.fs.createDirentFromStats(name, stats)\n        };\n        if (settings.stats) {\n            entry.stats = stats;\n        }\n        return entry;\n    });\n}\nexports.readdir = readdir;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst fs = require(\"./adapters/fs\");\nclass Settings {\n    constructor(_options = {}) {\n        this._options = _options;\n        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);\n        this.fs = fs.createFileSystemAdapter(this._options.fs);\n        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);\n        this.stats = this._getValue(this._options.stats, false);\n        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);\n        this.fsStatSettings = new fsStat.Settings({\n            followSymbolicLink: this.followSymbolicLinks,\n            fs: this.fs,\n            throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink\n        });\n    }\n    _getValue(option, value) {\n        return option !== null && option !== void 0 ? option : value;\n    }\n}\nexports.default = Settings;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDirentFromStats = void 0;\nclass DirentFromStats {\n    constructor(name, stats) {\n        this.name = name;\n        this.isBlockDevice = stats.isBlockDevice.bind(stats);\n        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);\n        this.isDirectory = stats.isDirectory.bind(stats);\n        this.isFIFO = stats.isFIFO.bind(stats);\n        this.isFile = stats.isFile.bind(stats);\n        this.isSocket = stats.isSocket.bind(stats);\n        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);\n    }\n}\nfunction createDirentFromStats(name, stats) {\n    return new DirentFromStats(name, stats);\n}\nexports.createDirentFromStats = createDirentFromStats;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fs = void 0;\nconst fs = require(\"./fs\");\nexports.fs = fs;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;\nconst fs = require(\"fs\");\nexports.FILE_SYSTEM_ADAPTER = {\n    lstat: fs.lstat,\n    stat: fs.stat,\n    lstatSync: fs.lstatSync,\n    statSync: fs.statSync\n};\nfunction createFileSystemAdapter(fsMethods) {\n    if (fsMethods === undefined) {\n        return exports.FILE_SYSTEM_ADAPTER;\n    }\n    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);\n}\nexports.createFileSystemAdapter = createFileSystemAdapter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.statSync = exports.stat = exports.Settings = void 0;\nconst async = require(\"./providers/async\");\nconst sync = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nexports.Settings = settings_1.default;\nfunction stat(path, optionsOrSettingsOrCallback, callback) {\n    if (typeof optionsOrSettingsOrCallback === 'function') {\n        async.read(path, getSettings(), optionsOrSettingsOrCallback);\n        return;\n    }\n    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);\n}\nexports.stat = stat;\nfunction statSync(path, optionsOrSettings) {\n    const settings = getSettings(optionsOrSettings);\n    return sync.read(path, settings);\n}\nexports.statSync = statSync;\nfunction getSettings(settingsOrOptions = {}) {\n    if (settingsOrOptions instanceof settings_1.default) {\n        return settingsOrOptions;\n    }\n    return new settings_1.default(settingsOrOptions);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.read = void 0;\nfunction read(path, settings, callback) {\n    settings.fs.lstat(path, (lstatError, lstat) => {\n        if (lstatError !== null) {\n            callFailureCallback(callback, lstatError);\n            return;\n        }\n        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {\n            callSuccessCallback(callback, lstat);\n            return;\n        }\n        settings.fs.stat(path, (statError, stat) => {\n            if (statError !== null) {\n                if (settings.throwErrorOnBrokenSymbolicLink) {\n                    callFailureCallback(callback, statError);\n                    return;\n                }\n                callSuccessCallback(callback, lstat);\n                return;\n            }\n            if (settings.markSymbolicLink) {\n                stat.isSymbolicLink = () => true;\n            }\n            callSuccessCallback(callback, stat);\n        });\n    });\n}\nexports.read = read;\nfunction callFailureCallback(callback, error) {\n    callback(error);\n}\nfunction callSuccessCallback(callback, result) {\n    callback(null, result);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.read = void 0;\nfunction read(path, settings) {\n    const lstat = settings.fs.lstatSync(path);\n    if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {\n        return lstat;\n    }\n    try {\n        const stat = settings.fs.statSync(path);\n        if (settings.markSymbolicLink) {\n            stat.isSymbolicLink = () => true;\n        }\n        return stat;\n    }\n    catch (error) {\n        if (!settings.throwErrorOnBrokenSymbolicLink) {\n            return lstat;\n        }\n        throw error;\n    }\n}\nexports.read = read;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"./adapters/fs\");\nclass Settings {\n    constructor(_options = {}) {\n        this._options = _options;\n        this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);\n        this.fs = fs.createFileSystemAdapter(this._options.fs);\n        this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);\n        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);\n    }\n    _getValue(option, value) {\n        return option !== null && option !== void 0 ? option : value;\n    }\n}\nexports.default = Settings;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Settings = exports.walkStream = exports.walkSync = exports.walk = void 0;\nconst async_1 = require(\"./providers/async\");\nconst stream_1 = require(\"./providers/stream\");\nconst sync_1 = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nexports.Settings = settings_1.default;\nfunction walk(directory, optionsOrSettingsOrCallback, callback) {\n    if (typeof optionsOrSettingsOrCallback === 'function') {\n        new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);\n        return;\n    }\n    new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);\n}\nexports.walk = walk;\nfunction walkSync(directory, optionsOrSettings) {\n    const settings = getSettings(optionsOrSettings);\n    const provider = new sync_1.default(directory, settings);\n    return provider.read();\n}\nexports.walkSync = walkSync;\nfunction walkStream(directory, optionsOrSettings) {\n    const settings = getSettings(optionsOrSettings);\n    const provider = new stream_1.default(directory, settings);\n    return provider.read();\n}\nexports.walkStream = walkStream;\nfunction getSettings(settingsOrOptions = {}) {\n    if (settingsOrOptions instanceof settings_1.default) {\n        return settingsOrOptions;\n    }\n    return new settings_1.default(settingsOrOptions);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst async_1 = require(\"../readers/async\");\nclass AsyncProvider {\n    constructor(_root, _settings) {\n        this._root = _root;\n        this._settings = _settings;\n        this._reader = new async_1.default(this._root, this._settings);\n        this._storage = [];\n    }\n    read(callback) {\n        this._reader.onError((error) => {\n            callFailureCallback(callback, error);\n        });\n        this._reader.onEntry((entry) => {\n            this._storage.push(entry);\n        });\n        this._reader.onEnd(() => {\n            callSuccessCallback(callback, this._storage);\n        });\n        this._reader.read();\n    }\n}\nexports.default = AsyncProvider;\nfunction callFailureCallback(callback, error) {\n    callback(error);\n}\nfunction callSuccessCallback(callback, entries) {\n    callback(null, entries);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"stream\");\nconst async_1 = require(\"../readers/async\");\nclass StreamProvider {\n    constructor(_root, _settings) {\n        this._root = _root;\n        this._settings = _settings;\n        this._reader = new async_1.default(this._root, this._settings);\n        this._stream = new stream_1.Readable({\n            objectMode: true,\n            read: () => { },\n            destroy: () => {\n                if (!this._reader.isDestroyed) {\n                    this._reader.destroy();\n                }\n            }\n        });\n    }\n    read() {\n        this._reader.onError((error) => {\n            this._stream.emit('error', error);\n        });\n        this._reader.onEntry((entry) => {\n            this._stream.push(entry);\n        });\n        this._reader.onEnd(() => {\n            this._stream.push(null);\n        });\n        this._reader.read();\n        return this._stream;\n    }\n}\nexports.default = StreamProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sync_1 = require(\"../readers/sync\");\nclass SyncProvider {\n    constructor(_root, _settings) {\n        this._root = _root;\n        this._settings = _settings;\n        this._reader = new sync_1.default(this._root, this._settings);\n    }\n    read() {\n        return this._reader.read();\n    }\n}\nexports.default = SyncProvider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst fsScandir = require(\"@nodelib/fs.scandir\");\nconst fastq = require(\"fastq\");\nconst common = require(\"./common\");\nconst reader_1 = require(\"./reader\");\nclass AsyncReader extends reader_1.default {\n    constructor(_root, _settings) {\n        super(_root, _settings);\n        this._settings = _settings;\n        this._scandir = fsScandir.scandir;\n        this._emitter = new events_1.EventEmitter();\n        this._queue = fastq(this._worker.bind(this), this._settings.concurrency);\n        this._isFatalError = false;\n        this._isDestroyed = false;\n        this._queue.drain = () => {\n            if (!this._isFatalError) {\n                this._emitter.emit('end');\n            }\n        };\n    }\n    read() {\n        this._isFatalError = false;\n        this._isDestroyed = false;\n        setImmediate(() => {\n            this._pushToQueue(this._root, this._settings.basePath);\n        });\n        return this._emitter;\n    }\n    get isDestroyed() {\n        return this._isDestroyed;\n    }\n    destroy() {\n        if (this._isDestroyed) {\n            throw new Error('The reader is already destroyed');\n        }\n        this._isDestroyed = true;\n        this._queue.killAndDrain();\n    }\n    onEntry(callback) {\n        this._emitter.on('entry', callback);\n    }\n    onError(callback) {\n        this._emitter.once('error', callback);\n    }\n    onEnd(callback) {\n        this._emitter.once('end', callback);\n    }\n    _pushToQueue(directory, base) {\n        const queueItem = { directory, base };\n        this._queue.push(queueItem, (error) => {\n            if (error !== null) {\n                this._handleError(error);\n            }\n        });\n    }\n    _worker(item, done) {\n        this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {\n            if (error !== null) {\n                done(error, undefined);\n                return;\n            }\n            for (const entry of entries) {\n                this._handleEntry(entry, item.base);\n            }\n            done(null, undefined);\n        });\n    }\n    _handleError(error) {\n        if (this._isDestroyed || !common.isFatalError(this._settings, error)) {\n            return;\n        }\n        this._isFatalError = true;\n        this._isDestroyed = true;\n        this._emitter.emit('error', error);\n    }\n    _handleEntry(entry, base) {\n        if (this._isDestroyed || this._isFatalError) {\n            return;\n        }\n        const fullpath = entry.path;\n        if (base !== undefined) {\n            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\n        }\n        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\n            this._emitEntry(entry);\n        }\n        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\n            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);\n        }\n    }\n    _emitEntry(entry) {\n        this._emitter.emit('entry', entry);\n    }\n}\nexports.default = AsyncReader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.joinPathSegments = exports.replacePathSegmentSeparator = exports.isAppliedFilter = exports.isFatalError = void 0;\nfunction isFatalError(settings, error) {\n    if (settings.errorFilter === null) {\n        return true;\n    }\n    return !settings.errorFilter(error);\n}\nexports.isFatalError = isFatalError;\nfunction isAppliedFilter(filter, value) {\n    return filter === null || filter(value);\n}\nexports.isAppliedFilter = isAppliedFilter;\nfunction replacePathSegmentSeparator(filepath, separator) {\n    return filepath.split(/[/\\\\]/).join(separator);\n}\nexports.replacePathSegmentSeparator = replacePathSegmentSeparator;\nfunction joinPathSegments(a, b, separator) {\n    if (a === '') {\n        return b;\n    }\n    /**\n     * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).\n     */\n    if (a.endsWith(separator)) {\n        return a + b;\n    }\n    return a + separator + b;\n}\nexports.joinPathSegments = joinPathSegments;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common = require(\"./common\");\nclass Reader {\n    constructor(_root, _settings) {\n        this._root = _root;\n        this._settings = _settings;\n        this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);\n    }\n}\nexports.default = Reader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fsScandir = require(\"@nodelib/fs.scandir\");\nconst common = require(\"./common\");\nconst reader_1 = require(\"./reader\");\nclass SyncReader extends reader_1.default {\n    constructor() {\n        super(...arguments);\n        this._scandir = fsScandir.scandirSync;\n        this._storage = [];\n        this._queue = new Set();\n    }\n    read() {\n        this._pushToQueue(this._root, this._settings.basePath);\n        this._handleQueue();\n        return this._storage;\n    }\n    _pushToQueue(directory, base) {\n        this._queue.add({ directory, base });\n    }\n    _handleQueue() {\n        for (const item of this._queue.values()) {\n            this._handleDirectory(item.directory, item.base);\n        }\n    }\n    _handleDirectory(directory, base) {\n        try {\n            const entries = this._scandir(directory, this._settings.fsScandirSettings);\n            for (const entry of entries) {\n                this._handleEntry(entry, base);\n            }\n        }\n        catch (error) {\n            this._handleError(error);\n        }\n    }\n    _handleError(error) {\n        if (!common.isFatalError(this._settings, error)) {\n            return;\n        }\n        throw error;\n    }\n    _handleEntry(entry, base) {\n        const fullpath = entry.path;\n        if (base !== undefined) {\n            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);\n        }\n        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {\n            this._pushToStorage(entry);\n        }\n        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {\n            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);\n        }\n    }\n    _pushToStorage(entry) {\n        this._storage.push(entry);\n    }\n}\nexports.default = SyncReader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst fsScandir = require(\"@nodelib/fs.scandir\");\nclass Settings {\n    constructor(_options = {}) {\n        this._options = _options;\n        this.basePath = this._getValue(this._options.basePath, undefined);\n        this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);\n        this.deepFilter = this._getValue(this._options.deepFilter, null);\n        this.entryFilter = this._getValue(this._options.entryFilter, null);\n        this.errorFilter = this._getValue(this._options.errorFilter, null);\n        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);\n        this.fsScandirSettings = new fsScandir.Settings({\n            followSymbolicLinks: this._options.followSymbolicLinks,\n            fs: this._options.fs,\n            pathSegmentSeparator: this._options.pathSegmentSeparator,\n            stats: this._options.stats,\n            throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink\n        });\n    }\n    _getValue(option, value) {\n        return option !== null && option !== void 0 ? option : value;\n    }\n}\nexports.default = Settings;\n","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BufferedEventEmitter = void 0;\n/**\n * @packageDocumentation\n * @module crt\n */\nconst events_1 = require(\"events\");\n/**\n * @internal\n */\nclass BufferedEvent {\n    constructor(event, args) {\n        this.event = event;\n        this.args = args;\n    }\n}\n/**\n * Provides buffered event emitting semantics, similar to many Node-style streams.\n * Subclasses will override {@link BufferedEventEmitter.on} and trigger uncorking.\n * NOTE: It is HIGHLY recommended that uncorking should always be done via\n * ```process.nextTick()```, not during the {@link BufferedEventEmitter.on} call.\n *\n * See also: [Node writable streams](https://nodejs.org/api/stream.html#stream_writable_cork)\n *\n * @category Events\n */\nclass BufferedEventEmitter extends events_1.EventEmitter {\n    constructor() {\n        super();\n        this.corked = false;\n    }\n    /**\n     * Forces all written events to be buffered in memory. The buffered data will be\n     * flushed when {@link BufferedEventEmitter.uncork} is called.\n     */\n    cork() {\n        this.corked = true;\n    }\n    /**\n     * Flushes all data buffered since {@link BufferedEventEmitter.cork} was called.\n     *\n     * NOTE: It is HIGHLY recommended that uncorking should always be done via\n     * ``` process.nextTick```, not during the ```EventEmitter.on()``` call.\n     */\n    uncork() {\n        this.corked = false;\n        while (this.eventQueue) {\n            const event = this.eventQueue;\n            super.emit(event.event, ...event.args);\n            this.eventQueue = this.eventQueue.next;\n        }\n    }\n    /**\n     * Synchronously calls each of the listeners registered for the event key supplied\n     * in registration order. If the {@link BufferedEventEmitter} is currently corked,\n     * the event will be buffered until {@link BufferedEventEmitter.uncork} is called.\n     * @param event The name of the event\n     * @param args Event payload\n     */\n    emit(event, ...args) {\n        if (this.corked) {\n            // queue requests in order\n            let last = this.lastQueuedEvent;\n            this.lastQueuedEvent = new BufferedEvent(event, args);\n            if (last) {\n                last.next = this.lastQueuedEvent;\n            }\n            else {\n                this.eventQueue = this.lastQueuedEvent;\n            }\n            return this.listeners(event).length > 0;\n        }\n        return super.emit(event, ...args);\n    }\n}\nexports.BufferedEventEmitter = BufferedEventEmitter;\n//# sourceMappingURL=event.js.map","\"use strict\";\n/*\n *\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommonHttpProxyOptions = exports.HttpProxyAuthenticationType = exports.HttpVersion = void 0;\n/**\n *\n * A module containing support for creating http connections and making requests on them.\n *\n * @packageDocumentation\n * @module http\n * @preferred\n */\n/**\n * HTTP protocol version\n *\n * @category HTTP\n */\nvar HttpVersion;\n(function (HttpVersion) {\n    HttpVersion[HttpVersion[\"Unknown\"] = 0] = \"Unknown\";\n    /** HTTP/1.0 */\n    HttpVersion[HttpVersion[\"Http1_0\"] = 1] = \"Http1_0\";\n    /** HTTP/1.1 */\n    HttpVersion[HttpVersion[\"Http1_1\"] = 2] = \"Http1_1\";\n    /** HTTP/2 */\n    HttpVersion[HttpVersion[\"Http2\"] = 3] = \"Http2\";\n})(HttpVersion = exports.HttpVersion || (exports.HttpVersion = {}));\n/**\n * Proxy authentication types\n *\n * @category HTTP\n */\nvar HttpProxyAuthenticationType;\n(function (HttpProxyAuthenticationType) {\n    /**\n     * No to-proxy authentication logic\n     */\n    HttpProxyAuthenticationType[HttpProxyAuthenticationType[\"None\"] = 0] = \"None\";\n    /**\n     * Use basic authentication (user/pass).  Supply these values in {@link HttpProxyOptions}\n     */\n    HttpProxyAuthenticationType[HttpProxyAuthenticationType[\"Basic\"] = 1] = \"Basic\";\n})(HttpProxyAuthenticationType = exports.HttpProxyAuthenticationType || (exports.HttpProxyAuthenticationType = {}));\n;\n/**\n * Options used when connecting to an HTTP endpoint via a proxy\n *\n * @category HTTP\n */\nclass CommonHttpProxyOptions {\n    /**\n     *\n     * @param host_name endpoint of the proxy to use\n     * @param port port of proxy to use\n     * @param auth_method type of authentication to use with the proxy\n     * @param auth_username (basic authentication only) proxy username\n     * @param auth_password (basic authentication only) password associated with the username\n     */\n    constructor(host_name, port, auth_method = HttpProxyAuthenticationType.None, auth_username, auth_password) {\n        this.host_name = host_name;\n        this.port = port;\n        this.auth_method = auth_method;\n        this.auth_username = auth_username;\n        this.auth_password = auth_password;\n    }\n}\nexports.CommonHttpProxyOptions = CommonHttpProxyOptions;\n//# sourceMappingURL=http.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SocketDomain = exports.SocketType = exports.TlsVersion = void 0;\n/**\n *\n * A module containing a grab bag of support for core network I/O functionality, including sockets, TLS, DNS, logging,\n * error handling, streams, and connection -> thread mapping.\n *\n * Categories include:\n * - Network: socket configuration\n * - TLS: tls configuration\n * - Logging: logging controls and configuration\n * - IO: everything else\n *\n * @packageDocumentation\n * @module IO\n * @preferred\n */\n/**\n * TLS Version\n *\n * @category TLS\n */\nvar TlsVersion;\n(function (TlsVersion) {\n    TlsVersion[TlsVersion[\"SSLv3\"] = 0] = \"SSLv3\";\n    TlsVersion[TlsVersion[\"TLSv1\"] = 1] = \"TLSv1\";\n    TlsVersion[TlsVersion[\"TLSv1_1\"] = 2] = \"TLSv1_1\";\n    TlsVersion[TlsVersion[\"TLSv1_2\"] = 3] = \"TLSv1_2\";\n    TlsVersion[TlsVersion[\"TLSv1_3\"] = 4] = \"TLSv1_3\";\n    TlsVersion[TlsVersion[\"Default\"] = 128] = \"Default\";\n})(TlsVersion = exports.TlsVersion || (exports.TlsVersion = {}));\n/**\n * @category Network\n */\nvar SocketType;\n(function (SocketType) {\n    /**\n     * A streaming socket sends reliable messages over a two-way connection.\n     * This means TCP when used with {@link SocketDomain.IPV4}/{@link SocketDomain.IPV6},\n     * and Unix domain sockets when used with {@link SocketDomain.LOCAL }\n      */\n    SocketType[SocketType[\"STREAM\"] = 0] = \"STREAM\";\n    /**\n     * A datagram socket is connectionless and sends unreliable messages.\n     * This means UDP when used with {@link SocketDomain.IPV4}/{@link SocketDomain.IPV6}.\n     * {@link SocketDomain.LOCAL} is not compatible with {@link DGRAM}\n     */\n    SocketType[SocketType[\"DGRAM\"] = 1] = \"DGRAM\";\n})(SocketType = exports.SocketType || (exports.SocketType = {}));\n/**\n * @category Network\n */\nvar SocketDomain;\n(function (SocketDomain) {\n    /** IPv4 sockets */\n    SocketDomain[SocketDomain[\"IPV4\"] = 0] = \"IPV4\";\n    /** IPv6 sockets */\n    SocketDomain[SocketDomain[\"IPV6\"] = 1] = \"IPV6\";\n    /** UNIX domain socket/Windows named pipes */\n    SocketDomain[SocketDomain[\"LOCAL\"] = 2] = \"LOCAL\";\n})(SocketDomain = exports.SocketDomain || (exports.SocketDomain = {}));\n//# sourceMappingURL=io.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MqttWill = exports.QoS = void 0;\n/**\n * Quality of service control for mqtt publish operations\n *\n * @category MQTT\n */\nvar QoS;\n(function (QoS) {\n    /**\n     * QoS 0 - At most once delivery\n     * The message is delivered according to the capabilities of the underlying network.\n     * No response is sent by the receiver and no retry is performed by the sender.\n     * The message arrives at the receiver either once or not at all.\n     */\n    QoS[QoS[\"AtMostOnce\"] = 0] = \"AtMostOnce\";\n    /**\n     * QoS 1 - At least once delivery\n     * This quality of service ensures that the message arrives at the receiver at least once.\n     */\n    QoS[QoS[\"AtLeastOnce\"] = 1] = \"AtLeastOnce\";\n    /**\n     * QoS 2 - Exactly once delivery\n\n     * This is the highest quality of service, for use when neither loss nor\n     * duplication of messages are acceptable. There is an increased overhead\n     * associated with this quality of service.\n\n     * Note that, while this client supports QoS 2, the AWS IoT Core service\n     * does not support QoS 2 at time of writing (May 2020).\n     */\n    QoS[QoS[\"ExactlyOnce\"] = 2] = \"ExactlyOnce\";\n})(QoS = exports.QoS || (exports.QoS = {}));\n/**\n * A Will message is published by the server if a client is lost unexpectedly.\n *\n * The Will message is stored on the server when a client connects.\n * It is published if the client connection is lost without the server\n * receiving a DISCONNECT packet.\n *\n * [MQTT - 3.1.2 - 8]\n *\n * @category MQTT\n */\nclass MqttWill {\n    constructor(\n    /** Topic to publish Will message on. */\n    topic, \n    /** QoS used when publishing the Will message. */\n    qos, \n    /** Content of Will message. */\n    payload, \n    /** Whether the Will message is to be retained when it is published. */\n    retain = false) {\n        this.topic = topic;\n        this.qos = qos;\n        this.payload = payload;\n        this.retain = retain;\n    }\n}\nexports.MqttWill = MqttWill;\n//# sourceMappingURL=mqtt.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crt_version = exports.package_info = exports.is_browser = exports.is_nodejs = void 0;\n/**\n *\n * A module containing miscellaneous functionality for error reporting, platform functionality, and package-wide logic.\n *\n * @packageDocumentation\n * @module crt\n * @preferred\n */\n/**\n * Returns true if this script is running under nodejs\n *\n * @category System\n */\nfunction is_nodejs() {\n    return (typeof process === 'object' &&\n        typeof process.versions === 'object' &&\n        typeof process.versions.node !== 'undefined');\n}\nexports.is_nodejs = is_nodejs;\n/**\n * Returns true if this script is running in a browser\n *\n * @category System\n */\nfunction is_browser() {\n    return !is_nodejs();\n}\nexports.is_browser = is_browser;\n/**\n * Returns the package information for aws-crt-nodejs\n *\n * @category System\n */\nfunction package_info() {\n    try {\n        const pkg = require('../../package.json');\n        return pkg;\n    }\n    catch (err) {\n        return {\n            name: 'aws-crt-nodejs',\n            version: 'UNKNOWN'\n        };\n    }\n}\nexports.package_info = package_info;\n/**\n * Returns the AWS CRT version\n *\n * @category System\n */\nfunction crt_version() {\n    const pkg = package_info();\n    return pkg.version;\n}\nexports.crt_version = crt_version;\n//# sourceMappingURL=platform.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.using = void 0;\n/**\n * Use this function to create a resource in an async context. This will make sure the\n * resources are cleaned up before returning.\n *\n * Example:\n * ```\n * await using(res = new SomeResource(), async (res) =>  {\n *     res.do_the_thing();\n * });\n * ```\n *\n * @category System\n */\nfunction using(resource, func) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield func(resource);\n        }\n        finally {\n            resource.close();\n        }\n    });\n}\nexports.using = using;\n//# sourceMappingURL=resource_safety.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CrtError = exports.resource_safety = exports.platform = exports.iot = exports.auth = exports.crypto = exports.http = exports.mqtt = exports.io = exports.crt = void 0;\n/**\n * @packageDocumentation\n * @module crt\n */\n// This is the entry point for the AWS CRT nodejs native libraries\n/* common libs */\nconst platform = __importStar(require(\"./common/platform\"));\nexports.platform = platform;\nconst resource_safety = __importStar(require(\"./common/resource_safety\"));\nexports.resource_safety = resource_safety;\n/* node specific libs */\nconst crt = __importStar(require(\"./native/crt\"));\nexports.crt = crt;\nconst io = __importStar(require(\"./native/io\"));\nexports.io = io;\nconst mqtt = __importStar(require(\"./native/mqtt\"));\nexports.mqtt = mqtt;\nconst http = __importStar(require(\"./native/http\"));\nexports.http = http;\nconst crypto = __importStar(require(\"./native/crypto\"));\nexports.crypto = crypto;\nconst auth = __importStar(require(\"./native/auth\"));\nexports.auth = auth;\nconst iot = __importStar(require(\"./native/aws_iot\"));\nexports.iot = iot;\nconst error_1 = require(\"./native/error\");\nObject.defineProperty(exports, \"CrtError\", { enumerable: true, get: function () { return error_1.CrtError; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.aws_verify_sigv4a_signing = exports.aws_sign_request = exports.AwsCredentialsProvider = exports.AwsSignedBodyHeaderType = exports.AwsSignedBodyValue = exports.AwsSignatureType = exports.AwsSigningAlgorithm = void 0;\n/**\n * Module for AWS Authentication logic - signing http requests, events, chunks, etc...\n *\n * @packageDocumentation\n * @module auth\n * @preferred\n */\nconst binding_1 = __importDefault(require(\"./binding\"));\nconst error_1 = require(\"./error\");\n/**\n * AWS signing algorithm enumeration.\n *\n * @category Auth\n */\nvar AwsSigningAlgorithm;\n(function (AwsSigningAlgorithm) {\n    /** Use the Aws signature version 4 signing process to sign the request */\n    AwsSigningAlgorithm[AwsSigningAlgorithm[\"SigV4\"] = 0] = \"SigV4\";\n    /** Use the Aws signature version 4 Asymmetric signing process to sign the request */\n    AwsSigningAlgorithm[AwsSigningAlgorithm[\"SigV4Asymmetric\"] = 1] = \"SigV4Asymmetric\";\n})(AwsSigningAlgorithm = exports.AwsSigningAlgorithm || (exports.AwsSigningAlgorithm = {}));\n/**\n * AWS signature type enumeration.\n *\n * @category Auth\n */\nvar AwsSignatureType;\n(function (AwsSignatureType) {\n    /** Sign an http request and apply the signing results as headers */\n    AwsSignatureType[AwsSignatureType[\"HttpRequestViaHeaders\"] = 0] = \"HttpRequestViaHeaders\";\n    /** Sign an http request and apply the signing results as query params */\n    AwsSignatureType[AwsSignatureType[\"HttpRequestViaQueryParams\"] = 1] = \"HttpRequestViaQueryParams\";\n    /** Sign an http request payload chunk */\n    AwsSignatureType[AwsSignatureType[\"HttpRequestChunk\"] = 2] = \"HttpRequestChunk\";\n    /** Sign an event stream event */\n    AwsSignatureType[AwsSignatureType[\"HttpRequestEvent\"] = 3] = \"HttpRequestEvent\";\n})(AwsSignatureType = exports.AwsSignatureType || (exports.AwsSignatureType = {}));\n/**\n * Values for use with {@link AwsSigningConfig.signed_body_value}.\n *\n * Some services use special values (e.g. 'UNSIGNED-PAYLOAD') when the body\n * is not being signed in the usual way.\n *\n * @category Auth\n */\nvar AwsSignedBodyValue;\n(function (AwsSignedBodyValue) {\n    /** Use the SHA-256 of the empty string as the canonical request payload value */\n    AwsSignedBodyValue[\"EmptySha256\"] = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n    /** Use the literal string 'UNSIGNED-PAYLOAD' as the canonical request payload value  */\n    AwsSignedBodyValue[\"UnsignedPayload\"] = \"UNSIGNED-PAYLOAD\";\n    /** Use the literal string 'STREAMING-AWS4-HMAC-SHA256-PAYLOAD' as the canonical request payload value  */\n    AwsSignedBodyValue[\"StreamingAws4HmacSha256Payload\"] = \"STREAMING-AWS4-HMAC-SHA256-PAYLOAD\";\n    /** Use the literal string 'STREAMING-AWS4-HMAC-SHA256-EVENTS' as the canonical request payload value  */\n    AwsSignedBodyValue[\"StreamingAws4HmacSha256Events\"] = \"STREAMING-AWS4-HMAC-SHA256-EVENTS\";\n})(AwsSignedBodyValue = exports.AwsSignedBodyValue || (exports.AwsSignedBodyValue = {}));\n/**\n * AWS signed body header enumeration.\n *\n * @category Auth\n */\nvar AwsSignedBodyHeaderType;\n(function (AwsSignedBodyHeaderType) {\n    /** Do not add a header containing the canonical request payload value */\n    AwsSignedBodyHeaderType[AwsSignedBodyHeaderType[\"None\"] = 0] = \"None\";\n    /** Add the X-Amz-Content-Sha256 header with the canonical request payload value */\n    AwsSignedBodyHeaderType[AwsSignedBodyHeaderType[\"XAmzContentSha256\"] = 1] = \"XAmzContentSha256\";\n})(AwsSignedBodyHeaderType = exports.AwsSignedBodyHeaderType || (exports.AwsSignedBodyHeaderType = {}));\n/**\n * Credentials providers source the AwsCredentials needed to sign an authenticated AWS request.\n *\n * We don't currently expose an interface for fetching credentials from Javascript.\n *\n * @category Auth\n */\n/* Subclass for the purpose of exposing a non-NativeHandle based API */\nclass AwsCredentialsProvider extends binding_1.default.AwsCredentialsProvider {\n    /**\n     * Creates a new default credentials provider to be used internally for AWS credentials resolution:\n     *\n     *   The CRT's default provider chain currently sources in this order:\n     *\n     *     1. Environment\n     *     2. Profile\n     *     3. (conditional, off by default) ECS\n     *     4. (conditional, on by default) EC2 Instance Metadata\n     *\n     * @param bootstrap (optional) client bootstrap to be used to establish any required network connections\n     *\n     * @returns a new credentials provider using default credentials resolution rules\n     */\n    static newDefault(bootstrap = undefined) {\n        return super.newDefault(bootstrap != null ? bootstrap.native_handle() : null);\n    }\n}\nexports.AwsCredentialsProvider = AwsCredentialsProvider;\n/**\n * Perform AWS HTTP request signing.\n *\n * The {@link HttpRequest} is transformed asynchronously,\n * according to the {@link AwsSigningConfig}.\n *\n * When signing:\n *  1.  It is good practice to use a new config for each signature,\n *      or the date might get too old.\n *\n *  2.  Do not add the following headers to requests before signing, they may be added by the signer:\n *      x-amz-content-sha256,\n *      X-Amz-Date,\n *      Authorization\n *\n *  3.  Do not add the following query params to requests before signing, they may be added by the signer:\n *      X-Amz-Signature,\n *      X-Amz-Date,\n *      X-Amz-Credential,\n *      X-Amz-Algorithm,\n *      X-Amz-SignedHeaders\n * @param request The HTTP request to sign.\n * @param config Configuration for signing.\n * @returns A promise whose result will be the signed\n *       {@link HttpRequest}. The future will contain an exception\n *       if the signing process fails.\n *\n * @category Auth\n */\nfunction aws_sign_request(request, config) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            try {\n                /* Note: if the body of request has not fully loaded, it will lead to an endless loop.\n                 * User should set the signed_body_value of config to prevent this endless loop in this case */\n                binding_1.default.aws_sign_request(request, config, (error_code) => {\n                    if (error_code == 0) {\n                        resolve(request);\n                    }\n                    else {\n                        reject(new error_1.CrtError(error_code));\n                    }\n                });\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n    });\n}\nexports.aws_sign_request = aws_sign_request;\n/**\n *\n * @internal\n *\n * Test only.\n * Verifies:\n *  (1) The canonical request generated during sigv4a signing of the request matches what is passed in\n *  (2) The signature passed in is a valid ECDSA signature of the hashed string-to-sign derived from the\n *  canonical request\n *\n * @param request The HTTP request to sign.\n * @param config Configuration for signing.\n * @param expected_canonical_request String type of expected canonical request. Refer to XXX(link to doc?)\n * @param signature The generated signature string from {@link aws_sign_request}, which is verified here.\n * @param ecc_key_pub_x the x coordinate of the public part of the ecc key to verify the signature.\n * @param ecc_key_pub_y the y coordinate of the public part of the ecc key to verify the signature\n * @returns True, if the verification succeed. Otherwise, false.\n */\nfunction aws_verify_sigv4a_signing(request, config, expected_canonical_request, signature, ecc_key_pub_x, ecc_key_pub_y) {\n    return binding_1.default.aws_verify_sigv4a_signing(request, config, expected_canonical_request, signature, ecc_key_pub_x, ecc_key_pub_y);\n}\nexports.aws_verify_sigv4a_signing = aws_verify_sigv4a_signing;\n//# sourceMappingURL=auth.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AwsIotMqttConnectionConfigBuilder = void 0;\nconst io = __importStar(require(\"./io\"));\nconst platform = __importStar(require(\"../common/platform\"));\nconst auth_1 = require(\"./auth\");\n/**\n * Builder functions to create a {@link MqttConnectionConfig} which can then be used to create\n * a {@link MqttClientConnection}, configured for use with AWS IoT.\n *\n * @category IoT\n */\nclass AwsIotMqttConnectionConfigBuilder {\n    constructor(tls_ctx_options) {\n        this.tls_ctx_options = tls_ctx_options;\n        this.params = {\n            client_id: '',\n            host_name: '',\n            socket_options: new io.SocketOptions(),\n            port: 8883,\n            use_websocket: false,\n            clean_session: false,\n            keep_alive: undefined,\n            will: undefined,\n            username: `?SDK=NodeJSv2&Version=${platform.crt_version()}`,\n            password: undefined,\n            tls_ctx: undefined,\n        };\n    }\n    /**\n     * Create a new builder with mTLS file paths\n     * @param cert_path - Path to certificate, in PEM format\n     * @param key_path - Path to private key, in PEM format\n     */\n    static new_mtls_builder_from_path(cert_path, key_path) {\n        let builder = new AwsIotMqttConnectionConfigBuilder(io.TlsContextOptions.create_client_with_mtls_from_path(cert_path, key_path));\n        builder.params.port = 8883;\n        if (io.is_alpn_available()) {\n            builder.tls_ctx_options.alpn_list.unshift('x-amzn-mqtt-ca');\n        }\n        return builder;\n    }\n    /**\n     * Create a new builder with mTLS cert pair in memory\n     * @param cert - Certificate, in PEM format\n     * @param private_key - Private key, in PEM format\n     */\n    static new_mtls_builder(cert, private_key) {\n        let builder = new AwsIotMqttConnectionConfigBuilder(io.TlsContextOptions.create_client_with_mtls(cert, private_key));\n        builder.params.port = 8883;\n        if (io.is_alpn_available()) {\n            builder.tls_ctx_options.alpn_list.unshift('x-amzn-mqtt-ca');\n        }\n        return builder;\n    }\n    static new_websocket_builder(...args) {\n        return this.new_with_websockets(...args);\n    }\n    static configure_websocket_handshake(builder, options) {\n        if (options) {\n            builder.params.websocket_handshake_transform = (request, done) => __awaiter(this, void 0, void 0, function* () {\n                var _a, _b, _c;\n                const signing_config = (_b = (_a = options.create_signing_config) === null || _a === void 0 ? void 0 : _a.call(options)) !== null && _b !== void 0 ? _b : {\n                    algorithm: auth_1.AwsSigningAlgorithm.SigV4,\n                    signature_type: auth_1.AwsSignatureType.HttpRequestViaQueryParams,\n                    provider: options.credentials_provider,\n                    region: options.region,\n                    service: (_c = options.service) !== null && _c !== void 0 ? _c : \"iotdevicegateway\",\n                    signed_body_value: auth_1.AwsSignedBodyValue.EmptySha256,\n                    omit_session_token: true,\n                };\n                try {\n                    yield auth_1.aws_sign_request(request, signing_config);\n                    done();\n                }\n                catch (error) {\n                    done(error);\n                }\n            });\n        }\n        return builder;\n    }\n    /**\n     * Configures the connection to use MQTT over websockets. Forces the port to 443.\n     */\n    static new_with_websockets(options) {\n        let tls_ctx_options = options === null || options === void 0 ? void 0 : options.tls_ctx_options;\n        if (!tls_ctx_options) {\n            tls_ctx_options = new io.TlsContextOptions();\n            tls_ctx_options.alpn_list = [];\n        }\n        let builder = new AwsIotMqttConnectionConfigBuilder(tls_ctx_options);\n        builder.params.use_websocket = true;\n        builder.params.proxy_options = options === null || options === void 0 ? void 0 : options.proxy_options;\n        if (builder.tls_ctx_options) {\n            builder.params.port = 443;\n        }\n        this.configure_websocket_handshake(builder, options);\n        return builder;\n    }\n    /**\n     * Overrides the default system trust store.\n     * @param ca_dirpath - Only used on Unix-style systems where all trust anchors are\n     * stored in a directory (e.g. /etc/ssl/certs).\n     * @param ca_filepath - Single file containing all trust CAs, in PEM format\n     */\n    with_certificate_authority_from_path(ca_dirpath, ca_filepath) {\n        this.tls_ctx_options.override_default_trust_store_from_path(ca_dirpath, ca_filepath);\n        return this;\n    }\n    /**\n     * Overrides the default system trust store.\n     * @param ca - Buffer containing all trust CAs, in PEM format\n     */\n    with_certificate_authority(ca) {\n        this.tls_ctx_options.override_default_trust_store(ca);\n        return this;\n    }\n    /**\n     * Configures the IoT endpoint for this connection\n     * @param endpoint The IoT endpoint to connect to\n     */\n    with_endpoint(endpoint) {\n        this.params.host_name = endpoint;\n        return this;\n    }\n    /**\n     * The port to connect to on the IoT endpoint\n     * @param port The port to connect to on the IoT endpoint. Usually 8883 for MQTT, or 443 for websockets\n     */\n    with_port(port) {\n        this.params.port = port;\n        return this;\n    }\n    /**\n     * Configures the client_id to use to connect to the IoT Core service\n     * @param client_id The client id for this connection. Needs to be unique across all devices/clients.\n     */\n    with_client_id(client_id) {\n        this.params.client_id = client_id;\n        return this;\n    }\n    /**\n     * Determines whether or not the service should try to resume prior subscriptions, if it has any\n     * @param clean_session true if the session should drop prior subscriptions when this client connects, false to resume the session\n     */\n    with_clean_session(clean_session) {\n        this.params.clean_session = clean_session;\n        return this;\n    }\n    /**\n     * Configures MQTT keep-alive via PING messages. Note that this is not TCP keepalive.\n     * @param keep_alive How often in seconds to send an MQTT PING message to the service to keep the connection alive\n     */\n    with_keep_alive_seconds(keep_alive) {\n        this.params.keep_alive = keep_alive;\n        return this;\n    }\n    /**\n     * Configures the TCP socket timeout (in milliseconds)\n     * @param timeout_ms TCP socket timeout\n     * @deprecated\n     */\n    with_timeout_ms(timeout_ms) {\n        this.with_ping_timeout_ms(timeout_ms);\n        return this;\n    }\n    /**\n     * Configures the PINGREQ response timeout (in milliseconds)\n     * @param ping_timeout PINGREQ response timeout\n     */\n    with_ping_timeout_ms(ping_timeout) {\n        this.params.ping_timeout = ping_timeout;\n        return this;\n    }\n    /**\n     * Configures the protocol operation timeout (in milliseconds)\n     * @param protocol_operation_timeout protocol operation timeout\n     */\n    with_protocol_operation_timeout_ms(protocol_operation_timeout) {\n        this.params.protocol_operation_timeout = protocol_operation_timeout;\n        return this;\n    }\n    /**\n     * Configures the will message to be sent when this client disconnects\n     * @param will The will topic, qos, and message\n     */\n    with_will(will) {\n        this.params.will = will;\n        return this;\n    }\n    /**\n     * Configures the common settings for the socket to use when opening a connection to the server\n     * @param socket_options The socket settings\n     */\n    with_socket_options(socket_options) {\n        this.params.socket_options = socket_options;\n        return this;\n    }\n    /**\n     * Configures AWS credentials (usually from Cognito) for this connection\n     * @param aws_region The service region to connect to\n     * @param aws_access_id IAM Access ID\n     * @param aws_secret_key IAM Secret Key\n     * @param aws_sts_token STS token from Cognito (optional)\n     */\n    with_credentials(aws_region, aws_access_id, aws_secret_key, aws_sts_token) {\n        return AwsIotMqttConnectionConfigBuilder.configure_websocket_handshake(this, {\n            credentials_provider: auth_1.AwsCredentialsProvider.newStatic(aws_access_id, aws_secret_key, aws_sts_token),\n            region: aws_region,\n            service: \"iotdevicegateway\",\n        });\n    }\n    /**\n     * Configure the http proxy options to use to establish the connection\n     * @param proxy_options proxy options to use to establish the mqtt connection\n     */\n    with_http_proxy_options(proxy_options) {\n        this.params.proxy_options = proxy_options;\n        return this;\n    }\n    /**\n     * Returns the configured MqttConnectionConfig.  On the first invocation of this function, the TLS context is cached\n     * and re-used on all subsequent calls to build().\n     * @returns The configured MqttConnectionConfig\n     */\n    build() {\n        if (this.params.client_id === undefined || this.params.host_name === undefined) {\n            throw 'client_id and endpoint are required';\n        }\n        /*\n         * By caching and reusing the TLS context we get an enormous memory savings on a per-connection basis.\n         * The tradeoff is that you can't modify TLS options in between calls to build.\n         * Previously we were making a new one with every single connection which had a huge negative impact on large\n         * scale tests.\n         */\n        if (this.params.tls_ctx === undefined) {\n            this.params.tls_ctx = new io.ClientTlsContext(this.tls_ctx_options);\n        }\n        return this.params;\n    }\n}\nexports.AwsIotMqttConnectionConfigBuilder = AwsIotMqttConnectionConfigBuilder;\n//# sourceMappingURL=aws_iot.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __importStar(require(\"path\"));\nconst os_1 = require(\"os\");\nconst fs_1 = require(\"fs\");\nconst process_1 = require(\"process\");\nconst upgrade_string = \"Please upgrade to node >=10.16.0, or use the provided browser implementation.\";\nif ('napi' in process_1.versions) {\n    const napi_version = parseInt(process_1.versions['napi']);\n    if (napi_version < 4) {\n        throw new Error(\"The AWS CRT native implementation requires that NAPI version 4 be present. \" + upgrade_string);\n    }\n}\nelse {\n    throw new Error(\"The current runtime is not reporting an NAPI version. \" + upgrade_string);\n}\nconst binary_name = 'aws-crt-nodejs';\nconst platformDir = `${os_1.platform}-${os_1.arch}`;\nlet source_root = path.resolve(__dirname, '..', '..');\nconst dist = path.join(source_root, 'dist');\nif (fs_1.existsSync(dist)) {\n    source_root = dist;\n}\nconst bin_path = path.resolve(source_root, 'bin');\nconst search_paths = [\n    path.join(bin_path, 'native', binary_name),\n    path.join(bin_path, platformDir, binary_name),\n];\nlet binding;\nfor (const path of search_paths) {\n    if (fs_1.existsSync(path + '.node')) {\n        binding = require(path);\n        break;\n    }\n}\nif (binding == undefined) {\n    throw new Error(\"AWS CRT binary not present in any of the following locations:\\n\\t\" + search_paths.join('\\n\\t'));\n}\nexports.default = binding;\n//# sourceMappingURL=binding.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.native_memory_dump = exports.native_memory = void 0;\n/**\n * @packageDocumentation\n * @module crt\n */\n/**\n * Memory reporting is controlled by the AWS_CRT_MEMORY_TRACING environment\n * variable. Possible values are:\n * * 0 - No tracing\n * * 1 - Track active memory usage. Incurs a small performance penalty.\n * * 2 - Track active memory usage, and also track callstacks for every allocation.\n *   This incurs a performance penalty, depending on the cost of the platform's\n *   stack unwinding/backtrace API.\n * @category System\n */\nconst binding_1 = __importDefault(require(\"./binding\"));\n/**\n * If the ```AWS_CRT_MEMORY_TRACING``` is environment variable is set to 1 or 2,\n * will return the native memory usage in bytes. Otherwise, returns 0.\n * @returns The total allocated native memory, in bytes.\n *\n * @category System\n */\nfunction native_memory() {\n    return binding_1.default.native_memory();\n}\nexports.native_memory = native_memory;\n/**\n * Dumps outstanding native memory allocations. If the ```AWS_CRT_MEMORY_TRACING```\n * environment variable is set to 1 or 2, will dump all active native memory to\n * the console log.\n *\n * @category System\n */\nfunction native_memory_dump() {\n    return binding_1.default.native_memory_dump();\n}\nexports.native_memory_dump = native_memory_dump;\n//# sourceMappingURL=crt.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac_sha256 = exports.Sha256Hmac = exports.hash_sha1 = exports.Sha1Hash = exports.hash_sha256 = exports.Sha256Hash = exports.hash_md5 = exports.Md5Hash = void 0;\n/**\n * @packageDocumentation\n * @module crypto\n */\nconst binding_1 = __importDefault(require(\"./binding\"));\nconst native_resource_1 = require(\"./native_resource\");\n/**\n * Object that allows for continuous hashing of data.\n *\n * @internal\n */\nclass Hash extends native_resource_1.NativeResource {\n    /**\n     * Hash additional data.\n     * @param data Additional data to hash\n     */\n    update(data) {\n        binding_1.default.hash_update(this.native_handle(), data);\n    }\n    /**\n     * Completes the hash computation and returns the final hash digest.\n     *\n     * @param truncate_to The maximum number of bytes to receive. Leave as undefined or 0 to receive the entire digest.\n     */\n    finalize(truncate_to) {\n        return binding_1.default.hash_digest(this.native_handle(), truncate_to);\n    }\n    constructor(hash_handle) {\n        super(hash_handle);\n    }\n}\n/**\n * Object that allows for continuous MD5 hashing of data.\n *\n * @category Crypto\n */\nclass Md5Hash extends Hash {\n    constructor() {\n        super(binding_1.default.hash_md5_new());\n    }\n}\nexports.Md5Hash = Md5Hash;\n/**\n * Computes an MD5 hash. Use this if you don't need to stream the data you're hashing and can load the entire input\n * into memory.\n *\n * @param data The data to hash\n * @param truncate_to The maximum number of bytes to receive. Leave as undefined or 0 to receive the entire digest.\n *\n * @category Crypto\n */\nfunction hash_md5(data, truncate_to) {\n    return binding_1.default.hash_md5_compute(data, truncate_to);\n}\nexports.hash_md5 = hash_md5;\n/**\n * Object that allows for continuous SHA256 hashing of data.\n *\n * @category Crypto\n */\nclass Sha256Hash extends Hash {\n    constructor() {\n        super(binding_1.default.hash_sha256_new());\n    }\n}\nexports.Sha256Hash = Sha256Hash;\n/**\n * Computes an SHA256 hash. Use this if you don't need to stream the data you're hashing and can load the entire input\n * into memory.\n *\n * @param data The data to hash\n * @param truncate_to The maximum number of bytes to receive. Leave as undefined or 0 to receive the entire digest.\n *\n * @category Crypto\n */\nfunction hash_sha256(data, truncate_to) {\n    return binding_1.default.hash_sha256_compute(data, truncate_to);\n}\nexports.hash_sha256 = hash_sha256;\n/**\n * Object that allows for continuous SHA1 hashing of data.\n *\n * @category Crypto\n */\nclass Sha1Hash extends Hash {\n    constructor() {\n        super(binding_1.default.hash_sha1_new());\n    }\n}\nexports.Sha1Hash = Sha1Hash;\n/**\n * Computes an SHA1 hash. Use this if you don't need to stream the data you're hashing and can load the entire input\n * into memory.\n *\n * @param data The data to hash\n * @param truncate_to The maximum number of bytes to receive. Leave as undefined or 0 to receive the entire digest.\n *\n * @category Crypto\n */\nfunction hash_sha1(data, truncate_to) {\n    return binding_1.default.hash_sha1_compute(data, truncate_to);\n}\nexports.hash_sha1 = hash_sha1;\n/**\n * Object that allows for continuous hashing of data with an hmac secret.\n *\n * @category Crypto\n */\nclass Hmac extends native_resource_1.NativeResource {\n    /**\n     * Hash additional data.\n     *\n     * @param data additional data to hash\n     */\n    update(data) {\n        binding_1.default.hmac_update(this.native_handle(), data);\n    }\n    /**\n     * Completes the hash computation and returns the final hmac digest.\n     *\n     * @param truncate_to The maximum number of bytes to receive. Leave as undefined or 0 to receive the entire digest.\n     */\n    finalize(truncate_to) {\n        return binding_1.default.hmac_digest(this.native_handle(), truncate_to);\n    }\n    constructor(hash_handle) {\n        super(hash_handle);\n    }\n}\n/**\n * Object that allows for continuous SHA256 HMAC hashing of data.\n *\n * @category Crypto\n */\nclass Sha256Hmac extends Hmac {\n    constructor(secret) {\n        super(binding_1.default.hmac_sha256_new(secret));\n    }\n}\nexports.Sha256Hmac = Sha256Hmac;\n/**\n * Computes an SHA256 HMAC. Use this if you don't need to stream the data you're hashing and can load the entire input\n * into memory.\n *\n * @param secret The key to use for the HMAC process\n * @param data The data to hash\n * @param truncate_to The maximum number of bytes to receive. Leave as undefined or 0 to receive the entire digest.\n *\n * @category Crypto\n */\nfunction hmac_sha256(secret, data, truncate_to) {\n    return binding_1.default.hmac_sha256_compute(secret, data, truncate_to);\n}\nexports.hmac_sha256 = hmac_sha256;\n//# sourceMappingURL=crypto.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CrtError = void 0;\n/**\n * @packageDocumentation\n * @module crt\n */\nconst binding_1 = __importDefault(require(\"./binding\"));\nconst util_1 = require(\"util\");\n/**\n * Represents an error encountered in native code. Can also be used to convert a numeric error code into\n * a human-readable string.\n *\n * @category System\n */\nclass CrtError extends Error {\n    /** @var error - The original error. Most often an error_code, but possibly some other context */\n    constructor(error) {\n        super(extract_message(error));\n        this.error = error;\n        this.error_code = extract_code(error);\n        this.error_name = extract_name(error);\n    }\n}\nexports.CrtError = CrtError;\nfunction extract_message(error) {\n    if (util_1.isNumber(error)) {\n        return binding_1.default.error_code_to_string(error);\n    }\n    else if (error instanceof CrtError) {\n        return error.message;\n    }\n    return error.toString();\n}\nfunction extract_code(error) {\n    if (util_1.isNumber(error)) {\n        return error;\n    }\n    else if (error instanceof CrtError) {\n        return error.error_code;\n    }\n    return undefined;\n}\nfunction extract_name(error) {\n    if (util_1.isNumber(error)) {\n        return binding_1.default.error_code_to_name(error);\n    }\n    else if (error instanceof CrtError) {\n        return error.error_name;\n    }\n    return undefined;\n}\n//# sourceMappingURL=error.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpClientConnectionManager = exports.HttpClientStream = exports.HttpStream = exports.HttpClientConnection = exports.HttpProxyOptions = exports.HttpProxyConnectionType = exports.HttpConnection = exports.HttpRequest = exports.HttpHeaders = void 0;\n/**\n * @packageDocumentation\n * @module http\n */\nconst binding_1 = __importDefault(require(\"./binding\"));\nconst native_resource_1 = require(\"./native_resource\");\nconst error_1 = require(\"./error\");\nconst http_1 = require(\"../common/http\");\n/** @internal */\nvar http_2 = require(\"../common/http\");\nObject.defineProperty(exports, \"HttpProxyAuthenticationType\", { enumerable: true, get: function () { return http_2.HttpProxyAuthenticationType; } });\nconst event_1 = require(\"../common/event\");\n/**\n * @category HTTP\n */\nexports.HttpHeaders = binding_1.default.HttpHeaders;\n/** @internal */\nconst nativeHttpRequest = binding_1.default.HttpRequest;\n/**\n * @category HTTP\n */\nclass HttpRequest extends nativeHttpRequest {\n    constructor(method, path, headers, body) {\n        super(method, path, headers, body === null || body === void 0 ? void 0 : body.native_handle());\n    }\n}\nexports.HttpRequest = HttpRequest;\n/**\n * Base class for HTTP connections\n *\n * @category HTTP\n */\nclass HttpConnection extends native_resource_1.NativeResourceMixin(event_1.BufferedEventEmitter) {\n    constructor(native_handle) {\n        super();\n        this._super(native_handle);\n    }\n    /**\n     * Close the connection.\n     * Shutdown is asynchronous. This call has no effect if the connection is already\n     * closing.\n     */\n    close() {\n        binding_1.default.http_connection_close(this.native_handle());\n    }\n    // Overridden to allow uncorking on ready\n    on(event, listener) {\n        super.on(event, listener);\n        if (event == 'connect') {\n            process.nextTick(() => {\n                this.uncork();\n            });\n        }\n        return this;\n    }\n}\nexports.HttpConnection = HttpConnection;\n/**\n * Proxy connection types.\n *\n * The original behavior was to make a tunneling connection if TLS was used, and a forwarding connection if it was not.\n * There are legitimate use cases for plaintext tunneling connections, and so the implicit behavior has now\n * been replaced by this setting, with a default that maps to the old behavior.\n *\n * @category HTTP\n */\nvar HttpProxyConnectionType;\n(function (HttpProxyConnectionType) {\n    /**\n     * (Default for backwards compatibility).  If Tls options are supplied then the connection will be a tunneling\n     * one, otherwise it will be a forwarding one.\n     */\n    HttpProxyConnectionType[HttpProxyConnectionType[\"Legacy\"] = 0] = \"Legacy\";\n    /**\n     * Establish a forwarding-based connection with the proxy.  Tls is not allowed in this case.\n     */\n    HttpProxyConnectionType[HttpProxyConnectionType[\"Forwarding\"] = 1] = \"Forwarding\";\n    /**\n     * Establish a tunneling-based connection with the proxy.\n     */\n    HttpProxyConnectionType[HttpProxyConnectionType[\"Tunneling\"] = 2] = \"Tunneling\";\n})(HttpProxyConnectionType = exports.HttpProxyConnectionType || (exports.HttpProxyConnectionType = {}));\n;\n/**\n * Proxy options for HTTP clients.\n *\n * @category HTTP\n */\nclass HttpProxyOptions extends http_1.CommonHttpProxyOptions {\n    /**\n     *\n     * @param host_name Name of the proxy server to connect through\n     * @param port Port number of the proxy server to connect through\n     * @param auth_method Type of proxy authentication to use. Default is {@link HttpProxyAuthenticationType.None}\n     * @param auth_username Username to use when `auth_type` is {@link HttpProxyAuthenticationType.Basic}\n     * @param auth_password Password to use when `auth_type` is {@link HttpProxyAuthenticationType.Basic}\n     * @param tls_opts Optional TLS connection options for the connection to the proxy host.\n     *                 Must be distinct from the {@link TlsConnectionOptions} provided to\n     *                 the HTTP connection\n     * @param connection_type Optional Type of connection to make.  If not specified,\n     *                 {@link HttpProxyConnectionType.Legacy} will be used.\n     */\n    constructor(host_name, port, auth_method = http_1.HttpProxyAuthenticationType.None, auth_username, auth_password, tls_opts, connection_type) {\n        super(host_name, port, auth_method, auth_username, auth_password);\n        this.tls_opts = tls_opts;\n        this.connection_type = connection_type;\n    }\n    /** @internal */\n    create_native_handle() {\n        return binding_1.default.http_proxy_options_new(this.host_name, this.port, this.auth_method, this.auth_username, this.auth_password, this.tls_opts ? this.tls_opts.native_handle() : undefined, this.connection_type ? this.connection_type : HttpProxyConnectionType.Legacy);\n    }\n}\nexports.HttpProxyOptions = HttpProxyOptions;\n/**\n * Represents an HTTP connection from a client to a server\n *\n * @category HTTP\n */\nclass HttpClientConnection extends HttpConnection {\n    /** Asynchronously establish a new HttpClientConnection.\n     * @param bootstrap Client bootstrap to use when initiating socket connection.  Leave undefined to use the\n     *          default system-wide bootstrap (recommended).\n     * @param host_name Host to connect to\n     * @param port Port to connect to on host\n     * @param socket_options Socket options\n     * @param tls_opts Optional TLS connection options\n     * @param proxy_options Optional proxy options\n    */\n    constructor(bootstrap, host_name, port, socket_options, tls_opts, proxy_options, handle) {\n        super(handle\n            ? handle\n            : binding_1.default.http_connection_new(bootstrap != null ? bootstrap.native_handle() : null, (handle, error_code) => {\n                this._on_setup(handle, error_code);\n            }, (handle, error_code) => {\n                this._on_shutdown(handle, error_code);\n            }, host_name, port, socket_options.native_handle(), tls_opts ? tls_opts.native_handle() : undefined, proxy_options ? proxy_options.create_native_handle() : undefined));\n        this.bootstrap = bootstrap;\n        this.socket_options = socket_options;\n        this.tls_opts = tls_opts;\n    }\n    _on_setup(native_handle, error_code) {\n        if (error_code) {\n            this.emit('error', new error_1.CrtError(error_code));\n            return;\n        }\n        this.emit('connect');\n    }\n    _on_shutdown(native_handle, error_code) {\n        if (error_code) {\n            this.emit('error', new error_1.CrtError(error_code));\n            return;\n        }\n        this.emit('close');\n    }\n    /**\n     * Create {@link HttpClientStream} to carry out the request/response exchange.\n     *\n     * NOTE: The stream sends no data until :meth:`HttpClientStream.activate()`\n     * is called. Call {@link HttpStream.activate} when you're ready for\n     * callbacks and events to fire.\n     * @param request - The HttpRequest to attempt on this connection\n     * @returns A new stream that will deliver events for the request\n     */\n    request(request) {\n        let stream;\n        const on_response_impl = (status_code, headers) => {\n            stream._on_response(status_code, headers);\n        };\n        const on_body_impl = (data) => {\n            stream._on_body(data);\n        };\n        const on_complete_impl = (error_code) => {\n            stream._on_complete(error_code);\n        };\n        const native_handle = binding_1.default.http_stream_new(this.native_handle(), request, on_complete_impl, on_response_impl, on_body_impl);\n        return stream = new HttpClientStream(native_handle, this, request);\n    }\n}\nexports.HttpClientConnection = HttpClientConnection;\n/**\n * Represents a single http message exchange (request/response) in HTTP/1.1. In H2, it may\n * also represent a PUSH_PROMISE followed by the accompanying response.\n *\n * NOTE: Binding either the ready or response event will uncork any buffered events and start\n * event delivery\n *\n * @category HTTP\n */\nclass HttpStream extends native_resource_1.NativeResourceMixin(event_1.BufferedEventEmitter) {\n    constructor(native_handle, connection) {\n        super();\n        this.connection = connection;\n        this._super(native_handle);\n        this.cork();\n    }\n    /**\n     * Begin sending the request.\n     *\n     * The stream does nothing until this is called. Call activate() when you\n     * are ready for its callbacks and events to fire.\n     */\n    activate() {\n        binding_1.default.http_stream_activate(this.native_handle());\n    }\n    /**\n     * Closes and ends all communication on this stream. Called automatically after the 'end'\n     * event is delivered. Calling this manually is only necessary if you wish to terminate\n     * communication mid-request/response.\n     */\n    close() {\n        binding_1.default.http_stream_close(this.native_handle());\n    }\n    /** @internal */\n    _on_body(data) {\n        this.emit('data', data);\n    }\n    /** @internal */\n    _on_complete(error_code) {\n        if (error_code) {\n            this.emit('error', new error_1.CrtError(error_code));\n            this.close();\n            return;\n        }\n        // schedule death after end is delivered\n        this.on('end', () => {\n            this.close();\n        });\n        this.emit('end');\n    }\n}\nexports.HttpStream = HttpStream;\n/**\n * Stream that sends a request and receives a response.\n *\n * Create an HttpClientStream with {@link HttpClientConnection.request}.\n *\n * NOTE: The stream sends no data until {@link HttpStream.activate} is called.\n * Call {@link HttpStream.activate} when you're ready for callbacks and events to fire.\n *\n * @category HTTP\n */\nclass HttpClientStream extends HttpStream {\n    constructor(native_handle, connection, request) {\n        super(native_handle, connection);\n        this.request = request;\n    }\n    /**\n     * HTTP status code returned from the server.\n     * @return Either the status code, or undefined if the server response has not arrived yet.\n     */\n    status_code() {\n        return this.response_status_code;\n    }\n    // Overridden to allow uncorking on ready and response\n    on(event, listener) {\n        super.on(event, listener);\n        if (event == 'response') {\n            process.nextTick(() => {\n                this.uncork();\n            });\n        }\n        return this;\n    }\n    /** @internal */\n    _on_response(status_code, header_array) {\n        this.response_status_code = status_code;\n        let headers = new exports.HttpHeaders(header_array);\n        this.emit('response', status_code, headers);\n    }\n}\nexports.HttpClientStream = HttpClientStream;\n/**\n * Creates, manages, and vends connections to a given host/port endpoint\n *\n * @category HTTP\n */\nclass HttpClientConnectionManager extends native_resource_1.NativeResource {\n    /**\n     * @param bootstrap Client bootstrap to use when initiating socket connections.  Leave undefined to use the\n     *          default system-wide bootstrap (recommended).\n     * @param host Host to connect to\n     * @param port Port to connect to on host\n     * @param max_connections Maximum number of connections to pool\n     * @param initial_window_size Optional initial window size\n     * @param socket_options Socket options to use when initiating socket connections\n     * @param tls_opts Optional TLS connection options\n     * @param proxy_options Optional proxy options\n     */\n    constructor(bootstrap, host, port, max_connections, initial_window_size, socket_options, tls_opts, proxy_options) {\n        super(binding_1.default.http_connection_manager_new(bootstrap != null ? bootstrap.native_handle() : null, host, port, max_connections, initial_window_size, socket_options.native_handle(), tls_opts ? tls_opts.native_handle() : undefined, proxy_options ? proxy_options.create_native_handle() : undefined, undefined /* on_shutdown */));\n        this.bootstrap = bootstrap;\n        this.host = host;\n        this.port = port;\n        this.max_connections = max_connections;\n        this.initial_window_size = initial_window_size;\n        this.socket_options = socket_options;\n        this.tls_opts = tls_opts;\n        this.proxy_options = proxy_options;\n        this.connections = new Map();\n    }\n    /**\n    * Vends a connection from the pool\n    * @returns A promise that results in an HttpClientConnection. When done with the connection, return\n    *          it via {@link release}\n    */\n    acquire() {\n        return new Promise((resolve, reject) => {\n            // Only create 1 connection in JS/TS from each native connection\n            const on_acquired = (handle, error_code) => {\n                if (error_code) {\n                    reject(new error_1.CrtError(error_code));\n                    return;\n                }\n                let connection = this.connections.get(handle);\n                if (!connection) {\n                    connection = new HttpClientConnection(this.bootstrap, this.host, this.port, this.socket_options, this.tls_opts, this.proxy_options, handle);\n                    this.connections.set(handle, connection);\n                    connection.on('close', () => {\n                        this.connections.delete(handle);\n                    });\n                }\n                resolve(connection);\n            };\n            binding_1.default.http_connection_manager_acquire(this.native_handle(), on_acquired);\n        });\n    }\n    /**\n     * Returns an unused connection to the pool\n     * @param connection - The connection to return\n    */\n    release(connection) {\n        binding_1.default.http_connection_manager_release(this.native_handle(), connection.native_handle());\n    }\n    /** Closes all connections and rejects all pending requests */\n    close() {\n        binding_1.default.http_connection_manager_close(this.native_handle());\n    }\n}\nexports.HttpClientConnectionManager = HttpClientConnectionManager;\n//# sourceMappingURL=http.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TlsConnectionOptions = exports.ServerTlsContext = exports.ClientTlsContext = exports.TlsContext = exports.TlsContextOptions = exports.SocketOptions = exports.ClientBootstrap = exports.InputStream = exports.is_alpn_available = exports.enable_logging = exports.LogLevel = exports.error_code_to_name = exports.error_code_to_string = void 0;\n/**\n *\n * @packageDocumentation\n * @module IO\n */\nconst binding_1 = __importDefault(require(\"./binding\"));\nconst native_resource_1 = require(\"./native_resource\");\nconst io_1 = require(\"../common/io\");\nvar io_2 = require(\"../common/io\");\nObject.defineProperty(exports, \"TlsVersion\", { enumerable: true, get: function () { return io_2.TlsVersion; } });\nObject.defineProperty(exports, \"SocketType\", { enumerable: true, get: function () { return io_2.SocketType; } });\nObject.defineProperty(exports, \"SocketDomain\", { enumerable: true, get: function () { return io_2.SocketDomain; } });\n/**\n * Convert a native error code into a human-readable string\n * @param error_code - An error code returned from a native API call, or delivered\n * via callback.\n * @returns Long-form description of the error\n * @see CrtError\n *\n * nodejs only.\n *\n * @category System\n */\nfunction error_code_to_string(error_code) {\n    return binding_1.default.error_code_to_string(error_code);\n}\nexports.error_code_to_string = error_code_to_string;\n/**\n * Convert a native error code into a human-readable identifier\n * @param error_code - An error code returned from a native API call, or delivered\n * via callback.\n * @return error name as a string\n * @see CrtError\n *\n * nodejs only.\n *\n * @category System\n */\nfunction error_code_to_name(error_code) {\n    return binding_1.default.error_code_to_name(error_code);\n}\nexports.error_code_to_name = error_code_to_name;\n/**\n * The amount of detail that will be logged\n * @category Logging\n */\nvar LogLevel;\n(function (LogLevel) {\n    /** No logging whatsoever. Equivalent to never calling {@link enable_logging}. */\n    LogLevel[LogLevel[\"NONE\"] = 0] = \"NONE\";\n    /** Only fatals. In practice, this will not do much, as the process will log and then crash (intentionally) if a fatal condition occurs */\n    LogLevel[LogLevel[\"FATAL\"] = 1] = \"FATAL\";\n    /** Only errors */\n    LogLevel[LogLevel[\"ERROR\"] = 2] = \"ERROR\";\n    /** Only warnings and errors */\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n    /** Information about connection/stream creation/destruction events */\n    LogLevel[LogLevel[\"INFO\"] = 4] = \"INFO\";\n    /** Enough information to debug the chain of events a given network connection encounters */\n    LogLevel[LogLevel[\"DEBUG\"] = 5] = \"DEBUG\";\n    /** Everything. Only use this if you really need to know EVERY single call */\n    LogLevel[LogLevel[\"TRACE\"] = 6] = \"TRACE\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n/**\n * Enables logging of the native AWS CRT libraries.\n * @param level - The logging level to filter to. It is not possible to log less than WARN.\n *\n * nodejs only.\n * @category Logging\n */\nfunction enable_logging(level) {\n    binding_1.default.io_logging_enable(level);\n}\nexports.enable_logging = enable_logging;\n/**\n * Returns true if ALPN is available on this platform natively\n * @return true if ALPN is supported natively, false otherwise\n *\n * nodejs only.\n * @category TLS\n*/\nfunction is_alpn_available() {\n    return binding_1.default.is_alpn_available();\n}\nexports.is_alpn_available = is_alpn_available;\n/**\n * Wraps a ```Readable``` for reading by native code, used to stream\n *  data into the AWS CRT libraries.\n *\n * nodejs only.\n * @category IO\n */\nclass InputStream extends native_resource_1.NativeResource {\n    constructor(source) {\n        super(binding_1.default.io_input_stream_new(16 * 1024));\n        this.source = source;\n        this.source.on('data', (data) => {\n            data = Buffer.isBuffer(data) ? data : new Buffer(data.toString(), 'utf8');\n            binding_1.default.io_input_stream_append(this.native_handle(), data);\n        });\n        this.source.on('end', () => {\n            binding_1.default.io_input_stream_append(this.native_handle(), undefined);\n        });\n    }\n}\nexports.InputStream = InputStream;\n/**\n * Represents native resources required to bootstrap a client connection\n * Things like a host resolver, event loop group, etc. There should only need\n * to be 1 of these per application, in most cases.\n *\n * nodejs only.\n * @category IO\n */\nclass ClientBootstrap extends native_resource_1.NativeResource {\n    constructor() {\n        super(binding_1.default.io_client_bootstrap_new());\n    }\n}\nexports.ClientBootstrap = ClientBootstrap;\n/**\n * Standard Berkeley socket style options.\n *\n * nodejs only.\n * @category Network\n*/\nclass SocketOptions extends native_resource_1.NativeResource {\n    constructor(type = io_1.SocketType.STREAM, domain = io_1.SocketDomain.IPV6, connect_timeout_ms = 5000, keepalive = false, keep_alive_interval_sec = 0, keep_alive_timeout_sec = 0, keep_alive_max_failed_probes = 0) {\n        super(binding_1.default.io_socket_options_new(type, domain, connect_timeout_ms, keep_alive_interval_sec, keep_alive_timeout_sec, keep_alive_max_failed_probes, keepalive));\n    }\n}\nexports.SocketOptions = SocketOptions;\n/**\n * Options for creating a {@link ClientTlsContext} or {@link ServerTlsContext}.\n *\n * nodejs only.\n * @category TLS\n */\nclass TlsContextOptions {\n    constructor() {\n        /** Minimum version of TLS to support. Uses OS/system default if unspecified. */\n        this.min_tls_version = io_1.TlsVersion.Default;\n        /** List of ALPN protocols to be used on platforms which support ALPN */\n        this.alpn_list = [];\n        /**\n         * In client mode, this turns off x.509 validation. Don't do this unless you are testing.\n         * It is much better to just override the default trust store and pass the self-signed\n         * certificate as the ca_file argument.\n         *\n         * In server mode (ServerTlsContext), this defaults to false. If you want to enforce mutual TLS on the server,\n         * set this to true.\n         */\n        this.verify_peer = true;\n    }\n    /**\n     * Overrides the default system trust store.\n     * @param ca_dirpath - Only used on Unix-style systems where all trust anchors are\n     * stored in a directory (e.g. /etc/ssl/certs).\n     * @param ca_filepath - Single file containing all trust CAs, in PEM format\n     */\n    override_default_trust_store_from_path(ca_dirpath, ca_filepath) {\n        this.ca_dirpath = ca_dirpath;\n        this.ca_filepath = ca_filepath;\n    }\n    /**\n     * Overrides the default system trust store.\n     * @param certificate_authority - String containing all trust CAs, in PEM format\n     */\n    override_default_trust_store(certificate_authority) {\n        this.certificate_authority = certificate_authority;\n    }\n    /**\n     * Creates a client with secure-by-default options, along with a client cert and private key\n     * @param certificate - Client certificate, in PEM format\n     * @param private_key - Client private key, in PEM format\n     *\n     * @returns newly configured TlsContextOptions object\n     */\n    static create_client_with_mtls(certificate, private_key) {\n        let opt = new TlsContextOptions();\n        opt.certificate = certificate;\n        opt.private_key = private_key;\n        opt.verify_peer = true;\n        return opt;\n    }\n    /**\n     * Creates a client with secure-by-default options, along with a client cert and private key\n     * @param certificate_filepath - Path to client certificate, in PEM format\n     * @param private_key_filepath - Path to private key, in PEM format\n     *\n     * @returns newly configured TlsContextOptions object\n     */\n    static create_client_with_mtls_from_path(certificate_filepath, private_key_filepath) {\n        let opt = new TlsContextOptions();\n        opt.certificate_filepath = certificate_filepath;\n        opt.private_key_filepath = private_key_filepath;\n        opt.verify_peer = true;\n        return opt;\n    }\n    /**\n     * Creates a TLS context with secure-by-default options, along with a client cert and password\n     * @param pkcs12_filepath - Path to client certificate in PKCS#12 format\n     * @param pkcs12_password - PKCS#12 password\n     *\n     * @returns newly configured TlsContextOptions object\n    */\n    static create_client_with_mtls_pkcs_from_path(pkcs12_filepath, pkcs12_password) {\n        let opt = new TlsContextOptions();\n        opt.pkcs12_filepath = pkcs12_filepath;\n        opt.pkcs12_password = pkcs12_password;\n        opt.verify_peer = true;\n        return opt;\n    }\n    /**\n     * Creates TLS context with peer verification disabled, along with a certificate and private key\n     * @param certificate_filepath - Path to certificate, in PEM format\n     * @param private_key_filepath - Path to private key, in PEM format\n     *\n     * @returns newly configured TlsContextOptions object\n     */\n    static create_server_with_mtls_from_path(certificate_filepath, private_key_filepath) {\n        let opt = new TlsContextOptions();\n        opt.certificate_filepath = certificate_filepath;\n        opt.private_key_filepath = private_key_filepath;\n        opt.verify_peer = false;\n        return opt;\n    }\n    /**\n     * Creates TLS context with peer verification disabled, along with a certificate and private key\n     * in PKCS#12 format\n     * @param pkcs12_filepath - Path to certificate, in PKCS#12 format\n     * @param pkcs12_password - PKCS#12 Password\n     *\n     * @returns newly configured TlsContextOptions object\n     */\n    static create_server_with_mtls_pkcs_from_path(pkcs12_filepath, pkcs12_password) {\n        let opt = new TlsContextOptions();\n        opt.pkcs12_filepath = pkcs12_filepath;\n        opt.pkcs12_password = pkcs12_password;\n        opt.verify_peer = false;\n        return opt;\n    }\n}\nexports.TlsContextOptions = TlsContextOptions;\n/**\n * Abstract base TLS context used for client/server TLS communications over sockets.\n *\n * @see ClientTlsContext\n * @see ServerTlsContext\n *\n * nodejs only.\n * @category TLS\n */\nclass TlsContext extends native_resource_1.NativeResource {\n    constructor(ctx_opt) {\n        super(binding_1.default.io_tls_ctx_new(ctx_opt.min_tls_version, ctx_opt.ca_filepath, ctx_opt.ca_dirpath, ctx_opt.certificate_authority, (ctx_opt.alpn_list && ctx_opt.alpn_list.length > 0) ? ctx_opt.alpn_list.join(';') : undefined, ctx_opt.certificate_filepath, ctx_opt.certificate, ctx_opt.private_key_filepath, ctx_opt.private_key, ctx_opt.pkcs12_filepath, ctx_opt.pkcs12_password, ctx_opt.verify_peer));\n    }\n}\nexports.TlsContext = TlsContext;\n/**\n * TLS context used for client TLS communications over sockets. If no\n * options are supplied, the context will default to enabling peer verification\n * only.\n *\n * nodejs only.\n * @category TLS\n */\nclass ClientTlsContext extends TlsContext {\n    constructor(ctx_opt) {\n        if (!ctx_opt) {\n            ctx_opt = new TlsContextOptions();\n            ctx_opt.verify_peer = true;\n        }\n        super(ctx_opt);\n    }\n}\nexports.ClientTlsContext = ClientTlsContext;\n/**\n * TLS context used for server TLS communications over sockets. If no\n * options are supplied, the context will default to disabling peer verification\n * only.\n *\n * nodejs only.\n * @category TLS\n */\nclass ServerTlsContext extends TlsContext {\n    constructor(ctx_opt) {\n        if (!ctx_opt) {\n            ctx_opt = new TlsContextOptions();\n            ctx_opt.verify_peer = false;\n        }\n        super(ctx_opt);\n    }\n}\nexports.ServerTlsContext = ServerTlsContext;\n/**\n * TLS options that are unique to a given connection using a shared TlsContext.\n *\n * nodejs only.\n * @category TLS\n */\nclass TlsConnectionOptions extends native_resource_1.NativeResource {\n    constructor(tls_ctx, server_name, alpn_list = []) {\n        super(binding_1.default.io_tls_connection_options_new(tls_ctx.native_handle(), server_name, (alpn_list && alpn_list.length > 0) ? alpn_list.join(';') : undefined));\n        this.tls_ctx = tls_ctx;\n        this.server_name = server_name;\n        this.alpn_list = alpn_list;\n    }\n}\nexports.TlsConnectionOptions = TlsConnectionOptions;\n//# sourceMappingURL=io.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MqttClientConnection = exports.MqttClient = void 0;\n/**\n * @packageDocumentation\n * @module mqtt\n */\nconst binding_1 = __importDefault(require(\"./binding\"));\nconst native_resource_1 = require(\"./native_resource\");\nconst event_1 = require(\"../common/event\");\nconst error_1 = require(\"./error\");\nconst io = __importStar(require(\"./io\"));\nvar http_1 = require(\"./http\");\nObject.defineProperty(exports, \"HttpProxyOptions\", { enumerable: true, get: function () { return http_1.HttpProxyOptions; } });\nvar mqtt_1 = require(\"../common/mqtt\");\nObject.defineProperty(exports, \"QoS\", { enumerable: true, get: function () { return mqtt_1.QoS; } });\nObject.defineProperty(exports, \"MqttWill\", { enumerable: true, get: function () { return mqtt_1.MqttWill; } });\n/**\n * MQTT client\n *\n * @category MQTT\n */\nclass MqttClient extends native_resource_1.NativeResource {\n    /**\n     * @param bootstrap The {@link ClientBootstrap} to use for socket connections.  Leave undefined to use the\n     *          default system-wide bootstrap (recommended).\n     */\n    constructor(bootstrap = undefined) {\n        super(binding_1.default.mqtt_client_new(bootstrap != null ? bootstrap.native_handle() : null));\n        this.bootstrap = bootstrap;\n    }\n    /**\n     * Creates a new {@link MqttClientConnection}\n     * @param config Configuration for the mqtt connection\n     * @returns A new connection\n     */\n    new_connection(config) {\n        return new MqttClientConnection(this, config);\n    }\n}\nexports.MqttClient = MqttClient;\n/** @internal */\nfunction normalize_payload(payload) {\n    if (ArrayBuffer.isView(payload)) {\n        // native can use ArrayBufferView bytes directly\n        return payload;\n    }\n    if (payload instanceof ArrayBuffer) {\n        // native can use ArrayBuffer bytes directly\n        return payload;\n    }\n    if (typeof payload === 'string') {\n        // native will convert string to utf-8\n        return payload;\n    }\n    if (typeof payload === 'object') {\n        // convert object to JSON string (which will be converted to utf-8 in native)\n        return JSON.stringify(payload);\n    }\n    throw new TypeError(\"payload parameter must be a string, object, or DataView.\");\n}\n/**\n * MQTT client connection\n *\n * @category MQTT\n */\nclass MqttClientConnection extends native_resource_1.NativeResourceMixin(event_1.BufferedEventEmitter) {\n    /**\n     * @param client The client that owns this connection\n     * @param config The configuration for this connection\n     */\n    constructor(client, config) {\n        super();\n        this.client = client;\n        this.config = config;\n        // If there is a will, ensure that its payload is normalized to a DataView\n        const will = config.will ?\n            {\n                topic: config.will.topic,\n                qos: config.will.qos,\n                payload: normalize_payload(config.will.payload),\n                retain: config.will.retain\n            }\n            : undefined;\n        this._super(binding_1.default.mqtt_client_connection_new(client.native_handle(), (error_code) => { this._on_connection_interrupted(error_code); }, (return_code, session_present) => { this._on_connection_resumed(return_code, session_present); }, config.tls_ctx ? config.tls_ctx.native_handle() : null, will, config.username, config.password, config.use_websocket, config.proxy_options ? config.proxy_options.create_native_handle() : undefined, config.websocket_handshake_transform));\n        this.tls_ctx = config.tls_ctx;\n        binding_1.default.mqtt_client_connection_on_message(this.native_handle(), this._on_any_publish.bind(this));\n        /*\n         * Failed mqtt operations (which is normal) emit error events as well as rejecting the original promise.\n         * By installing a default error handler here we help prevent common issues where operation failures bring\n         * the whole program to an end because a handler wasn't installed.  Programs that install their own handler\n         * will be unaffected.\n         */\n        this.on('error', (error) => { });\n    }\n    close() {\n        binding_1.default.mqtt_client_connection_close(this.native_handle());\n    }\n    // Overridden to allow uncorking on ready\n    on(event, listener) {\n        super.on(event, listener);\n        if (event == 'connect') {\n            process.nextTick(() => {\n                this.uncork();\n            });\n        }\n        return this;\n    }\n    /**\n     * Open the actual connection to the server (async).\n     * @returns A Promise which completes whether the connection succeeds or fails.\n     *          If connection fails, the Promise will reject with an exception.\n     *          If connection succeeds, the Promise will return a boolean that is\n     *          true for resuming an existing session, or false if the session is new\n     */\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                reject = this._reject(reject);\n                try {\n                    binding_1.default.mqtt_client_connection_connect(this.native_handle(), this.config.client_id, this.config.host_name, this.config.port, this.config.socket_options.native_handle(), this.config.keep_alive, this.config.ping_timeout, this.config.protocol_operation_timeout, this.config.clean_session, this._on_connect_callback.bind(this, resolve, reject));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * The connection will automatically reconnect. To cease reconnection attempts, call {@link disconnect}.\n     * To resume the connection, call {@link connect}.\n     * @deprecated\n     */\n    reconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                reject = this._reject(reject);\n                try {\n                    binding_1.default.mqtt_client_connection_reconnect(this.native_handle(), this._on_connect_callback.bind(this, resolve, reject));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Publish message (async).\n     * If the device is offline, the PUBLISH packet will be sent once the connection resumes.\n     *\n     * @param topic Topic name\n     * @param payload Contents of message\n     * @param qos Quality of Service for delivering this message\n     * @param retain If true, the server will store the message and its QoS so that it can be\n     *               delivered to future subscribers whose subscriptions match the topic name\n     * @returns Promise which returns a {@link MqttRequest} which will contain the packet id of\n     *          the PUBLISH packet.\n     *\n     * * For QoS 0, completes as soon as the packet is sent.\n     * * For QoS 1, completes when PUBACK is received.\n     * * For QoS 2, completes when PUBCOMP is received.\n     */\n    publish(topic, payload, qos, retain = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                reject = this._reject(reject);\n                try {\n                    binding_1.default.mqtt_client_connection_publish(this.native_handle(), topic, normalize_payload(payload), qos, retain, this._on_puback_callback.bind(this, resolve, reject));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Subscribe to a topic filter (async).\n     * The client sends a SUBSCRIBE packet and the server responds with a SUBACK.\n     *\n     * subscribe() may be called while the device is offline, though the async\n     * operation cannot complete successfully until the connection resumes.\n     *\n     * Once subscribed, `callback` is invoked each time a message matching\n     * the `topic` is received. It is possible for such messages to arrive before\n     * the SUBACK is received.\n     *\n     * @param topic Subscribe to this topic filter, which may include wildcards\n     * @param qos Maximum requested QoS that server may use when sending messages to the client.\n     *            The server may grant a lower QoS in the SUBACK\n     * @param on_message Optional callback invoked when message received.\n     * @returns Promise which returns a {@link MqttSubscribeRequest} which will contain the\n     *          result of the SUBSCRIBE. The Promise resolves when a SUBACK is returned\n     *          from the server or is rejected when an exception occurs.\n     */\n    subscribe(topic, qos, on_message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                reject = this._reject(reject);\n                try {\n                    binding_1.default.mqtt_client_connection_subscribe(this.native_handle(), topic, qos, on_message, this._on_suback_callback.bind(this, resolve, reject));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Unsubscribe from a topic filter (async).\n     * The client sends an UNSUBSCRIBE packet, and the server responds with an UNSUBACK.\n     * @param topic The topic filter to unsubscribe from. May contain wildcards.\n     * @returns Promise wihch returns a {@link MqttRequest} which will contain the packet id\n     *          of the UNSUBSCRIBE packet being acknowledged. Promise is resolved when an\n     *          UNSUBACK is received from the server or is rejected when an exception occurs.\n     */\n    unsubscribe(topic) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                reject = this._reject(reject);\n                try {\n                    binding_1.default.mqtt_client_connection_unsubscribe(this.native_handle(), topic, this._on_unsuback_callback.bind(this, resolve, reject));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Close the connection (async).\n     * @returns Promise which completes when the connection is closed.\n    */\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                reject = this._reject(reject);\n                try {\n                    binding_1.default.mqtt_client_connection_disconnect(this.native_handle(), this._on_disconnect_callback.bind(this, resolve));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    // Wrap a promise rejection with a function that will also emit the error as an event\n    _reject(reject) {\n        return (reason) => {\n            reject(reason);\n            process.nextTick(() => {\n                this.emit('error', new error_1.CrtError(reason));\n            });\n        };\n    }\n    _on_connection_interrupted(error_code) {\n        this.emit('interrupt', new error_1.CrtError(error_code));\n    }\n    _on_connection_resumed(return_code, session_present) {\n        this.emit('resume', return_code, session_present);\n    }\n    _on_any_publish(topic, payload, dup, qos, retain) {\n        this.emit('message', topic, payload, dup, qos, retain);\n    }\n    _on_connect_callback(resolve, reject, error_code, return_code, session_present) {\n        if (error_code == 0 && return_code == 0) {\n            resolve(session_present);\n            this.emit('connect', session_present);\n        }\n        else if (error_code != 0) {\n            reject(\"Failed to connect: \" + io.error_code_to_string(error_code));\n        }\n        else {\n            reject(\"Server rejected connection.\");\n        }\n    }\n    _on_puback_callback(resolve, reject, packet_id, error_code) {\n        if (error_code == 0) {\n            resolve({ packet_id });\n        }\n        else {\n            reject(\"Failed to publish: \" + io.error_code_to_string(error_code));\n        }\n    }\n    _on_suback_callback(resolve, reject, packet_id, topic, qos, error_code) {\n        if (error_code == 0) {\n            resolve({ packet_id, topic, qos, error_code });\n        }\n        else {\n            reject(\"Failed to subscribe: \" + io.error_code_to_string(error_code));\n        }\n    }\n    _on_unsuback_callback(resolve, reject, packet_id, error_code) {\n        if (error_code == 0) {\n            resolve({ packet_id });\n        }\n        else {\n            reject(\"Failed to unsubscribe: \" + io.error_code_to_string(error_code));\n        }\n    }\n    _on_disconnect_callback(resolve) {\n        resolve();\n        this.emit('disconnect');\n        this.close();\n    }\n}\nexports.MqttClientConnection = MqttClientConnection;\n//# sourceMappingURL=mqtt.js.map","\"use strict\";\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NativeResourceMixin = exports.NativeResource = void 0;\n/**\n * Represents an object allocated natively inside the AWS CRT.\n * @internal\n */\nclass NativeResource {\n    constructor(handle) {\n        this.handle = handle;\n    }\n    /** @internal */\n    native_handle() {\n        return this.handle;\n    }\n}\nexports.NativeResource = NativeResource;\n/**\n * Represents an object allocated natively inside the AWS CRT which also\n * needs a node/TS base class\n * @internal\n */\nfunction NativeResourceMixin(Base) {\n    /** @internal */\n    return class extends Base {\n        /** @internal */\n        constructor(...args) {\n            const handle = args.shift();\n            super(...args);\n            this._handle = handle;\n        }\n        /** @internal */\n        _super(handle) {\n            this._handle = handle;\n        }\n        /** @internal */\n        native_handle() {\n            return this._handle;\n        }\n    };\n}\nexports.NativeResourceMixin = NativeResourceMixin;\n//# sourceMappingURL=native_resource.js.map","'use strict';\n\nconst stringify = require('./lib/stringify');\nconst compile = require('./lib/compile');\nconst expand = require('./lib/expand');\nconst parse = require('./lib/parse');\n\n/**\n * Expand the given pattern or create a regex-compatible string.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']\n * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {String}\n * @api public\n */\n\nconst braces = (input, options = {}) => {\n  let output = [];\n\n  if (Array.isArray(input)) {\n    for (let pattern of input) {\n      let result = braces.create(pattern, options);\n      if (Array.isArray(result)) {\n        output.push(...result);\n      } else {\n        output.push(result);\n      }\n    }\n  } else {\n    output = [].concat(braces.create(input, options));\n  }\n\n  if (options && options.expand === true && options.nodupes === true) {\n    output = [...new Set(output)];\n  }\n  return output;\n};\n\n/**\n * Parse the given `str` with the given `options`.\n *\n * ```js\n * // braces.parse(pattern, [, options]);\n * const ast = braces.parse('a/{b,c}/d');\n * console.log(ast);\n * ```\n * @param {String} pattern Brace pattern to parse\n * @param {Object} options\n * @return {Object} Returns an AST\n * @api public\n */\n\nbraces.parse = (input, options = {}) => parse(input, options);\n\n/**\n * Creates a braces string from an AST, or an AST node.\n *\n * ```js\n * const braces = require('braces');\n * let ast = braces.parse('foo/{a,b}/bar');\n * console.log(stringify(ast.nodes[2])); //=> '{a,b}'\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.stringify = (input, options = {}) => {\n  if (typeof input === 'string') {\n    return stringify(braces.parse(input, options), options);\n  }\n  return stringify(input, options);\n};\n\n/**\n * Compiles a brace pattern into a regex-compatible, optimized string.\n * This method is called by the main [braces](#braces) function by default.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.compile('a/{b,c}/d'));\n * //=> ['a/(b|c)/d']\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.compile = (input, options = {}) => {\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n  return compile(input, options);\n};\n\n/**\n * Expands a brace pattern into an array. This method is called by the\n * main [braces](#braces) function when `options.expand` is true. Before\n * using this method it's recommended that you read the [performance notes](#performance))\n * and advantages of using [.compile](#compile) instead.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.expand('a/{b,c}/d'));\n * //=> ['a/b/d', 'a/c/d'];\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.expand = (input, options = {}) => {\n  if (typeof input === 'string') {\n    input = braces.parse(input, options);\n  }\n\n  let result = expand(input, options);\n\n  // filter out empty strings if specified\n  if (options.noempty === true) {\n    result = result.filter(Boolean);\n  }\n\n  // filter out duplicates if specified\n  if (options.nodupes === true) {\n    result = [...new Set(result)];\n  }\n\n  return result;\n};\n\n/**\n * Processes a brace pattern and returns either an expanded array\n * (if `options.expand` is true), a highly optimized regex-compatible string.\n * This method is called by the main [braces](#braces) function.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))\n * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.create = (input, options = {}) => {\n  if (input === '' || input.length < 3) {\n    return [input];\n  }\n\n return options.expand !== true\n    ? braces.compile(input, options)\n    : braces.expand(input, options);\n};\n\n/**\n * Expose \"braces\"\n */\n\nmodule.exports = braces;\n","'use strict';\n\nconst fill = require('fill-range');\nconst utils = require('./utils');\n\nconst compile = (ast, options = {}) => {\n  let walk = (node, parent = {}) => {\n    let invalidBlock = utils.isInvalidBrace(parent);\n    let invalidNode = node.invalid === true && options.escapeInvalid === true;\n    let invalid = invalidBlock === true || invalidNode === true;\n    let prefix = options.escapeInvalid === true ? '\\\\' : '';\n    let output = '';\n\n    if (node.isOpen === true) {\n      return prefix + node.value;\n    }\n    if (node.isClose === true) {\n      return prefix + node.value;\n    }\n\n    if (node.type === 'open') {\n      return invalid ? (prefix + node.value) : '(';\n    }\n\n    if (node.type === 'close') {\n      return invalid ? (prefix + node.value) : ')';\n    }\n\n    if (node.type === 'comma') {\n      return node.prev.type === 'comma' ? '' : (invalid ? node.value : '|');\n    }\n\n    if (node.value) {\n      return node.value;\n    }\n\n    if (node.nodes && node.ranges > 0) {\n      let args = utils.reduce(node.nodes);\n      let range = fill(...args, { ...options, wrap: false, toRegex: true });\n\n      if (range.length !== 0) {\n        return args.length > 1 && range.length > 1 ? `(${range})` : range;\n      }\n    }\n\n    if (node.nodes) {\n      for (let child of node.nodes) {\n        output += walk(child, node);\n      }\n    }\n    return output;\n  };\n\n  return walk(ast);\n};\n\nmodule.exports = compile;\n","'use strict';\n\nmodule.exports = {\n  MAX_LENGTH: 1024 * 64,\n\n  // Digits\n  CHAR_0: '0', /* 0 */\n  CHAR_9: '9', /* 9 */\n\n  // Alphabet chars.\n  CHAR_UPPERCASE_A: 'A', /* A */\n  CHAR_LOWERCASE_A: 'a', /* a */\n  CHAR_UPPERCASE_Z: 'Z', /* Z */\n  CHAR_LOWERCASE_Z: 'z', /* z */\n\n  CHAR_LEFT_PARENTHESES: '(', /* ( */\n  CHAR_RIGHT_PARENTHESES: ')', /* ) */\n\n  CHAR_ASTERISK: '*', /* * */\n\n  // Non-alphabetic chars.\n  CHAR_AMPERSAND: '&', /* & */\n  CHAR_AT: '@', /* @ */\n  CHAR_BACKSLASH: '\\\\', /* \\ */\n  CHAR_BACKTICK: '`', /* ` */\n  CHAR_CARRIAGE_RETURN: '\\r', /* \\r */\n  CHAR_CIRCUMFLEX_ACCENT: '^', /* ^ */\n  CHAR_COLON: ':', /* : */\n  CHAR_COMMA: ',', /* , */\n  CHAR_DOLLAR: '$', /* . */\n  CHAR_DOT: '.', /* . */\n  CHAR_DOUBLE_QUOTE: '\"', /* \" */\n  CHAR_EQUAL: '=', /* = */\n  CHAR_EXCLAMATION_MARK: '!', /* ! */\n  CHAR_FORM_FEED: '\\f', /* \\f */\n  CHAR_FORWARD_SLASH: '/', /* / */\n  CHAR_HASH: '#', /* # */\n  CHAR_HYPHEN_MINUS: '-', /* - */\n  CHAR_LEFT_ANGLE_BRACKET: '<', /* < */\n  CHAR_LEFT_CURLY_BRACE: '{', /* { */\n  CHAR_LEFT_SQUARE_BRACKET: '[', /* [ */\n  CHAR_LINE_FEED: '\\n', /* \\n */\n  CHAR_NO_BREAK_SPACE: '\\u00A0', /* \\u00A0 */\n  CHAR_PERCENT: '%', /* % */\n  CHAR_PLUS: '+', /* + */\n  CHAR_QUESTION_MARK: '?', /* ? */\n  CHAR_RIGHT_ANGLE_BRACKET: '>', /* > */\n  CHAR_RIGHT_CURLY_BRACE: '}', /* } */\n  CHAR_RIGHT_SQUARE_BRACKET: ']', /* ] */\n  CHAR_SEMICOLON: ';', /* ; */\n  CHAR_SINGLE_QUOTE: '\\'', /* ' */\n  CHAR_SPACE: ' ', /*   */\n  CHAR_TAB: '\\t', /* \\t */\n  CHAR_UNDERSCORE: '_', /* _ */\n  CHAR_VERTICAL_LINE: '|', /* | */\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE: '\\uFEFF' /* \\uFEFF */\n};\n","'use strict';\n\nconst fill = require('fill-range');\nconst stringify = require('./stringify');\nconst utils = require('./utils');\n\nconst append = (queue = '', stash = '', enclose = false) => {\n  let result = [];\n\n  queue = [].concat(queue);\n  stash = [].concat(stash);\n\n  if (!stash.length) return queue;\n  if (!queue.length) {\n    return enclose ? utils.flatten(stash).map(ele => `{${ele}}`) : stash;\n  }\n\n  for (let item of queue) {\n    if (Array.isArray(item)) {\n      for (let value of item) {\n        result.push(append(value, stash, enclose));\n      }\n    } else {\n      for (let ele of stash) {\n        if (enclose === true && typeof ele === 'string') ele = `{${ele}}`;\n        result.push(Array.isArray(ele) ? append(item, ele, enclose) : (item + ele));\n      }\n    }\n  }\n  return utils.flatten(result);\n};\n\nconst expand = (ast, options = {}) => {\n  let rangeLimit = options.rangeLimit === void 0 ? 1000 : options.rangeLimit;\n\n  let walk = (node, parent = {}) => {\n    node.queue = [];\n\n    let p = parent;\n    let q = parent.queue;\n\n    while (p.type !== 'brace' && p.type !== 'root' && p.parent) {\n      p = p.parent;\n      q = p.queue;\n    }\n\n    if (node.invalid || node.dollar) {\n      q.push(append(q.pop(), stringify(node, options)));\n      return;\n    }\n\n    if (node.type === 'brace' && node.invalid !== true && node.nodes.length === 2) {\n      q.push(append(q.pop(), ['{}']));\n      return;\n    }\n\n    if (node.nodes && node.ranges > 0) {\n      let args = utils.reduce(node.nodes);\n\n      if (utils.exceedsLimit(...args, options.step, rangeLimit)) {\n        throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');\n      }\n\n      let range = fill(...args, options);\n      if (range.length === 0) {\n        range = stringify(node, options);\n      }\n\n      q.push(append(q.pop(), range));\n      node.nodes = [];\n      return;\n    }\n\n    let enclose = utils.encloseBrace(node);\n    let queue = node.queue;\n    let block = node;\n\n    while (block.type !== 'brace' && block.type !== 'root' && block.parent) {\n      block = block.parent;\n      queue = block.queue;\n    }\n\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i];\n\n      if (child.type === 'comma' && node.type === 'brace') {\n        if (i === 1) queue.push('');\n        queue.push('');\n        continue;\n      }\n\n      if (child.type === 'close') {\n        q.push(append(q.pop(), queue, enclose));\n        continue;\n      }\n\n      if (child.value && child.type !== 'open') {\n        queue.push(append(queue.pop(), child.value));\n        continue;\n      }\n\n      if (child.nodes) {\n        walk(child, node);\n      }\n    }\n\n    return queue;\n  };\n\n  return utils.flatten(walk(ast));\n};\n\nmodule.exports = expand;\n","'use strict';\n\nconst stringify = require('./stringify');\n\n/**\n * Constants\n */\n\nconst {\n  MAX_LENGTH,\n  CHAR_BACKSLASH, /* \\ */\n  CHAR_BACKTICK, /* ` */\n  CHAR_COMMA, /* , */\n  CHAR_DOT, /* . */\n  CHAR_LEFT_PARENTHESES, /* ( */\n  CHAR_RIGHT_PARENTHESES, /* ) */\n  CHAR_LEFT_CURLY_BRACE, /* { */\n  CHAR_RIGHT_CURLY_BRACE, /* } */\n  CHAR_LEFT_SQUARE_BRACKET, /* [ */\n  CHAR_RIGHT_SQUARE_BRACKET, /* ] */\n  CHAR_DOUBLE_QUOTE, /* \" */\n  CHAR_SINGLE_QUOTE, /* ' */\n  CHAR_NO_BREAK_SPACE,\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE\n} = require('./constants');\n\n/**\n * parse\n */\n\nconst parse = (input, options = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  let opts = options || {};\n  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  if (input.length > max) {\n    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);\n  }\n\n  let ast = { type: 'root', input, nodes: [] };\n  let stack = [ast];\n  let block = ast;\n  let prev = ast;\n  let brackets = 0;\n  let length = input.length;\n  let index = 0;\n  let depth = 0;\n  let value;\n  let memo = {};\n\n  /**\n   * Helpers\n   */\n\n  const advance = () => input[index++];\n  const push = node => {\n    if (node.type === 'text' && prev.type === 'dot') {\n      prev.type = 'text';\n    }\n\n    if (prev && prev.type === 'text' && node.type === 'text') {\n      prev.value += node.value;\n      return;\n    }\n\n    block.nodes.push(node);\n    node.parent = block;\n    node.prev = prev;\n    prev = node;\n    return node;\n  };\n\n  push({ type: 'bos' });\n\n  while (index < length) {\n    block = stack[stack.length - 1];\n    value = advance();\n\n    /**\n     * Invalid chars\n     */\n\n    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {\n      continue;\n    }\n\n    /**\n     * Escaped chars\n     */\n\n    if (value === CHAR_BACKSLASH) {\n      push({ type: 'text', value: (options.keepEscaping ? value : '') + advance() });\n      continue;\n    }\n\n    /**\n     * Right square bracket (literal): ']'\n     */\n\n    if (value === CHAR_RIGHT_SQUARE_BRACKET) {\n      push({ type: 'text', value: '\\\\' + value });\n      continue;\n    }\n\n    /**\n     * Left square bracket: '['\n     */\n\n    if (value === CHAR_LEFT_SQUARE_BRACKET) {\n      brackets++;\n\n      let closed = true;\n      let next;\n\n      while (index < length && (next = advance())) {\n        value += next;\n\n        if (next === CHAR_LEFT_SQUARE_BRACKET) {\n          brackets++;\n          continue;\n        }\n\n        if (next === CHAR_BACKSLASH) {\n          value += advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          brackets--;\n\n          if (brackets === 0) {\n            break;\n          }\n        }\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Parentheses\n     */\n\n    if (value === CHAR_LEFT_PARENTHESES) {\n      block = push({ type: 'paren', nodes: [] });\n      stack.push(block);\n      push({ type: 'text', value });\n      continue;\n    }\n\n    if (value === CHAR_RIGHT_PARENTHESES) {\n      if (block.type !== 'paren') {\n        push({ type: 'text', value });\n        continue;\n      }\n      block = stack.pop();\n      push({ type: 'text', value });\n      block = stack[stack.length - 1];\n      continue;\n    }\n\n    /**\n     * Quotes: '|\"|`\n     */\n\n    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {\n      let open = value;\n      let next;\n\n      if (options.keepQuotes !== true) {\n        value = '';\n      }\n\n      while (index < length && (next = advance())) {\n        if (next === CHAR_BACKSLASH) {\n          value += next + advance();\n          continue;\n        }\n\n        if (next === open) {\n          if (options.keepQuotes === true) value += next;\n          break;\n        }\n\n        value += next;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Left curly brace: '{'\n     */\n\n    if (value === CHAR_LEFT_CURLY_BRACE) {\n      depth++;\n\n      let dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;\n      let brace = {\n        type: 'brace',\n        open: true,\n        close: false,\n        dollar,\n        depth,\n        commas: 0,\n        ranges: 0,\n        nodes: []\n      };\n\n      block = push(brace);\n      stack.push(block);\n      push({ type: 'open', value });\n      continue;\n    }\n\n    /**\n     * Right curly brace: '}'\n     */\n\n    if (value === CHAR_RIGHT_CURLY_BRACE) {\n      if (block.type !== 'brace') {\n        push({ type: 'text', value });\n        continue;\n      }\n\n      let type = 'close';\n      block = stack.pop();\n      block.close = true;\n\n      push({ type, value });\n      depth--;\n\n      block = stack[stack.length - 1];\n      continue;\n    }\n\n    /**\n     * Comma: ','\n     */\n\n    if (value === CHAR_COMMA && depth > 0) {\n      if (block.ranges > 0) {\n        block.ranges = 0;\n        let open = block.nodes.shift();\n        block.nodes = [open, { type: 'text', value: stringify(block) }];\n      }\n\n      push({ type: 'comma', value });\n      block.commas++;\n      continue;\n    }\n\n    /**\n     * Dot: '.'\n     */\n\n    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {\n      let siblings = block.nodes;\n\n      if (depth === 0 || siblings.length === 0) {\n        push({ type: 'text', value });\n        continue;\n      }\n\n      if (prev.type === 'dot') {\n        block.range = [];\n        prev.value += value;\n        prev.type = 'range';\n\n        if (block.nodes.length !== 3 && block.nodes.length !== 5) {\n          block.invalid = true;\n          block.ranges = 0;\n          prev.type = 'text';\n          continue;\n        }\n\n        block.ranges++;\n        block.args = [];\n        continue;\n      }\n\n      if (prev.type === 'range') {\n        siblings.pop();\n\n        let before = siblings[siblings.length - 1];\n        before.value += prev.value + value;\n        prev = before;\n        block.ranges--;\n        continue;\n      }\n\n      push({ type: 'dot', value });\n      continue;\n    }\n\n    /**\n     * Text\n     */\n\n    push({ type: 'text', value });\n  }\n\n  // Mark imbalanced braces and brackets as invalid\n  do {\n    block = stack.pop();\n\n    if (block.type !== 'root') {\n      block.nodes.forEach(node => {\n        if (!node.nodes) {\n          if (node.type === 'open') node.isOpen = true;\n          if (node.type === 'close') node.isClose = true;\n          if (!node.nodes) node.type = 'text';\n          node.invalid = true;\n        }\n      });\n\n      // get the location of the block on parent.nodes (block's siblings)\n      let parent = stack[stack.length - 1];\n      let index = parent.nodes.indexOf(block);\n      // replace the (invalid) block with it's nodes\n      parent.nodes.splice(index, 1, ...block.nodes);\n    }\n  } while (stack.length > 0);\n\n  push({ type: 'eos' });\n  return ast;\n};\n\nmodule.exports = parse;\n","'use strict';\n\nconst utils = require('./utils');\n\nmodule.exports = (ast, options = {}) => {\n  let stringify = (node, parent = {}) => {\n    let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);\n    let invalidNode = node.invalid === true && options.escapeInvalid === true;\n    let output = '';\n\n    if (node.value) {\n      if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {\n        return '\\\\' + node.value;\n      }\n      return node.value;\n    }\n\n    if (node.value) {\n      return node.value;\n    }\n\n    if (node.nodes) {\n      for (let child of node.nodes) {\n        output += stringify(child);\n      }\n    }\n    return output;\n  };\n\n  return stringify(ast);\n};\n\n","'use strict';\n\nexports.isInteger = num => {\n  if (typeof num === 'number') {\n    return Number.isInteger(num);\n  }\n  if (typeof num === 'string' && num.trim() !== '') {\n    return Number.isInteger(Number(num));\n  }\n  return false;\n};\n\n/**\n * Find a node of the given type\n */\n\nexports.find = (node, type) => node.nodes.find(node => node.type === type);\n\n/**\n * Find a node of the given type\n */\n\nexports.exceedsLimit = (min, max, step = 1, limit) => {\n  if (limit === false) return false;\n  if (!exports.isInteger(min) || !exports.isInteger(max)) return false;\n  return ((Number(max) - Number(min)) / Number(step)) >= limit;\n};\n\n/**\n * Escape the given node with '\\\\' before node.value\n */\n\nexports.escapeNode = (block, n = 0, type) => {\n  let node = block.nodes[n];\n  if (!node) return;\n\n  if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {\n    if (node.escaped !== true) {\n      node.value = '\\\\' + node.value;\n      node.escaped = true;\n    }\n  }\n};\n\n/**\n * Returns true if the given brace node should be enclosed in literal braces\n */\n\nexports.encloseBrace = node => {\n  if (node.type !== 'brace') return false;\n  if ((node.commas >> 0 + node.ranges >> 0) === 0) {\n    node.invalid = true;\n    return true;\n  }\n  return false;\n};\n\n/**\n * Returns true if a brace node is invalid.\n */\n\nexports.isInvalidBrace = block => {\n  if (block.type !== 'brace') return false;\n  if (block.invalid === true || block.dollar) return true;\n  if ((block.commas >> 0 + block.ranges >> 0) === 0) {\n    block.invalid = true;\n    return true;\n  }\n  if (block.open !== true || block.close !== true) {\n    block.invalid = true;\n    return true;\n  }\n  return false;\n};\n\n/**\n * Returns true if a node is an open or close node\n */\n\nexports.isOpenOrClose = node => {\n  if (node.type === 'open' || node.type === 'close') {\n    return true;\n  }\n  return node.open === true || node.close === true;\n};\n\n/**\n * Reduce an array of text nodes.\n */\n\nexports.reduce = nodes => nodes.reduce((acc, node) => {\n  if (node.type === 'text') acc.push(node.value);\n  if (node.type === 'range') node.type = 'text';\n  return acc;\n}, []);\n\n/**\n * Flatten an array\n */\n\nexports.flatten = (...args) => {\n  const result = [];\n  const flat = arr => {\n    for (let i = 0; i < arr.length; i++) {\n      let ele = arr[i];\n      Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);\n    }\n    return result;\n  };\n  flat(args);\n  return result;\n};\n","'use strict';\nconst path = require('path');\nconst pathType = require('path-type');\n\nconst getExtensions = extensions => extensions.length > 1 ? `{${extensions.join(',')}}` : extensions[0];\n\nconst getPath = (filepath, cwd) => {\n\tconst pth = filepath[0] === '!' ? filepath.slice(1) : filepath;\n\treturn path.isAbsolute(pth) ? pth : path.join(cwd, pth);\n};\n\nconst addExtensions = (file, extensions) => {\n\tif (path.extname(file)) {\n\t\treturn `**/${file}`;\n\t}\n\n\treturn `**/${file}.${getExtensions(extensions)}`;\n};\n\nconst getGlob = (directory, options) => {\n\tif (options.files && !Array.isArray(options.files)) {\n\t\tthrow new TypeError(`Expected \\`files\\` to be of type \\`Array\\` but received type \\`${typeof options.files}\\``);\n\t}\n\n\tif (options.extensions && !Array.isArray(options.extensions)) {\n\t\tthrow new TypeError(`Expected \\`extensions\\` to be of type \\`Array\\` but received type \\`${typeof options.extensions}\\``);\n\t}\n\n\tif (options.files && options.extensions) {\n\t\treturn options.files.map(x => path.posix.join(directory, addExtensions(x, options.extensions)));\n\t}\n\n\tif (options.files) {\n\t\treturn options.files.map(x => path.posix.join(directory, `**/${x}`));\n\t}\n\n\tif (options.extensions) {\n\t\treturn [path.posix.join(directory, `**/*.${getExtensions(options.extensions)}`)];\n\t}\n\n\treturn [path.posix.join(directory, '**')];\n};\n\nmodule.exports = async (input, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\t...options\n\t};\n\n\tif (typeof options.cwd !== 'string') {\n\t\tthrow new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n\t}\n\n\tconst globs = await Promise.all([].concat(input).map(async x => {\n\t\tconst isDirectory = await pathType.isDirectory(getPath(x, options.cwd));\n\t\treturn isDirectory ? getGlob(x, options) : x;\n\t}));\n\n\treturn [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};\n\nmodule.exports.sync = (input, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\t...options\n\t};\n\n\tif (typeof options.cwd !== 'string') {\n\t\tthrow new TypeError(`Expected \\`cwd\\` to be of type \\`string\\` but received type \\`${typeof options.cwd}\\``);\n\t}\n\n\tconst globs = [].concat(input).map(x => pathType.isDirectorySync(getPath(x, options.cwd)) ? getGlob(x, options) : x);\n\n\treturn [].concat.apply([], globs); // eslint-disable-line prefer-spread\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;\nvar entities_json_1 = __importDefault(require(\"./maps/entities.json\"));\nvar legacy_json_1 = __importDefault(require(\"./maps/legacy.json\"));\nvar xml_json_1 = __importDefault(require(\"./maps/xml.json\"));\nvar decode_codepoint_1 = __importDefault(require(\"./decode_codepoint\"));\nvar strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\\da-fA-F]+|#\\d+);/g;\nexports.decodeXML = getStrictDecoder(xml_json_1.default);\nexports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);\nfunction getStrictDecoder(map) {\n    var replace = getReplacer(map);\n    return function (str) { return String(str).replace(strictEntityRe, replace); };\n}\nvar sorter = function (a, b) { return (a < b ? 1 : -1); };\nexports.decodeHTML = (function () {\n    var legacy = Object.keys(legacy_json_1.default).sort(sorter);\n    var keys = Object.keys(entities_json_1.default).sort(sorter);\n    for (var i = 0, j = 0; i < keys.length; i++) {\n        if (legacy[j] === keys[i]) {\n            keys[i] += \";?\";\n            j++;\n        }\n        else {\n            keys[i] += \";\";\n        }\n    }\n    var re = new RegExp(\"&(?:\" + keys.join(\"|\") + \"|#[xX][\\\\da-fA-F]+;?|#\\\\d+;?)\", \"g\");\n    var replace = getReplacer(entities_json_1.default);\n    function replacer(str) {\n        if (str.substr(-1) !== \";\")\n            str += \";\";\n        return replace(str);\n    }\n    // TODO consider creating a merged map\n    return function (str) { return String(str).replace(re, replacer); };\n})();\nfunction getReplacer(map) {\n    return function replace(str) {\n        if (str.charAt(1) === \"#\") {\n            var secondChar = str.charAt(2);\n            if (secondChar === \"X\" || secondChar === \"x\") {\n                return decode_codepoint_1.default(parseInt(str.substr(3), 16));\n            }\n            return decode_codepoint_1.default(parseInt(str.substr(2), 10));\n        }\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        return map[str.slice(1, -1)] || str;\n    };\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar decode_json_1 = __importDefault(require(\"./maps/decode.json\"));\n// Adapted from https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119\nvar fromCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.fromCodePoint ||\n    function (codePoint) {\n        var output = \"\";\n        if (codePoint > 0xffff) {\n            codePoint -= 0x10000;\n            output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n            codePoint = 0xdc00 | (codePoint & 0x3ff);\n        }\n        output += String.fromCharCode(codePoint);\n        return output;\n    };\nfunction decodeCodePoint(codePoint) {\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return \"\\uFFFD\";\n    }\n    if (codePoint in decode_json_1.default) {\n        codePoint = decode_json_1.default[codePoint];\n    }\n    return fromCodePoint(codePoint);\n}\nexports.default = decodeCodePoint;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;\nvar xml_json_1 = __importDefault(require(\"./maps/xml.json\"));\nvar inverseXML = getInverseObj(xml_json_1.default);\nvar xmlReplacer = getInverseReplacer(inverseXML);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeXML = getASCIIEncoder(inverseXML);\nvar entities_json_1 = __importDefault(require(\"./maps/entities.json\"));\nvar inverseHTML = getInverseObj(entities_json_1.default);\nvar htmlReplacer = getInverseReplacer(inverseHTML);\n/**\n * Encodes all entities and non-ASCII characters in the input.\n *\n * This includes characters that are valid ASCII characters in HTML documents.\n * For example `#` will be encoded as `&num;`. To get a more compact output,\n * consider using the `encodeNonAsciiHTML` function.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeHTML = getInverse(inverseHTML, htmlReplacer);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);\nfunction getInverseObj(obj) {\n    return Object.keys(obj)\n        .sort()\n        .reduce(function (inverse, name) {\n        inverse[obj[name]] = \"&\" + name + \";\";\n        return inverse;\n    }, {});\n}\nfunction getInverseReplacer(inverse) {\n    var single = [];\n    var multiple = [];\n    for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {\n        var k = _a[_i];\n        if (k.length === 1) {\n            // Add value to single array\n            single.push(\"\\\\\" + k);\n        }\n        else {\n            // Add value to multiple array\n            multiple.push(k);\n        }\n    }\n    // Add ranges to single characters.\n    single.sort();\n    for (var start = 0; start < single.length - 1; start++) {\n        // Find the end of a run of characters\n        var end = start;\n        while (end < single.length - 1 &&\n            single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {\n            end += 1;\n        }\n        var count = 1 + end - start;\n        // We want to replace at least three characters\n        if (count < 3)\n            continue;\n        single.splice(start, count, single[start] + \"-\" + single[end]);\n    }\n    multiple.unshift(\"[\" + single.join(\"\") + \"]\");\n    return new RegExp(multiple.join(\"|\"), \"g\");\n}\n// /[^\\0-\\x7F]/gu\nvar reNonASCII = /(?:[\\x80-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g;\nvar getCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null\n    ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        function (str) { return str.codePointAt(0); }\n    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        function (c) {\n            return (c.charCodeAt(0) - 0xd800) * 0x400 +\n                c.charCodeAt(1) -\n                0xdc00 +\n                0x10000;\n        };\nfunction singleCharReplacer(c) {\n    return \"&#x\" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0))\n        .toString(16)\n        .toUpperCase() + \";\";\n}\nfunction getInverse(inverse, re) {\n    return function (data) {\n        return data\n            .replace(re, function (name) { return inverse[name]; })\n            .replace(reNonASCII, singleCharReplacer);\n    };\n}\nvar reEscapeChars = new RegExp(xmlReplacer.source + \"|\" + reNonASCII.source, \"g\");\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\nfunction escape(data) {\n    return data.replace(reEscapeChars, singleCharReplacer);\n}\nexports.escape = escape;\n/**\n * Encodes all characters not valid in XML documents using numeric hexadecimal\n * reference (eg. `&#xfc;`).\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\nfunction escapeUTF8(data) {\n    return data.replace(xmlReplacer, singleCharReplacer);\n}\nexports.escapeUTF8 = escapeUTF8;\nfunction getASCIIEncoder(obj) {\n    return function (data) {\n        return data.replace(reEscapeChars, function (c) { return obj[c] || singleCharReplacer(c); });\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;\nvar decode_1 = require(\"./decode\");\nvar encode_1 = require(\"./encode\");\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.\n * @deprecated Use `decodeXML` or `decodeHTML` directly.\n */\nfunction decode(data, level) {\n    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);\n}\nexports.decode = decode;\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.\n * @deprecated Use `decodeHTMLStrict` or `decodeXML` directly.\n */\nfunction decodeStrict(data, level) {\n    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);\n}\nexports.decodeStrict = decodeStrict;\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.\n * @deprecated Use `encodeHTML`, `encodeXML` or `encodeNonAsciiHTML` directly.\n */\nfunction encode(data, level) {\n    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);\n}\nexports.encode = encode;\nvar encode_2 = require(\"./encode\");\nObject.defineProperty(exports, \"encodeXML\", { enumerable: true, get: function () { return encode_2.encodeXML; } });\nObject.defineProperty(exports, \"encodeHTML\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nObject.defineProperty(exports, \"encodeNonAsciiHTML\", { enumerable: true, get: function () { return encode_2.encodeNonAsciiHTML; } });\nObject.defineProperty(exports, \"escape\", { enumerable: true, get: function () { return encode_2.escape; } });\nObject.defineProperty(exports, \"escapeUTF8\", { enumerable: true, get: function () { return encode_2.escapeUTF8; } });\n// Legacy aliases (deprecated)\nObject.defineProperty(exports, \"encodeHTML4\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nObject.defineProperty(exports, \"encodeHTML5\", { enumerable: true, get: function () { return encode_2.encodeHTML; } });\nvar decode_2 = require(\"./decode\");\nObject.defineProperty(exports, \"decodeXML\", { enumerable: true, get: function () { return decode_2.decodeXML; } });\nObject.defineProperty(exports, \"decodeHTML\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTMLStrict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\n// Legacy aliases (deprecated)\nObject.defineProperty(exports, \"decodeHTML4\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTML5\", { enumerable: true, get: function () { return decode_2.decodeHTML; } });\nObject.defineProperty(exports, \"decodeHTML4Strict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\nObject.defineProperty(exports, \"decodeHTML5Strict\", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });\nObject.defineProperty(exports, \"decodeXMLStrict\", { enumerable: true, get: function () { return decode_2.decodeXML; } });\n","'use strict';\n\nvar isGlob = require('is-glob');\nvar pathPosixDirname = require('path').posix.dirname;\nvar isWin32 = require('os').platform() === 'win32';\n\nvar slash = '/';\nvar backslash = /\\\\/g;\nvar enclosure = /[\\{\\[].*[\\}\\]]$/;\nvar globby = /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/;\nvar escaped = /\\\\([\\!\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g;\n\n/**\n * @param {string} str\n * @param {Object} opts\n * @param {boolean} [opts.flipBackslashes=true]\n * @returns {string}\n */\nmodule.exports = function globParent(str, opts) {\n  var options = Object.assign({ flipBackslashes: true }, opts);\n\n  // flip windows path separators\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\n    str = str.replace(backslash, slash);\n  }\n\n  // special case for strings ending in enclosure containing path separator\n  if (enclosure.test(str)) {\n    str += slash;\n  }\n\n  // preserves full path in case of trailing path separator\n  str += 'a';\n\n  // remove path parts that are globby\n  do {\n    str = pathPosixDirname(str);\n  } while (isGlob(str) || globby.test(str));\n\n  // remove escape chars and return result\n  return str.replace(escaped, '$1');\n};\n","\"use strict\";\nconst taskManager = require(\"./managers/tasks\");\nconst async_1 = require(\"./providers/async\");\nconst stream_1 = require(\"./providers/stream\");\nconst sync_1 = require(\"./providers/sync\");\nconst settings_1 = require(\"./settings\");\nconst utils = require(\"./utils\");\nasync function FastGlob(source, options) {\n    assertPatternsInput(source);\n    const works = getWorks(source, async_1.default, options);\n    const result = await Promise.all(works);\n    return utils.array.flatten(result);\n}\n// https://github.com/typescript-eslint/typescript-eslint/issues/60\n// eslint-disable-next-line no-redeclare\n(function (FastGlob) {\n    function sync(source, options) {\n        assertPatternsInput(source);\n        const works = getWorks(source, sync_1.default, options);\n        return utils.array.flatten(works);\n    }\n    FastGlob.sync = sync;\n    function stream(source, options) {\n        assertPatternsInput(source);\n        const works = getWorks(source, stream_1.default, options);\n        /**\n         * The stream returned by the provider cannot work with an asynchronous iterator.\n         * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.\n         * This affects performance (+25%). I don't see best solution right now.\n         */\n        return utils.stream.merge(works);\n    }\n    FastGlob.stream = stream;\n    function generateTasks(source, options) {\n        assertPatternsInput(source);\n        const patterns = [].concat(source);\n        const settings = new settings_1.default(options);\n        return taskManager.generate(patterns, settings);\n    }\n    FastGlob.generateTasks = generateTasks;\n    function isDynamicPattern(source, options) {\n        assertPatternsInput(source);\n        const settings = new settings_1.default(options);\n        return utils.pattern.isDynamicPattern(source, settings);\n    }\n    FastGlob.isDynamicPattern = isDynamicPattern;\n    function escapePath(source) {\n        assertPatternsInput(source);\n        return utils.path.escape(source);\n    }\n    FastGlob.escapePath = escapePath;\n})(FastGlob || (FastGlob = {}));\nfunction getWorks(source, _Provider, options) {\n    const patterns = [].concat(source);\n    const settings = new settings_1.default(options);\n    const tasks = taskManager.generate(patterns, settings);\n    const provider = new _Provider(settings);\n    return tasks.map(provider.read, provider);\n}\nfunction assertPatternsInput(input) {\n    const source = [].concat(input);\n    const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));\n    if (!isValidSource) {\n        throw new TypeError('Patterns must be a string (non empty) or an array of strings');\n    }\n}\nmodule.exports = FastGlob;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;\nconst utils = require(\"../utils\");\nfunction generate(patterns, settings) {\n    const positivePatterns = getPositivePatterns(patterns);\n    const negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);\n    const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));\n    const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));\n    const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, /* dynamic */ false);\n    const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, /* dynamic */ true);\n    return staticTasks.concat(dynamicTasks);\n}\nexports.generate = generate;\n/**\n * Returns tasks grouped by basic pattern directories.\n *\n * Patterns that can be found inside (`./`) and outside (`../`) the current directory are handled separately.\n * This is necessary because directory traversal starts at the base directory and goes deeper.\n */\nfunction convertPatternsToTasks(positive, negative, dynamic) {\n    const tasks = [];\n    const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);\n    const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);\n    const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);\n    const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);\n    tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));\n    /*\n     * For the sake of reducing future accesses to the file system, we merge all tasks within the current directory\n     * into a global task, if at least one pattern refers to the root (`.`). In this case, the global task covers the rest.\n     */\n    if ('.' in insideCurrentDirectoryGroup) {\n        tasks.push(convertPatternGroupToTask('.', patternsInsideCurrentDirectory, negative, dynamic));\n    }\n    else {\n        tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));\n    }\n    return tasks;\n}\nexports.convertPatternsToTasks = convertPatternsToTasks;\nfunction getPositivePatterns(patterns) {\n    return utils.pattern.getPositivePatterns(patterns);\n}\nexports.getPositivePatterns = getPositivePatterns;\nfunction getNegativePatternsAsPositive(patterns, ignore) {\n    const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);\n    const positive = negative.map(utils.pattern.convertToPositivePattern);\n    return positive;\n}\nexports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;\nfunction groupPatternsByBaseDirectory(patterns) {\n    const group = {};\n    return patterns.reduce((collection, pattern) => {\n        const base = utils.pattern.getBaseDirectory(pattern);\n        if (base in collection) {\n            collection[base].push(pattern);\n        }\n        else {\n            collection[base] = [pattern];\n        }\n        return collection;\n    }, group);\n}\nexports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;\nfunction convertPatternGroupsToTasks(positive, negative, dynamic) {\n    return Object.keys(positive).map((base) => {\n        return convertPatternGroupToTask(base, positive[base], negative, dynamic);\n    });\n}\nexports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;\nfunction convertPatternGroupToTask(base, positive, negative, dynamic) {\n    return {\n        dynamic,\n        positive,\n        negative,\n        base,\n        patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))\n    };\n}\nexports.convertPatternGroupToTask = convertPatternGroupToTask;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"../readers/stream\");\nconst provider_1 = require(\"./provider\");\nclass ProviderAsync extends provider_1.default {\n    constructor() {\n        super(...arguments);\n        this._reader = new stream_1.default(this._settings);\n    }\n    read(task) {\n        const root = this._getRootDirectory(task);\n        const options = this._getReaderOptions(task);\n        const entries = [];\n        return new Promise((resolve, reject) => {\n            const stream = this.api(root, task, options);\n            stream.once('error', reject);\n            stream.on('data', (entry) => entries.push(options.transform(entry)));\n            stream.once('end', () => resolve(entries));\n        });\n    }\n    api(root, task, options) {\n        if (task.dynamic) {\n            return this._reader.dynamic(root, options);\n        }\n        return this._reader.static(task.patterns, options);\n    }\n}\nexports.default = ProviderAsync;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils = require(\"../../utils\");\nconst partial_1 = require(\"../matchers/partial\");\nclass DeepFilter {\n    constructor(_settings, _micromatchOptions) {\n        this._settings = _settings;\n        this._micromatchOptions = _micromatchOptions;\n    }\n    getFilter(basePath, positive, negative) {\n        const matcher = this._getMatcher(positive);\n        const negativeRe = this._getNegativePatternsRe(negative);\n        return (entry) => this._filter(basePath, entry, matcher, negativeRe);\n    }\n    _getMatcher(patterns) {\n        return new partial_1.default(patterns, this._settings, this._micromatchOptions);\n    }\n    _getNegativePatternsRe(patterns) {\n        const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);\n        return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);\n    }\n    _filter(basePath, entry, matcher, negativeRe) {\n        if (this._isSkippedByDeep(basePath, entry.path)) {\n            return false;\n        }\n        if (this._isSkippedSymbolicLink(entry)) {\n            return false;\n        }\n        const filepath = utils.path.removeLeadingDotSegment(entry.path);\n        if (this._isSkippedByPositivePatterns(filepath, matcher)) {\n            return false;\n        }\n        return this._isSkippedByNegativePatterns(filepath, negativeRe);\n    }\n    _isSkippedByDeep(basePath, entryPath) {\n        /**\n         * Avoid unnecessary depth calculations when it doesn't matter.\n         */\n        if (this._settings.deep === Infinity) {\n            return false;\n        }\n        return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;\n    }\n    _getEntryLevel(basePath, entryPath) {\n        const entryPathDepth = entryPath.split('/').length;\n        if (basePath === '') {\n            return entryPathDepth;\n        }\n        const basePathDepth = basePath.split('/').length;\n        return entryPathDepth - basePathDepth;\n    }\n    _isSkippedSymbolicLink(entry) {\n        return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();\n    }\n    _isSkippedByPositivePatterns(entryPath, matcher) {\n        return !this._settings.baseNameMatch && !matcher.match(entryPath);\n    }\n    _isSkippedByNegativePatterns(entryPath, patternsRe) {\n        return !utils.pattern.matchAny(entryPath, patternsRe);\n    }\n}\nexports.default = DeepFilter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils = require(\"../../utils\");\nclass EntryFilter {\n    constructor(_settings, _micromatchOptions) {\n        this._settings = _settings;\n        this._micromatchOptions = _micromatchOptions;\n        this.index = new Map();\n    }\n    getFilter(positive, negative) {\n        const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);\n        const negativeRe = utils.pattern.convertPatternsToRe(negative, this._micromatchOptions);\n        return (entry) => this._filter(entry, positiveRe, negativeRe);\n    }\n    _filter(entry, positiveRe, negativeRe) {\n        if (this._settings.unique && this._isDuplicateEntry(entry)) {\n            return false;\n        }\n        if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {\n            return false;\n        }\n        if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {\n            return false;\n        }\n        const filepath = this._settings.baseNameMatch ? entry.name : entry.path;\n        const isMatched = this._isMatchToPatterns(filepath, positiveRe) && !this._isMatchToPatterns(entry.path, negativeRe);\n        if (this._settings.unique && isMatched) {\n            this._createIndexRecord(entry);\n        }\n        return isMatched;\n    }\n    _isDuplicateEntry(entry) {\n        return this.index.has(entry.path);\n    }\n    _createIndexRecord(entry) {\n        this.index.set(entry.path, undefined);\n    }\n    _onlyFileFilter(entry) {\n        return this._settings.onlyFiles && !entry.dirent.isFile();\n    }\n    _onlyDirectoryFilter(entry) {\n        return this._settings.onlyDirectories && !entry.dirent.isDirectory();\n    }\n    _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {\n        if (!this._settings.absolute) {\n            return false;\n        }\n        const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);\n        return utils.pattern.matchAny(fullpath, patternsRe);\n    }\n    _isMatchToPatterns(entryPath, patternsRe) {\n        const filepath = utils.path.removeLeadingDotSegment(entryPath);\n        return utils.pattern.matchAny(filepath, patternsRe);\n    }\n}\nexports.default = EntryFilter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils = require(\"../../utils\");\nclass ErrorFilter {\n    constructor(_settings) {\n        this._settings = _settings;\n    }\n    getFilter() {\n        return (error) => this._isNonFatalError(error);\n    }\n    _isNonFatalError(error) {\n        return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;\n    }\n}\nexports.default = ErrorFilter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils = require(\"../../utils\");\nclass Matcher {\n    constructor(_patterns, _settings, _micromatchOptions) {\n        this._patterns = _patterns;\n        this._settings = _settings;\n        this._micromatchOptions = _micromatchOptions;\n        this._storage = [];\n        this._fillStorage();\n    }\n    _fillStorage() {\n        /**\n         * The original pattern may include `{,*,**,a/*}`, which will lead to problems with matching (unresolved level).\n         * So, before expand patterns with brace expansion into separated patterns.\n         */\n        const patterns = utils.pattern.expandPatternsWithBraceExpansion(this._patterns);\n        for (const pattern of patterns) {\n            const segments = this._getPatternSegments(pattern);\n            const sections = this._splitSegmentsIntoSections(segments);\n            this._storage.push({\n                complete: sections.length <= 1,\n                pattern,\n                segments,\n                sections\n            });\n        }\n    }\n    _getPatternSegments(pattern) {\n        const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);\n        return parts.map((part) => {\n            const dynamic = utils.pattern.isDynamicPattern(part, this._settings);\n            if (!dynamic) {\n                return {\n                    dynamic: false,\n                    pattern: part\n                };\n            }\n            return {\n                dynamic: true,\n                pattern: part,\n                patternRe: utils.pattern.makeRe(part, this._micromatchOptions)\n            };\n        });\n    }\n    _splitSegmentsIntoSections(segments) {\n        return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));\n    }\n}\nexports.default = Matcher;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst matcher_1 = require(\"./matcher\");\nclass PartialMatcher extends matcher_1.default {\n    match(filepath) {\n        const parts = filepath.split('/');\n        const levels = parts.length;\n        const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);\n        for (const pattern of patterns) {\n            const section = pattern.sections[0];\n            /**\n             * In this case, the pattern has a globstar and we must read all directories unconditionally,\n             * but only if the level has reached the end of the first group.\n             *\n             * fixtures/{a,b}/**\n             *  ^ true/false  ^ always true\n            */\n            if (!pattern.complete && levels > section.length) {\n                return true;\n            }\n            const match = parts.every((part, index) => {\n                const segment = pattern.segments[index];\n                if (segment.dynamic && segment.patternRe.test(part)) {\n                    return true;\n                }\n                if (!segment.dynamic && segment.pattern === part) {\n                    return true;\n                }\n                return false;\n            });\n            if (match) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nexports.default = PartialMatcher;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst deep_1 = require(\"./filters/deep\");\nconst entry_1 = require(\"./filters/entry\");\nconst error_1 = require(\"./filters/error\");\nconst entry_2 = require(\"./transformers/entry\");\nclass Provider {\n    constructor(_settings) {\n        this._settings = _settings;\n        this.errorFilter = new error_1.default(this._settings);\n        this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());\n        this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());\n        this.entryTransformer = new entry_2.default(this._settings);\n    }\n    _getRootDirectory(task) {\n        return path.resolve(this._settings.cwd, task.base);\n    }\n    _getReaderOptions(task) {\n        const basePath = task.base === '.' ? '' : task.base;\n        return {\n            basePath,\n            pathSegmentSeparator: '/',\n            concurrency: this._settings.concurrency,\n            deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),\n            entryFilter: this.entryFilter.getFilter(task.positive, task.negative),\n            errorFilter: this.errorFilter.getFilter(),\n            followSymbolicLinks: this._settings.followSymbolicLinks,\n            fs: this._settings.fs,\n            stats: this._settings.stats,\n            throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,\n            transform: this.entryTransformer.getTransformer()\n        };\n    }\n    _getMicromatchOptions() {\n        return {\n            dot: this._settings.dot,\n            matchBase: this._settings.baseNameMatch,\n            nobrace: !this._settings.braceExpansion,\n            nocase: !this._settings.caseSensitiveMatch,\n            noext: !this._settings.extglob,\n            noglobstar: !this._settings.globstar,\n            posix: true,\n            strictSlashes: false\n        };\n    }\n}\nexports.default = Provider;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"stream\");\nconst stream_2 = require(\"../readers/stream\");\nconst provider_1 = require(\"./provider\");\nclass ProviderStream extends provider_1.default {\n    constructor() {\n        super(...arguments);\n        this._reader = new stream_2.default(this._settings);\n    }\n    read(task) {\n        const root = this._getRootDirectory(task);\n        const options = this._getReaderOptions(task);\n        const source = this.api(root, task, options);\n        const destination = new stream_1.Readable({ objectMode: true, read: () => { } });\n        source\n            .once('error', (error) => destination.emit('error', error))\n            .on('data', (entry) => destination.emit('data', options.transform(entry)))\n            .once('end', () => destination.emit('end'));\n        destination\n            .once('close', () => source.destroy());\n        return destination;\n    }\n    api(root, task, options) {\n        if (task.dynamic) {\n            return this._reader.dynamic(root, options);\n        }\n        return this._reader.static(task.patterns, options);\n    }\n}\nexports.default = ProviderStream;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sync_1 = require(\"../readers/sync\");\nconst provider_1 = require(\"./provider\");\nclass ProviderSync extends provider_1.default {\n    constructor() {\n        super(...arguments);\n        this._reader = new sync_1.default(this._settings);\n    }\n    read(task) {\n        const root = this._getRootDirectory(task);\n        const options = this._getReaderOptions(task);\n        const entries = this.api(root, task, options);\n        return entries.map(options.transform);\n    }\n    api(root, task, options) {\n        if (task.dynamic) {\n            return this._reader.dynamic(root, options);\n        }\n        return this._reader.static(task.patterns, options);\n    }\n}\nexports.default = ProviderSync;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils = require(\"../../utils\");\nclass EntryTransformer {\n    constructor(_settings) {\n        this._settings = _settings;\n    }\n    getTransformer() {\n        return (entry) => this._transform(entry);\n    }\n    _transform(entry) {\n        let filepath = entry.path;\n        if (this._settings.absolute) {\n            filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);\n            filepath = utils.path.unixify(filepath);\n        }\n        if (this._settings.markDirectories && entry.dirent.isDirectory()) {\n            filepath += '/';\n        }\n        if (!this._settings.objectMode) {\n            return filepath;\n        }\n        return Object.assign(Object.assign({}, entry), { path: filepath });\n    }\n}\nexports.default = EntryTransformer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst utils = require(\"../utils\");\nclass Reader {\n    constructor(_settings) {\n        this._settings = _settings;\n        this._fsStatSettings = new fsStat.Settings({\n            followSymbolicLink: this._settings.followSymbolicLinks,\n            fs: this._settings.fs,\n            throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks\n        });\n    }\n    _getFullEntryPath(filepath) {\n        return path.resolve(this._settings.cwd, filepath);\n    }\n    _makeEntry(stats, pattern) {\n        const entry = {\n            name: pattern,\n            path: pattern,\n            dirent: utils.fs.createDirentFromStats(pattern, stats)\n        };\n        if (this._settings.stats) {\n            entry.stats = stats;\n        }\n        return entry;\n    }\n    _isFatalError(error) {\n        return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;\n    }\n}\nexports.default = Reader;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stream_1 = require(\"stream\");\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst fsWalk = require(\"@nodelib/fs.walk\");\nconst reader_1 = require(\"./reader\");\nclass ReaderStream extends reader_1.default {\n    constructor() {\n        super(...arguments);\n        this._walkStream = fsWalk.walkStream;\n        this._stat = fsStat.stat;\n    }\n    dynamic(root, options) {\n        return this._walkStream(root, options);\n    }\n    static(patterns, options) {\n        const filepaths = patterns.map(this._getFullEntryPath, this);\n        const stream = new stream_1.PassThrough({ objectMode: true });\n        stream._write = (index, _enc, done) => {\n            return this._getEntry(filepaths[index], patterns[index], options)\n                .then((entry) => {\n                if (entry !== null && options.entryFilter(entry)) {\n                    stream.push(entry);\n                }\n                if (index === filepaths.length - 1) {\n                    stream.end();\n                }\n                done();\n            })\n                .catch(done);\n        };\n        for (let i = 0; i < filepaths.length; i++) {\n            stream.write(i);\n        }\n        return stream;\n    }\n    _getEntry(filepath, pattern, options) {\n        return this._getStat(filepath)\n            .then((stats) => this._makeEntry(stats, pattern))\n            .catch((error) => {\n            if (options.errorFilter(error)) {\n                return null;\n            }\n            throw error;\n        });\n    }\n    _getStat(filepath) {\n        return new Promise((resolve, reject) => {\n            this._stat(filepath, this._fsStatSettings, (error, stats) => {\n                return error === null ? resolve(stats) : reject(error);\n            });\n        });\n    }\n}\nexports.default = ReaderStream;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fsStat = require(\"@nodelib/fs.stat\");\nconst fsWalk = require(\"@nodelib/fs.walk\");\nconst reader_1 = require(\"./reader\");\nclass ReaderSync extends reader_1.default {\n    constructor() {\n        super(...arguments);\n        this._walkSync = fsWalk.walkSync;\n        this._statSync = fsStat.statSync;\n    }\n    dynamic(root, options) {\n        return this._walkSync(root, options);\n    }\n    static(patterns, options) {\n        const entries = [];\n        for (const pattern of patterns) {\n            const filepath = this._getFullEntryPath(pattern);\n            const entry = this._getEntry(filepath, pattern, options);\n            if (entry === null || !options.entryFilter(entry)) {\n                continue;\n            }\n            entries.push(entry);\n        }\n        return entries;\n    }\n    _getEntry(filepath, pattern, options) {\n        try {\n            const stats = this._getStat(filepath);\n            return this._makeEntry(stats, pattern);\n        }\n        catch (error) {\n            if (options.errorFilter(error)) {\n                return null;\n            }\n            throw error;\n        }\n    }\n    _getStat(filepath) {\n        return this._statSync(filepath, this._fsStatSettings);\n    }\n}\nexports.default = ReaderSync;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;\nconst fs = require(\"fs\");\nconst os = require(\"os\");\n/**\n * The `os.cpus` method can return zero. We expect the number of cores to be greater than zero.\n * https://github.com/nodejs/node/blob/7faeddf23a98c53896f8b574a6e66589e8fb1eb8/lib/os.js#L106-L107\n */\nconst CPU_COUNT = Math.max(os.cpus().length, 1);\nexports.DEFAULT_FILE_SYSTEM_ADAPTER = {\n    lstat: fs.lstat,\n    lstatSync: fs.lstatSync,\n    stat: fs.stat,\n    statSync: fs.statSync,\n    readdir: fs.readdir,\n    readdirSync: fs.readdirSync\n};\nclass Settings {\n    constructor(_options = {}) {\n        this._options = _options;\n        this.absolute = this._getValue(this._options.absolute, false);\n        this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);\n        this.braceExpansion = this._getValue(this._options.braceExpansion, true);\n        this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);\n        this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);\n        this.cwd = this._getValue(this._options.cwd, process.cwd());\n        this.deep = this._getValue(this._options.deep, Infinity);\n        this.dot = this._getValue(this._options.dot, false);\n        this.extglob = this._getValue(this._options.extglob, true);\n        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);\n        this.fs = this._getFileSystemMethods(this._options.fs);\n        this.globstar = this._getValue(this._options.globstar, true);\n        this.ignore = this._getValue(this._options.ignore, []);\n        this.markDirectories = this._getValue(this._options.markDirectories, false);\n        this.objectMode = this._getValue(this._options.objectMode, false);\n        this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);\n        this.onlyFiles = this._getValue(this._options.onlyFiles, true);\n        this.stats = this._getValue(this._options.stats, false);\n        this.suppressErrors = this._getValue(this._options.suppressErrors, false);\n        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);\n        this.unique = this._getValue(this._options.unique, true);\n        if (this.onlyDirectories) {\n            this.onlyFiles = false;\n        }\n        if (this.stats) {\n            this.objectMode = true;\n        }\n    }\n    _getValue(option, value) {\n        return option === undefined ? value : option;\n    }\n    _getFileSystemMethods(methods = {}) {\n        return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);\n    }\n}\nexports.default = Settings;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.splitWhen = exports.flatten = void 0;\nfunction flatten(items) {\n    return items.reduce((collection, item) => [].concat(collection, item), []);\n}\nexports.flatten = flatten;\nfunction splitWhen(items, predicate) {\n    const result = [[]];\n    let groupIndex = 0;\n    for (const item of items) {\n        if (predicate(item)) {\n            groupIndex++;\n            result[groupIndex] = [];\n        }\n        else {\n            result[groupIndex].push(item);\n        }\n    }\n    return result;\n}\nexports.splitWhen = splitWhen;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isEnoentCodeError = void 0;\nfunction isEnoentCodeError(error) {\n    return error.code === 'ENOENT';\n}\nexports.isEnoentCodeError = isEnoentCodeError;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDirentFromStats = void 0;\nclass DirentFromStats {\n    constructor(name, stats) {\n        this.name = name;\n        this.isBlockDevice = stats.isBlockDevice.bind(stats);\n        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);\n        this.isDirectory = stats.isDirectory.bind(stats);\n        this.isFIFO = stats.isFIFO.bind(stats);\n        this.isFile = stats.isFile.bind(stats);\n        this.isSocket = stats.isSocket.bind(stats);\n        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);\n    }\n}\nfunction createDirentFromStats(name, stats) {\n    return new DirentFromStats(name, stats);\n}\nexports.createDirentFromStats = createDirentFromStats;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.string = exports.stream = exports.pattern = exports.path = exports.fs = exports.errno = exports.array = void 0;\nconst array = require(\"./array\");\nexports.array = array;\nconst errno = require(\"./errno\");\nexports.errno = errno;\nconst fs = require(\"./fs\");\nexports.fs = fs;\nconst path = require(\"./path\");\nexports.path = path;\nconst pattern = require(\"./pattern\");\nexports.pattern = pattern;\nconst stream = require(\"./stream\");\nexports.stream = stream;\nconst string = require(\"./string\");\nexports.string = string;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeLeadingDotSegment = exports.escape = exports.makeAbsolute = exports.unixify = void 0;\nconst path = require(\"path\");\nconst LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2; // ./ or .\\\\\nconst UNESCAPED_GLOB_SYMBOLS_RE = /(\\\\?)([()*?[\\]{|}]|^!|[!+@](?=\\())/g;\n/**\n * Designed to work only with simple paths: `dir\\\\file`.\n */\nfunction unixify(filepath) {\n    return filepath.replace(/\\\\/g, '/');\n}\nexports.unixify = unixify;\nfunction makeAbsolute(cwd, filepath) {\n    return path.resolve(cwd, filepath);\n}\nexports.makeAbsolute = makeAbsolute;\nfunction escape(pattern) {\n    return pattern.replace(UNESCAPED_GLOB_SYMBOLS_RE, '\\\\$2');\n}\nexports.escape = escape;\nfunction removeLeadingDotSegment(entry) {\n    // We do not use `startsWith` because this is 10x slower than current implementation for some cases.\n    // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with\n    if (entry.charAt(0) === '.') {\n        const secondCharactery = entry.charAt(1);\n        if (secondCharactery === '/' || secondCharactery === '\\\\') {\n            return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);\n        }\n    }\n    return entry;\n}\nexports.removeLeadingDotSegment = removeLeadingDotSegment;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.matchAny = exports.convertPatternsToRe = exports.makeRe = exports.getPatternParts = exports.expandBraceExpansion = exports.expandPatternsWithBraceExpansion = exports.isAffectDepthOfReadingPattern = exports.endsWithSlashGlobStar = exports.hasGlobStar = exports.getBaseDirectory = exports.isPatternRelatedToParentDirectory = exports.getPatternsOutsideCurrentDirectory = exports.getPatternsInsideCurrentDirectory = exports.getPositivePatterns = exports.getNegativePatterns = exports.isPositivePattern = exports.isNegativePattern = exports.convertToNegativePattern = exports.convertToPositivePattern = exports.isDynamicPattern = exports.isStaticPattern = void 0;\nconst path = require(\"path\");\nconst globParent = require(\"glob-parent\");\nconst micromatch = require(\"micromatch\");\nconst GLOBSTAR = '**';\nconst ESCAPE_SYMBOL = '\\\\';\nconst COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;\nconst REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\\[.*]/;\nconst REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\\(.*\\|.*\\)/;\nconst GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\\(.*\\)/;\nconst BRACE_EXPANSIONS_SYMBOLS_RE = /{.*(?:,|\\.\\.).*}/;\nfunction isStaticPattern(pattern, options = {}) {\n    return !isDynamicPattern(pattern, options);\n}\nexports.isStaticPattern = isStaticPattern;\nfunction isDynamicPattern(pattern, options = {}) {\n    /**\n     * A special case with an empty string is necessary for matching patterns that start with a forward slash.\n     * An empty string cannot be a dynamic pattern.\n     * For example, the pattern `/lib/*` will be spread into parts: '', 'lib', '*'.\n     */\n    if (pattern === '') {\n        return false;\n    }\n    /**\n     * When the `caseSensitiveMatch` option is disabled, all patterns must be marked as dynamic, because we cannot check\n     * filepath directly (without read directory).\n     */\n    if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {\n        return true;\n    }\n    if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {\n        return true;\n    }\n    if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {\n        return true;\n    }\n    if (options.braceExpansion !== false && BRACE_EXPANSIONS_SYMBOLS_RE.test(pattern)) {\n        return true;\n    }\n    return false;\n}\nexports.isDynamicPattern = isDynamicPattern;\nfunction convertToPositivePattern(pattern) {\n    return isNegativePattern(pattern) ? pattern.slice(1) : pattern;\n}\nexports.convertToPositivePattern = convertToPositivePattern;\nfunction convertToNegativePattern(pattern) {\n    return '!' + pattern;\n}\nexports.convertToNegativePattern = convertToNegativePattern;\nfunction isNegativePattern(pattern) {\n    return pattern.startsWith('!') && pattern[1] !== '(';\n}\nexports.isNegativePattern = isNegativePattern;\nfunction isPositivePattern(pattern) {\n    return !isNegativePattern(pattern);\n}\nexports.isPositivePattern = isPositivePattern;\nfunction getNegativePatterns(patterns) {\n    return patterns.filter(isNegativePattern);\n}\nexports.getNegativePatterns = getNegativePatterns;\nfunction getPositivePatterns(patterns) {\n    return patterns.filter(isPositivePattern);\n}\nexports.getPositivePatterns = getPositivePatterns;\n/**\n * Returns patterns that can be applied inside the current directory.\n *\n * @example\n * // ['./*', '*', 'a/*']\n * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])\n */\nfunction getPatternsInsideCurrentDirectory(patterns) {\n    return patterns.filter((pattern) => !isPatternRelatedToParentDirectory(pattern));\n}\nexports.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;\n/**\n * Returns patterns to be expanded relative to (outside) the current directory.\n *\n * @example\n * // ['../*', './../*']\n * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])\n */\nfunction getPatternsOutsideCurrentDirectory(patterns) {\n    return patterns.filter(isPatternRelatedToParentDirectory);\n}\nexports.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;\nfunction isPatternRelatedToParentDirectory(pattern) {\n    return pattern.startsWith('..') || pattern.startsWith('./..');\n}\nexports.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;\nfunction getBaseDirectory(pattern) {\n    return globParent(pattern, { flipBackslashes: false });\n}\nexports.getBaseDirectory = getBaseDirectory;\nfunction hasGlobStar(pattern) {\n    return pattern.includes(GLOBSTAR);\n}\nexports.hasGlobStar = hasGlobStar;\nfunction endsWithSlashGlobStar(pattern) {\n    return pattern.endsWith('/' + GLOBSTAR);\n}\nexports.endsWithSlashGlobStar = endsWithSlashGlobStar;\nfunction isAffectDepthOfReadingPattern(pattern) {\n    const basename = path.basename(pattern);\n    return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);\n}\nexports.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;\nfunction expandPatternsWithBraceExpansion(patterns) {\n    return patterns.reduce((collection, pattern) => {\n        return collection.concat(expandBraceExpansion(pattern));\n    }, []);\n}\nexports.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;\nfunction expandBraceExpansion(pattern) {\n    return micromatch.braces(pattern, {\n        expand: true,\n        nodupes: true\n    });\n}\nexports.expandBraceExpansion = expandBraceExpansion;\nfunction getPatternParts(pattern, options) {\n    let { parts } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), { parts: true }));\n    /**\n     * The scan method returns an empty array in some cases.\n     * See micromatch/picomatch#58 for more details.\n     */\n    if (parts.length === 0) {\n        parts = [pattern];\n    }\n    /**\n     * The scan method does not return an empty part for the pattern with a forward slash.\n     * This is another part of micromatch/picomatch#58.\n     */\n    if (parts[0].startsWith('/')) {\n        parts[0] = parts[0].slice(1);\n        parts.unshift('');\n    }\n    return parts;\n}\nexports.getPatternParts = getPatternParts;\nfunction makeRe(pattern, options) {\n    return micromatch.makeRe(pattern, options);\n}\nexports.makeRe = makeRe;\nfunction convertPatternsToRe(patterns, options) {\n    return patterns.map((pattern) => makeRe(pattern, options));\n}\nexports.convertPatternsToRe = convertPatternsToRe;\nfunction matchAny(entry, patternsRe) {\n    return patternsRe.some((patternRe) => patternRe.test(entry));\n}\nexports.matchAny = matchAny;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.merge = void 0;\nconst merge2 = require(\"merge2\");\nfunction merge(streams) {\n    const mergedStream = merge2(streams);\n    streams.forEach((stream) => {\n        stream.once('error', (error) => mergedStream.emit('error', error));\n    });\n    mergedStream.once('close', () => propagateCloseEventToSources(streams));\n    mergedStream.once('end', () => propagateCloseEventToSources(streams));\n    return mergedStream;\n}\nexports.merge = merge;\nfunction propagateCloseEventToSources(streams) {\n    streams.forEach((stream) => stream.emit('close'));\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isEmpty = exports.isString = void 0;\nfunction isString(input) {\n    return typeof input === 'string';\n}\nexports.isString = isString;\nfunction isEmpty(input) {\n    return input === '';\n}\nexports.isEmpty = isEmpty;\n","'use strict';\n//parse Empty Node as self closing node\nconst buildOptions = require('./util').buildOptions;\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  format: false,\n  indentBy: '  ',\n  supressEmptyNode: false,\n  tagValueProcessor: function(a) {\n    return a;\n  },\n  attrValueProcessor: function(a) {\n    return a;\n  },\n};\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'cdataTagName',\n  'cdataPositionChar',\n  'format',\n  'indentBy',\n  'supressEmptyNode',\n  'tagValueProcessor',\n  'attrValueProcessor',\n];\n\nfunction Parser(options) {\n  this.options = buildOptions(options, defaultOptions, props);\n  if (this.options.ignoreAttributes || this.options.attrNodeName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n  if (this.options.cdataTagName) {\n    this.isCDATA = isCDATA;\n  } else {\n    this.isCDATA = function(/*a*/) {\n      return false;\n    };\n  }\n  this.replaceCDATAstr = replaceCDATAstr;\n  this.replaceCDATAarr = replaceCDATAarr;\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.supressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n}\n\nParser.prototype.parse = function(jObj) {\n  return this.j2x(jObj, 0).val;\n};\n\nParser.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  const keys = Object.keys(jObj);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[i];\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += ' ' + attr + '=\"' + this.options.attrValueProcessor('' + jObj[key]) + '\"';\n      } else if (this.isCDATA(key)) {\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAstr('', jObj[key]);\n        }\n      } else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          if (jObj[this.options.cdataTagName]) {\n            //value will added while processing cdata\n          } else {\n            val += this.options.tagValueProcessor('' + jObj[key]);\n          }\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      if (this.isCDATA(key)) {\n        val += this.indentate(level);\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAarr('', jObj[key]);\n        }\n      } else {\n        //nested nodes\n        const arrLen = jObj[key].length;\n        for (let j = 0; j < arrLen; j++) {\n          const item = jObj[key][j];\n          if (typeof item === 'undefined') {\n            // supress undefined node\n          } else if (item === null) {\n            val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          } else if (typeof item === 'object') {\n            const result = this.j2x(item, level + 1);\n            val += this.buildObjNode(result.val, key, result.attrStr, level);\n          } else {\n            val += this.buildTextNode(item, key, '', level);\n          }\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attrNodeName && key === this.options.attrNodeName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += ' ' + Ks[j] + '=\"' + this.options.attrValueProcessor('' + jObj[key][Ks[j]]) + '\"';\n        }\n      } else {\n        const result = this.j2x(jObj[key], level + 1);\n        val += this.buildObjNode(result.val, key, result.attrStr, level);\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction replaceCDATAstr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata + ']]' + this.tagEndChar;\n  } else {\n    return str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata + ']]' + this.tagEndChar);\n  }\n}\n\nfunction replaceCDATAarr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata.join(']]><![CDATA[') + ']]' + this.tagEndChar;\n  } else {\n    for (let v in cdata) {\n      str = str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata[v] + ']]>');\n    }\n    return str + this.newLine;\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  if (attrStr && !val.includes('<')) {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      '>' +\n      val +\n      //+ this.newLine\n      // + this.indentate(level)\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  } else {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      this.tagEndChar +\n      val +\n      //+ this.newLine\n      this.indentate(level) +\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n    //+ this.newLine\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  return (\n    this.indentate(level) +\n    '<' +\n    key +\n    attrStr +\n    '>' +\n    this.options.tagValueProcessor(val) +\n    '</' +\n    key +\n    this.tagEndChar\n  );\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nfunction isCDATA(name) {\n  return name === this.options.cdataTagName;\n}\n\n//formatting\n//indentation\n//\\n after each closing or self closing tag\n\nmodule.exports = Parser;\n","'use strict';\nconst char = function(a) {\n  return String.fromCharCode(a);\n};\n\nconst chars = {\n  nilChar: char(176),\n  missingChar: char(201),\n  nilPremitive: char(175),\n  missingPremitive: char(200),\n\n  emptyChar: char(178),\n  emptyValue: char(177), //empty Premitive\n\n  boundryChar: char(179),\n\n  objStart: char(198),\n  arrStart: char(204),\n  arrayEnd: char(185),\n};\n\nconst charsArr = [\n  chars.nilChar,\n  chars.nilPremitive,\n  chars.missingChar,\n  chars.missingPremitive,\n  chars.boundryChar,\n  chars.emptyChar,\n  chars.emptyValue,\n  chars.arrayEnd,\n  chars.objStart,\n  chars.arrStart,\n];\n\nconst _e = function(node, e_schema, options) {\n  if (typeof e_schema === 'string') {\n    //premitive\n    if (node && node[0] && node[0].val !== undefined) {\n      return getValue(node[0].val, e_schema);\n    } else {\n      return getValue(node, e_schema);\n    }\n  } else {\n    const hasValidData = hasData(node);\n    if (hasValidData === true) {\n      let str = '';\n      if (Array.isArray(e_schema)) {\n        //attributes can't be repeated. hence check in children tags only\n        str += chars.arrStart;\n        const itemSchema = e_schema[0];\n        //var itemSchemaType = itemSchema;\n        const arr_len = node.length;\n\n        if (typeof itemSchema === 'string') {\n          for (let arr_i = 0; arr_i < arr_len; arr_i++) {\n            const r = getValue(node[arr_i].val, itemSchema);\n            str = processValue(str, r);\n          }\n        } else {\n          for (let arr_i = 0; arr_i < arr_len; arr_i++) {\n            const r = _e(node[arr_i], itemSchema, options);\n            str = processValue(str, r);\n          }\n        }\n        str += chars.arrayEnd; //indicates that next item is not array item\n      } else {\n        //object\n        str += chars.objStart;\n        const keys = Object.keys(e_schema);\n        if (Array.isArray(node)) {\n          node = node[0];\n        }\n        for (let i in keys) {\n          const key = keys[i];\n          //a property defined in schema can be present either in attrsMap or children tags\n          //options.textNodeName will not present in both maps, take it's value from val\n          //options.attrNodeName will be present in attrsMap\n          let r;\n          if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {\n            r = _e(node.attrsMap[key], e_schema[key], options);\n          } else if (key === options.textNodeName) {\n            r = _e(node.val, e_schema[key], options);\n          } else {\n            r = _e(node.child[key], e_schema[key], options);\n          }\n          str = processValue(str, r);\n        }\n      }\n      return str;\n    } else {\n      return hasValidData;\n    }\n  }\n};\n\nconst getValue = function(a /*, type*/) {\n  switch (a) {\n    case undefined:\n      return chars.missingPremitive;\n    case null:\n      return chars.nilPremitive;\n    case '':\n      return chars.emptyValue;\n    default:\n      return a;\n  }\n};\n\nconst processValue = function(str, r) {\n  if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {\n    str += chars.boundryChar;\n  }\n  return str + r;\n};\n\nconst isAppChar = function(ch) {\n  return charsArr.indexOf(ch) !== -1;\n};\n\nfunction hasData(jObj) {\n  if (jObj === undefined) {\n    return chars.missingChar;\n  } else if (jObj === null) {\n    return chars.nilChar;\n  } else if (\n    jObj.child &&\n    Object.keys(jObj.child).length === 0 &&\n    (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)\n  ) {\n    return chars.emptyChar;\n  } else {\n    return true;\n  }\n}\n\nconst x2j = require('./xmlstr2xmlnode');\nconst buildOptions = require('./util').buildOptions;\n\nconst convert2nimn = function(node, e_schema, options) {\n  options = buildOptions(options, x2j.defaultOptions, x2j.props);\n  return _e(node, e_schema, options);\n};\n\nexports.convert2nimn = convert2nimn;\n","'use strict';\n\nconst util = require('./util');\n\nconst convertToJson = function(node, options, parentTagName) {\n  const jObj = {};\n\n  // when no child node or attr is present\n  if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {\n    return util.isExist(node.val) ? node.val : '';\n  }\n\n  // otherwise create a textnode if node has some text\n  if (util.isExist(node.val) && !(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n    const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName)\n    jObj[options.textNodeName] = asArray ? [node.val] : node.val;\n  }\n\n  util.merge(jObj, node.attrsMap, options.arrayMode);\n\n  const keys = Object.keys(node.child);\n  for (let index = 0; index < keys.length; index++) {\n    const tagName = keys[index];\n    if (node.child[tagName] && node.child[tagName].length > 1) {\n      jObj[tagName] = [];\n      for (let tag in node.child[tagName]) {\n        if (node.child[tagName].hasOwnProperty(tag)) {\n          jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));\n        }\n      }\n    } else {\n      const result = convertToJson(node.child[tagName][0], options, tagName);\n      const asArray = (options.arrayMode === true && typeof result === 'object') || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);\n      jObj[tagName] = asArray ? [result] : result;\n    }\n  }\n\n  //add value\n  return jObj;\n};\n\nexports.convertToJson = convertToJson;\n","'use strict';\n\nconst util = require('./util');\nconst buildOptions = require('./util').buildOptions;\nconst x2j = require('./xmlstr2xmlnode');\n\n//TODO: do it later\nconst convertToJsonString = function(node, options) {\n  options = buildOptions(options, x2j.defaultOptions, x2j.props);\n\n  options.indentBy = options.indentBy || '';\n  return _cToJsonStr(node, options, 0);\n};\n\nconst _cToJsonStr = function(node, options, level) {\n  let jObj = '{';\n\n  //traver through all the children\n  const keys = Object.keys(node.child);\n\n  for (let index = 0; index < keys.length; index++) {\n    var tagname = keys[index];\n    if (node.child[tagname] && node.child[tagname].length > 1) {\n      jObj += '\"' + tagname + '\" : [ ';\n      for (var tag in node.child[tagname]) {\n        jObj += _cToJsonStr(node.child[tagname][tag], options) + ' , ';\n      }\n      jObj = jObj.substr(0, jObj.length - 1) + ' ] '; //remove extra comma in last\n    } else {\n      jObj += '\"' + tagname + '\" : ' + _cToJsonStr(node.child[tagname][0], options) + ' ,';\n    }\n  }\n  util.merge(jObj, node.attrsMap);\n  //add attrsMap as new children\n  if (util.isEmptyObject(jObj)) {\n    return util.isExist(node.val) ? node.val : '';\n  } else {\n    if (util.isExist(node.val)) {\n      if (!(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n        jObj += '\"' + options.textNodeName + '\" : ' + stringval(node.val);\n      }\n    }\n  }\n  //add value\n  if (jObj[jObj.length - 1] === ',') {\n    jObj = jObj.substr(0, jObj.length - 2);\n  }\n  return jObj + '}';\n};\n\nfunction stringval(v) {\n  if (v === true || v === false || !isNaN(v)) {\n    return v;\n  } else {\n    return '\"' + v + '\"';\n  }\n}\n\nfunction indentate(options, level) {\n  return options.indentBy.repeat(level);\n}\n\nexports.convertToJsonString = convertToJsonString;\n","'use strict';\n\nconst nodeToJson = require('./node2json');\nconst xmlToNodeobj = require('./xmlstr2xmlnode');\nconst x2xmlnode = require('./xmlstr2xmlnode');\nconst buildOptions = require('./util').buildOptions;\nconst validator = require('./validator');\n\nexports.parse = function(xmlData, options, validationOption) {\n  if( validationOption){\n    if(validationOption === true) validationOption = {}\n    \n    const result = validator.validate(xmlData, validationOption);\n    if (result !== true) {\n      throw Error( result.err.msg)\n    }\n  }\n  options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);\n  const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options)\n  //print(traversableObj, \"  \");\n  return nodeToJson.convertToJson(traversableObj, options);\n};\nexports.convertTonimn = require('./nimndata').convert2nimn;\nexports.getTraversalObj = xmlToNodeobj.getTraversalObj;\nexports.convertToJson = nodeToJson.convertToJson;\nexports.convertToJsonString = require('./node2json_str').convertToJsonString;\nexports.validate = validator.validate;\nexports.j2xParser = require('./json2xml');\nexports.parseToNimn = function(xmlData, schema, options) {\n  return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);\n};\n\n\nfunction print(xmlNode, indentation){\n  if(xmlNode){\n    console.log(indentation + \"{\")\n    console.log(indentation + \"  \\\"tagName\\\": \\\"\" + xmlNode.tagname + \"\\\", \");\n    if(xmlNode.parent){\n      console.log(indentation + \"  \\\"parent\\\": \\\"\" + xmlNode.parent.tagname  + \"\\\", \");\n    }\n    console.log(indentation + \"  \\\"val\\\": \\\"\" + xmlNode.val  + \"\\\", \");\n    console.log(indentation + \"  \\\"attrs\\\": \" + JSON.stringify(xmlNode.attrsMap,null,4)  + \", \");\n\n    if(xmlNode.child){\n      console.log(indentation + \"\\\"child\\\": {\")\n      const indentation2 = indentation + indentation;\n      Object.keys(xmlNode.child).forEach( function(key) {\n        const node = xmlNode.child[key];\n\n        if(Array.isArray(node)){\n          console.log(indentation +  \"\\\"\"+key+\"\\\" :[\")\n          node.forEach( function(item,index) {\n            //console.log(indentation + \" \\\"\"+index+\"\\\" : [\")\n            print(item, indentation2);\n          })\n          console.log(indentation + \"],\")  \n        }else{\n          console.log(indentation + \" \\\"\"+key+\"\\\" : {\")\n          print(node, indentation2);\n          console.log(indentation + \"},\")  \n        }\n      });\n      console.log(indentation + \"},\")\n    }\n    console.log(indentation + \"},\")\n  }\n}\n","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.buildOptions = function(options, defaultOptions, props) {\n  var newOptions = {};\n  if (!options) {\n    return defaultOptions; //if there are not options\n  }\n\n  for (let i = 0; i < props.length; i++) {\n    if (options[props[i]] !== undefined) {\n      newOptions[props[i]] = options[props[i]];\n    } else {\n      newOptions[props[i]] = defaultOptions[props[i]];\n    }\n  }\n  return newOptions;\n};\n\n/**\n * Check if a tag name should be treated as array\n *\n * @param tagName the node tagname\n * @param arrayMode the array mode option\n * @param parentTagName the parent tag name\n * @returns {boolean} true if node should be parsed as array\n */\nexports.isTagNameInArrayMode = function (tagName, arrayMode, parentTagName) {\n  if (arrayMode === false) {\n    return false;\n  } else if (arrayMode instanceof RegExp) {\n    return arrayMode.test(tagName);\n  } else if (typeof arrayMode === 'function') {\n    return !!arrayMode(tagName, parentTagName);\n  }\n\n  return arrayMode === \"strict\";\n}\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n};\n\nconst props = ['allowBooleanAttributes'];\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = util.buildOptions(options, defaultOptions, props);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n\n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"There is an unnecessary space between tag name and backward slash '</ ..'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, i));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg) {\n              return getErrorObject('InvalidTag', \"Closing tag '\"+otg+\"' is expected inplace of '\"+tagName+\"'.\", getLineNumberForPosition(xmlData, i));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else {\n            tags.push(tagName);\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if (xmlData[i] === ' ' || xmlData[i] === '\\t' || xmlData[i] === '\\n' || xmlData[i] === '\\r') {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  } else if (tags.length > 0) {\n    return getErrorObject('InvalidXml', \"Invalid '\"+JSON.stringify(tags, null, 4).replace(/\\r?\\n/g, '')+\"' found.\", 1);\n  }\n\n  return true;\n};\n\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  var start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      var tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nvar doubleQuote = '\"';\nvar singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n        continue;\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(attrStr, matches[i][0]))\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  var lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return lines.length;\n}\n\n//this function returns the position of the last character of match within attrStr\nfunction getPositionFromMatch(attrStr, match) {\n  return attrStr.indexOf(match) + match.length;\n}\n","'use strict';\n\nmodule.exports = function(tagname, parent, val) {\n  this.tagname = tagname;\n  this.parent = parent;\n  this.child = {}; //child tags\n  this.attrsMap = {}; //attributes map\n  this.val = val; //text only\n  this.addChild = function(child) {\n    if (Array.isArray(this.child[child.tagname])) {\n      //already presents\n      this.child[child.tagname].push(child);\n    } else {\n      this.child[child.tagname] = [child];\n    }\n  };\n};\n","'use strict';\n\nconst util = require('./util');\nconst buildOptions = require('./util').buildOptions;\nconst xmlNode = require('./xmlNode');\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n  Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n  Number.parseFloat = window.parseFloat;\n}\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  ignoreNameSpace: false,\n  allowBooleanAttributes: false, //a tag can have attributes without any value\n  //ignoreRootElement : false,\n  parseNodeValue: true,\n  parseAttributeValue: false,\n  arrayMode: false,\n  trimValues: true, //Trim string values of tag and attributes\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  tagValueProcessor: function(a, tagName) {\n    return a;\n  },\n  attrValueProcessor: function(a, attrName) {\n    return a;\n  },\n  stopNodes: []\n  //decodeStrict: false,\n};\n\nexports.defaultOptions = defaultOptions;\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'ignoreNameSpace',\n  'allowBooleanAttributes',\n  'parseNodeValue',\n  'parseAttributeValue',\n  'arrayMode',\n  'trimValues',\n  'cdataTagName',\n  'cdataPositionChar',\n  'tagValueProcessor',\n  'attrValueProcessor',\n  'parseTrueNumberOnly',\n  'stopNodes'\n];\nexports.props = props;\n\n/**\n * Trim -> valueProcessor -> parse value\n * @param {string} tagName\n * @param {string} val\n * @param {object} options\n */\nfunction processTagValue(tagName, val, options) {\n  if (val) {\n    if (options.trimValues) {\n      val = val.trim();\n    }\n    val = options.tagValueProcessor(val, tagName);\n    val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);\n  }\n\n  return val;\n}\n\nfunction resolveNameSpace(tagname, options) {\n  if (options.ignoreNameSpace) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\nfunction parseValue(val, shouldParse, parseTrueNumberOnly) {\n  if (shouldParse && typeof val === 'string') {\n    let parsed;\n    if (val.trim() === '' || isNaN(val)) {\n      parsed = val === 'true' ? true : val === 'false' ? false : val;\n    } else {\n      if (val.indexOf('0x') !== -1) {\n        //support hexa decimal\n        parsed = Number.parseInt(val, 16);\n      } else if (val.indexOf('.') !== -1) {\n        parsed = Number.parseFloat(val);\n        val = val.replace(/\\.?0+$/, \"\");\n      } else {\n        parsed = Number.parseInt(val, 10);\n      }\n      if (parseTrueNumberOnly) {\n        parsed = String(parsed) === val ? parsed : val;\n      }\n    }\n    return parsed;\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])(.*?)\\\\3)?', 'g');\n\nfunction buildAttributesMap(attrStr, options) {\n  if (!options.ignoreAttributes && typeof attrStr === 'string') {\n    attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = resolveNameSpace(matches[i][1], options);\n      if (attrName.length) {\n        if (matches[i][4] !== undefined) {\n          if (options.trimValues) {\n            matches[i][4] = matches[i][4].trim();\n          }\n          matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);\n          attrs[options.attributeNamePrefix + attrName] = parseValue(\n            matches[i][4],\n            options.parseAttributeValue,\n            options.parseTrueNumberOnly\n          );\n        } else if (options.allowBooleanAttributes) {\n          attrs[options.attributeNamePrefix + attrName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (options.attrNodeName) {\n      const attrCollection = {};\n      attrCollection[options.attrNodeName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst getTraversalObj = function(xmlData, options) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\");\n  options = buildOptions(options, defaultOptions, props);\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n\n//function match(xmlData){\n  for(let i=0; i< xmlData.length; i++){\n    const ch = xmlData[i];\n    if(ch === '<'){\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        /* if (currentNode.parent) {\n          currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);\n        } */\n        if(currentNode){\n          if(currentNode.val){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(tagName, textData , options);\n          }else{\n            currentNode.val = processTagValue(tagName, textData , options);\n          }\n        }\n\n        if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {\n          currentNode.child = []\n          if (currentNode.attrsMap == undefined) { currentNode.attrsMap = {}}\n          currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1)\n        }\n        currentNode = currentNode.parent;\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n        i = findClosingIndex(xmlData, \"?>\", i, \"Pi Tag is not closed.\")\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        i = findClosingIndex(xmlData, \"-->\", i, \"Comment is not closed.\")\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"DOCTYPE is not closed.\")\n        const tagExp = xmlData.substring(i, closeIndex);\n        if(tagExp.indexOf(\"[\") >= 0){\n          i = xmlData.indexOf(\"]>\", i) + 1;\n        }else{\n          i = closeIndex;\n        }\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        //considerations\n        //1. CDATA will always have parent node\n        //2. A tag with CDATA is not a leaf node so it's value would be string type.\n        if(textData){\n          currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData , options);\n          textData = \"\";\n        }\n\n        if (options.cdataTagName) {\n          //add cdata node\n          const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);\n          currentNode.addChild(childNode);\n          //for backtracking\n          currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;\n          //add rest value to parent node\n          if (tagExp) {\n            childNode.val = tagExp;\n          }\n        } else {\n          currentNode.val = (currentNode.val || '') + (tagExp || '');\n        }\n\n        i = closeIndex + 2;\n      }else {//Opening tag\n        const result = closingIndexForOpeningTag(xmlData, i+1)\n        let tagExp = result.data;\n        const closeIndex = result.index;\n        const separatorIndex = tagExp.indexOf(\" \");\n        let tagName = tagExp;\n        let shouldBuildAttributesMap = true;\n        if(separatorIndex !== -1){\n          tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n          tagExp = tagExp.substr(separatorIndex + 1);\n        }\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n            shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);\n          }\n        }\n\n        //save text to parent node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue( currentNode.tagname, textData, options);\n          }\n        }\n\n        if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){//selfClosing tag\n\n          if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n            tagName = tagName.substr(0, tagName.length - 1);\n            tagExp = tagName;\n          }else{\n            tagExp = tagExp.substr(0, tagExp.length - 1);\n          }\n\n          const childNode = new xmlNode(tagName, currentNode, '');\n          if(tagName !== tagExp){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n        }else{//opening tag\n\n          const childNode = new xmlNode( tagName, currentNode );\n          if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {\n            childNode.startIndex=closeIndex;\n          }\n          if(tagName !== tagExp && shouldBuildAttributesMap){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n          currentNode = childNode;\n        }\n        textData = \"\";\n        i = closeIndex;\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj;\n}\n\nfunction closingIndexForOpeningTag(data, i){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < data.length; index++) {\n    let ch = data[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === '>') {\n        return {\n          data: tagExp,\n          index: index\n        }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nexports.getTraversalObj = getTraversalObj;\n","'use strict'\n\n/* eslint-disable no-var */\n\nvar reusify = require('reusify')\n\nfunction fastqueue (context, worker, concurrency) {\n  if (typeof context === 'function') {\n    concurrency = worker\n    worker = context\n    context = null\n  }\n\n  if (concurrency < 1) {\n    throw new Error('fastqueue concurrency must be greater than 1')\n  }\n\n  var cache = reusify(Task)\n  var queueHead = null\n  var queueTail = null\n  var _running = 0\n  var errorHandler = null\n\n  var self = {\n    push: push,\n    drain: noop,\n    saturated: noop,\n    pause: pause,\n    paused: false,\n    concurrency: concurrency,\n    running: running,\n    resume: resume,\n    idle: idle,\n    length: length,\n    getQueue: getQueue,\n    unshift: unshift,\n    empty: noop,\n    kill: kill,\n    killAndDrain: killAndDrain,\n    error: error\n  }\n\n  return self\n\n  function running () {\n    return _running\n  }\n\n  function pause () {\n    self.paused = true\n  }\n\n  function length () {\n    var current = queueHead\n    var counter = 0\n\n    while (current) {\n      current = current.next\n      counter++\n    }\n\n    return counter\n  }\n\n  function getQueue () {\n    var current = queueHead\n    var tasks = []\n\n    while (current) {\n      tasks.push(current.value)\n      current = current.next\n    }\n\n    return tasks\n  }\n\n  function resume () {\n    if (!self.paused) return\n    self.paused = false\n    for (var i = 0; i < self.concurrency; i++) {\n      _running++\n      release()\n    }\n  }\n\n  function idle () {\n    return _running === 0 && self.length() === 0\n  }\n\n  function push (value, done) {\n    var current = cache.get()\n\n    current.context = context\n    current.release = release\n    current.value = value\n    current.callback = done || noop\n    current.errorHandler = errorHandler\n\n    if (_running === self.concurrency || self.paused) {\n      if (queueTail) {\n        queueTail.next = current\n        queueTail = current\n      } else {\n        queueHead = current\n        queueTail = current\n        self.saturated()\n      }\n    } else {\n      _running++\n      worker.call(context, current.value, current.worked)\n    }\n  }\n\n  function unshift (value, done) {\n    var current = cache.get()\n\n    current.context = context\n    current.release = release\n    current.value = value\n    current.callback = done || noop\n\n    if (_running === self.concurrency || self.paused) {\n      if (queueHead) {\n        current.next = queueHead\n        queueHead = current\n      } else {\n        queueHead = current\n        queueTail = current\n        self.saturated()\n      }\n    } else {\n      _running++\n      worker.call(context, current.value, current.worked)\n    }\n  }\n\n  function release (holder) {\n    if (holder) {\n      cache.release(holder)\n    }\n    var next = queueHead\n    if (next) {\n      if (!self.paused) {\n        if (queueTail === queueHead) {\n          queueTail = null\n        }\n        queueHead = next.next\n        next.next = null\n        worker.call(context, next.value, next.worked)\n        if (queueTail === null) {\n          self.empty()\n        }\n      } else {\n        _running--\n      }\n    } else if (--_running === 0) {\n      self.drain()\n    }\n  }\n\n  function kill () {\n    queueHead = null\n    queueTail = null\n    self.drain = noop\n  }\n\n  function killAndDrain () {\n    queueHead = null\n    queueTail = null\n    self.drain()\n    self.drain = noop\n  }\n\n  function error (handler) {\n    errorHandler = handler\n  }\n}\n\nfunction noop () {}\n\nfunction Task () {\n  this.value = null\n  this.callback = noop\n  this.next = null\n  this.release = noop\n  this.context = null\n  this.errorHandler = null\n\n  var self = this\n\n  this.worked = function worked (err, result) {\n    var callback = self.callback\n    var errorHandler = self.errorHandler\n    var val = self.value\n    self.value = null\n    self.callback = noop\n    if (self.errorHandler) {\n      errorHandler(err, val)\n    }\n    callback.call(self.context, err, result)\n    self.release(self)\n  }\n}\n\nfunction queueAsPromised (context, worker, concurrency) {\n  if (typeof context === 'function') {\n    concurrency = worker\n    worker = context\n    context = null\n  }\n\n  function asyncWrapper (arg, cb) {\n    worker.call(this, arg)\n      .then(function (res) {\n        cb(null, res)\n      }, cb)\n  }\n\n  var queue = fastqueue(context, asyncWrapper, concurrency)\n\n  var pushCb = queue.push\n  var unshiftCb = queue.unshift\n\n  queue.push = push\n  queue.unshift = unshift\n  queue.drained = drained\n\n  return queue\n\n  function push (value) {\n    var p = new Promise(function (resolve, reject) {\n      pushCb(value, function (err, result) {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve(result)\n      })\n    })\n\n    // Let's fork the promise chain to\n    // make the error bubble up to the user but\n    // not lead to a unhandledRejection\n    p.catch(noop)\n\n    return p\n  }\n\n  function unshift (value) {\n    var p = new Promise(function (resolve, reject) {\n      unshiftCb(value, function (err, result) {\n        if (err) {\n          reject(err)\n          return\n        }\n        resolve(result)\n      })\n    })\n\n    // Let's fork the promise chain to\n    // make the error bubble up to the user but\n    // not lead to a unhandledRejection\n    p.catch(noop)\n\n    return p\n  }\n\n  function drained () {\n    var previousDrain = queue.drain\n\n    var p = new Promise(function (resolve) {\n      queue.drain = function () {\n        previousDrain()\n        resolve()\n      }\n    })\n\n    return p\n  }\n}\n\nmodule.exports = fastqueue\nmodule.exports.promise = queueAsPromised\n","/*!\n * fill-range <https://github.com/jonschlinkert/fill-range>\n *\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nconst util = require('util');\nconst toRegexRange = require('to-regex-range');\n\nconst isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\n\nconst transform = toNumber => {\n  return value => toNumber === true ? Number(value) : String(value);\n};\n\nconst isValidValue = value => {\n  return typeof value === 'number' || (typeof value === 'string' && value !== '');\n};\n\nconst isNumber = num => Number.isInteger(+num);\n\nconst zeros = input => {\n  let value = `${input}`;\n  let index = -1;\n  if (value[0] === '-') value = value.slice(1);\n  if (value === '0') return false;\n  while (value[++index] === '0');\n  return index > 0;\n};\n\nconst stringify = (start, end, options) => {\n  if (typeof start === 'string' || typeof end === 'string') {\n    return true;\n  }\n  return options.stringify === true;\n};\n\nconst pad = (input, maxLength, toNumber) => {\n  if (maxLength > 0) {\n    let dash = input[0] === '-' ? '-' : '';\n    if (dash) input = input.slice(1);\n    input = (dash + input.padStart(dash ? maxLength - 1 : maxLength, '0'));\n  }\n  if (toNumber === false) {\n    return String(input);\n  }\n  return input;\n};\n\nconst toMaxLen = (input, maxLength) => {\n  let negative = input[0] === '-' ? '-' : '';\n  if (negative) {\n    input = input.slice(1);\n    maxLength--;\n  }\n  while (input.length < maxLength) input = '0' + input;\n  return negative ? ('-' + input) : input;\n};\n\nconst toSequence = (parts, options) => {\n  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);\n  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);\n\n  let prefix = options.capture ? '' : '?:';\n  let positives = '';\n  let negatives = '';\n  let result;\n\n  if (parts.positives.length) {\n    positives = parts.positives.join('|');\n  }\n\n  if (parts.negatives.length) {\n    negatives = `-(${prefix}${parts.negatives.join('|')})`;\n  }\n\n  if (positives && negatives) {\n    result = `${positives}|${negatives}`;\n  } else {\n    result = positives || negatives;\n  }\n\n  if (options.wrap) {\n    return `(${prefix}${result})`;\n  }\n\n  return result;\n};\n\nconst toRange = (a, b, isNumbers, options) => {\n  if (isNumbers) {\n    return toRegexRange(a, b, { wrap: false, ...options });\n  }\n\n  let start = String.fromCharCode(a);\n  if (a === b) return start;\n\n  let stop = String.fromCharCode(b);\n  return `[${start}-${stop}]`;\n};\n\nconst toRegex = (start, end, options) => {\n  if (Array.isArray(start)) {\n    let wrap = options.wrap === true;\n    let prefix = options.capture ? '' : '?:';\n    return wrap ? `(${prefix}${start.join('|')})` : start.join('|');\n  }\n  return toRegexRange(start, end, options);\n};\n\nconst rangeError = (...args) => {\n  return new RangeError('Invalid range arguments: ' + util.inspect(...args));\n};\n\nconst invalidRange = (start, end, options) => {\n  if (options.strictRanges === true) throw rangeError([start, end]);\n  return [];\n};\n\nconst invalidStep = (step, options) => {\n  if (options.strictRanges === true) {\n    throw new TypeError(`Expected step \"${step}\" to be a number`);\n  }\n  return [];\n};\n\nconst fillNumbers = (start, end, step = 1, options = {}) => {\n  let a = Number(start);\n  let b = Number(end);\n\n  if (!Number.isInteger(a) || !Number.isInteger(b)) {\n    if (options.strictRanges === true) throw rangeError([start, end]);\n    return [];\n  }\n\n  // fix negative zero\n  if (a === 0) a = 0;\n  if (b === 0) b = 0;\n\n  let descending = a > b;\n  let startString = String(start);\n  let endString = String(end);\n  let stepString = String(step);\n  step = Math.max(Math.abs(step), 1);\n\n  let padded = zeros(startString) || zeros(endString) || zeros(stepString);\n  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;\n  let toNumber = padded === false && stringify(start, end, options) === false;\n  let format = options.transform || transform(toNumber);\n\n  if (options.toRegex && step === 1) {\n    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);\n  }\n\n  let parts = { negatives: [], positives: [] };\n  let push = num => parts[num < 0 ? 'negatives' : 'positives'].push(Math.abs(num));\n  let range = [];\n  let index = 0;\n\n  while (descending ? a >= b : a <= b) {\n    if (options.toRegex === true && step > 1) {\n      push(a);\n    } else {\n      range.push(pad(format(a, index), maxLen, toNumber));\n    }\n    a = descending ? a - step : a + step;\n    index++;\n  }\n\n  if (options.toRegex === true) {\n    return step > 1\n      ? toSequence(parts, options)\n      : toRegex(range, null, { wrap: false, ...options });\n  }\n\n  return range;\n};\n\nconst fillLetters = (start, end, step = 1, options = {}) => {\n  if ((!isNumber(start) && start.length > 1) || (!isNumber(end) && end.length > 1)) {\n    return invalidRange(start, end, options);\n  }\n\n\n  let format = options.transform || (val => String.fromCharCode(val));\n  let a = `${start}`.charCodeAt(0);\n  let b = `${end}`.charCodeAt(0);\n\n  let descending = a > b;\n  let min = Math.min(a, b);\n  let max = Math.max(a, b);\n\n  if (options.toRegex && step === 1) {\n    return toRange(min, max, false, options);\n  }\n\n  let range = [];\n  let index = 0;\n\n  while (descending ? a >= b : a <= b) {\n    range.push(format(a, index));\n    a = descending ? a - step : a + step;\n    index++;\n  }\n\n  if (options.toRegex === true) {\n    return toRegex(range, null, { wrap: false, options });\n  }\n\n  return range;\n};\n\nconst fill = (start, end, step, options = {}) => {\n  if (end == null && isValidValue(start)) {\n    return [start];\n  }\n\n  if (!isValidValue(start) || !isValidValue(end)) {\n    return invalidRange(start, end, options);\n  }\n\n  if (typeof step === 'function') {\n    return fill(start, end, 1, { transform: step });\n  }\n\n  if (isObject(step)) {\n    return fill(start, end, 0, step);\n  }\n\n  let opts = { ...options };\n  if (opts.capture === true) opts.wrap = true;\n  step = step || opts.step || 1;\n\n  if (!isNumber(step)) {\n    if (step != null && !isObject(step)) return invalidStep(step, opts);\n    return fill(start, end, 1, step);\n  }\n\n  if (isNumber(start) && isNumber(end)) {\n    return fillNumbers(start, end, step, opts);\n  }\n\n  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);\n};\n\nmodule.exports = fill;\n","// A simple implementation of make-array\nfunction makeArray (subject) {\n  return Array.isArray(subject)\n    ? subject\n    : [subject]\n}\n\nconst EMPTY = ''\nconst SPACE = ' '\nconst ESCAPE = '\\\\'\nconst REGEX_TEST_BLANK_LINE = /^\\s+$/\nconst REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\\\!/\nconst REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\\\#/\nconst REGEX_SPLITALL_CRLF = /\\r?\\n/g\n// /foo,\n// ./foo,\n// ../foo,\n// .\n// ..\nconst REGEX_TEST_INVALID_PATH = /^\\.*\\/|^\\.+$/\n\nconst SLASH = '/'\nconst KEY_IGNORE = typeof Symbol !== 'undefined'\n  ? Symbol.for('node-ignore')\n  /* istanbul ignore next */\n  : 'node-ignore'\n\nconst define = (object, key, value) =>\n  Object.defineProperty(object, key, {value})\n\nconst REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g\n\n// Sanitize the range of a regular expression\n// The cases are complicated, see test cases for details\nconst sanitizeRange = range => range.replace(\n  REGEX_REGEXP_RANGE,\n  (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0)\n    ? match\n    // Invalid range (out of order) which is ok for gitignore rules but\n    //   fatal for JavaScript regular expression, so eliminate it.\n    : EMPTY\n)\n\n// See fixtures #59\nconst cleanRangeBackSlash = slashes => {\n  const {length} = slashes\n  return slashes.slice(0, length - length % 2)\n}\n\n// > If the pattern ends with a slash,\n// > it is removed for the purpose of the following description,\n// > but it would only find a match with a directory.\n// > In other words, foo/ will match a directory foo and paths underneath it,\n// > but will not match a regular file or a symbolic link foo\n// >  (this is consistent with the way how pathspec works in general in Git).\n// '`foo/`' will not match regular file '`foo`' or symbolic link '`foo`'\n// -> ignore-rules will not deal with it, because it costs extra `fs.stat` call\n//      you could use option `mark: true` with `glob`\n\n// '`foo/`' should not continue with the '`..`'\nconst REPLACERS = [\n\n  // > Trailing spaces are ignored unless they are quoted with backslash (\"\\\")\n  [\n    // (a\\ ) -> (a )\n    // (a  ) -> (a)\n    // (a \\ ) -> (a  )\n    /\\\\?\\s+$/,\n    match => match.indexOf('\\\\') === 0\n      ? SPACE\n      : EMPTY\n  ],\n\n  // replace (\\ ) with ' '\n  [\n    /\\\\\\s/g,\n    () => SPACE\n  ],\n\n  // Escape metacharacters\n  // which is written down by users but means special for regular expressions.\n\n  // > There are 12 characters with special meanings:\n  // > - the backslash \\,\n  // > - the caret ^,\n  // > - the dollar sign $,\n  // > - the period or dot .,\n  // > - the vertical bar or pipe symbol |,\n  // > - the question mark ?,\n  // > - the asterisk or star *,\n  // > - the plus sign +,\n  // > - the opening parenthesis (,\n  // > - the closing parenthesis ),\n  // > - and the opening square bracket [,\n  // > - the opening curly brace {,\n  // > These special characters are often called \"metacharacters\".\n  [\n    /[\\\\$.|*+(){^]/g,\n    match => `\\\\${match}`\n  ],\n\n  [\n    // > a question mark (?) matches a single character\n    /(?!\\\\)\\?/g,\n    () => '[^/]'\n  ],\n\n  // leading slash\n  [\n\n    // > A leading slash matches the beginning of the pathname.\n    // > For example, \"/*.c\" matches \"cat-file.c\" but not \"mozilla-sha1/sha1.c\".\n    // A leading slash matches the beginning of the pathname\n    /^\\//,\n    () => '^'\n  ],\n\n  // replace special metacharacter slash after the leading slash\n  [\n    /\\//g,\n    () => '\\\\/'\n  ],\n\n  [\n    // > A leading \"**\" followed by a slash means match in all directories.\n    // > For example, \"**/foo\" matches file or directory \"foo\" anywhere,\n    // > the same as pattern \"foo\".\n    // > \"**/foo/bar\" matches file or directory \"bar\" anywhere that is directly\n    // >   under directory \"foo\".\n    // Notice that the '*'s have been replaced as '\\\\*'\n    /^\\^*\\\\\\*\\\\\\*\\\\\\//,\n\n    // '**/foo' <-> 'foo'\n    () => '^(?:.*\\\\/)?'\n  ],\n\n  // starting\n  [\n    // there will be no leading '/'\n    //   (which has been replaced by section \"leading slash\")\n    // If starts with '**', adding a '^' to the regular expression also works\n    /^(?=[^^])/,\n    function startingReplacer () {\n      // If has a slash `/` at the beginning or middle\n      return !/\\/(?!$)/.test(this)\n        // > Prior to 2.22.1\n        // > If the pattern does not contain a slash /,\n        // >   Git treats it as a shell glob pattern\n        // Actually, if there is only a trailing slash,\n        //   git also treats it as a shell glob pattern\n\n        // After 2.22.1 (compatible but clearer)\n        // > If there is a separator at the beginning or middle (or both)\n        // > of the pattern, then the pattern is relative to the directory\n        // > level of the particular .gitignore file itself.\n        // > Otherwise the pattern may also match at any level below\n        // > the .gitignore level.\n        ? '(?:^|\\\\/)'\n\n        // > Otherwise, Git treats the pattern as a shell glob suitable for\n        // >   consumption by fnmatch(3)\n        : '^'\n    }\n  ],\n\n  // two globstars\n  [\n    // Use lookahead assertions so that we could match more than one `'/**'`\n    /\\\\\\/\\\\\\*\\\\\\*(?=\\\\\\/|$)/g,\n\n    // Zero, one or several directories\n    // should not use '*', or it will be replaced by the next replacer\n\n    // Check if it is not the last `'/**'`\n    (_, index, str) => index + 6 < str.length\n\n      // case: /**/\n      // > A slash followed by two consecutive asterisks then a slash matches\n      // >   zero or more directories.\n      // > For example, \"a/**/b\" matches \"a/b\", \"a/x/b\", \"a/x/y/b\" and so on.\n      // '/**/'\n      ? '(?:\\\\/[^\\\\/]+)*'\n\n      // case: /**\n      // > A trailing `\"/**\"` matches everything inside.\n\n      // #21: everything inside but it should not include the current folder\n      : '\\\\/.+'\n  ],\n\n  // intermediate wildcards\n  [\n    // Never replace escaped '*'\n    // ignore rule '\\*' will match the path '*'\n\n    // 'abc.*/' -> go\n    // 'abc.*'  -> skip this rule\n    /(^|[^\\\\]+)\\\\\\*(?=.+)/g,\n\n    // '*.js' matches '.js'\n    // '*.js' doesn't match 'abc'\n    (_, p1) => `${p1}[^\\\\/]*`\n  ],\n\n  [\n    // unescape, revert step 3 except for back slash\n    // For example, if a user escape a '\\\\*',\n    // after step 3, the result will be '\\\\\\\\\\\\*'\n    /\\\\\\\\\\\\(?=[$.|*+(){^])/g,\n    () => ESCAPE\n  ],\n\n  [\n    // '\\\\\\\\' -> '\\\\'\n    /\\\\\\\\/g,\n    () => ESCAPE\n  ],\n\n  [\n    // > The range notation, e.g. [a-zA-Z],\n    // > can be used to match one of the characters in a range.\n\n    // `\\` is escaped by step 3\n    /(\\\\)?\\[([^\\]/]*?)(\\\\*)($|\\])/g,\n    (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE\n      // '\\\\[bar]' -> '\\\\\\\\[bar\\\\]'\n      ? `\\\\[${range}${cleanRangeBackSlash(endEscape)}${close}`\n      : close === ']'\n        ? endEscape.length % 2 === 0\n          // A normal case, and it is a range notation\n          // '[bar]'\n          // '[bar\\\\\\\\]'\n          ? `[${sanitizeRange(range)}${endEscape}]`\n          // Invalid range notaton\n          // '[bar\\\\]' -> '[bar\\\\\\\\]'\n          : '[]'\n        : '[]'\n  ],\n\n  // ending\n  [\n    // 'js' will not match 'js.'\n    // 'ab' will not match 'abc'\n    /(?:[^*])$/,\n\n    // WTF!\n    // https://git-scm.com/docs/gitignore\n    // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)\n    // which re-fixes #24, #38\n\n    // > If there is a separator at the end of the pattern then the pattern\n    // > will only match directories, otherwise the pattern can match both\n    // > files and directories.\n\n    // 'js*' will not match 'a.js'\n    // 'js/' will not match 'a.js'\n    // 'js' will match 'a.js' and 'a.js/'\n    match => /\\/$/.test(match)\n      // foo/ will not match 'foo'\n      ? `${match}$`\n      // foo matches 'foo' and 'foo/'\n      : `${match}(?=$|\\\\/$)`\n  ],\n\n  // trailing wildcard\n  [\n    /(\\^|\\\\\\/)?\\\\\\*$/,\n    (_, p1) => {\n      const prefix = p1\n        // '\\^':\n        // '/*' does not match EMPTY\n        // '/*' does not match everything\n\n        // '\\\\\\/':\n        // 'abc/*' does not match 'abc/'\n        ? `${p1}[^/]+`\n\n        // 'a*' matches 'a'\n        // 'a*' matches 'aa'\n        : '[^/]*'\n\n      return `${prefix}(?=$|\\\\/$)`\n    }\n  ],\n]\n\n// A simple cache, because an ignore rule only has only one certain meaning\nconst regexCache = Object.create(null)\n\n// @param {pattern}\nconst makeRegex = (pattern, ignorecase) => {\n  let source = regexCache[pattern]\n\n  if (!source) {\n    source = REPLACERS.reduce(\n      (prev, current) => prev.replace(current[0], current[1].bind(pattern)),\n      pattern\n    )\n    regexCache[pattern] = source\n  }\n\n  return ignorecase\n    ? new RegExp(source, 'i')\n    : new RegExp(source)\n}\n\nconst isString = subject => typeof subject === 'string'\n\n// > A blank line matches no files, so it can serve as a separator for readability.\nconst checkPattern = pattern => pattern\n  && isString(pattern)\n  && !REGEX_TEST_BLANK_LINE.test(pattern)\n\n  // > A line starting with # serves as a comment.\n  && pattern.indexOf('#') !== 0\n\nconst splitPattern = pattern => pattern.split(REGEX_SPLITALL_CRLF)\n\nclass IgnoreRule {\n  constructor (\n    origin,\n    pattern,\n    negative,\n    regex\n  ) {\n    this.origin = origin\n    this.pattern = pattern\n    this.negative = negative\n    this.regex = regex\n  }\n}\n\nconst createRule = (pattern, ignorecase) => {\n  const origin = pattern\n  let negative = false\n\n  // > An optional prefix \"!\" which negates the pattern;\n  if (pattern.indexOf('!') === 0) {\n    negative = true\n    pattern = pattern.substr(1)\n  }\n\n  pattern = pattern\n  // > Put a backslash (\"\\\") in front of the first \"!\" for patterns that\n  // >   begin with a literal \"!\", for example, `\"\\!important!.txt\"`.\n  .replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, '!')\n  // > Put a backslash (\"\\\") in front of the first hash for patterns that\n  // >   begin with a hash.\n  .replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, '#')\n\n  const regex = makeRegex(pattern, ignorecase)\n\n  return new IgnoreRule(\n    origin,\n    pattern,\n    negative,\n    regex\n  )\n}\n\nconst throwError = (message, Ctor) => {\n  throw new Ctor(message)\n}\n\nconst checkPath = (path, originalPath, doThrow) => {\n  if (!isString(path)) {\n    return doThrow(\n      `path must be a string, but got \\`${originalPath}\\``,\n      TypeError\n    )\n  }\n\n  // We don't know if we should ignore EMPTY, so throw\n  if (!path) {\n    return doThrow(`path must not be empty`, TypeError)\n  }\n\n  // Check if it is a relative path\n  if (checkPath.isNotRelative(path)) {\n    const r = '`path.relative()`d'\n    return doThrow(\n      `path should be a ${r} string, but got \"${originalPath}\"`,\n      RangeError\n    )\n  }\n\n  return true\n}\n\nconst isNotRelative = path => REGEX_TEST_INVALID_PATH.test(path)\n\ncheckPath.isNotRelative = isNotRelative\ncheckPath.convert = p => p\n\nclass Ignore {\n  constructor ({\n    ignorecase = true\n  } = {}) {\n    define(this, KEY_IGNORE, true)\n\n    this._rules = []\n    this._ignorecase = ignorecase\n    this._initCache()\n  }\n\n  _initCache () {\n    this._ignoreCache = Object.create(null)\n    this._testCache = Object.create(null)\n  }\n\n  _addPattern (pattern) {\n    // #32\n    if (pattern && pattern[KEY_IGNORE]) {\n      this._rules = this._rules.concat(pattern._rules)\n      this._added = true\n      return\n    }\n\n    if (checkPattern(pattern)) {\n      const rule = createRule(pattern, this._ignorecase)\n      this._added = true\n      this._rules.push(rule)\n    }\n  }\n\n  // @param {Array<string> | string | Ignore} pattern\n  add (pattern) {\n    this._added = false\n\n    makeArray(\n      isString(pattern)\n        ? splitPattern(pattern)\n        : pattern\n    ).forEach(this._addPattern, this)\n\n    // Some rules have just added to the ignore,\n    // making the behavior changed.\n    if (this._added) {\n      this._initCache()\n    }\n\n    return this\n  }\n\n  // legacy\n  addPattern (pattern) {\n    return this.add(pattern)\n  }\n\n  //          |           ignored : unignored\n  // negative |   0:0   |   0:1   |   1:0   |   1:1\n  // -------- | ------- | ------- | ------- | --------\n  //     0    |  TEST   |  TEST   |  SKIP   |    X\n  //     1    |  TESTIF |  SKIP   |  TEST   |    X\n\n  // - SKIP: always skip\n  // - TEST: always test\n  // - TESTIF: only test if checkUnignored\n  // - X: that never happen\n\n  // @param {boolean} whether should check if the path is unignored,\n  //   setting `checkUnignored` to `false` could reduce additional\n  //   path matching.\n\n  // @returns {TestResult} true if a file is ignored\n  _testOne (path, checkUnignored) {\n    let ignored = false\n    let unignored = false\n\n    this._rules.forEach(rule => {\n      const {negative} = rule\n      if (\n        unignored === negative && ignored !== unignored\n        || negative && !ignored && !unignored && !checkUnignored\n      ) {\n        return\n      }\n\n      const matched = rule.regex.test(path)\n\n      if (matched) {\n        ignored = !negative\n        unignored = negative\n      }\n    })\n\n    return {\n      ignored,\n      unignored\n    }\n  }\n\n  // @returns {TestResult}\n  _test (originalPath, cache, checkUnignored, slices) {\n    const path = originalPath\n      // Supports nullable path\n      && checkPath.convert(originalPath)\n\n    checkPath(path, originalPath, throwError)\n\n    return this._t(path, cache, checkUnignored, slices)\n  }\n\n  _t (path, cache, checkUnignored, slices) {\n    if (path in cache) {\n      return cache[path]\n    }\n\n    if (!slices) {\n      // path/to/a.js\n      // ['path', 'to', 'a.js']\n      slices = path.split(SLASH)\n    }\n\n    slices.pop()\n\n    // If the path has no parent directory, just test it\n    if (!slices.length) {\n      return cache[path] = this._testOne(path, checkUnignored)\n    }\n\n    const parent = this._t(\n      slices.join(SLASH) + SLASH,\n      cache,\n      checkUnignored,\n      slices\n    )\n\n    // If the path contains a parent directory, check the parent first\n    return cache[path] = parent.ignored\n      // > It is not possible to re-include a file if a parent directory of\n      // >   that file is excluded.\n      ? parent\n      : this._testOne(path, checkUnignored)\n  }\n\n  ignores (path) {\n    return this._test(path, this._ignoreCache, false).ignored\n  }\n\n  createFilter () {\n    return path => !this.ignores(path)\n  }\n\n  filter (paths) {\n    return makeArray(paths).filter(this.createFilter())\n  }\n\n  // @returns {TestResult}\n  test (path) {\n    return this._test(path, this._testCache, true)\n  }\n}\n\nconst factory = options => new Ignore(options)\n\nconst returnFalse = () => false\n\nconst isPathValid = path =>\n  checkPath(path && checkPath.convert(path), path, returnFalse)\n\nfactory.isPathValid = isPathValid\n\n// Fixes typescript\nfactory.default = factory\n\nmodule.exports = factory\n\n// Windows\n// --------------------------------------------------------------\n/* istanbul ignore if  */\nif (\n  // Detect `process` so that it can run in browsers.\n  typeof process !== 'undefined'\n  && (\n    process.env && process.env.IGNORE_TEST_WIN32\n    || process.platform === 'win32'\n  )\n) {\n  /* eslint no-control-regex: \"off\" */\n  const makePosix = str => /^\\\\\\\\\\?\\\\/.test(str)\n  || /[\"<>|\\u0000-\\u001F]+/u.test(str)\n    ? str\n    : str.replace(/\\\\/g, '/')\n\n  checkPath.convert = makePosix\n\n  // 'C:\\\\foo'     <- 'C:\\\\foo' has been converted to 'C:/'\n  // 'd:\\\\foo'\n  const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\\//i\n  checkPath.isNotRelative = path =>\n    REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path)\n    || isNotRelative(path)\n}\n","/*!\n * is-extglob <https://github.com/jonschlinkert/is-extglob>\n *\n * Copyright (c) 2014-2016, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\nmodule.exports = function isExtglob(str) {\n  if (typeof str !== 'string' || str === '') {\n    return false;\n  }\n\n  var match;\n  while ((match = /(\\\\).|([@?!+*]\\(.*\\))/g.exec(str))) {\n    if (match[2]) return true;\n    str = str.slice(match.index + match[0].length);\n  }\n\n  return false;\n};\n","/*!\n * is-glob <https://github.com/jonschlinkert/is-glob>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nvar isExtglob = require('is-extglob');\nvar chars = { '{': '}', '(': ')', '[': ']'};\nvar strictCheck = function(str) {\n  if (str[0] === '!') {\n    return true;\n  }\n  var index = 0;\n  var pipeIndex = -2;\n  var closeSquareIndex = -2;\n  var closeCurlyIndex = -2;\n  var closeParenIndex = -2;\n  var backSlashIndex = -2;\n  while (index < str.length) {\n    if (str[index] === '*') {\n      return true;\n    }\n\n    if (str[index + 1] === '?' && /[\\].+)]/.test(str[index])) {\n      return true;\n    }\n\n    if (closeSquareIndex !== -1 && str[index] === '[' && str[index + 1] !== ']') {\n      if (closeSquareIndex < index) {\n        closeSquareIndex = str.indexOf(']', index);\n      }\n      if (closeSquareIndex > index) {\n        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {\n          return true;\n        }\n        backSlashIndex = str.indexOf('\\\\', index);\n        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {\n          return true;\n        }\n      }\n    }\n\n    if (closeCurlyIndex !== -1 && str[index] === '{' && str[index + 1] !== '}') {\n      closeCurlyIndex = str.indexOf('}', index);\n      if (closeCurlyIndex > index) {\n        backSlashIndex = str.indexOf('\\\\', index);\n        if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {\n          return true;\n        }\n      }\n    }\n\n    if (closeParenIndex !== -1 && str[index] === '(' && str[index + 1] === '?' && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ')') {\n      closeParenIndex = str.indexOf(')', index);\n      if (closeParenIndex > index) {\n        backSlashIndex = str.indexOf('\\\\', index);\n        if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {\n          return true;\n        }\n      }\n    }\n\n    if (pipeIndex !== -1 && str[index] === '(' && str[index + 1] !== '|') {\n      if (pipeIndex < index) {\n        pipeIndex = str.indexOf('|', index);\n      }\n      if (pipeIndex !== -1 && str[pipeIndex + 1] !== ')') {\n        closeParenIndex = str.indexOf(')', pipeIndex);\n        if (closeParenIndex > pipeIndex) {\n          backSlashIndex = str.indexOf('\\\\', pipeIndex);\n          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {\n            return true;\n          }\n        }\n      }\n    }\n\n    if (str[index] === '\\\\') {\n      var open = str[index + 1];\n      index += 2;\n      var close = chars[open];\n\n      if (close) {\n        var n = str.indexOf(close, index);\n        if (n !== -1) {\n          index = n + 1;\n        }\n      }\n\n      if (str[index] === '!') {\n        return true;\n      }\n    } else {\n      index++;\n    }\n  }\n  return false;\n};\n\nvar relaxedCheck = function(str) {\n  if (str[0] === '!') {\n    return true;\n  }\n  var index = 0;\n  while (index < str.length) {\n    if (/[*?{}()[\\]]/.test(str[index])) {\n      return true;\n    }\n\n    if (str[index] === '\\\\') {\n      var open = str[index + 1];\n      index += 2;\n      var close = chars[open];\n\n      if (close) {\n        var n = str.indexOf(close, index);\n        if (n !== -1) {\n          index = n + 1;\n        }\n      }\n\n      if (str[index] === '!') {\n        return true;\n      }\n    } else {\n      index++;\n    }\n  }\n  return false;\n};\n\nmodule.exports = function isGlob(str, options) {\n  if (typeof str !== 'string' || str === '') {\n    return false;\n  }\n\n  if (isExtglob(str)) {\n    return true;\n  }\n\n  var check = strictCheck;\n\n  // optionally relax check\n  if (options && options.strict === false) {\n    check = relaxedCheck;\n  }\n\n  return check(str);\n};\n","/*!\n * is-number <https://github.com/jonschlinkert/is-number>\n *\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function(num) {\n  if (typeof num === 'number') {\n    return num - num === 0;\n  }\n  if (typeof num === 'string' && num.trim() !== '') {\n    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);\n  }\n  return false;\n};\n","'use strict';\n\n\nvar loader = require('./lib/loader');\nvar dumper = require('./lib/dumper');\n\n\nfunction renamed(from, to) {\n  return function () {\n    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' +\n      'Use yaml.' + to + ' instead, which is now safe by default.');\n  };\n}\n\n\nmodule.exports.Type                = require('./lib/type');\nmodule.exports.Schema              = require('./lib/schema');\nmodule.exports.FAILSAFE_SCHEMA     = require('./lib/schema/failsafe');\nmodule.exports.JSON_SCHEMA         = require('./lib/schema/json');\nmodule.exports.CORE_SCHEMA         = require('./lib/schema/core');\nmodule.exports.DEFAULT_SCHEMA      = require('./lib/schema/default');\nmodule.exports.load                = loader.load;\nmodule.exports.loadAll             = loader.loadAll;\nmodule.exports.dump                = dumper.dump;\nmodule.exports.YAMLException       = require('./lib/exception');\n\n// Re-export all types in case user wants to create custom schema\nmodule.exports.types = {\n  binary:    require('./lib/type/binary'),\n  float:     require('./lib/type/float'),\n  map:       require('./lib/type/map'),\n  null:      require('./lib/type/null'),\n  pairs:     require('./lib/type/pairs'),\n  set:       require('./lib/type/set'),\n  timestamp: require('./lib/type/timestamp'),\n  bool:      require('./lib/type/bool'),\n  int:       require('./lib/type/int'),\n  merge:     require('./lib/type/merge'),\n  omap:      require('./lib/type/omap'),\n  seq:       require('./lib/type/seq'),\n  str:       require('./lib/type/str')\n};\n\n// Removed functions from JS-YAML 3.0.x\nmodule.exports.safeLoad            = renamed('safeLoad', 'load');\nmodule.exports.safeLoadAll         = renamed('safeLoadAll', 'loadAll');\nmodule.exports.safeDump            = renamed('safeDump', 'dump');\n","'use strict';\n\n\nfunction isNothing(subject) {\n  return (typeof subject === 'undefined') || (subject === null);\n}\n\n\nfunction isObject(subject) {\n  return (typeof subject === 'object') && (subject !== null);\n}\n\n\nfunction toArray(sequence) {\n  if (Array.isArray(sequence)) return sequence;\n  else if (isNothing(sequence)) return [];\n\n  return [ sequence ];\n}\n\n\nfunction extend(target, source) {\n  var index, length, key, sourceKeys;\n\n  if (source) {\n    sourceKeys = Object.keys(source);\n\n    for (index = 0, length = sourceKeys.length; index < length; index += 1) {\n      key = sourceKeys[index];\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\n\nfunction repeat(string, count) {\n  var result = '', cycle;\n\n  for (cycle = 0; cycle < count; cycle += 1) {\n    result += string;\n  }\n\n  return result;\n}\n\n\nfunction isNegativeZero(number) {\n  return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);\n}\n\n\nmodule.exports.isNothing      = isNothing;\nmodule.exports.isObject       = isObject;\nmodule.exports.toArray        = toArray;\nmodule.exports.repeat         = repeat;\nmodule.exports.isNegativeZero = isNegativeZero;\nmodule.exports.extend         = extend;\n","'use strict';\n\n/*eslint-disable no-use-before-define*/\n\nvar common              = require('./common');\nvar YAMLException       = require('./exception');\nvar DEFAULT_SCHEMA      = require('./schema/default');\n\nvar _toString       = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar CHAR_BOM                  = 0xFEFF;\nvar CHAR_TAB                  = 0x09; /* Tab */\nvar CHAR_LINE_FEED            = 0x0A; /* LF */\nvar CHAR_CARRIAGE_RETURN      = 0x0D; /* CR */\nvar CHAR_SPACE                = 0x20; /* Space */\nvar CHAR_EXCLAMATION          = 0x21; /* ! */\nvar CHAR_DOUBLE_QUOTE         = 0x22; /* \" */\nvar CHAR_SHARP                = 0x23; /* # */\nvar CHAR_PERCENT              = 0x25; /* % */\nvar CHAR_AMPERSAND            = 0x26; /* & */\nvar CHAR_SINGLE_QUOTE         = 0x27; /* ' */\nvar CHAR_ASTERISK             = 0x2A; /* * */\nvar CHAR_COMMA                = 0x2C; /* , */\nvar CHAR_MINUS                = 0x2D; /* - */\nvar CHAR_COLON                = 0x3A; /* : */\nvar CHAR_EQUALS               = 0x3D; /* = */\nvar CHAR_GREATER_THAN         = 0x3E; /* > */\nvar CHAR_QUESTION             = 0x3F; /* ? */\nvar CHAR_COMMERCIAL_AT        = 0x40; /* @ */\nvar CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */\nvar CHAR_GRAVE_ACCENT         = 0x60; /* ` */\nvar CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */\nvar CHAR_VERTICAL_LINE        = 0x7C; /* | */\nvar CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */\n\nvar ESCAPE_SEQUENCES = {};\n\nESCAPE_SEQUENCES[0x00]   = '\\\\0';\nESCAPE_SEQUENCES[0x07]   = '\\\\a';\nESCAPE_SEQUENCES[0x08]   = '\\\\b';\nESCAPE_SEQUENCES[0x09]   = '\\\\t';\nESCAPE_SEQUENCES[0x0A]   = '\\\\n';\nESCAPE_SEQUENCES[0x0B]   = '\\\\v';\nESCAPE_SEQUENCES[0x0C]   = '\\\\f';\nESCAPE_SEQUENCES[0x0D]   = '\\\\r';\nESCAPE_SEQUENCES[0x1B]   = '\\\\e';\nESCAPE_SEQUENCES[0x22]   = '\\\\\"';\nESCAPE_SEQUENCES[0x5C]   = '\\\\\\\\';\nESCAPE_SEQUENCES[0x85]   = '\\\\N';\nESCAPE_SEQUENCES[0xA0]   = '\\\\_';\nESCAPE_SEQUENCES[0x2028] = '\\\\L';\nESCAPE_SEQUENCES[0x2029] = '\\\\P';\n\nvar DEPRECATED_BOOLEANS_SYNTAX = [\n  'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',\n  'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'\n];\n\nvar DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\\.[0-9_]*)?$/;\n\nfunction compileStyleMap(schema, map) {\n  var result, keys, index, length, tag, style, type;\n\n  if (map === null) return {};\n\n  result = {};\n  keys = Object.keys(map);\n\n  for (index = 0, length = keys.length; index < length; index += 1) {\n    tag = keys[index];\n    style = String(map[tag]);\n\n    if (tag.slice(0, 2) === '!!') {\n      tag = 'tag:yaml.org,2002:' + tag.slice(2);\n    }\n    type = schema.compiledTypeMap['fallback'][tag];\n\n    if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n      style = type.styleAliases[style];\n    }\n\n    result[tag] = style;\n  }\n\n  return result;\n}\n\nfunction encodeHex(character) {\n  var string, handle, length;\n\n  string = character.toString(16).toUpperCase();\n\n  if (character <= 0xFF) {\n    handle = 'x';\n    length = 2;\n  } else if (character <= 0xFFFF) {\n    handle = 'u';\n    length = 4;\n  } else if (character <= 0xFFFFFFFF) {\n    handle = 'U';\n    length = 8;\n  } else {\n    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');\n  }\n\n  return '\\\\' + handle + common.repeat('0', length - string.length) + string;\n}\n\n\nvar QUOTING_TYPE_SINGLE = 1,\n    QUOTING_TYPE_DOUBLE = 2;\n\nfunction State(options) {\n  this.schema        = options['schema'] || DEFAULT_SCHEMA;\n  this.indent        = Math.max(1, (options['indent'] || 2));\n  this.noArrayIndent = options['noArrayIndent'] || false;\n  this.skipInvalid   = options['skipInvalid'] || false;\n  this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);\n  this.styleMap      = compileStyleMap(this.schema, options['styles'] || null);\n  this.sortKeys      = options['sortKeys'] || false;\n  this.lineWidth     = options['lineWidth'] || 80;\n  this.noRefs        = options['noRefs'] || false;\n  this.noCompatMode  = options['noCompatMode'] || false;\n  this.condenseFlow  = options['condenseFlow'] || false;\n  this.quotingType   = options['quotingType'] === '\"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;\n  this.forceQuotes   = options['forceQuotes'] || false;\n  this.replacer      = typeof options['replacer'] === 'function' ? options['replacer'] : null;\n\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.explicitTypes = this.schema.compiledExplicit;\n\n  this.tag = null;\n  this.result = '';\n\n  this.duplicates = [];\n  this.usedDuplicates = null;\n}\n\n// Indents every line in a string. Empty lines (\\n only) are not indented.\nfunction indentString(string, spaces) {\n  var ind = common.repeat(' ', spaces),\n      position = 0,\n      next = -1,\n      result = '',\n      line,\n      length = string.length;\n\n  while (position < length) {\n    next = string.indexOf('\\n', position);\n    if (next === -1) {\n      line = string.slice(position);\n      position = length;\n    } else {\n      line = string.slice(position, next + 1);\n      position = next + 1;\n    }\n\n    if (line.length && line !== '\\n') result += ind;\n\n    result += line;\n  }\n\n  return result;\n}\n\nfunction generateNextLine(state, level) {\n  return '\\n' + common.repeat(' ', state.indent * level);\n}\n\nfunction testImplicitResolving(state, str) {\n  var index, length, type;\n\n  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {\n    type = state.implicitTypes[index];\n\n    if (type.resolve(str)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// [33] s-white ::= s-space | s-tab\nfunction isWhitespace(c) {\n  return c === CHAR_SPACE || c === CHAR_TAB;\n}\n\n// Returns true if the character can be printed without escaping.\n// From YAML 1.2: \"any allowed characters known to be non-printable\n// should also be escaped. [However,] This isn’t mandatory\"\n// Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.\nfunction isPrintable(c) {\n  return  (0x00020 <= c && c <= 0x00007E)\n      || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)\n      || ((0x0E000 <= c && c <= 0x00FFFD) && c !== CHAR_BOM)\n      ||  (0x10000 <= c && c <= 0x10FFFF);\n}\n\n// [34] ns-char ::= nb-char - s-white\n// [27] nb-char ::= c-printable - b-char - c-byte-order-mark\n// [26] b-char  ::= b-line-feed | b-carriage-return\n// Including s-white (for some reason, examples doesn't match specs in this aspect)\n// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark\nfunction isNsCharOrWhitespace(c) {\n  return isPrintable(c)\n    && c !== CHAR_BOM\n    // - b-char\n    && c !== CHAR_CARRIAGE_RETURN\n    && c !== CHAR_LINE_FEED;\n}\n\n// [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out\n//                             c = flow-in   ⇒ ns-plain-safe-in\n//                             c = block-key ⇒ ns-plain-safe-out\n//                             c = flow-key  ⇒ ns-plain-safe-in\n// [128] ns-plain-safe-out ::= ns-char\n// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator\n// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )\n//                            | ( /* An ns-char preceding */ “#” )\n//                            | ( “:” /* Followed by an ns-plain-safe(c) */ )\nfunction isPlainSafe(c, prev, inblock) {\n  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);\n  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);\n  return (\n    // ns-plain-safe\n    inblock ? // c = flow-in\n      cIsNsCharOrWhitespace\n      : cIsNsCharOrWhitespace\n        // - c-flow-indicator\n        && c !== CHAR_COMMA\n        && c !== CHAR_LEFT_SQUARE_BRACKET\n        && c !== CHAR_RIGHT_SQUARE_BRACKET\n        && c !== CHAR_LEFT_CURLY_BRACKET\n        && c !== CHAR_RIGHT_CURLY_BRACKET\n  )\n    // ns-plain-char\n    && c !== CHAR_SHARP // false on '#'\n    && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '\n    || (isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP) // change to true on '[^ ]#'\n    || (prev === CHAR_COLON && cIsNsChar); // change to true on ':[^ ]'\n}\n\n// Simplified test for values allowed as the first character in plain style.\nfunction isPlainSafeFirst(c) {\n  // Uses a subset of ns-char - c-indicator\n  // where ns-char = nb-char - s-white.\n  // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part\n  return isPrintable(c) && c !== CHAR_BOM\n    && !isWhitespace(c) // - s-white\n    // - (c-indicator ::=\n    // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”\n    && c !== CHAR_MINUS\n    && c !== CHAR_QUESTION\n    && c !== CHAR_COLON\n    && c !== CHAR_COMMA\n    && c !== CHAR_LEFT_SQUARE_BRACKET\n    && c !== CHAR_RIGHT_SQUARE_BRACKET\n    && c !== CHAR_LEFT_CURLY_BRACKET\n    && c !== CHAR_RIGHT_CURLY_BRACKET\n    // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “\"”\n    && c !== CHAR_SHARP\n    && c !== CHAR_AMPERSAND\n    && c !== CHAR_ASTERISK\n    && c !== CHAR_EXCLAMATION\n    && c !== CHAR_VERTICAL_LINE\n    && c !== CHAR_EQUALS\n    && c !== CHAR_GREATER_THAN\n    && c !== CHAR_SINGLE_QUOTE\n    && c !== CHAR_DOUBLE_QUOTE\n    // | “%” | “@” | “`”)\n    && c !== CHAR_PERCENT\n    && c !== CHAR_COMMERCIAL_AT\n    && c !== CHAR_GRAVE_ACCENT;\n}\n\n// Simplified test for values allowed as the last character in plain style.\nfunction isPlainSafeLast(c) {\n  // just not whitespace or colon, it will be checked to be plain character later\n  return !isWhitespace(c) && c !== CHAR_COLON;\n}\n\n// Same as 'string'.codePointAt(pos), but works in older browsers.\nfunction codePointAt(string, pos) {\n  var first = string.charCodeAt(pos), second;\n  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {\n    second = string.charCodeAt(pos + 1);\n    if (second >= 0xDC00 && second <= 0xDFFF) {\n      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n    }\n  }\n  return first;\n}\n\n// Determines whether block indentation indicator is required.\nfunction needIndentIndicator(string) {\n  var leadingSpaceRe = /^\\n* /;\n  return leadingSpaceRe.test(string);\n}\n\nvar STYLE_PLAIN   = 1,\n    STYLE_SINGLE  = 2,\n    STYLE_LITERAL = 3,\n    STYLE_FOLDED  = 4,\n    STYLE_DOUBLE  = 5;\n\n// Determines which scalar styles are possible and returns the preferred style.\n// lineWidth = -1 => no limit.\n// Pre-conditions: str.length > 0.\n// Post-conditions:\n//    STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.\n//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).\n//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).\nfunction chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth,\n  testAmbiguousType, quotingType, forceQuotes, inblock) {\n\n  var i;\n  var char = 0;\n  var prevChar = null;\n  var hasLineBreak = false;\n  var hasFoldableLine = false; // only checked if shouldTrackWidth\n  var shouldTrackWidth = lineWidth !== -1;\n  var previousLineBreak = -1; // count the first line correctly\n  var plain = isPlainSafeFirst(codePointAt(string, 0))\n          && isPlainSafeLast(codePointAt(string, string.length - 1));\n\n  if (singleLineOnly || forceQuotes) {\n    // Case: no block styles.\n    // Check for disallowed characters to rule out plain and single.\n    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string, i);\n      if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n      plain = plain && isPlainSafe(char, prevChar, inblock);\n      prevChar = char;\n    }\n  } else {\n    // Case: block styles permitted.\n    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string, i);\n      if (char === CHAR_LINE_FEED) {\n        hasLineBreak = true;\n        // Check if any line can be folded.\n        if (shouldTrackWidth) {\n          hasFoldableLine = hasFoldableLine ||\n            // Foldable line = too long, and not more-indented.\n            (i - previousLineBreak - 1 > lineWidth &&\n             string[previousLineBreak + 1] !== ' ');\n          previousLineBreak = i;\n        }\n      } else if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n      plain = plain && isPlainSafe(char, prevChar, inblock);\n      prevChar = char;\n    }\n    // in case the end is missing a \\n\n    hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&\n      (i - previousLineBreak - 1 > lineWidth &&\n       string[previousLineBreak + 1] !== ' '));\n  }\n  // Although every style can represent \\n without escaping, prefer block styles\n  // for multiline, since they're more readable and they don't add empty lines.\n  // Also prefer folding a super-long line.\n  if (!hasLineBreak && !hasFoldableLine) {\n    // Strings interpretable as another type have to be quoted;\n    // e.g. the string 'true' vs. the boolean true.\n    if (plain && !forceQuotes && !testAmbiguousType(string)) {\n      return STYLE_PLAIN;\n    }\n    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n  }\n  // Edge case: block indentation indicator can only have one digit.\n  if (indentPerLevel > 9 && needIndentIndicator(string)) {\n    return STYLE_DOUBLE;\n  }\n  // At this point we know block styles are valid.\n  // Prefer literal style unless we want to fold.\n  if (!forceQuotes) {\n    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n  }\n  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n}\n\n// Note: line breaking/folding is implemented for only the folded style.\n// NB. We drop the last trailing newline (if any) of a returned block scalar\n//  since the dumper adds its own newline. This always works:\n//    • No ending newline => unaffected; already using strip \"-\" chomping.\n//    • Ending newline    => removed then restored.\n//  Importantly, this keeps the \"+\" chomp indicator from gaining an extra line.\nfunction writeScalar(state, string, level, iskey, inblock) {\n  state.dump = (function () {\n    if (string.length === 0) {\n      return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"\"' : \"''\";\n    }\n    if (!state.noCompatMode) {\n      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {\n        return state.quotingType === QUOTING_TYPE_DOUBLE ? ('\"' + string + '\"') : (\"'\" + string + \"'\");\n      }\n    }\n\n    var indent = state.indent * Math.max(1, level); // no 0-indent scalars\n    // As indentation gets deeper, let the width decrease monotonically\n    // to the lower bound min(state.lineWidth, 40).\n    // Note that this implies\n    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.\n    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.\n    // This behaves better than a constant minimum width which disallows narrower options,\n    // or an indent threshold which causes the width to suddenly increase.\n    var lineWidth = state.lineWidth === -1\n      ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);\n\n    // Without knowing if keys are implicit/explicit, assume implicit for safety.\n    var singleLineOnly = iskey\n      // No block styles in flow mode.\n      || (state.flowLevel > -1 && level >= state.flowLevel);\n    function testAmbiguity(string) {\n      return testImplicitResolving(state, string);\n    }\n\n    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth,\n      testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {\n\n      case STYLE_PLAIN:\n        return string;\n      case STYLE_SINGLE:\n        return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n      case STYLE_LITERAL:\n        return '|' + blockHeader(string, state.indent)\n          + dropEndingNewline(indentString(string, indent));\n      case STYLE_FOLDED:\n        return '>' + blockHeader(string, state.indent)\n          + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n      case STYLE_DOUBLE:\n        return '\"' + escapeString(string, lineWidth) + '\"';\n      default:\n        throw new YAMLException('impossible error: invalid scalar style');\n    }\n  }());\n}\n\n// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.\nfunction blockHeader(string, indentPerLevel) {\n  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';\n\n  // note the special case: the string '\\n' counts as a \"trailing\" empty line.\n  var clip =          string[string.length - 1] === '\\n';\n  var keep = clip && (string[string.length - 2] === '\\n' || string === '\\n');\n  var chomp = keep ? '+' : (clip ? '' : '-');\n\n  return indentIndicator + chomp + '\\n';\n}\n\n// (See the note for writeScalar.)\nfunction dropEndingNewline(string) {\n  return string[string.length - 1] === '\\n' ? string.slice(0, -1) : string;\n}\n\n// Note: a long line without a suitable break point will exceed the width limit.\n// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.\nfunction foldString(string, width) {\n  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—\n  // unless they're before or after a more-indented line, or at the very\n  // beginning or end, in which case $k$ maps to $k$.\n  // Therefore, parse each chunk as newline(s) followed by a content line.\n  var lineRe = /(\\n+)([^\\n]*)/g;\n\n  // first line (possibly an empty line)\n  var result = (function () {\n    var nextLF = string.indexOf('\\n');\n    nextLF = nextLF !== -1 ? nextLF : string.length;\n    lineRe.lastIndex = nextLF;\n    return foldLine(string.slice(0, nextLF), width);\n  }());\n  // If we haven't reached the first content line yet, don't add an extra \\n.\n  var prevMoreIndented = string[0] === '\\n' || string[0] === ' ';\n  var moreIndented;\n\n  // rest of the lines\n  var match;\n  while ((match = lineRe.exec(string))) {\n    var prefix = match[1], line = match[2];\n    moreIndented = (line[0] === ' ');\n    result += prefix\n      + (!prevMoreIndented && !moreIndented && line !== ''\n        ? '\\n' : '')\n      + foldLine(line, width);\n    prevMoreIndented = moreIndented;\n  }\n\n  return result;\n}\n\n// Greedy line breaking.\n// Picks the longest line under the limit each time,\n// otherwise settles for the shortest line over the limit.\n// NB. More-indented lines *cannot* be folded, as that would add an extra \\n.\nfunction foldLine(line, width) {\n  if (line === '' || line[0] === ' ') return line;\n\n  // Since a more-indented line adds a \\n, breaks can't be followed by a space.\n  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.\n  var match;\n  // start is an inclusive index. end, curr, and next are exclusive.\n  var start = 0, end, curr = 0, next = 0;\n  var result = '';\n\n  // Invariants: 0 <= start <= length-1.\n  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.\n  // Inside the loop:\n  //   A match implies length >= 2, so curr and next are <= length-2.\n  while ((match = breakRe.exec(line))) {\n    next = match.index;\n    // maintain invariant: curr - start <= width\n    if (next - start > width) {\n      end = (curr > start) ? curr : next; // derive end <= length-2\n      result += '\\n' + line.slice(start, end);\n      // skip the space that was output as \\n\n      start = end + 1;                    // derive start <= length-1\n    }\n    curr = next;\n  }\n\n  // By the invariants, start <= length-1, so there is something left over.\n  // It is either the whole string or a part starting from non-whitespace.\n  result += '\\n';\n  // Insert a break if the remainder is too long and there is a break available.\n  if (line.length - start > width && curr > start) {\n    result += line.slice(start, curr) + '\\n' + line.slice(curr + 1);\n  } else {\n    result += line.slice(start);\n  }\n\n  return result.slice(1); // drop extra \\n joiner\n}\n\n// Escapes a double-quoted string.\nfunction escapeString(string) {\n  var result = '';\n  var char = 0;\n  var escapeSeq;\n\n  for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n    char = codePointAt(string, i);\n    escapeSeq = ESCAPE_SEQUENCES[char];\n\n    if (!escapeSeq && isPrintable(char)) {\n      result += string[i];\n      if (char >= 0x10000) result += string[i + 1];\n    } else {\n      result += escapeSeq || encodeHex(char);\n    }\n  }\n\n  return result;\n}\n\nfunction writeFlowSequence(state, level, object) {\n  var _result = '',\n      _tag    = state.tag,\n      index,\n      length,\n      value;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    value = object[index];\n\n    if (state.replacer) {\n      value = state.replacer.call(object, String(index), value);\n    }\n\n    // Write only valid elements, put null instead of invalid elements.\n    if (writeNode(state, level, value, false, false) ||\n        (typeof value === 'undefined' &&\n         writeNode(state, level, null, false, false))) {\n\n      if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = '[' + _result + ']';\n}\n\nfunction writeBlockSequence(state, level, object, compact) {\n  var _result = '',\n      _tag    = state.tag,\n      index,\n      length,\n      value;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    value = object[index];\n\n    if (state.replacer) {\n      value = state.replacer.call(object, String(index), value);\n    }\n\n    // Write only valid elements, put null instead of invalid elements.\n    if (writeNode(state, level + 1, value, true, true, false, true) ||\n        (typeof value === 'undefined' &&\n         writeNode(state, level + 1, null, true, true, false, true))) {\n\n      if (!compact || _result !== '') {\n        _result += generateNextLine(state, level);\n      }\n\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        _result += '-';\n      } else {\n        _result += '- ';\n      }\n\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '[]'; // Empty sequence if no valid values.\n}\n\nfunction writeFlowMapping(state, level, object) {\n  var _result       = '',\n      _tag          = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      pairBuffer;\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n\n    pairBuffer = '';\n    if (_result !== '') pairBuffer += ', ';\n\n    if (state.condenseFlow) pairBuffer += '\"';\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (state.replacer) {\n      objectValue = state.replacer.call(object, objectKey, objectValue);\n    }\n\n    if (!writeNode(state, level, objectKey, false, false)) {\n      continue; // Skip this pair because of invalid key;\n    }\n\n    if (state.dump.length > 1024) pairBuffer += '? ';\n\n    pairBuffer += state.dump + (state.condenseFlow ? '\"' : '') + ':' + (state.condenseFlow ? '' : ' ');\n\n    if (!writeNode(state, level, objectValue, false, false)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    pairBuffer += state.dump;\n\n    // Both key and value are valid.\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = '{' + _result + '}';\n}\n\nfunction writeBlockMapping(state, level, object, compact) {\n  var _result       = '',\n      _tag          = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      explicitPair,\n      pairBuffer;\n\n  // Allow sorting keys so that the output file is deterministic\n  if (state.sortKeys === true) {\n    // Default sorting\n    objectKeyList.sort();\n  } else if (typeof state.sortKeys === 'function') {\n    // Custom sort function\n    objectKeyList.sort(state.sortKeys);\n  } else if (state.sortKeys) {\n    // Something is wrong\n    throw new YAMLException('sortKeys must be a boolean or a function');\n  }\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n\n    if (!compact || _result !== '') {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (state.replacer) {\n      objectValue = state.replacer.call(object, objectKey, objectValue);\n    }\n\n    if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n      continue; // Skip this pair because of invalid key.\n    }\n\n    explicitPair = (state.tag !== null && state.tag !== '?') ||\n                   (state.dump && state.dump.length > 1024);\n\n    if (explicitPair) {\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        pairBuffer += '?';\n      } else {\n        pairBuffer += '? ';\n      }\n    }\n\n    pairBuffer += state.dump;\n\n    if (explicitPair) {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n      pairBuffer += ':';\n    } else {\n      pairBuffer += ': ';\n    }\n\n    pairBuffer += state.dump;\n\n    // Both key and value are valid.\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '{}'; // Empty mapping if no valid pairs.\n}\n\nfunction detectType(state, object, explicit) {\n  var _result, typeList, index, length, type, style;\n\n  typeList = explicit ? state.explicitTypes : state.implicitTypes;\n\n  for (index = 0, length = typeList.length; index < length; index += 1) {\n    type = typeList[index];\n\n    if ((type.instanceOf  || type.predicate) &&\n        (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&\n        (!type.predicate  || type.predicate(object))) {\n\n      if (explicit) {\n        if (type.multi && type.representName) {\n          state.tag = type.representName(object);\n        } else {\n          state.tag = type.tag;\n        }\n      } else {\n        state.tag = '?';\n      }\n\n      if (type.represent) {\n        style = state.styleMap[type.tag] || type.defaultStyle;\n\n        if (_toString.call(type.represent) === '[object Function]') {\n          _result = type.represent(object, style);\n        } else if (_hasOwnProperty.call(type.represent, style)) {\n          _result = type.represent[style](object, style);\n        } else {\n          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n        }\n\n        state.dump = _result;\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// Serializes `object` and writes it to global `result`.\n// Returns true on success, or false on invalid object.\n//\nfunction writeNode(state, level, object, block, compact, iskey, isblockseq) {\n  state.tag = null;\n  state.dump = object;\n\n  if (!detectType(state, object, false)) {\n    detectType(state, object, true);\n  }\n\n  var type = _toString.call(state.dump);\n  var inblock = block;\n  var tagStr;\n\n  if (block) {\n    block = (state.flowLevel < 0 || state.flowLevel > level);\n  }\n\n  var objectOrArray = type === '[object Object]' || type === '[object Array]',\n      duplicateIndex,\n      duplicate;\n\n  if (objectOrArray) {\n    duplicateIndex = state.duplicates.indexOf(object);\n    duplicate = duplicateIndex !== -1;\n  }\n\n  if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {\n    compact = false;\n  }\n\n  if (duplicate && state.usedDuplicates[duplicateIndex]) {\n    state.dump = '*ref_' + duplicateIndex;\n  } else {\n    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n      state.usedDuplicates[duplicateIndex] = true;\n    }\n    if (type === '[object Object]') {\n      if (block && (Object.keys(state.dump).length !== 0)) {\n        writeBlockMapping(state, level, state.dump, compact);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowMapping(state, level, state.dump);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object Array]') {\n      if (block && (state.dump.length !== 0)) {\n        if (state.noArrayIndent && !isblockseq && level > 0) {\n          writeBlockSequence(state, level - 1, state.dump, compact);\n        } else {\n          writeBlockSequence(state, level, state.dump, compact);\n        }\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowSequence(state, level, state.dump);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object String]') {\n      if (state.tag !== '?') {\n        writeScalar(state, state.dump, level, iskey, inblock);\n      }\n    } else if (type === '[object Undefined]') {\n      return false;\n    } else {\n      if (state.skipInvalid) return false;\n      throw new YAMLException('unacceptable kind of an object to dump ' + type);\n    }\n\n    if (state.tag !== null && state.tag !== '?') {\n      // Need to encode all characters except those allowed by the spec:\n      //\n      // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */\n      // [36] ns-hex-digit    ::=  ns-dec-digit\n      //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */\n      // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */\n      // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”\n      // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”\n      //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”\n      //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”\n      //\n      // Also need to encode '!' because it has special meaning (end of tag prefix).\n      //\n      tagStr = encodeURI(\n        state.tag[0] === '!' ? state.tag.slice(1) : state.tag\n      ).replace(/!/g, '%21');\n\n      if (state.tag[0] === '!') {\n        tagStr = '!' + tagStr;\n      } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {\n        tagStr = '!!' + tagStr.slice(18);\n      } else {\n        tagStr = '!<' + tagStr + '>';\n      }\n\n      state.dump = tagStr + ' ' + state.dump;\n    }\n  }\n\n  return true;\n}\n\nfunction getDuplicateReferences(object, state) {\n  var objects = [],\n      duplicatesIndexes = [],\n      index,\n      length;\n\n  inspectNode(object, objects, duplicatesIndexes);\n\n  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {\n    state.duplicates.push(objects[duplicatesIndexes[index]]);\n  }\n  state.usedDuplicates = new Array(length);\n}\n\nfunction inspectNode(object, objects, duplicatesIndexes) {\n  var objectKeyList,\n      index,\n      length;\n\n  if (object !== null && typeof object === 'object') {\n    index = objects.indexOf(object);\n    if (index !== -1) {\n      if (duplicatesIndexes.indexOf(index) === -1) {\n        duplicatesIndexes.push(index);\n      }\n    } else {\n      objects.push(object);\n\n      if (Array.isArray(object)) {\n        for (index = 0, length = object.length; index < length; index += 1) {\n          inspectNode(object[index], objects, duplicatesIndexes);\n        }\n      } else {\n        objectKeyList = Object.keys(object);\n\n        for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n        }\n      }\n    }\n  }\n}\n\nfunction dump(input, options) {\n  options = options || {};\n\n  var state = new State(options);\n\n  if (!state.noRefs) getDuplicateReferences(input, state);\n\n  var value = input;\n\n  if (state.replacer) {\n    value = state.replacer.call({ '': value }, '', value);\n  }\n\n  if (writeNode(state, 0, value, true, true)) return state.dump + '\\n';\n\n  return '';\n}\n\nmodule.exports.dump = dump;\n","// YAML error class. http://stackoverflow.com/questions/8458984\n//\n'use strict';\n\n\nfunction formatError(exception, compact) {\n  var where = '', message = exception.reason || '(unknown reason)';\n\n  if (!exception.mark) return message;\n\n  if (exception.mark.name) {\n    where += 'in \"' + exception.mark.name + '\" ';\n  }\n\n  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';\n\n  if (!compact && exception.mark.snippet) {\n    where += '\\n\\n' + exception.mark.snippet;\n  }\n\n  return message + ' ' + where;\n}\n\n\nfunction YAMLException(reason, mark) {\n  // Super constructor\n  Error.call(this);\n\n  this.name = 'YAMLException';\n  this.reason = reason;\n  this.mark = mark;\n  this.message = formatError(this, false);\n\n  // Include stack trace in error object\n  if (Error.captureStackTrace) {\n    // Chrome and NodeJS\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    // FF, IE 10+ and Safari 6+. Fallback for others\n    this.stack = (new Error()).stack || '';\n  }\n}\n\n\n// Inherit from Error\nYAMLException.prototype = Object.create(Error.prototype);\nYAMLException.prototype.constructor = YAMLException;\n\n\nYAMLException.prototype.toString = function toString(compact) {\n  return this.name + ': ' + formatError(this, compact);\n};\n\n\nmodule.exports = YAMLException;\n","'use strict';\n\n/*eslint-disable max-len,no-use-before-define*/\n\nvar common              = require('./common');\nvar YAMLException       = require('./exception');\nvar makeSnippet         = require('./snippet');\nvar DEFAULT_SCHEMA      = require('./schema/default');\n\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\nvar CONTEXT_FLOW_IN   = 1;\nvar CONTEXT_FLOW_OUT  = 2;\nvar CONTEXT_BLOCK_IN  = 3;\nvar CONTEXT_BLOCK_OUT = 4;\n\n\nvar CHOMPING_CLIP  = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP  = 3;\n\n\nvar PATTERN_NON_PRINTABLE         = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS       = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI               = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction is_EOL(c) {\n  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);\n}\n\nfunction is_WHITE_SPACE(c) {\n  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);\n}\n\nfunction is_WS_OR_EOL(c) {\n  return (c === 0x09/* Tab */) ||\n         (c === 0x20/* Space */) ||\n         (c === 0x0A/* LF */) ||\n         (c === 0x0D/* CR */);\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return c === 0x2C/* , */ ||\n         c === 0x5B/* [ */ ||\n         c === 0x5D/* ] */ ||\n         c === 0x7B/* { */ ||\n         c === 0x7D/* } */;\n}\n\nfunction fromHexCode(c) {\n  var lc;\n\n  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n    return c - 0x30;\n  }\n\n  /*eslint-disable no-bitwise*/\n  lc = c | 0x20;\n\n  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {\n    return lc - 0x61 + 10;\n  }\n\n  return -1;\n}\n\nfunction escapedHexLen(c) {\n  if (c === 0x78/* x */) { return 2; }\n  if (c === 0x75/* u */) { return 4; }\n  if (c === 0x55/* U */) { return 8; }\n  return 0;\n}\n\nfunction fromDecimalCode(c) {\n  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n    return c - 0x30;\n  }\n\n  return -1;\n}\n\nfunction simpleEscapeSequence(c) {\n  /* eslint-disable indent */\n  return (c === 0x30/* 0 */) ? '\\x00' :\n        (c === 0x61/* a */) ? '\\x07' :\n        (c === 0x62/* b */) ? '\\x08' :\n        (c === 0x74/* t */) ? '\\x09' :\n        (c === 0x09/* Tab */) ? '\\x09' :\n        (c === 0x6E/* n */) ? '\\x0A' :\n        (c === 0x76/* v */) ? '\\x0B' :\n        (c === 0x66/* f */) ? '\\x0C' :\n        (c === 0x72/* r */) ? '\\x0D' :\n        (c === 0x65/* e */) ? '\\x1B' :\n        (c === 0x20/* Space */) ? ' ' :\n        (c === 0x22/* \" */) ? '\\x22' :\n        (c === 0x2F/* / */) ? '/' :\n        (c === 0x5C/* \\ */) ? '\\x5C' :\n        (c === 0x4E/* N */) ? '\\x85' :\n        (c === 0x5F/* _ */) ? '\\xA0' :\n        (c === 0x4C/* L */) ? '\\u2028' :\n        (c === 0x50/* P */) ? '\\u2029' : '';\n}\n\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  }\n  // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n  return String.fromCharCode(\n    ((c - 0x010000) >> 10) + 0xD800,\n    ((c - 0x010000) & 0x03FF) + 0xDC00\n  );\n}\n\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\nvar simpleEscapeMap = new Array(256);\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\n\n\nfunction State(input, options) {\n  this.input = input;\n\n  this.filename  = options['filename']  || null;\n  this.schema    = options['schema']    || DEFAULT_SCHEMA;\n  this.onWarning = options['onWarning'] || null;\n  // (Hidden) Remove? makes the loader to expect YAML 1.1 documents\n  // if such documents have no explicit %YAML directive\n  this.legacy    = options['legacy']    || false;\n\n  this.json      = options['json']      || false;\n  this.listener  = options['listener']  || null;\n\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap       = this.schema.compiledTypeMap;\n\n  this.length     = input.length;\n  this.position   = 0;\n  this.line       = 0;\n  this.lineStart  = 0;\n  this.lineIndent = 0;\n\n  // position of first leading tab in the current line,\n  // used to make sure there are no tabs in the indentation\n  this.firstTabInLine = -1;\n\n  this.documents = [];\n\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n\n}\n\n\nfunction generateError(state, message) {\n  var mark = {\n    name:     state.filename,\n    buffer:   state.input.slice(0, -1), // omit trailing \\0\n    position: state.position,\n    line:     state.line,\n    column:   state.position - state.lineStart\n  };\n\n  mark.snippet = makeSnippet(mark);\n\n  return new YAMLException(message, mark);\n}\n\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\n\nfunction throwWarning(state, message) {\n  if (state.onWarning) {\n    state.onWarning.call(null, generateError(state, message));\n  }\n}\n\n\nvar directiveHandlers = {\n\n  YAML: function handleYamlDirective(state, name, args) {\n\n    var match, major, minor;\n\n    if (state.version !== null) {\n      throwError(state, 'duplication of %YAML directive');\n    }\n\n    if (args.length !== 1) {\n      throwError(state, 'YAML directive accepts exactly one argument');\n    }\n\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n    if (match === null) {\n      throwError(state, 'ill-formed argument of the YAML directive');\n    }\n\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n\n    if (major !== 1) {\n      throwError(state, 'unacceptable YAML version of the document');\n    }\n\n    state.version = args[0];\n    state.checkLineBreaks = (minor < 2);\n\n    if (minor !== 1 && minor !== 2) {\n      throwWarning(state, 'unsupported YAML version of the document');\n    }\n  },\n\n  TAG: function handleTagDirective(state, name, args) {\n\n    var handle, prefix;\n\n    if (args.length !== 2) {\n      throwError(state, 'TAG directive accepts exactly two arguments');\n    }\n\n    handle = args[0];\n    prefix = args[1];\n\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n\n    if (_hasOwnProperty.call(state.tagMap, handle)) {\n      throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n\n    try {\n      prefix = decodeURIComponent(prefix);\n    } catch (err) {\n      throwError(state, 'tag prefix is malformed: ' + prefix);\n    }\n\n    state.tagMap[handle] = prefix;\n  }\n};\n\n\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n\n  if (start < end) {\n    _result = state.input.slice(start, end);\n\n    if (checkJson) {\n      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n        if (!(_character === 0x09 ||\n              (0x20 <= _character && _character <= 0x10FFFF))) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n      throwError(state, 'the stream contains non-printable characters');\n    }\n\n    state.result += _result;\n  }\n}\n\nfunction mergeMappings(state, destination, source, overridableKeys) {\n  var sourceKeys, key, index, quantity;\n\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n\n  sourceKeys = Object.keys(source);\n\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n\n    if (!_hasOwnProperty.call(destination, key)) {\n      destination[key] = source[key];\n      overridableKeys[key] = true;\n    }\n  }\n}\n\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode,\n  startLine, startLineStart, startPos) {\n\n  var index, quantity;\n\n  // The output is a plain object here, so keys can only be strings.\n  // We need to convert keyNode to a string, but doing so can hang the process\n  // (deeply nested arrays that explode exponentially using aliases).\n  if (Array.isArray(keyNode)) {\n    keyNode = Array.prototype.slice.call(keyNode);\n\n    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {\n      if (Array.isArray(keyNode[index])) {\n        throwError(state, 'nested arrays are not supported inside keys');\n      }\n\n      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {\n        keyNode[index] = '[object Object]';\n      }\n    }\n  }\n\n  // Avoid code execution in load() via toString property\n  // (still use its own toString for arrays, timestamps,\n  // and whatever user schema extensions happen to have @@toStringTag)\n  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {\n    keyNode = '[object Object]';\n  }\n\n\n  keyNode = String(keyNode);\n\n  if (_result === null) {\n    _result = {};\n  }\n\n  if (keyTag === 'tag:yaml.org,2002:merge') {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index], overridableKeys);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode, overridableKeys);\n    }\n  } else {\n    if (!state.json &&\n        !_hasOwnProperty.call(overridableKeys, keyNode) &&\n        _hasOwnProperty.call(_result, keyNode)) {\n      state.line = startLine || state.line;\n      state.lineStart = startLineStart || state.lineStart;\n      state.position = startPos || state.position;\n      throwError(state, 'duplicated mapping key');\n    }\n\n    // used for this specific key only because Object.defineProperty is slow\n    if (keyNode === '__proto__') {\n      Object.defineProperty(_result, keyNode, {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: valueNode\n      });\n    } else {\n      _result[keyNode] = valueNode;\n    }\n    delete overridableKeys[keyNode];\n  }\n\n  return _result;\n}\n\nfunction readLineBreak(state) {\n  var ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x0A/* LF */) {\n    state.position++;\n  } else if (ch === 0x0D/* CR */) {\n    state.position++;\n    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {\n      state.position++;\n    }\n  } else {\n    throwError(state, 'a line break is expected');\n  }\n\n  state.line += 1;\n  state.lineStart = state.position;\n  state.firstTabInLine = -1;\n}\n\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n      ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    while (is_WHITE_SPACE(ch)) {\n      if (ch === 0x09/* Tab */ && state.firstTabInLine === -1) {\n        state.firstTabInLine = state.position;\n      }\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (allowComments && ch === 0x23/* # */) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);\n    }\n\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n\n      while (ch === 0x20/* Space */) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n\n  return lineBreaks;\n}\n\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n      ch;\n\n  ch = state.input.charCodeAt(_position);\n\n  // Condition state.position === state.lineStart is tested\n  // in parent on each call, for efficiency. No needs to test here again.\n  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&\n      ch === state.input.charCodeAt(_position + 1) &&\n      ch === state.input.charCodeAt(_position + 2)) {\n\n    _position += 3;\n\n    ch = state.input.charCodeAt(_position);\n\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFoldedLines(state, count) {\n  if (count === 1) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\n\n\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n      following,\n      captureStart,\n      captureEnd,\n      hasPendingContent,\n      _line,\n      _lineStart,\n      _lineIndent,\n      _kind = state.kind,\n      _result = state.result,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (is_WS_OR_EOL(ch)      ||\n      is_FLOW_INDICATOR(ch) ||\n      ch === 0x23/* # */    ||\n      ch === 0x26/* & */    ||\n      ch === 0x2A/* * */    ||\n      ch === 0x21/* ! */    ||\n      ch === 0x7C/* | */    ||\n      ch === 0x3E/* > */    ||\n      ch === 0x27/* ' */    ||\n      ch === 0x22/* \" */    ||\n      ch === 0x25/* % */    ||\n      ch === 0x40/* @ */    ||\n      ch === 0x60/* ` */) {\n    return false;\n  }\n\n  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (is_WS_OR_EOL(following) ||\n        withinFlowCollection && is_FLOW_INDICATOR(following)) {\n      return false;\n    }\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n\n  while (ch !== 0) {\n    if (ch === 0x3A/* : */) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following) ||\n          withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        break;\n      }\n\n    } else if (ch === 0x23/* # */) {\n      preceding = state.input.charCodeAt(state.position - 1);\n\n      if (is_WS_OR_EOL(preceding)) {\n        break;\n      }\n\n    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||\n               withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  captureSegment(state, captureStart, captureEnd, false);\n\n  if (state.result) {\n    return true;\n  }\n\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\n\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch,\n      captureStart, captureEnd;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x27/* ' */) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x27/* ' */) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (ch === 0x27/* ' */) {\n        captureStart = state.position;\n        state.position++;\n        captureEnd = state.position;\n      } else {\n        return true;\n      }\n\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\n\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart,\n      captureEnd,\n      hexLength,\n      hexResult,\n      tmp,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x22/* \" */) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x22/* \" */) {\n      captureSegment(state, captureStart, state.position, true);\n      state.position++;\n      return true;\n\n    } else if (ch === 0x5C/* \\ */) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (is_EOL(ch)) {\n        skipSeparationSpace(state, false, nodeIndent);\n\n        // TODO: rework to inline fn with no type cast?\n      } else if (ch < 256 && simpleEscapeCheck[ch]) {\n        state.result += simpleEscapeMap[ch];\n        state.position++;\n\n      } else if ((tmp = escapedHexLen(ch)) > 0) {\n        hexLength = tmp;\n        hexResult = 0;\n\n        for (; hexLength > 0; hexLength--) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if ((tmp = fromHexCode(ch)) >= 0) {\n            hexResult = (hexResult << 4) + tmp;\n\n          } else {\n            throwError(state, 'expected hexadecimal character');\n          }\n        }\n\n        state.result += charFromCodepoint(hexResult);\n\n        state.position++;\n\n      } else {\n        throwError(state, 'unknown escape sequence');\n      }\n\n      captureStart = captureEnd = state.position;\n\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\n\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n      _line,\n      _lineStart,\n      _pos,\n      _tag     = state.tag,\n      _result,\n      _anchor  = state.anchor,\n      following,\n      terminator,\n      isPair,\n      isExplicitPair,\n      isMapping,\n      overridableKeys = Object.create(null),\n      keyNode,\n      keyTag,\n      valueNode,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x5B/* [ */) {\n    terminator = 0x5D;/* ] */\n    isMapping = false;\n    _result = [];\n  } else if (ch === 0x7B/* { */) {\n    terminator = 0x7D;/* } */\n    isMapping = true;\n    _result = {};\n  } else {\n    return false;\n  }\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  while (ch !== 0) {\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    } else if (ch === 0x2C/* , */) {\n      // \"flow collection entries can never be completely empty\", as per YAML 1.2, section 7.4\n      throwError(state, \"expected the node content, but found ','\");\n    }\n\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n\n    if (ch === 0x3F/* ? */) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following)) {\n        isPair = isExplicitPair = true;\n        state.position++;\n        skipSeparationSpace(state, true, nodeIndent);\n      }\n    }\n\n    _line = state.line; // Save the current line.\n    _lineStart = state.lineStart;\n    _pos = state.position;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {\n      isPair = true;\n      ch = state.input.charCodeAt(++state.position);\n      skipSeparationSpace(state, true, nodeIndent);\n      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n      valueNode = state.result;\n    }\n\n    if (isMapping) {\n      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));\n    } else {\n      _result.push(keyNode);\n    }\n\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x2C/* , */) {\n      readNext = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      readNext = false;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\n\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n      folding,\n      chomping       = CHOMPING_CLIP,\n      didReadContent = false,\n      detectedIndent = false,\n      textIndent     = nodeIndent,\n      emptyLines     = 0,\n      atMoreIndented = false,\n      tmp,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x7C/* | */) {\n    folding = false;\n  } else if (ch === 0x3E/* > */) {\n    folding = true;\n  } else {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n\n  while (ch !== 0) {\n    ch = state.input.charCodeAt(++state.position);\n\n    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {\n      if (CHOMPING_CLIP === chomping) {\n        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;\n      } else {\n        throwError(state, 'repeat of a chomping mode identifier');\n      }\n\n    } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n\n    } else {\n      break;\n    }\n  }\n\n  if (is_WHITE_SPACE(ch)) {\n    do { ch = state.input.charCodeAt(++state.position); }\n    while (is_WHITE_SPACE(ch));\n\n    if (ch === 0x23/* # */) {\n      do { ch = state.input.charCodeAt(++state.position); }\n      while (!is_EOL(ch) && (ch !== 0));\n    }\n  }\n\n  while (ch !== 0) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n\n    ch = state.input.charCodeAt(state.position);\n\n    while ((!detectedIndent || state.lineIndent < textIndent) &&\n           (ch === 0x20/* Space */)) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    }\n\n    // End of the scalar.\n    if (state.lineIndent < textIndent) {\n\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (didReadContent) { // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      }\n\n      // Break this `while` cycle and go to the funciton's epilogue.\n      break;\n    }\n\n    // Folded style: use fancy rules to handle line breaks.\n    if (folding) {\n\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true;\n        // except for the first content line (cf. Example 8.1)\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n\n      // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1);\n\n      // Just one line break - perceive as the same line.\n      } else if (emptyLines === 0) {\n        if (didReadContent) { // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        }\n\n      // Several line breaks - perceive as different lines.\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      }\n\n    // Literal style: just add exact number of line breaks between content lines.\n    } else {\n      // Keep all line breaks except the header line break.\n      state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n    }\n\n    didReadContent = true;\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n\n    while (!is_EOL(ch) && (ch !== 0)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    captureSegment(state, captureStart, state.position, false);\n  }\n\n  return true;\n}\n\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n      _tag      = state.tag,\n      _anchor   = state.anchor,\n      _result   = [],\n      following,\n      detected  = false,\n      ch;\n\n  // there is a leading tab before this token, so it can't be a block sequence/mapping;\n  // it can still be flow sequence/mapping or a scalar\n  if (state.firstTabInLine !== -1) return false;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state, 'tab characters must not be used in indentation');\n    }\n\n    if (ch !== 0x2D/* - */) {\n      break;\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n\n    detected = true;\n    state.position++;\n\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n    _result.push(state.result);\n    skipSeparationSpace(state, true, -1);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n  return false;\n}\n\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n      allowCompact,\n      _line,\n      _keyLine,\n      _keyLineStart,\n      _keyPos,\n      _tag          = state.tag,\n      _anchor       = state.anchor,\n      _result       = {},\n      overridableKeys = Object.create(null),\n      keyTag        = null,\n      keyNode       = null,\n      valueNode     = null,\n      atExplicitKey = false,\n      detected      = false,\n      ch;\n\n  // there is a leading tab before this token, so it can't be a block sequence/mapping;\n  // it can still be flow sequence/mapping or a scalar\n  if (state.firstTabInLine !== -1) return false;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (!atExplicitKey && state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state, 'tab characters must not be used in indentation');\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n\n    //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n    //\n    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {\n\n      if (ch === 0x3F/* ? */) {\n        if (atExplicitKey) {\n          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n          keyTag = keyNode = valueNode = null;\n        }\n\n        detected = true;\n        atExplicitKey = true;\n        allowCompact = true;\n\n      } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n      }\n\n      state.position += 1;\n      ch = following;\n\n    //\n    // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n    //\n    } else {\n      _keyLine = state.line;\n      _keyLineStart = state.lineStart;\n      _keyPos = state.position;\n\n      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n        // Neither implicit nor explicit notation.\n        // Reading is done. Go to the epilogue.\n        break;\n      }\n\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        if (ch === 0x3A/* : */) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if (!is_WS_OR_EOL(ch)) {\n            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n          }\n\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = false;\n          allowCompact = false;\n          keyTag = state.tag;\n          keyNode = state.result;\n\n        } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n    }\n\n    //\n    // Common reading code for both explicit and implicit notations.\n    //\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (atExplicitKey) {\n        _keyLine = state.line;\n        _keyLineStart = state.lineStart;\n        _keyPos = state.position;\n      }\n\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);\n        keyTag = keyNode = valueNode = null;\n      }\n\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  //\n  // Epilogue.\n  //\n\n  // Special case: last mapping's node contains only the key in explicit notation.\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n  }\n\n  // Expose the resulting mapping.\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n\n  return detected;\n}\n\nfunction readTagProperty(state) {\n  var _position,\n      isVerbatim = false,\n      isNamed    = false,\n      tagHandle,\n      tagName,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x21/* ! */) return false;\n\n  if (state.tag !== null) {\n    throwError(state, 'duplication of a tag property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  if (ch === 0x3C/* < */) {\n    isVerbatim = true;\n    ch = state.input.charCodeAt(++state.position);\n\n  } else if (ch === 0x21/* ! */) {\n    isNamed = true;\n    tagHandle = '!!';\n    ch = state.input.charCodeAt(++state.position);\n\n  } else {\n    tagHandle = '!';\n  }\n\n  _position = state.position;\n\n  if (isVerbatim) {\n    do { ch = state.input.charCodeAt(++state.position); }\n    while (ch !== 0 && ch !== 0x3E/* > */);\n\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n\n      if (ch === 0x21/* ! */) {\n        if (!isNamed) {\n          tagHandle = state.input.slice(_position - 1, state.position + 1);\n\n          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n            throwError(state, 'named tag handle cannot contain such characters');\n          }\n\n          isNamed = true;\n          _position = state.position + 1;\n        } else {\n          throwError(state, 'tag suffix cannot contain exclamation marks');\n        }\n      }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    tagName = state.input.slice(_position, state.position);\n\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n\n  try {\n    tagName = decodeURIComponent(tagName);\n  } catch (err) {\n    throwError(state, 'tag name is malformed: ' + tagName);\n  }\n\n  if (isVerbatim) {\n    state.tag = tagName;\n\n  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n\n  } else if (tagHandle === '!') {\n    state.tag = '!' + tagName;\n\n  } else if (tagHandle === '!!') {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n\n  return true;\n}\n\nfunction readAnchorProperty(state) {\n  var _position,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x26/* & */) return false;\n\n  if (state.anchor !== null) {\n    throwError(state, 'duplication of an anchor property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\n\nfunction readAlias(state) {\n  var _position, alias,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x2A/* * */) return false;\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n\n  alias = state.input.slice(_position, state.position);\n\n  if (!_hasOwnProperty.call(state.anchorMap, alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\n\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n      allowBlockScalars,\n      allowBlockCollections,\n      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent\n      atNewLine  = false,\n      hasContent = false,\n      typeIndex,\n      typeQuantity,\n      typeList,\n      type,\n      flowIndent,\n      blockIndent;\n\n  if (state.listener !== null) {\n    state.listener('open', state);\n  }\n\n  state.tag    = null;\n  state.anchor = null;\n  state.kind   = null;\n  state.result = null;\n\n  allowBlockStyles = allowBlockScalars = allowBlockCollections =\n    CONTEXT_BLOCK_OUT === nodeContext ||\n    CONTEXT_BLOCK_IN  === nodeContext;\n\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n\n  if (indentStatus === 1) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n\n  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n\n    blockIndent = state.position - state.lineStart;\n\n    if (indentStatus === 1) {\n      if (allowBlockCollections &&\n          (readBlockSequence(state, blockIndent) ||\n           readBlockMapping(state, blockIndent, flowIndent)) ||\n          readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||\n            readSingleQuotedScalar(state, flowIndent) ||\n            readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n\n        } else if (readAlias(state)) {\n          hasContent = true;\n\n          if (state.tag !== null || state.anchor !== null) {\n            throwError(state, 'alias node should not have any properties');\n          }\n\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n\n          if (state.tag === null) {\n            state.tag = '?';\n          }\n        }\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (indentStatus === 0) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n\n  if (state.tag === null) {\n    if (state.anchor !== null) {\n      state.anchorMap[state.anchor] = state.result;\n    }\n\n  } else if (state.tag === '?') {\n    // Implicit resolving is not allowed for non-scalar types, and '?'\n    // non-specific tag is only automatically assigned to plain scalars.\n    //\n    // We only need to check kind conformity in case user explicitly assigns '?'\n    // tag, for example like this: \"!<?> [0]\"\n    //\n    if (state.result !== null && state.kind !== 'scalar') {\n      throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n    }\n\n    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n      type = state.implicitTypes[typeIndex];\n\n      if (type.resolve(state.result)) { // `state.result` updated in resolver if matched\n        state.result = type.construct(state.result);\n        state.tag = type.tag;\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n        break;\n      }\n    }\n  } else if (state.tag !== '!') {\n    if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {\n      type = state.typeMap[state.kind || 'fallback'][state.tag];\n    } else {\n      // looking for multi type\n      type = null;\n      typeList = state.typeMap.multi[state.kind || 'fallback'];\n\n      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {\n        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {\n          type = typeList[typeIndex];\n          break;\n        }\n      }\n    }\n\n    if (!type) {\n      throwError(state, 'unknown tag !<' + state.tag + '>');\n    }\n\n    if (state.result !== null && type.kind !== state.kind) {\n      throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n    }\n\n    if (!type.resolve(state.result, state.tag)) { // `state.result` updated in resolver if matched\n      throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n    } else {\n      state.result = type.construct(state.result, state.tag);\n      if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = state.result;\n      }\n    }\n  }\n\n  if (state.listener !== null) {\n    state.listener('close', state);\n  }\n  return state.tag !== null ||  state.anchor !== null || hasContent;\n}\n\nfunction readDocument(state) {\n  var documentStart = state.position,\n      _position,\n      directiveName,\n      directiveArgs,\n      hasDirectives = false,\n      ch;\n\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = Object.create(null);\n  state.anchorMap = Object.create(null);\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    skipSeparationSpace(state, true, -1);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (state.lineIndent > 0 || ch !== 0x25/* % */) {\n      break;\n    }\n\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (ch === 0x23/* # */) {\n        do { ch = state.input.charCodeAt(++state.position); }\n        while (ch !== 0 && !is_EOL(ch));\n        break;\n      }\n\n      if (is_EOL(ch)) break;\n\n      _position = state.position;\n\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n\n    if (ch !== 0) readLineBreak(state);\n\n    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n\n  skipSeparationSpace(state, true, -1);\n\n  if (state.lineIndent === 0 &&\n      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&\n      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&\n      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {\n    state.position += 3;\n    skipSeparationSpace(state, true, -1);\n\n  } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n\n  if (state.checkLineBreaks &&\n      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n\n  state.documents.push(state.result);\n\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n\n    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    }\n    return;\n  }\n\n  if (state.position < (state.length - 1)) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\n\n\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n\n  if (input.length !== 0) {\n\n    // Add tailing `\\n` if not exists\n    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&\n        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {\n      input += '\\n';\n    }\n\n    // Strip BOM\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n\n  var state = new State(input, options);\n\n  var nullpos = input.indexOf('\\0');\n\n  if (nullpos !== -1) {\n    state.position = nullpos;\n    throwError(state, 'null byte is not allowed in input');\n  }\n\n  // Use 0 as string terminator. That significantly simplifies bounds check.\n  state.input += '\\0';\n\n  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n\n  while (state.position < (state.length - 1)) {\n    readDocument(state);\n  }\n\n  return state.documents;\n}\n\n\nfunction loadAll(input, iterator, options) {\n  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n\n  var documents = loadDocuments(input, options);\n\n  if (typeof iterator !== 'function') {\n    return documents;\n  }\n\n  for (var index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\n\n\nfunction load(input, options) {\n  var documents = loadDocuments(input, options);\n\n  if (documents.length === 0) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (documents.length === 1) {\n    return documents[0];\n  }\n  throw new YAMLException('expected a single document in the stream, but found more');\n}\n\n\nmodule.exports.loadAll = loadAll;\nmodule.exports.load    = load;\n","'use strict';\n\n/*eslint-disable max-len*/\n\nvar YAMLException = require('./exception');\nvar Type          = require('./type');\n\n\nfunction compileList(schema, name) {\n  var result = [];\n\n  schema[name].forEach(function (currentType) {\n    var newIndex = result.length;\n\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag &&\n          previousType.kind === currentType.kind &&\n          previousType.multi === currentType.multi) {\n\n        newIndex = previousIndex;\n      }\n    });\n\n    result[newIndex] = currentType;\n  });\n\n  return result;\n}\n\n\nfunction compileMap(/* lists... */) {\n  var result = {\n        scalar: {},\n        sequence: {},\n        mapping: {},\n        fallback: {},\n        multi: {\n          scalar: [],\n          sequence: [],\n          mapping: [],\n          fallback: []\n        }\n      }, index, length;\n\n  function collectType(type) {\n    if (type.multi) {\n      result.multi[type.kind].push(type);\n      result.multi['fallback'].push(type);\n    } else {\n      result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n    }\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n  return result;\n}\n\n\nfunction Schema(definition) {\n  return this.extend(definition);\n}\n\n\nSchema.prototype.extend = function extend(definition) {\n  var implicit = [];\n  var explicit = [];\n\n  if (definition instanceof Type) {\n    // Schema.extend(type)\n    explicit.push(definition);\n\n  } else if (Array.isArray(definition)) {\n    // Schema.extend([ type1, type2, ... ])\n    explicit = explicit.concat(definition);\n\n  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {\n    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })\n    if (definition.implicit) implicit = implicit.concat(definition.implicit);\n    if (definition.explicit) explicit = explicit.concat(definition.explicit);\n\n  } else {\n    throw new YAMLException('Schema.extend argument should be a Type, [ Type ], ' +\n      'or a schema definition ({ implicit: [...], explicit: [...] })');\n  }\n\n  implicit.forEach(function (type) {\n    if (!(type instanceof Type)) {\n      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n\n    if (type.loadKind && type.loadKind !== 'scalar') {\n      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n\n    if (type.multi) {\n      throw new YAMLException('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');\n    }\n  });\n\n  explicit.forEach(function (type) {\n    if (!(type instanceof Type)) {\n      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n  });\n\n  var result = Object.create(Schema.prototype);\n\n  result.implicit = (this.implicit || []).concat(implicit);\n  result.explicit = (this.explicit || []).concat(explicit);\n\n  result.compiledImplicit = compileList(result, 'implicit');\n  result.compiledExplicit = compileList(result, 'explicit');\n  result.compiledTypeMap  = compileMap(result.compiledImplicit, result.compiledExplicit);\n\n  return result;\n};\n\n\nmodule.exports = Schema;\n","// Standard YAML's Core schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2804923\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, Core schema has no distinctions from JSON schema is JS-YAML.\n\n\n'use strict';\n\n\nmodule.exports = require('./json');\n","// JS-YAML's default schema for `safeLoad` function.\n// It is not described in the YAML specification.\n//\n// This schema is based on standard YAML's Core schema and includes most of\n// extra types described at YAML tag repository. (http://yaml.org/type/)\n\n\n'use strict';\n\n\nmodule.exports = require('./core').extend({\n  implicit: [\n    require('../type/timestamp'),\n    require('../type/merge')\n  ],\n  explicit: [\n    require('../type/binary'),\n    require('../type/omap'),\n    require('../type/pairs'),\n    require('../type/set')\n  ]\n});\n","// Standard YAML's Failsafe schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2802346\n\n\n'use strict';\n\n\nvar Schema = require('../schema');\n\n\nmodule.exports = new Schema({\n  explicit: [\n    require('../type/str'),\n    require('../type/seq'),\n    require('../type/map')\n  ]\n});\n","// Standard YAML's JSON schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2803231\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, this schema is not such strict as defined in the YAML specification.\n// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.\n\n\n'use strict';\n\n\nmodule.exports = require('./failsafe').extend({\n  implicit: [\n    require('../type/null'),\n    require('../type/bool'),\n    require('../type/int'),\n    require('../type/float')\n  ]\n});\n","'use strict';\n\n\nvar common = require('./common');\n\n\n// get snippet for a single line, respecting maxLength\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n  var head = '';\n  var tail = '';\n  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n\n  if (position - lineStart > maxHalfLength) {\n    head = ' ... ';\n    lineStart = position - maxHalfLength + head.length;\n  }\n\n  if (lineEnd - position > maxHalfLength) {\n    tail = ' ...';\n    lineEnd = position + maxHalfLength - tail.length;\n  }\n\n  return {\n    str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, '→') + tail,\n    pos: position - lineStart + head.length // relative position\n  };\n}\n\n\nfunction padStart(string, max) {\n  return common.repeat(' ', max - string.length) + string;\n}\n\n\nfunction makeSnippet(mark, options) {\n  options = Object.create(options || null);\n\n  if (!mark.buffer) return null;\n\n  if (!options.maxLength) options.maxLength = 79;\n  if (typeof options.indent      !== 'number') options.indent      = 1;\n  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\n  if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;\n\n  var re = /\\r?\\n|\\r|\\0/g;\n  var lineStarts = [ 0 ];\n  var lineEnds = [];\n  var match;\n  var foundLineNo = -1;\n\n  while ((match = re.exec(mark.buffer))) {\n    lineEnds.push(match.index);\n    lineStarts.push(match.index + match[0].length);\n\n    if (mark.position <= match.index && foundLineNo < 0) {\n      foundLineNo = lineStarts.length - 2;\n    }\n  }\n\n  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n\n  var result = '', i, line;\n  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n\n  for (i = 1; i <= options.linesBefore; i++) {\n    if (foundLineNo - i < 0) break;\n    line = getLine(\n      mark.buffer,\n      lineStarts[foundLineNo - i],\n      lineEnds[foundLineNo - i],\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),\n      maxLineLength\n    );\n    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n' + result;\n  }\n\n  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) +\n    ' | ' + line.str + '\\n';\n  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\\n';\n\n  for (i = 1; i <= options.linesAfter; i++) {\n    if (foundLineNo + i >= lineEnds.length) break;\n    line = getLine(\n      mark.buffer,\n      lineStarts[foundLineNo + i],\n      lineEnds[foundLineNo + i],\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),\n      maxLineLength\n    );\n    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n';\n  }\n\n  return result.replace(/\\n$/, '');\n}\n\n\nmodule.exports = makeSnippet;\n","'use strict';\n\nvar YAMLException = require('./exception');\n\nvar TYPE_CONSTRUCTOR_OPTIONS = [\n  'kind',\n  'multi',\n  'resolve',\n  'construct',\n  'instanceOf',\n  'predicate',\n  'represent',\n  'representName',\n  'defaultStyle',\n  'styleAliases'\n];\n\nvar YAML_NODE_KINDS = [\n  'scalar',\n  'sequence',\n  'mapping'\n];\n\nfunction compileStyleAliases(map) {\n  var result = {};\n\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n\n  return result;\n}\n\nfunction Type(tag, options) {\n  options = options || {};\n\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new YAMLException('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n    }\n  });\n\n  // TODO: Add tag format check.\n  this.options       = options; // keep original options in case user wants to extend this type later\n  this.tag           = tag;\n  this.kind          = options['kind']          || null;\n  this.resolve       = options['resolve']       || function () { return true; };\n  this.construct     = options['construct']     || function (data) { return data; };\n  this.instanceOf    = options['instanceOf']    || null;\n  this.predicate     = options['predicate']     || null;\n  this.represent     = options['represent']     || null;\n  this.representName = options['representName'] || null;\n  this.defaultStyle  = options['defaultStyle']  || null;\n  this.multi         = options['multi']         || false;\n  this.styleAliases  = compileStyleAliases(options['styleAliases'] || null);\n\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new YAMLException('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n  }\n}\n\nmodule.exports = Type;\n","'use strict';\n\n/*eslint-disable no-bitwise*/\n\n\nvar Type = require('../type');\n\n\n// [ 64, 65, 66 ] -> [ padding, CR, LF ]\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\n\n\nfunction resolveYamlBinary(data) {\n  if (data === null) return false;\n\n  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;\n\n  // Convert one by one.\n  for (idx = 0; idx < max; idx++) {\n    code = map.indexOf(data.charAt(idx));\n\n    // Skip CR/LF\n    if (code > 64) continue;\n\n    // Fail on illegal characters\n    if (code < 0) return false;\n\n    bitlen += 6;\n  }\n\n  // If there are any bits left, source was corrupted\n  return (bitlen % 8) === 0;\n}\n\nfunction constructYamlBinary(data) {\n  var idx, tailbits,\n      input = data.replace(/[\\r\\n=]/g, ''), // remove CR/LF & padding to simplify scan\n      max = input.length,\n      map = BASE64_MAP,\n      bits = 0,\n      result = [];\n\n  // Collect by 6*4 bits (3 bytes)\n\n  for (idx = 0; idx < max; idx++) {\n    if ((idx % 4 === 0) && idx) {\n      result.push((bits >> 16) & 0xFF);\n      result.push((bits >> 8) & 0xFF);\n      result.push(bits & 0xFF);\n    }\n\n    bits = (bits << 6) | map.indexOf(input.charAt(idx));\n  }\n\n  // Dump tail\n\n  tailbits = (max % 4) * 6;\n\n  if (tailbits === 0) {\n    result.push((bits >> 16) & 0xFF);\n    result.push((bits >> 8) & 0xFF);\n    result.push(bits & 0xFF);\n  } else if (tailbits === 18) {\n    result.push((bits >> 10) & 0xFF);\n    result.push((bits >> 2) & 0xFF);\n  } else if (tailbits === 12) {\n    result.push((bits >> 4) & 0xFF);\n  }\n\n  return new Uint8Array(result);\n}\n\nfunction representYamlBinary(object /*, style*/) {\n  var result = '', bits = 0, idx, tail,\n      max = object.length,\n      map = BASE64_MAP;\n\n  // Convert every three bytes to 4 ASCII characters.\n\n  for (idx = 0; idx < max; idx++) {\n    if ((idx % 3 === 0) && idx) {\n      result += map[(bits >> 18) & 0x3F];\n      result += map[(bits >> 12) & 0x3F];\n      result += map[(bits >> 6) & 0x3F];\n      result += map[bits & 0x3F];\n    }\n\n    bits = (bits << 8) + object[idx];\n  }\n\n  // Dump tail\n\n  tail = max % 3;\n\n  if (tail === 0) {\n    result += map[(bits >> 18) & 0x3F];\n    result += map[(bits >> 12) & 0x3F];\n    result += map[(bits >> 6) & 0x3F];\n    result += map[bits & 0x3F];\n  } else if (tail === 2) {\n    result += map[(bits >> 10) & 0x3F];\n    result += map[(bits >> 4) & 0x3F];\n    result += map[(bits << 2) & 0x3F];\n    result += map[64];\n  } else if (tail === 1) {\n    result += map[(bits >> 2) & 0x3F];\n    result += map[(bits << 4) & 0x3F];\n    result += map[64];\n    result += map[64];\n  }\n\n  return result;\n}\n\nfunction isBinary(obj) {\n  return Object.prototype.toString.call(obj) ===  '[object Uint8Array]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:binary', {\n  kind: 'scalar',\n  resolve: resolveYamlBinary,\n  construct: constructYamlBinary,\n  predicate: isBinary,\n  represent: representYamlBinary\n});\n","'use strict';\n\nvar Type = require('../type');\n\nfunction resolveYamlBoolean(data) {\n  if (data === null) return false;\n\n  var max = data.length;\n\n  return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||\n         (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));\n}\n\nfunction constructYamlBoolean(data) {\n  return data === 'true' ||\n         data === 'True' ||\n         data === 'TRUE';\n}\n\nfunction isBoolean(object) {\n  return Object.prototype.toString.call(object) === '[object Boolean]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:bool', {\n  kind: 'scalar',\n  resolve: resolveYamlBoolean,\n  construct: constructYamlBoolean,\n  predicate: isBoolean,\n  represent: {\n    lowercase: function (object) { return object ? 'true' : 'false'; },\n    uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },\n    camelcase: function (object) { return object ? 'True' : 'False'; }\n  },\n  defaultStyle: 'lowercase'\n});\n","'use strict';\n\nvar common = require('../common');\nvar Type   = require('../type');\n\nvar YAML_FLOAT_PATTERN = new RegExp(\n  // 2.5e4, 2.5 and integers\n  '^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +\n  // .2e4, .2\n  // special case, seems not from spec\n  '|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +\n  // .inf\n  '|[-+]?\\\\.(?:inf|Inf|INF)' +\n  // .nan\n  '|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) ||\n      // Quick hack to not allow integers end with `_`\n      // Probably should update regexp & check speed\n      data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value, sign;\n\n  value  = data.replace(/_/g, '').toLowerCase();\n  sign   = value[0] === '-' ? -1 : 1;\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n\n  } else if (value === '.nan') {\n    return NaN;\n  }\n  return sign * parseFloat(value, 10);\n}\n\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object, style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase': return '.nan';\n      case 'uppercase': return '.NAN';\n      case 'camelcase': return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '.inf';\n      case 'uppercase': return '.INF';\n      case 'camelcase': return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '-.inf';\n      case 'uppercase': return '-.INF';\n      case 'camelcase': return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10);\n\n  // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\n\nfunction isFloat(object) {\n  return (Object.prototype.toString.call(object) === '[object Number]') &&\n         (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});\n","'use strict';\n\nvar common = require('../common');\nvar Type   = require('../type');\n\nfunction isHexCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||\n         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||\n         ((0x61/* a */ <= c) && (c <= 0x66/* f */));\n}\n\nfunction isOctCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));\n}\n\nfunction isDecCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n\n  var max = data.length,\n      index = 0,\n      hasDigits = false,\n      ch;\n\n  if (!max) return false;\n\n  ch = data[index];\n\n  // sign\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index];\n\n    // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n\n    if (ch === 'o') {\n      // base 8\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isOctCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n  }\n\n  // base 10 (except 0)\n\n  // value should not start with `_`;\n  if (ch === '_') return false;\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n    hasDigits = true;\n  }\n\n  // Should have digits and should not end with `_`\n  if (!hasDigits || ch === '_') return false;\n\n  return true;\n}\n\nfunction constructYamlInteger(data) {\n  var value = data, sign = 1, ch;\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if (value === '0') return 0;\n\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);\n    if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);\n  }\n\n  return sign * parseInt(value, 10);\n}\n\nfunction isInteger(object) {\n  return (Object.prototype.toString.call(object)) === '[object Number]' &&\n         (object % 1 === 0 && !common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },\n    octal:       function (obj) { return obj >= 0 ? '0o'  + obj.toString(8) : '-0o'  + obj.toString(8).slice(1); },\n    decimal:     function (obj) { return obj.toString(10); },\n    /* eslint-disable max-len */\n    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary:      [ 2,  'bin' ],\n    octal:       [ 8,  'oct' ],\n    decimal:     [ 10, 'dec' ],\n    hexadecimal: [ 16, 'hex' ]\n  }\n});\n","'use strict';\n\nvar Type = require('../type');\n\nmodule.exports = new Type('tag:yaml.org,2002:map', {\n  kind: 'mapping',\n  construct: function (data) { return data !== null ? data : {}; }\n});\n","'use strict';\n\nvar Type = require('../type');\n\nfunction resolveYamlMerge(data) {\n  return data === '<<' || data === null;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:merge', {\n  kind: 'scalar',\n  resolve: resolveYamlMerge\n});\n","'use strict';\n\nvar Type = require('../type');\n\nfunction resolveYamlNull(data) {\n  if (data === null) return true;\n\n  var max = data.length;\n\n  return (max === 1 && data === '~') ||\n         (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));\n}\n\nfunction constructYamlNull() {\n  return null;\n}\n\nfunction isNull(object) {\n  return object === null;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:null', {\n  kind: 'scalar',\n  resolve: resolveYamlNull,\n  construct: constructYamlNull,\n  predicate: isNull,\n  represent: {\n    canonical: function () { return '~';    },\n    lowercase: function () { return 'null'; },\n    uppercase: function () { return 'NULL'; },\n    camelcase: function () { return 'Null'; },\n    empty:     function () { return '';     }\n  },\n  defaultStyle: 'lowercase'\n});\n","'use strict';\n\nvar Type = require('../type');\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar _toString       = Object.prototype.toString;\n\nfunction resolveYamlOmap(data) {\n  if (data === null) return true;\n\n  var objectKeys = [], index, length, pair, pairKey, pairHasKey,\n      object = data;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    pairHasKey = false;\n\n    if (_toString.call(pair) !== '[object Object]') return false;\n\n    for (pairKey in pair) {\n      if (_hasOwnProperty.call(pair, pairKey)) {\n        if (!pairHasKey) pairHasKey = true;\n        else return false;\n      }\n    }\n\n    if (!pairHasKey) return false;\n\n    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);\n    else return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlOmap(data) {\n  return data !== null ? data : [];\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:omap', {\n  kind: 'sequence',\n  resolve: resolveYamlOmap,\n  construct: constructYamlOmap\n});\n","'use strict';\n\nvar Type = require('../type');\n\nvar _toString = Object.prototype.toString;\n\nfunction resolveYamlPairs(data) {\n  if (data === null) return true;\n\n  var index, length, pair, keys, result,\n      object = data;\n\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n\n    if (_toString.call(pair) !== '[object Object]') return false;\n\n    keys = Object.keys(pair);\n\n    if (keys.length !== 1) return false;\n\n    result[index] = [ keys[0], pair[keys[0]] ];\n  }\n\n  return true;\n}\n\nfunction constructYamlPairs(data) {\n  if (data === null) return [];\n\n  var index, length, pair, keys, result,\n      object = data;\n\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n\n    keys = Object.keys(pair);\n\n    result[index] = [ keys[0], pair[keys[0]] ];\n  }\n\n  return result;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:pairs', {\n  kind: 'sequence',\n  resolve: resolveYamlPairs,\n  construct: constructYamlPairs\n});\n","'use strict';\n\nvar Type = require('../type');\n\nmodule.exports = new Type('tag:yaml.org,2002:seq', {\n  kind: 'sequence',\n  construct: function (data) { return data !== null ? data : []; }\n});\n","'use strict';\n\nvar Type = require('../type');\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction resolveYamlSet(data) {\n  if (data === null) return true;\n\n  var key, object = data;\n\n  for (key in object) {\n    if (_hasOwnProperty.call(object, key)) {\n      if (object[key] !== null) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction constructYamlSet(data) {\n  return data !== null ? data : {};\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:set', {\n  kind: 'mapping',\n  resolve: resolveYamlSet,\n  construct: constructYamlSet\n});\n","'use strict';\n\nvar Type = require('../type');\n\nmodule.exports = new Type('tag:yaml.org,2002:str', {\n  kind: 'scalar',\n  construct: function (data) { return data !== null ? data : ''; }\n});\n","'use strict';\n\nvar Type = require('../type');\n\nvar YAML_DATE_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9])'                    + // [2] month\n  '-([0-9][0-9])$');                   // [3] day\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9]?)'                   + // [2] month\n  '-([0-9][0-9]?)'                   + // [3] day\n  '(?:[Tt]|[ \\\\t]+)'                 + // ...\n  '([0-9][0-9]?)'                    + // [4] hour\n  ':([0-9][0-9])'                    + // [5] minute\n  ':([0-9][0-9])'                    + // [6] second\n  '(?:\\\\.([0-9]*))?'                 + // [7] fraction\n  '(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour\n  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute\n\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\n\nfunction constructYamlTimestamp(data) {\n  var match, year, month, day, hour, minute, second, fraction = 0,\n      delta = null, tz_hour, tz_minute, date;\n\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n\n  if (match === null) throw new Error('Date resolve error');\n\n  // match: [1] year [2] month [3] day\n\n  year = +(match[1]);\n  month = +(match[2]) - 1; // JS month starts with 0\n  day = +(match[3]);\n\n  if (!match[4]) { // no hour\n    return new Date(Date.UTC(year, month, day));\n  }\n\n  // match: [4] hour [5] minute [6] second [7] fraction\n\n  hour = +(match[4]);\n  minute = +(match[5]);\n  second = +(match[6]);\n\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n    while (fraction.length < 3) { // milli-seconds\n      fraction += '0';\n    }\n    fraction = +fraction;\n  }\n\n  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n  if (match[9]) {\n    tz_hour = +(match[10]);\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n    if (match[9] === '-') delta = -delta;\n  }\n\n  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n\n  if (delta) date.setTime(date.getTime() - delta);\n\n  return date;\n}\n\nfunction representYamlTimestamp(object /*, style*/) {\n  return object.toISOString();\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:timestamp', {\n  kind: 'scalar',\n  resolve: resolveYamlTimestamp,\n  construct: constructYamlTimestamp,\n  instanceOf: Date,\n  represent: representYamlTimestamp\n});\n","'use strict'\n/*\n * merge2\n * https://github.com/teambition/merge2\n *\n * Copyright (c) 2014-2020 Teambition\n * Licensed under the MIT license.\n */\nconst Stream = require('stream')\nconst PassThrough = Stream.PassThrough\nconst slice = Array.prototype.slice\n\nmodule.exports = merge2\n\nfunction merge2 () {\n  const streamsQueue = []\n  const args = slice.call(arguments)\n  let merging = false\n  let options = args[args.length - 1]\n\n  if (options && !Array.isArray(options) && options.pipe == null) {\n    args.pop()\n  } else {\n    options = {}\n  }\n\n  const doEnd = options.end !== false\n  const doPipeError = options.pipeError === true\n  if (options.objectMode == null) {\n    options.objectMode = true\n  }\n  if (options.highWaterMark == null) {\n    options.highWaterMark = 64 * 1024\n  }\n  const mergedStream = PassThrough(options)\n\n  function addStream () {\n    for (let i = 0, len = arguments.length; i < len; i++) {\n      streamsQueue.push(pauseStreams(arguments[i], options))\n    }\n    mergeStream()\n    return this\n  }\n\n  function mergeStream () {\n    if (merging) {\n      return\n    }\n    merging = true\n\n    let streams = streamsQueue.shift()\n    if (!streams) {\n      process.nextTick(endStream)\n      return\n    }\n    if (!Array.isArray(streams)) {\n      streams = [streams]\n    }\n\n    let pipesCount = streams.length + 1\n\n    function next () {\n      if (--pipesCount > 0) {\n        return\n      }\n      merging = false\n      mergeStream()\n    }\n\n    function pipe (stream) {\n      function onend () {\n        stream.removeListener('merge2UnpipeEnd', onend)\n        stream.removeListener('end', onend)\n        if (doPipeError) {\n          stream.removeListener('error', onerror)\n        }\n        next()\n      }\n      function onerror (err) {\n        mergedStream.emit('error', err)\n      }\n      // skip ended stream\n      if (stream._readableState.endEmitted) {\n        return next()\n      }\n\n      stream.on('merge2UnpipeEnd', onend)\n      stream.on('end', onend)\n\n      if (doPipeError) {\n        stream.on('error', onerror)\n      }\n\n      stream.pipe(mergedStream, { end: false })\n      // compatible for old stream\n      stream.resume()\n    }\n\n    for (let i = 0; i < streams.length; i++) {\n      pipe(streams[i])\n    }\n\n    next()\n  }\n\n  function endStream () {\n    merging = false\n    // emit 'queueDrain' when all streams merged.\n    mergedStream.emit('queueDrain')\n    if (doEnd) {\n      mergedStream.end()\n    }\n  }\n\n  mergedStream.setMaxListeners(0)\n  mergedStream.add = addStream\n  mergedStream.on('unpipe', function (stream) {\n    stream.emit('merge2UnpipeEnd')\n  })\n\n  if (args.length) {\n    addStream.apply(null, args)\n  }\n  return mergedStream\n}\n\n// check and pause streams for pipe.\nfunction pauseStreams (streams, options) {\n  if (!Array.isArray(streams)) {\n    // Backwards-compat with old-style streams\n    if (!streams._readableState && streams.pipe) {\n      streams = streams.pipe(PassThrough(options))\n    }\n    if (!streams._readableState || !streams.pause || !streams.pipe) {\n      throw new Error('Only readable stream can be merged.')\n    }\n    streams.pause()\n  } else {\n    for (let i = 0, len = streams.length; i < len; i++) {\n      streams[i] = pauseStreams(streams[i], options)\n    }\n  }\n  return streams\n}\n","'use strict';\n\nconst util = require('util');\nconst braces = require('braces');\nconst picomatch = require('picomatch');\nconst utils = require('picomatch/lib/utils');\nconst isEmptyString = val => val === '' || val === './';\n\n/**\n * Returns an array of strings that match one or more glob patterns.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm(list, patterns[, options]);\n *\n * console.log(mm(['a.js', 'a.txt'], ['*.js']));\n * //=> [ 'a.js' ]\n * ```\n * @param {String|Array<string>} `list` List of strings to match.\n * @param {String|Array<string>} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options)\n * @return {Array} Returns an array of matches\n * @summary false\n * @api public\n */\n\nconst micromatch = (list, patterns, options) => {\n  patterns = [].concat(patterns);\n  list = [].concat(list);\n\n  let omit = new Set();\n  let keep = new Set();\n  let items = new Set();\n  let negatives = 0;\n\n  let onResult = state => {\n    items.add(state.output);\n    if (options && options.onResult) {\n      options.onResult(state);\n    }\n  };\n\n  for (let i = 0; i < patterns.length; i++) {\n    let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);\n    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;\n    if (negated) negatives++;\n\n    for (let item of list) {\n      let matched = isMatch(item, true);\n\n      let match = negated ? !matched.isMatch : matched.isMatch;\n      if (!match) continue;\n\n      if (negated) {\n        omit.add(matched.output);\n      } else {\n        omit.delete(matched.output);\n        keep.add(matched.output);\n      }\n    }\n  }\n\n  let result = negatives === patterns.length ? [...items] : [...keep];\n  let matches = result.filter(item => !omit.has(item));\n\n  if (options && matches.length === 0) {\n    if (options.failglob === true) {\n      throw new Error(`No matches found for \"${patterns.join(', ')}\"`);\n    }\n\n    if (options.nonull === true || options.nullglob === true) {\n      return options.unescape ? patterns.map(p => p.replace(/\\\\/g, '')) : patterns;\n    }\n  }\n\n  return matches;\n};\n\n/**\n * Backwards compatibility\n */\n\nmicromatch.match = micromatch;\n\n/**\n * Returns a matcher function from the given glob `pattern` and `options`.\n * The returned function takes a string to match as its only argument and returns\n * true if the string is a match.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.matcher(pattern[, options]);\n *\n * const isMatch = mm.matcher('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @param {String} `pattern` Glob pattern\n * @param {Object} `options`\n * @return {Function} Returns a matcher function.\n * @api public\n */\n\nmicromatch.matcher = (pattern, options) => picomatch(pattern, options);\n\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.isMatch(string, patterns[, options]);\n *\n * console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(mm.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `[options]` See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\nmicromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n\n/**\n * Backwards compatibility\n */\n\nmicromatch.any = micromatch.isMatch;\n\n/**\n * Returns a list of strings that _**do not match any**_ of the given `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.not(list, patterns[, options]);\n *\n * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));\n * //=> ['b.b', 'c.c']\n * ```\n * @param {Array} `list` Array of strings to match.\n * @param {String|Array} `patterns` One or more glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array} Returns an array of strings that **do not match** the given patterns.\n * @api public\n */\n\nmicromatch.not = (list, patterns, options = {}) => {\n  patterns = [].concat(patterns).map(String);\n  let result = new Set();\n  let items = [];\n\n  let onResult = state => {\n    if (options.onResult) options.onResult(state);\n    items.push(state.output);\n  };\n\n  let matches = micromatch(list, patterns, { ...options, onResult });\n\n  for (let item of items) {\n    if (!matches.includes(item)) {\n      result.add(item);\n    }\n  }\n  return [...result];\n};\n\n/**\n * Returns true if the given `string` contains the given pattern. Similar\n * to [.isMatch](#isMatch) but the pattern can match any part of the string.\n *\n * ```js\n * var mm = require('micromatch');\n * // mm.contains(string, pattern[, options]);\n *\n * console.log(mm.contains('aa/bb/cc', '*b'));\n * //=> true\n * console.log(mm.contains('aa/bb/cc', '*d'));\n * //=> false\n * ```\n * @param {String} `str` The string to match.\n * @param {String|Array} `patterns` Glob pattern to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any of the patterns matches any part of `str`.\n * @api public\n */\n\nmicromatch.contains = (str, pattern, options) => {\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected a string: \"${util.inspect(str)}\"`);\n  }\n\n  if (Array.isArray(pattern)) {\n    return pattern.some(p => micromatch.contains(str, p, options));\n  }\n\n  if (typeof pattern === 'string') {\n    if (isEmptyString(str) || isEmptyString(pattern)) {\n      return false;\n    }\n\n    if (str.includes(pattern) || (str.startsWith('./') && str.slice(2).includes(pattern))) {\n      return true;\n    }\n  }\n\n  return micromatch.isMatch(str, pattern, { ...options, contains: true });\n};\n\n/**\n * Filter the keys of the given object with the given `glob` pattern\n * and `options`. Does not attempt to match nested keys. If you need this feature,\n * use [glob-object][] instead.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.matchKeys(object, patterns[, options]);\n *\n * const obj = { aa: 'a', ab: 'b', ac: 'c' };\n * console.log(mm.matchKeys(obj, '*b'));\n * //=> { ab: 'b' }\n * ```\n * @param {Object} `object` The object with keys to filter.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Object} Returns an object with only keys that match the given patterns.\n * @api public\n */\n\nmicromatch.matchKeys = (obj, patterns, options) => {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('Expected the first argument to be an object');\n  }\n  let keys = micromatch(Object.keys(obj), patterns, options);\n  let res = {};\n  for (let key of keys) res[key] = obj[key];\n  return res;\n};\n\n/**\n * Returns true if some of the strings in the given `list` match any of the given glob `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.some(list, patterns[, options]);\n *\n * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // true\n * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any `patterns` matches any of the strings in `list`\n * @api public\n */\n\nmicromatch.some = (list, patterns, options) => {\n  let items = [].concat(list);\n\n  for (let pattern of [].concat(patterns)) {\n    let isMatch = picomatch(String(pattern), options);\n    if (items.some(item => isMatch(item))) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if every string in the given `list` matches\n * any of the given glob `patterns`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.every(list, patterns[, options]);\n *\n * console.log(mm.every('foo.js', ['foo.js']));\n * // true\n * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));\n * // true\n * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));\n * // false\n * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));\n * // false\n * ```\n * @param {String|Array} `list` The string or array of strings to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if all `patterns` matches all of the strings in `list`\n * @api public\n */\n\nmicromatch.every = (list, patterns, options) => {\n  let items = [].concat(list);\n\n  for (let pattern of [].concat(patterns)) {\n    let isMatch = picomatch(String(pattern), options);\n    if (!items.every(item => isMatch(item))) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if **all** of the given `patterns` match\n * the specified string.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.all(string, patterns[, options]);\n *\n * console.log(mm.all('foo.js', ['foo.js']));\n * // true\n *\n * console.log(mm.all('foo.js', ['*.js', '!foo.js']));\n * // false\n *\n * console.log(mm.all('foo.js', ['*.js', 'foo.js']));\n * // true\n *\n * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));\n * // true\n * ```\n * @param {String|Array} `str` The string to test.\n * @param {String|Array} `patterns` One or more glob patterns to use for matching.\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\nmicromatch.all = (str, patterns, options) => {\n  if (typeof str !== 'string') {\n    throw new TypeError(`Expected a string: \"${util.inspect(str)}\"`);\n  }\n\n  return [].concat(patterns).every(p => picomatch(p, options)(str));\n};\n\n/**\n * Returns an array of matches captured by `pattern` in `string, or `null` if the pattern did not match.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.capture(pattern, string[, options]);\n *\n * console.log(mm.capture('test/*.js', 'test/foo.js'));\n * //=> ['foo']\n * console.log(mm.capture('test/*.js', 'foo/bar.css'));\n * //=> null\n * ```\n * @param {String} `glob` Glob pattern to use for matching.\n * @param {String} `input` String to match\n * @param {Object} `options` See available [options](#options) for changing how matches are performed\n * @return {Array|null} Returns an array of captures if the input matches the glob pattern, otherwise `null`.\n * @api public\n */\n\nmicromatch.capture = (glob, input, options) => {\n  let posix = utils.isWindows(options);\n  let regex = picomatch.makeRe(String(glob), { ...options, capture: true });\n  let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);\n\n  if (match) {\n    return match.slice(1).map(v => v === void 0 ? '' : v);\n  }\n};\n\n/**\n * Create a regular expression from the given glob `pattern`.\n *\n * ```js\n * const mm = require('micromatch');\n * // mm.makeRe(pattern[, options]);\n *\n * console.log(mm.makeRe('*.js'));\n * //=> /^(?:(\\.[\\\\\\/])?(?!\\.)(?=.)[^\\/]*?\\.js)$/\n * ```\n * @param {String} `pattern` A glob pattern to convert to regex.\n * @param {Object} `options`\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\nmicromatch.makeRe = (...args) => picomatch.makeRe(...args);\n\n/**\n * Scan a glob pattern to separate the pattern into segments. Used\n * by the [split](#split) method.\n *\n * ```js\n * const mm = require('micromatch');\n * const state = mm.scan(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\nmicromatch.scan = (...args) => picomatch.scan(...args);\n\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const mm = require('micromatch');\n * const state = mm(pattern[, options]);\n * ```\n * @param {String} `glob`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as regex source string.\n * @api public\n */\n\nmicromatch.parse = (patterns, options) => {\n  let res = [];\n  for (let pattern of [].concat(patterns || [])) {\n    for (let str of braces(String(pattern), options)) {\n      res.push(picomatch.parse(str, options));\n    }\n  }\n  return res;\n};\n\n/**\n * Process the given brace `pattern`.\n *\n * ```js\n * const { braces } = require('micromatch');\n * console.log(braces('foo/{a,b,c}/bar'));\n * //=> [ 'foo/(a|b|c)/bar' ]\n *\n * console.log(braces('foo/{a,b,c}/bar', { expand: true }));\n * //=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]\n * ```\n * @param {String} `pattern` String with brace pattern to process.\n * @param {Object} `options` Any [options](#options) to change how expansion is performed. See the [braces][] library for all available options.\n * @return {Array}\n * @api public\n */\n\nmicromatch.braces = (pattern, options) => {\n  if (typeof pattern !== 'string') throw new TypeError('Expected a string');\n  if ((options && options.nobrace === true) || !/\\{.*\\}/.test(pattern)) {\n    return [pattern];\n  }\n  return braces(pattern, options);\n};\n\n/**\n * Expand braces\n */\n\nmicromatch.braceExpand = (pattern, options) => {\n  if (typeof pattern !== 'string') throw new TypeError('Expected a string');\n  return micromatch.braces(pattern, { ...options, expand: true });\n};\n\n/**\n * Expose micromatch\n */\n\nmodule.exports = micromatch;\n","/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = require('./db.json')\n","/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n","'use strict';\nconst {promisify} = require('util');\nconst fs = require('fs');\n\nasync function isType(fsStatType, statsMethodName, filePath) {\n\tif (typeof filePath !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got ${typeof filePath}`);\n\t}\n\n\ttry {\n\t\tconst stats = await promisify(fs[fsStatType])(filePath);\n\t\treturn stats[statsMethodName]();\n\t} catch (error) {\n\t\tif (error.code === 'ENOENT') {\n\t\t\treturn false;\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\nfunction isTypeSync(fsStatType, statsMethodName, filePath) {\n\tif (typeof filePath !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got ${typeof filePath}`);\n\t}\n\n\ttry {\n\t\treturn fs[fsStatType](filePath)[statsMethodName]();\n\t} catch (error) {\n\t\tif (error.code === 'ENOENT') {\n\t\t\treturn false;\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\nexports.isFile = isType.bind(null, 'stat', 'isFile');\nexports.isDirectory = isType.bind(null, 'stat', 'isDirectory');\nexports.isSymlink = isType.bind(null, 'lstat', 'isSymbolicLink');\nexports.isFileSync = isTypeSync.bind(null, 'statSync', 'isFile');\nexports.isDirectorySync = isTypeSync.bind(null, 'statSync', 'isDirectory');\nexports.isSymlinkSync = isTypeSync.bind(null, 'lstatSync', 'isSymbolicLink');\n","'use strict';\n\nmodule.exports = require('./lib/picomatch');\n","'use strict';\n\nconst path = require('path');\nconst WIN_SLASH = '\\\\\\\\/';\nconst WIN_NO_SLASH = `[^${WIN_SLASH}]`;\n\n/**\n * Posix glob regex\n */\n\nconst DOT_LITERAL = '\\\\.';\nconst PLUS_LITERAL = '\\\\+';\nconst QMARK_LITERAL = '\\\\?';\nconst SLASH_LITERAL = '\\\\/';\nconst ONE_CHAR = '(?=.)';\nconst QMARK = '[^/]';\nconst END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;\nconst START_ANCHOR = `(?:^|${SLASH_LITERAL})`;\nconst DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;\nconst NO_DOT = `(?!${DOT_LITERAL})`;\nconst NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;\nconst NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;\nconst NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;\nconst QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;\nconst STAR = `${QMARK}*?`;\n\nconst POSIX_CHARS = {\n  DOT_LITERAL,\n  PLUS_LITERAL,\n  QMARK_LITERAL,\n  SLASH_LITERAL,\n  ONE_CHAR,\n  QMARK,\n  END_ANCHOR,\n  DOTS_SLASH,\n  NO_DOT,\n  NO_DOTS,\n  NO_DOT_SLASH,\n  NO_DOTS_SLASH,\n  QMARK_NO_DOT,\n  STAR,\n  START_ANCHOR\n};\n\n/**\n * Windows glob regex\n */\n\nconst WINDOWS_CHARS = {\n  ...POSIX_CHARS,\n\n  SLASH_LITERAL: `[${WIN_SLASH}]`,\n  QMARK: WIN_NO_SLASH,\n  STAR: `${WIN_NO_SLASH}*?`,\n  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,\n  NO_DOT: `(?!${DOT_LITERAL})`,\n  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\n  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,\n  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\n  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,\n  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,\n  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`\n};\n\n/**\n * POSIX Bracket Regex\n */\n\nconst POSIX_REGEX_SOURCE = {\n  alnum: 'a-zA-Z0-9',\n  alpha: 'a-zA-Z',\n  ascii: '\\\\x00-\\\\x7F',\n  blank: ' \\\\t',\n  cntrl: '\\\\x00-\\\\x1F\\\\x7F',\n  digit: '0-9',\n  graph: '\\\\x21-\\\\x7E',\n  lower: 'a-z',\n  print: '\\\\x20-\\\\x7E ',\n  punct: '\\\\-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~',\n  space: ' \\\\t\\\\r\\\\n\\\\v\\\\f',\n  upper: 'A-Z',\n  word: 'A-Za-z0-9_',\n  xdigit: 'A-Fa-f0-9'\n};\n\nmodule.exports = {\n  MAX_LENGTH: 1024 * 64,\n  POSIX_REGEX_SOURCE,\n\n  // regular expressions\n  REGEX_BACKSLASH: /\\\\(?![*+?^${}(|)[\\]])/g,\n  REGEX_NON_SPECIAL_CHARS: /^[^@![\\].,$*+?^{}()|\\\\/]+/,\n  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\\]]/,\n  REGEX_SPECIAL_CHARS_BACKREF: /(\\\\?)((\\W)(\\3*))/g,\n  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\\]])/g,\n  REGEX_REMOVE_BACKSLASH: /(?:\\[.*?[^\\\\]\\]|\\\\(?=.))/g,\n\n  // Replace globs with equivalent patterns to reduce parsing time.\n  REPLACEMENTS: {\n    '***': '*',\n    '**/**': '**',\n    '**/**/**': '**'\n  },\n\n  // Digits\n  CHAR_0: 48, /* 0 */\n  CHAR_9: 57, /* 9 */\n\n  // Alphabet chars.\n  CHAR_UPPERCASE_A: 65, /* A */\n  CHAR_LOWERCASE_A: 97, /* a */\n  CHAR_UPPERCASE_Z: 90, /* Z */\n  CHAR_LOWERCASE_Z: 122, /* z */\n\n  CHAR_LEFT_PARENTHESES: 40, /* ( */\n  CHAR_RIGHT_PARENTHESES: 41, /* ) */\n\n  CHAR_ASTERISK: 42, /* * */\n\n  // Non-alphabetic chars.\n  CHAR_AMPERSAND: 38, /* & */\n  CHAR_AT: 64, /* @ */\n  CHAR_BACKWARD_SLASH: 92, /* \\ */\n  CHAR_CARRIAGE_RETURN: 13, /* \\r */\n  CHAR_CIRCUMFLEX_ACCENT: 94, /* ^ */\n  CHAR_COLON: 58, /* : */\n  CHAR_COMMA: 44, /* , */\n  CHAR_DOT: 46, /* . */\n  CHAR_DOUBLE_QUOTE: 34, /* \" */\n  CHAR_EQUAL: 61, /* = */\n  CHAR_EXCLAMATION_MARK: 33, /* ! */\n  CHAR_FORM_FEED: 12, /* \\f */\n  CHAR_FORWARD_SLASH: 47, /* / */\n  CHAR_GRAVE_ACCENT: 96, /* ` */\n  CHAR_HASH: 35, /* # */\n  CHAR_HYPHEN_MINUS: 45, /* - */\n  CHAR_LEFT_ANGLE_BRACKET: 60, /* < */\n  CHAR_LEFT_CURLY_BRACE: 123, /* { */\n  CHAR_LEFT_SQUARE_BRACKET: 91, /* [ */\n  CHAR_LINE_FEED: 10, /* \\n */\n  CHAR_NO_BREAK_SPACE: 160, /* \\u00A0 */\n  CHAR_PERCENT: 37, /* % */\n  CHAR_PLUS: 43, /* + */\n  CHAR_QUESTION_MARK: 63, /* ? */\n  CHAR_RIGHT_ANGLE_BRACKET: 62, /* > */\n  CHAR_RIGHT_CURLY_BRACE: 125, /* } */\n  CHAR_RIGHT_SQUARE_BRACKET: 93, /* ] */\n  CHAR_SEMICOLON: 59, /* ; */\n  CHAR_SINGLE_QUOTE: 39, /* ' */\n  CHAR_SPACE: 32, /*   */\n  CHAR_TAB: 9, /* \\t */\n  CHAR_UNDERSCORE: 95, /* _ */\n  CHAR_VERTICAL_LINE: 124, /* | */\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, /* \\uFEFF */\n\n  SEP: path.sep,\n\n  /**\n   * Create EXTGLOB_CHARS\n   */\n\n  extglobChars(chars) {\n    return {\n      '!': { type: 'negate', open: '(?:(?!(?:', close: `))${chars.STAR})` },\n      '?': { type: 'qmark', open: '(?:', close: ')?' },\n      '+': { type: 'plus', open: '(?:', close: ')+' },\n      '*': { type: 'star', open: '(?:', close: ')*' },\n      '@': { type: 'at', open: '(?:', close: ')' }\n    };\n  },\n\n  /**\n   * Create GLOB_CHARS\n   */\n\n  globChars(win32) {\n    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;\n  }\n};\n","'use strict';\n\nconst constants = require('./constants');\nconst utils = require('./utils');\n\n/**\n * Constants\n */\n\nconst {\n  MAX_LENGTH,\n  POSIX_REGEX_SOURCE,\n  REGEX_NON_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_BACKREF,\n  REPLACEMENTS\n} = constants;\n\n/**\n * Helpers\n */\n\nconst expandRange = (args, options) => {\n  if (typeof options.expandRange === 'function') {\n    return options.expandRange(...args, options);\n  }\n\n  args.sort();\n  const value = `[${args.join('-')}]`;\n\n  try {\n    /* eslint-disable-next-line no-new */\n    new RegExp(value);\n  } catch (ex) {\n    return args.map(v => utils.escapeRegex(v)).join('..');\n  }\n\n  return value;\n};\n\n/**\n * Create the message for a syntax error\n */\n\nconst syntaxError = (type, char) => {\n  return `Missing ${type}: \"${char}\" - use \"\\\\\\\\${char}\" to match literal characters`;\n};\n\n/**\n * Parse the given input string.\n * @param {String} input\n * @param {Object} options\n * @return {Object}\n */\n\nconst parse = (input, options) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  input = REPLACEMENTS[input] || input;\n\n  const opts = { ...options };\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n\n  let len = input.length;\n  if (len > max) {\n    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\n  }\n\n  const bos = { type: 'bos', value: '', output: opts.prepend || '' };\n  const tokens = [bos];\n\n  const capture = opts.capture ? '' : '?:';\n  const win32 = utils.isWindows(options);\n\n  // create constants based on platform, for windows or posix\n  const PLATFORM_CHARS = constants.globChars(win32);\n  const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);\n\n  const {\n    DOT_LITERAL,\n    PLUS_LITERAL,\n    SLASH_LITERAL,\n    ONE_CHAR,\n    DOTS_SLASH,\n    NO_DOT,\n    NO_DOT_SLASH,\n    NO_DOTS_SLASH,\n    QMARK,\n    QMARK_NO_DOT,\n    STAR,\n    START_ANCHOR\n  } = PLATFORM_CHARS;\n\n  const globstar = opts => {\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n  };\n\n  const nodot = opts.dot ? '' : NO_DOT;\n  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;\n  let star = opts.bash === true ? globstar(opts) : STAR;\n\n  if (opts.capture) {\n    star = `(${star})`;\n  }\n\n  // minimatch options support\n  if (typeof opts.noext === 'boolean') {\n    opts.noextglob = opts.noext;\n  }\n\n  const state = {\n    input,\n    index: -1,\n    start: 0,\n    dot: opts.dot === true,\n    consumed: '',\n    output: '',\n    prefix: '',\n    backtrack: false,\n    negated: false,\n    brackets: 0,\n    braces: 0,\n    parens: 0,\n    quotes: 0,\n    globstar: false,\n    tokens\n  };\n\n  input = utils.removePrefix(input, state);\n  len = input.length;\n\n  const extglobs = [];\n  const braces = [];\n  const stack = [];\n  let prev = bos;\n  let value;\n\n  /**\n   * Tokenizing helpers\n   */\n\n  const eos = () => state.index === len - 1;\n  const peek = state.peek = (n = 1) => input[state.index + n];\n  const advance = state.advance = () => input[++state.index] || '';\n  const remaining = () => input.slice(state.index + 1);\n  const consume = (value = '', num = 0) => {\n    state.consumed += value;\n    state.index += num;\n  };\n\n  const append = token => {\n    state.output += token.output != null ? token.output : token.value;\n    consume(token.value);\n  };\n\n  const negate = () => {\n    let count = 1;\n\n    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {\n      advance();\n      state.start++;\n      count++;\n    }\n\n    if (count % 2 === 0) {\n      return false;\n    }\n\n    state.negated = true;\n    state.start++;\n    return true;\n  };\n\n  const increment = type => {\n    state[type]++;\n    stack.push(type);\n  };\n\n  const decrement = type => {\n    state[type]--;\n    stack.pop();\n  };\n\n  /**\n   * Push tokens onto the tokens array. This helper speeds up\n   * tokenizing by 1) helping us avoid backtracking as much as possible,\n   * and 2) helping us avoid creating extra tokens when consecutive\n   * characters are plain text. This improves performance and simplifies\n   * lookbehinds.\n   */\n\n  const push = tok => {\n    if (prev.type === 'globstar') {\n      const isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');\n      const isExtglob = tok.extglob === true || (extglobs.length && (tok.type === 'pipe' || tok.type === 'paren'));\n\n      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {\n        state.output = state.output.slice(0, -prev.output.length);\n        prev.type = 'star';\n        prev.value = '*';\n        prev.output = star;\n        state.output += prev.output;\n      }\n    }\n\n    if (extglobs.length && tok.type !== 'paren') {\n      extglobs[extglobs.length - 1].inner += tok.value;\n    }\n\n    if (tok.value || tok.output) append(tok);\n    if (prev && prev.type === 'text' && tok.type === 'text') {\n      prev.value += tok.value;\n      prev.output = (prev.output || '') + tok.value;\n      return;\n    }\n\n    tok.prev = prev;\n    tokens.push(tok);\n    prev = tok;\n  };\n\n  const extglobOpen = (type, value) => {\n    const token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: '' };\n\n    token.prev = prev;\n    token.parens = state.parens;\n    token.output = state.output;\n    const output = (opts.capture ? '(' : '') + token.open;\n\n    increment('parens');\n    push({ type, value, output: state.output ? '' : ONE_CHAR });\n    push({ type: 'paren', extglob: true, value: advance(), output });\n    extglobs.push(token);\n  };\n\n  const extglobClose = token => {\n    let output = token.close + (opts.capture ? ')' : '');\n    let rest;\n\n    if (token.type === 'negate') {\n      let extglobStar = star;\n\n      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {\n        extglobStar = globstar(opts);\n      }\n\n      if (extglobStar !== star || eos() || /^\\)+$/.test(remaining())) {\n        output = token.close = `)$))${extglobStar}`;\n      }\n\n      if (token.inner.includes('*') && (rest = remaining()) && /^\\.[^\\\\/.]+$/.test(rest)) {\n        output = token.close = `)${rest})${extglobStar})`;\n      }\n\n      if (token.prev.type === 'bos') {\n        state.negatedExtglob = true;\n      }\n    }\n\n    push({ type: 'paren', extglob: true, value, output });\n    decrement('parens');\n  };\n\n  /**\n   * Fast paths\n   */\n\n  if (opts.fastpaths !== false && !/(^[*!]|[/()[\\]{}\"])/.test(input)) {\n    let backslashes = false;\n\n    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {\n      if (first === '\\\\') {\n        backslashes = true;\n        return m;\n      }\n\n      if (first === '?') {\n        if (esc) {\n          return esc + first + (rest ? QMARK.repeat(rest.length) : '');\n        }\n        if (index === 0) {\n          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');\n        }\n        return QMARK.repeat(chars.length);\n      }\n\n      if (first === '.') {\n        return DOT_LITERAL.repeat(chars.length);\n      }\n\n      if (first === '*') {\n        if (esc) {\n          return esc + first + (rest ? star : '');\n        }\n        return star;\n      }\n      return esc ? m : `\\\\${m}`;\n    });\n\n    if (backslashes === true) {\n      if (opts.unescape === true) {\n        output = output.replace(/\\\\/g, '');\n      } else {\n        output = output.replace(/\\\\+/g, m => {\n          return m.length % 2 === 0 ? '\\\\\\\\' : (m ? '\\\\' : '');\n        });\n      }\n    }\n\n    if (output === input && opts.contains === true) {\n      state.output = input;\n      return state;\n    }\n\n    state.output = utils.wrapOutput(output, state, options);\n    return state;\n  }\n\n  /**\n   * Tokenize input until we reach end-of-string\n   */\n\n  while (!eos()) {\n    value = advance();\n\n    if (value === '\\u0000') {\n      continue;\n    }\n\n    /**\n     * Escaped characters\n     */\n\n    if (value === '\\\\') {\n      const next = peek();\n\n      if (next === '/' && opts.bash !== true) {\n        continue;\n      }\n\n      if (next === '.' || next === ';') {\n        continue;\n      }\n\n      if (!next) {\n        value += '\\\\';\n        push({ type: 'text', value });\n        continue;\n      }\n\n      // collapse slashes to reduce potential for exploits\n      const match = /^\\\\+/.exec(remaining());\n      let slashes = 0;\n\n      if (match && match[0].length > 2) {\n        slashes = match[0].length;\n        state.index += slashes;\n        if (slashes % 2 !== 0) {\n          value += '\\\\';\n        }\n      }\n\n      if (opts.unescape === true) {\n        value = advance();\n      } else {\n        value += advance();\n      }\n\n      if (state.brackets === 0) {\n        push({ type: 'text', value });\n        continue;\n      }\n    }\n\n    /**\n     * If we're inside a regex character class, continue\n     * until we reach the closing bracket.\n     */\n\n    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {\n      if (opts.posix !== false && value === ':') {\n        const inner = prev.value.slice(1);\n        if (inner.includes('[')) {\n          prev.posix = true;\n\n          if (inner.includes(':')) {\n            const idx = prev.value.lastIndexOf('[');\n            const pre = prev.value.slice(0, idx);\n            const rest = prev.value.slice(idx + 2);\n            const posix = POSIX_REGEX_SOURCE[rest];\n            if (posix) {\n              prev.value = pre + posix;\n              state.backtrack = true;\n              advance();\n\n              if (!bos.output && tokens.indexOf(prev) === 1) {\n                bos.output = ONE_CHAR;\n              }\n              continue;\n            }\n          }\n        }\n      }\n\n      if ((value === '[' && peek() !== ':') || (value === '-' && peek() === ']')) {\n        value = `\\\\${value}`;\n      }\n\n      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {\n        value = `\\\\${value}`;\n      }\n\n      if (opts.posix === true && value === '!' && prev.value === '[') {\n        value = '^';\n      }\n\n      prev.value += value;\n      append({ value });\n      continue;\n    }\n\n    /**\n     * If we're inside a quoted string, continue\n     * until we reach the closing double quote.\n     */\n\n    if (state.quotes === 1 && value !== '\"') {\n      value = utils.escapeRegex(value);\n      prev.value += value;\n      append({ value });\n      continue;\n    }\n\n    /**\n     * Double quotes\n     */\n\n    if (value === '\"') {\n      state.quotes = state.quotes === 1 ? 0 : 1;\n      if (opts.keepQuotes === true) {\n        push({ type: 'text', value });\n      }\n      continue;\n    }\n\n    /**\n     * Parentheses\n     */\n\n    if (value === '(') {\n      increment('parens');\n      push({ type: 'paren', value });\n      continue;\n    }\n\n    if (value === ')') {\n      if (state.parens === 0 && opts.strictBrackets === true) {\n        throw new SyntaxError(syntaxError('opening', '('));\n      }\n\n      const extglob = extglobs[extglobs.length - 1];\n      if (extglob && state.parens === extglob.parens + 1) {\n        extglobClose(extglobs.pop());\n        continue;\n      }\n\n      push({ type: 'paren', value, output: state.parens ? ')' : '\\\\)' });\n      decrement('parens');\n      continue;\n    }\n\n    /**\n     * Square brackets\n     */\n\n    if (value === '[') {\n      if (opts.nobracket === true || !remaining().includes(']')) {\n        if (opts.nobracket !== true && opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('closing', ']'));\n        }\n\n        value = `\\\\${value}`;\n      } else {\n        increment('brackets');\n      }\n\n      push({ type: 'bracket', value });\n      continue;\n    }\n\n    if (value === ']') {\n      if (opts.nobracket === true || (prev && prev.type === 'bracket' && prev.value.length === 1)) {\n        push({ type: 'text', value, output: `\\\\${value}` });\n        continue;\n      }\n\n      if (state.brackets === 0) {\n        if (opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('opening', '['));\n        }\n\n        push({ type: 'text', value, output: `\\\\${value}` });\n        continue;\n      }\n\n      decrement('brackets');\n\n      const prevValue = prev.value.slice(1);\n      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {\n        value = `/${value}`;\n      }\n\n      prev.value += value;\n      append({ value });\n\n      // when literal brackets are explicitly disabled\n      // assume we should match with a regex character class\n      if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {\n        continue;\n      }\n\n      const escaped = utils.escapeRegex(prev.value);\n      state.output = state.output.slice(0, -prev.value.length);\n\n      // when literal brackets are explicitly enabled\n      // assume we should escape the brackets to match literal characters\n      if (opts.literalBrackets === true) {\n        state.output += escaped;\n        prev.value = escaped;\n        continue;\n      }\n\n      // when the user specifies nothing, try to match both\n      prev.value = `(${capture}${escaped}|${prev.value})`;\n      state.output += prev.value;\n      continue;\n    }\n\n    /**\n     * Braces\n     */\n\n    if (value === '{' && opts.nobrace !== true) {\n      increment('braces');\n\n      const open = {\n        type: 'brace',\n        value,\n        output: '(',\n        outputIndex: state.output.length,\n        tokensIndex: state.tokens.length\n      };\n\n      braces.push(open);\n      push(open);\n      continue;\n    }\n\n    if (value === '}') {\n      const brace = braces[braces.length - 1];\n\n      if (opts.nobrace === true || !brace) {\n        push({ type: 'text', value, output: value });\n        continue;\n      }\n\n      let output = ')';\n\n      if (brace.dots === true) {\n        const arr = tokens.slice();\n        const range = [];\n\n        for (let i = arr.length - 1; i >= 0; i--) {\n          tokens.pop();\n          if (arr[i].type === 'brace') {\n            break;\n          }\n          if (arr[i].type !== 'dots') {\n            range.unshift(arr[i].value);\n          }\n        }\n\n        output = expandRange(range, opts);\n        state.backtrack = true;\n      }\n\n      if (brace.comma !== true && brace.dots !== true) {\n        const out = state.output.slice(0, brace.outputIndex);\n        const toks = state.tokens.slice(brace.tokensIndex);\n        brace.value = brace.output = '\\\\{';\n        value = output = '\\\\}';\n        state.output = out;\n        for (const t of toks) {\n          state.output += (t.output || t.value);\n        }\n      }\n\n      push({ type: 'brace', value, output });\n      decrement('braces');\n      braces.pop();\n      continue;\n    }\n\n    /**\n     * Pipes\n     */\n\n    if (value === '|') {\n      if (extglobs.length > 0) {\n        extglobs[extglobs.length - 1].conditions++;\n      }\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Commas\n     */\n\n    if (value === ',') {\n      let output = value;\n\n      const brace = braces[braces.length - 1];\n      if (brace && stack[stack.length - 1] === 'braces') {\n        brace.comma = true;\n        output = '|';\n      }\n\n      push({ type: 'comma', value, output });\n      continue;\n    }\n\n    /**\n     * Slashes\n     */\n\n    if (value === '/') {\n      // if the beginning of the glob is \"./\", advance the start\n      // to the current index, and don't add the \"./\" characters\n      // to the state. This greatly simplifies lookbehinds when\n      // checking for BOS characters like \"!\" and \".\" (not \"./\")\n      if (prev.type === 'dot' && state.index === state.start + 1) {\n        state.start = state.index + 1;\n        state.consumed = '';\n        state.output = '';\n        tokens.pop();\n        prev = bos; // reset \"prev\" to the first token\n        continue;\n      }\n\n      push({ type: 'slash', value, output: SLASH_LITERAL });\n      continue;\n    }\n\n    /**\n     * Dots\n     */\n\n    if (value === '.') {\n      if (state.braces > 0 && prev.type === 'dot') {\n        if (prev.value === '.') prev.output = DOT_LITERAL;\n        const brace = braces[braces.length - 1];\n        prev.type = 'dots';\n        prev.output += value;\n        prev.value += value;\n        brace.dots = true;\n        continue;\n      }\n\n      if ((state.braces + state.parens) === 0 && prev.type !== 'bos' && prev.type !== 'slash') {\n        push({ type: 'text', value, output: DOT_LITERAL });\n        continue;\n      }\n\n      push({ type: 'dot', value, output: DOT_LITERAL });\n      continue;\n    }\n\n    /**\n     * Question marks\n     */\n\n    if (value === '?') {\n      const isGroup = prev && prev.value === '(';\n      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('qmark', value);\n        continue;\n      }\n\n      if (prev && prev.type === 'paren') {\n        const next = peek();\n        let output = value;\n\n        if (next === '<' && !utils.supportsLookbehinds()) {\n          throw new Error('Node.js v10 or higher is required for regex lookbehinds');\n        }\n\n        if ((prev.value === '(' && !/[!=<:]/.test(next)) || (next === '<' && !/<([!=]|\\w+>)/.test(remaining()))) {\n          output = `\\\\${value}`;\n        }\n\n        push({ type: 'text', value, output });\n        continue;\n      }\n\n      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {\n        push({ type: 'qmark', value, output: QMARK_NO_DOT });\n        continue;\n      }\n\n      push({ type: 'qmark', value, output: QMARK });\n      continue;\n    }\n\n    /**\n     * Exclamation\n     */\n\n    if (value === '!') {\n      if (opts.noextglob !== true && peek() === '(') {\n        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {\n          extglobOpen('negate', value);\n          continue;\n        }\n      }\n\n      if (opts.nonegate !== true && state.index === 0) {\n        negate();\n        continue;\n      }\n    }\n\n    /**\n     * Plus\n     */\n\n    if (value === '+') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('plus', value);\n        continue;\n      }\n\n      if ((prev && prev.value === '(') || opts.regex === false) {\n        push({ type: 'plus', value, output: PLUS_LITERAL });\n        continue;\n      }\n\n      if ((prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace')) || state.parens > 0) {\n        push({ type: 'plus', value });\n        continue;\n      }\n\n      push({ type: 'plus', value: PLUS_LITERAL });\n      continue;\n    }\n\n    /**\n     * Plain text\n     */\n\n    if (value === '@') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        push({ type: 'at', extglob: true, value, output: '' });\n        continue;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Plain text\n     */\n\n    if (value !== '*') {\n      if (value === '$' || value === '^') {\n        value = `\\\\${value}`;\n      }\n\n      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());\n      if (match) {\n        value += match[0];\n        state.index += match[0].length;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Stars\n     */\n\n    if (prev && (prev.type === 'globstar' || prev.star === true)) {\n      prev.type = 'star';\n      prev.star = true;\n      prev.value += value;\n      prev.output = star;\n      state.backtrack = true;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    let rest = remaining();\n    if (opts.noextglob !== true && /^\\([^?]/.test(rest)) {\n      extglobOpen('star', value);\n      continue;\n    }\n\n    if (prev.type === 'star') {\n      if (opts.noglobstar === true) {\n        consume(value);\n        continue;\n      }\n\n      const prior = prev.prev;\n      const before = prior.prev;\n      const isStart = prior.type === 'slash' || prior.type === 'bos';\n      const afterStar = before && (before.type === 'star' || before.type === 'globstar');\n\n      if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== '/'))) {\n        push({ type: 'star', value, output: '' });\n        continue;\n      }\n\n      const isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');\n      const isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');\n      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {\n        push({ type: 'star', value, output: '' });\n        continue;\n      }\n\n      // strip consecutive `/**/`\n      while (rest.slice(0, 3) === '/**') {\n        const after = input[state.index + 4];\n        if (after && after !== '/') {\n          break;\n        }\n        rest = rest.slice(3);\n        consume('/**', 3);\n      }\n\n      if (prior.type === 'bos' && eos()) {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = globstar(opts);\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n        prior.output = `(?:${prior.output}`;\n\n        prev.type = 'globstar';\n        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');\n        prev.value += value;\n        state.globstar = true;\n        state.output += prior.output + prev.output;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {\n        const end = rest[1] !== void 0 ? '|$' : '';\n\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n        prior.output = `(?:${prior.output}`;\n\n        prev.type = 'globstar';\n        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;\n        prev.value += value;\n\n        state.output += prior.output + prev.output;\n        state.globstar = true;\n\n        consume(value + advance());\n\n        push({ type: 'slash', value: '/', output: '' });\n        continue;\n      }\n\n      if (prior.type === 'bos' && rest[0] === '/') {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value + advance());\n        push({ type: 'slash', value: '/', output: '' });\n        continue;\n      }\n\n      // remove single star from output\n      state.output = state.output.slice(0, -prev.output.length);\n\n      // reset previous token to globstar\n      prev.type = 'globstar';\n      prev.output = globstar(opts);\n      prev.value += value;\n\n      // reset output with globstar\n      state.output += prev.output;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    const token = { type: 'star', value, output: star };\n\n    if (opts.bash === true) {\n      token.output = '.*?';\n      if (prev.type === 'bos' || prev.type === 'slash') {\n        token.output = nodot + token.output;\n      }\n      push(token);\n      continue;\n    }\n\n    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {\n      token.output = value;\n      push(token);\n      continue;\n    }\n\n    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {\n      if (prev.type === 'dot') {\n        state.output += NO_DOT_SLASH;\n        prev.output += NO_DOT_SLASH;\n\n      } else if (opts.dot === true) {\n        state.output += NO_DOTS_SLASH;\n        prev.output += NO_DOTS_SLASH;\n\n      } else {\n        state.output += nodot;\n        prev.output += nodot;\n      }\n\n      if (peek() !== '*') {\n        state.output += ONE_CHAR;\n        prev.output += ONE_CHAR;\n      }\n    }\n\n    push(token);\n  }\n\n  while (state.brackets > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));\n    state.output = utils.escapeLast(state.output, '[');\n    decrement('brackets');\n  }\n\n  while (state.parens > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));\n    state.output = utils.escapeLast(state.output, '(');\n    decrement('parens');\n  }\n\n  while (state.braces > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));\n    state.output = utils.escapeLast(state.output, '{');\n    decrement('braces');\n  }\n\n  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {\n    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });\n  }\n\n  // rebuild the output if we had to backtrack at any point\n  if (state.backtrack === true) {\n    state.output = '';\n\n    for (const token of state.tokens) {\n      state.output += token.output != null ? token.output : token.value;\n\n      if (token.suffix) {\n        state.output += token.suffix;\n      }\n    }\n  }\n\n  return state;\n};\n\n/**\n * Fast paths for creating regular expressions for common glob patterns.\n * This can significantly speed up processing and has very little downside\n * impact when none of the fast paths match.\n */\n\nparse.fastpaths = (input, options) => {\n  const opts = { ...options };\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  const len = input.length;\n  if (len > max) {\n    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\n  }\n\n  input = REPLACEMENTS[input] || input;\n  const win32 = utils.isWindows(options);\n\n  // create constants based on platform, for windows or posix\n  const {\n    DOT_LITERAL,\n    SLASH_LITERAL,\n    ONE_CHAR,\n    DOTS_SLASH,\n    NO_DOT,\n    NO_DOTS,\n    NO_DOTS_SLASH,\n    STAR,\n    START_ANCHOR\n  } = constants.globChars(win32);\n\n  const nodot = opts.dot ? NO_DOTS : NO_DOT;\n  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;\n  const capture = opts.capture ? '' : '?:';\n  const state = { negated: false, prefix: '' };\n  let star = opts.bash === true ? '.*?' : STAR;\n\n  if (opts.capture) {\n    star = `(${star})`;\n  }\n\n  const globstar = opts => {\n    if (opts.noglobstar === true) return star;\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n  };\n\n  const create = str => {\n    switch (str) {\n      case '*':\n        return `${nodot}${ONE_CHAR}${star}`;\n\n      case '.*':\n        return `${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '*.*':\n        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '*/*':\n        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;\n\n      case '**':\n        return nodot + globstar(opts);\n\n      case '**/*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;\n\n      case '**/*.*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '**/.*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      default: {\n        const match = /^(.*?)\\.(\\w+)$/.exec(str);\n        if (!match) return;\n\n        const source = create(match[1]);\n        if (!source) return;\n\n        return source + DOT_LITERAL + match[2];\n      }\n    }\n  };\n\n  const output = utils.removePrefix(input, state);\n  let source = create(output);\n\n  if (source && opts.strictSlashes !== true) {\n    source += `${SLASH_LITERAL}?`;\n  }\n\n  return source;\n};\n\nmodule.exports = parse;\n","'use strict';\n\nconst path = require('path');\nconst scan = require('./scan');\nconst parse = require('./parse');\nconst utils = require('./utils');\nconst constants = require('./constants');\nconst isObject = val => val && typeof val === 'object' && !Array.isArray(val);\n\n/**\n * Creates a matcher function from one or more glob patterns. The\n * returned function takes a string to match as its first argument,\n * and returns true if the string is a match. The returned matcher\n * function also takes a boolean as the second argument that, when true,\n * returns an object with additional information.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch(glob[, options]);\n *\n * const isMatch = picomatch('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @name picomatch\n * @param {String|Array} `globs` One or more glob patterns.\n * @param {Object=} `options`\n * @return {Function=} Returns a matcher function.\n * @api public\n */\n\nconst picomatch = (glob, options, returnState = false) => {\n  if (Array.isArray(glob)) {\n    const fns = glob.map(input => picomatch(input, options, returnState));\n    const arrayMatcher = str => {\n      for (const isMatch of fns) {\n        const state = isMatch(str);\n        if (state) return state;\n      }\n      return false;\n    };\n    return arrayMatcher;\n  }\n\n  const isState = isObject(glob) && glob.tokens && glob.input;\n\n  if (glob === '' || (typeof glob !== 'string' && !isState)) {\n    throw new TypeError('Expected pattern to be a non-empty string');\n  }\n\n  const opts = options || {};\n  const posix = utils.isWindows(options);\n  const regex = isState\n    ? picomatch.compileRe(glob, options)\n    : picomatch.makeRe(glob, options, false, true);\n\n  const state = regex.state;\n  delete regex.state;\n\n  let isIgnored = () => false;\n  if (opts.ignore) {\n    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };\n    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);\n  }\n\n  const matcher = (input, returnObject = false) => {\n    const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });\n    const result = { glob, state, regex, posix, input, output, match, isMatch };\n\n    if (typeof opts.onResult === 'function') {\n      opts.onResult(result);\n    }\n\n    if (isMatch === false) {\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (isIgnored(input)) {\n      if (typeof opts.onIgnore === 'function') {\n        opts.onIgnore(result);\n      }\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (typeof opts.onMatch === 'function') {\n      opts.onMatch(result);\n    }\n    return returnObject ? result : true;\n  };\n\n  if (returnState) {\n    matcher.state = state;\n  }\n\n  return matcher;\n};\n\n/**\n * Test `input` with the given `regex`. This is used by the main\n * `picomatch()` function to test the input string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.test(input, regex[, options]);\n *\n * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/));\n * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp} `regex`\n * @return {Object} Returns an object with matching info.\n * @api public\n */\n\npicomatch.test = (input, regex, options, { glob, posix } = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected input to be a string');\n  }\n\n  if (input === '') {\n    return { isMatch: false, output: '' };\n  }\n\n  const opts = options || {};\n  const format = opts.format || (posix ? utils.toPosixSlashes : null);\n  let match = input === glob;\n  let output = (match && format) ? format(input) : input;\n\n  if (match === false) {\n    output = format ? format(input) : input;\n    match = output === glob;\n  }\n\n  if (match === false || opts.capture === true) {\n    if (opts.matchBase === true || opts.basename === true) {\n      match = picomatch.matchBase(input, regex, options, posix);\n    } else {\n      match = regex.exec(output);\n    }\n  }\n\n  return { isMatch: Boolean(match), match, output };\n};\n\n/**\n * Match the basename of a filepath.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.matchBase(input, glob[, options]);\n * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).\n * @return {Boolean}\n * @api public\n */\n\npicomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {\n  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);\n  return regex.test(path.basename(input));\n};\n\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.isMatch(string, patterns[, options]);\n *\n * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String|Array} str The string to test.\n * @param {String|Array} patterns One or more glob patterns to use for matching.\n * @param {Object} [options] See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\npicomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const result = picomatch.parse(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as a regex source string.\n * @api public\n */\n\npicomatch.parse = (pattern, options) => {\n  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));\n  return parse(pattern, { ...options, fastpaths: false });\n};\n\n/**\n * Scan a glob pattern to separate the pattern into segments.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.scan(input[, options]);\n *\n * const result = picomatch.scan('!./foo/*.js');\n * console.log(result);\n * { prefix: '!./',\n *   input: '!./foo/*.js',\n *   start: 3,\n *   base: 'foo',\n *   glob: '*.js',\n *   isBrace: false,\n *   isBracket: false,\n *   isGlob: true,\n *   isExtglob: false,\n *   isGlobstar: false,\n *   negated: true }\n * ```\n * @param {String} `input` Glob pattern to scan.\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\npicomatch.scan = (input, options) => scan(input, options);\n\n/**\n * Compile a regular expression from the `state` object returned by the\n * [parse()](#parse) method.\n *\n * @param {Object} `state`\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.\n * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.\n * @return {RegExp}\n * @api public\n */\n\npicomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {\n  if (returnOutput === true) {\n    return state.output;\n  }\n\n  const opts = options || {};\n  const prepend = opts.contains ? '' : '^';\n  const append = opts.contains ? '' : '$';\n\n  let source = `${prepend}(?:${state.output})${append}`;\n  if (state && state.negated === true) {\n    source = `^(?!${source}).*$`;\n  }\n\n  const regex = picomatch.toRegex(source, options);\n  if (returnState === true) {\n    regex.state = state;\n  }\n\n  return regex;\n};\n\n/**\n * Create a regular expression from a parsed glob pattern.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const state = picomatch.parse('*.js');\n * // picomatch.compileRe(state[, options]);\n *\n * console.log(picomatch.compileRe(state));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `state` The object returned from the `.parse` method.\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.\n * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\npicomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {\n  if (!input || typeof input !== 'string') {\n    throw new TypeError('Expected a non-empty string');\n  }\n\n  let parsed = { negated: false, fastpaths: true };\n\n  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {\n    parsed.output = parse.fastpaths(input, options);\n  }\n\n  if (!parsed.output) {\n    parsed = parse(input, options);\n  }\n\n  return picomatch.compileRe(parsed, options, returnOutput, returnState);\n};\n\n/**\n * Create a regular expression from the given regex source string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.toRegex(source[, options]);\n *\n * const { output } = picomatch.parse('*.js');\n * console.log(picomatch.toRegex(output));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `source` Regular expression source string.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\npicomatch.toRegex = (source, options) => {\n  try {\n    const opts = options || {};\n    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));\n  } catch (err) {\n    if (options && options.debug === true) throw err;\n    return /$^/;\n  }\n};\n\n/**\n * Picomatch constants.\n * @return {Object}\n */\n\npicomatch.constants = constants;\n\n/**\n * Expose \"picomatch\"\n */\n\nmodule.exports = picomatch;\n","'use strict';\n\nconst utils = require('./utils');\nconst {\n  CHAR_ASTERISK,             /* * */\n  CHAR_AT,                   /* @ */\n  CHAR_BACKWARD_SLASH,       /* \\ */\n  CHAR_COMMA,                /* , */\n  CHAR_DOT,                  /* . */\n  CHAR_EXCLAMATION_MARK,     /* ! */\n  CHAR_FORWARD_SLASH,        /* / */\n  CHAR_LEFT_CURLY_BRACE,     /* { */\n  CHAR_LEFT_PARENTHESES,     /* ( */\n  CHAR_LEFT_SQUARE_BRACKET,  /* [ */\n  CHAR_PLUS,                 /* + */\n  CHAR_QUESTION_MARK,        /* ? */\n  CHAR_RIGHT_CURLY_BRACE,    /* } */\n  CHAR_RIGHT_PARENTHESES,    /* ) */\n  CHAR_RIGHT_SQUARE_BRACKET  /* ] */\n} = require('./constants');\n\nconst isPathSeparator = code => {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n};\n\nconst depth = token => {\n  if (token.isPrefix !== true) {\n    token.depth = token.isGlobstar ? Infinity : 1;\n  }\n};\n\n/**\n * Quickly scans a glob pattern and returns an object with a handful of\n * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\n * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not\n * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).\n *\n * ```js\n * const pm = require('picomatch');\n * console.log(pm.scan('foo/bar/*.js'));\n * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object} Returns an object with tokens and regex source string.\n * @api public\n */\n\nconst scan = (input, options) => {\n  const opts = options || {};\n\n  const length = input.length - 1;\n  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\n  const slashes = [];\n  const tokens = [];\n  const parts = [];\n\n  let str = input;\n  let index = -1;\n  let start = 0;\n  let lastIndex = 0;\n  let isBrace = false;\n  let isBracket = false;\n  let isGlob = false;\n  let isExtglob = false;\n  let isGlobstar = false;\n  let braceEscaped = false;\n  let backslashes = false;\n  let negated = false;\n  let negatedExtglob = false;\n  let finished = false;\n  let braces = 0;\n  let prev;\n  let code;\n  let token = { value: '', depth: 0, isGlob: false };\n\n  const eos = () => index >= length;\n  const peek = () => str.charCodeAt(index + 1);\n  const advance = () => {\n    prev = code;\n    return str.charCodeAt(++index);\n  };\n\n  while (index < length) {\n    code = advance();\n    let next;\n\n    if (code === CHAR_BACKWARD_SLASH) {\n      backslashes = token.backslashes = true;\n      code = advance();\n\n      if (code === CHAR_LEFT_CURLY_BRACE) {\n        braceEscaped = true;\n      }\n      continue;\n    }\n\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\n      braces++;\n\n      while (eos() !== true && (code = advance())) {\n        if (code === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (code === CHAR_LEFT_CURLY_BRACE) {\n          braces++;\n          continue;\n        }\n\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (braceEscaped !== true && code === CHAR_COMMA) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\n          braces--;\n\n          if (braces === 0) {\n            braceEscaped = false;\n            isBrace = token.isBrace = true;\n            finished = true;\n            break;\n          }\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_FORWARD_SLASH) {\n      slashes.push(index);\n      tokens.push(token);\n      token = { value: '', depth: 0, isGlob: false };\n\n      if (finished === true) continue;\n      if (prev === CHAR_DOT && index === (start + 1)) {\n        start += 2;\n        continue;\n      }\n\n      lastIndex = index + 1;\n      continue;\n    }\n\n    if (opts.noext !== true) {\n      const isExtglobChar = code === CHAR_PLUS\n        || code === CHAR_AT\n        || code === CHAR_ASTERISK\n        || code === CHAR_QUESTION_MARK\n        || code === CHAR_EXCLAMATION_MARK;\n\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\n        isGlob = token.isGlob = true;\n        isExtglob = token.isExtglob = true;\n        finished = true;\n        if (code === CHAR_EXCLAMATION_MARK && index === start) {\n          negatedExtglob = true;\n        }\n\n        if (scanToEnd === true) {\n          while (eos() !== true && (code = advance())) {\n            if (code === CHAR_BACKWARD_SLASH) {\n              backslashes = token.backslashes = true;\n              code = advance();\n              continue;\n            }\n\n            if (code === CHAR_RIGHT_PARENTHESES) {\n              isGlob = token.isGlob = true;\n              finished = true;\n              break;\n            }\n          }\n          continue;\n        }\n        break;\n      }\n    }\n\n    if (code === CHAR_ASTERISK) {\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_QUESTION_MARK) {\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\n      while (eos() !== true && (next = advance())) {\n        if (next === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          isBracket = token.isBracket = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n          break;\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\n      negated = token.negated = true;\n      start++;\n      continue;\n    }\n\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\n      isGlob = token.isGlob = true;\n\n      if (scanToEnd === true) {\n        while (eos() !== true && (code = advance())) {\n          if (code === CHAR_LEFT_PARENTHESES) {\n            backslashes = token.backslashes = true;\n            code = advance();\n            continue;\n          }\n\n          if (code === CHAR_RIGHT_PARENTHESES) {\n            finished = true;\n            break;\n          }\n        }\n        continue;\n      }\n      break;\n    }\n\n    if (isGlob === true) {\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n  }\n\n  if (opts.noext === true) {\n    isExtglob = false;\n    isGlob = false;\n  }\n\n  let base = str;\n  let prefix = '';\n  let glob = '';\n\n  if (start > 0) {\n    prefix = str.slice(0, start);\n    str = str.slice(start);\n    lastIndex -= start;\n  }\n\n  if (base && isGlob === true && lastIndex > 0) {\n    base = str.slice(0, lastIndex);\n    glob = str.slice(lastIndex);\n  } else if (isGlob === true) {\n    base = '';\n    glob = str;\n  } else {\n    base = str;\n  }\n\n  if (base && base !== '' && base !== '/' && base !== str) {\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\n      base = base.slice(0, -1);\n    }\n  }\n\n  if (opts.unescape === true) {\n    if (glob) glob = utils.removeBackslashes(glob);\n\n    if (base && backslashes === true) {\n      base = utils.removeBackslashes(base);\n    }\n  }\n\n  const state = {\n    prefix,\n    input,\n    start,\n    base,\n    glob,\n    isBrace,\n    isBracket,\n    isGlob,\n    isExtglob,\n    isGlobstar,\n    negated,\n    negatedExtglob\n  };\n\n  if (opts.tokens === true) {\n    state.maxDepth = 0;\n    if (!isPathSeparator(code)) {\n      tokens.push(token);\n    }\n    state.tokens = tokens;\n  }\n\n  if (opts.parts === true || opts.tokens === true) {\n    let prevIndex;\n\n    for (let idx = 0; idx < slashes.length; idx++) {\n      const n = prevIndex ? prevIndex + 1 : start;\n      const i = slashes[idx];\n      const value = input.slice(n, i);\n      if (opts.tokens) {\n        if (idx === 0 && start !== 0) {\n          tokens[idx].isPrefix = true;\n          tokens[idx].value = prefix;\n        } else {\n          tokens[idx].value = value;\n        }\n        depth(tokens[idx]);\n        state.maxDepth += tokens[idx].depth;\n      }\n      if (idx !== 0 || value !== '') {\n        parts.push(value);\n      }\n      prevIndex = i;\n    }\n\n    if (prevIndex && prevIndex + 1 < input.length) {\n      const value = input.slice(prevIndex + 1);\n      parts.push(value);\n\n      if (opts.tokens) {\n        tokens[tokens.length - 1].value = value;\n        depth(tokens[tokens.length - 1]);\n        state.maxDepth += tokens[tokens.length - 1].depth;\n      }\n    }\n\n    state.slashes = slashes;\n    state.parts = parts;\n  }\n\n  return state;\n};\n\nmodule.exports = scan;\n","'use strict';\n\nconst path = require('path');\nconst win32 = process.platform === 'win32';\nconst {\n  REGEX_BACKSLASH,\n  REGEX_REMOVE_BACKSLASH,\n  REGEX_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_GLOBAL\n} = require('./constants');\n\nexports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\nexports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);\nexports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);\nexports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\\\$1');\nexports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');\n\nexports.removeBackslashes = str => {\n  return str.replace(REGEX_REMOVE_BACKSLASH, match => {\n    return match === '\\\\' ? '' : match;\n  });\n};\n\nexports.supportsLookbehinds = () => {\n  const segs = process.version.slice(1).split('.').map(Number);\n  if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {\n    return true;\n  }\n  return false;\n};\n\nexports.isWindows = options => {\n  if (options && typeof options.windows === 'boolean') {\n    return options.windows;\n  }\n  return win32 === true || path.sep === '\\\\';\n};\n\nexports.escapeLast = (input, char, lastIdx) => {\n  const idx = input.lastIndexOf(char, lastIdx);\n  if (idx === -1) return input;\n  if (input[idx - 1] === '\\\\') return exports.escapeLast(input, char, idx - 1);\n  return `${input.slice(0, idx)}\\\\${input.slice(idx)}`;\n};\n\nexports.removePrefix = (input, state = {}) => {\n  let output = input;\n  if (output.startsWith('./')) {\n    output = output.slice(2);\n    state.prefix = './';\n  }\n  return output;\n};\n\nexports.wrapOutput = (input, state = {}, options = {}) => {\n  const prepend = options.contains ? '' : '^';\n  const append = options.contains ? '' : '$';\n\n  let output = `${prepend}(?:${input})${append}`;\n  if (state.negated === true) {\n    output = `(?:^(?!${output}).*$)`;\n  }\n  return output;\n};\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","'use strict'\n\nfunction reusify (Constructor) {\n  var head = new Constructor()\n  var tail = head\n\n  function get () {\n    var current = head\n\n    if (current.next) {\n      head = current.next\n    } else {\n      head = new Constructor()\n      tail = head\n    }\n\n    current.next = null\n\n    return current\n  }\n\n  function release (obj) {\n    tail.next = obj\n    tail = obj\n  }\n\n  return {\n    get: get,\n    release: release\n  }\n}\n\nmodule.exports = reusify\n","/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nmodule.exports = runParallel\n\nconst queueMicrotask = require('queue-microtask')\n\nfunction runParallel (tasks, cb) {\n  let results, pending, keys\n  let isSync = true\n\n  if (Array.isArray(tasks)) {\n    results = []\n    pending = tasks.length\n  } else {\n    keys = Object.keys(tasks)\n    results = {}\n    pending = keys.length\n  }\n\n  function done (err) {\n    function end () {\n      if (cb) cb(err, results)\n      cb = null\n    }\n    if (isSync) queueMicrotask(end)\n    else end()\n  }\n\n  function each (i, err, result) {\n    results[i] = result\n    if (--pending === 0 || err) {\n      done(err)\n    }\n  }\n\n  if (!pending) {\n    // empty\n    done(null)\n  } else if (keys) {\n    // object\n    keys.forEach(function (key) {\n      tasks[key](function (err, result) { each(key, err, result) })\n    })\n  } else {\n    // array\n    tasks.forEach(function (task, i) {\n      task(function (err, result) { each(i, err, result) })\n    })\n  }\n\n  isSync = false\n}\n","/*!\n * to-regex-range <https://github.com/micromatch/to-regex-range>\n *\n * Copyright (c) 2015-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nconst isNumber = require('is-number');\n\nconst toRegexRange = (min, max, options) => {\n  if (isNumber(min) === false) {\n    throw new TypeError('toRegexRange: expected the first argument to be a number');\n  }\n\n  if (max === void 0 || min === max) {\n    return String(min);\n  }\n\n  if (isNumber(max) === false) {\n    throw new TypeError('toRegexRange: expected the second argument to be a number.');\n  }\n\n  let opts = { relaxZeros: true, ...options };\n  if (typeof opts.strictZeros === 'boolean') {\n    opts.relaxZeros = opts.strictZeros === false;\n  }\n\n  let relax = String(opts.relaxZeros);\n  let shorthand = String(opts.shorthand);\n  let capture = String(opts.capture);\n  let wrap = String(opts.wrap);\n  let cacheKey = min + ':' + max + '=' + relax + shorthand + capture + wrap;\n\n  if (toRegexRange.cache.hasOwnProperty(cacheKey)) {\n    return toRegexRange.cache[cacheKey].result;\n  }\n\n  let a = Math.min(min, max);\n  let b = Math.max(min, max);\n\n  if (Math.abs(a - b) === 1) {\n    let result = min + '|' + max;\n    if (opts.capture) {\n      return `(${result})`;\n    }\n    if (opts.wrap === false) {\n      return result;\n    }\n    return `(?:${result})`;\n  }\n\n  let isPadded = hasPadding(min) || hasPadding(max);\n  let state = { min, max, a, b };\n  let positives = [];\n  let negatives = [];\n\n  if (isPadded) {\n    state.isPadded = isPadded;\n    state.maxLen = String(state.max).length;\n  }\n\n  if (a < 0) {\n    let newMin = b < 0 ? Math.abs(b) : 1;\n    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);\n    a = state.a = 0;\n  }\n\n  if (b >= 0) {\n    positives = splitToPatterns(a, b, state, opts);\n  }\n\n  state.negatives = negatives;\n  state.positives = positives;\n  state.result = collatePatterns(negatives, positives, opts);\n\n  if (opts.capture === true) {\n    state.result = `(${state.result})`;\n  } else if (opts.wrap !== false && (positives.length + negatives.length) > 1) {\n    state.result = `(?:${state.result})`;\n  }\n\n  toRegexRange.cache[cacheKey] = state;\n  return state.result;\n};\n\nfunction collatePatterns(neg, pos, options) {\n  let onlyNegative = filterPatterns(neg, pos, '-', false, options) || [];\n  let onlyPositive = filterPatterns(pos, neg, '', false, options) || [];\n  let intersected = filterPatterns(neg, pos, '-?', true, options) || [];\n  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);\n  return subpatterns.join('|');\n}\n\nfunction splitToRanges(min, max) {\n  let nines = 1;\n  let zeros = 1;\n\n  let stop = countNines(min, nines);\n  let stops = new Set([max]);\n\n  while (min <= stop && stop <= max) {\n    stops.add(stop);\n    nines += 1;\n    stop = countNines(min, nines);\n  }\n\n  stop = countZeros(max + 1, zeros) - 1;\n\n  while (min < stop && stop <= max) {\n    stops.add(stop);\n    zeros += 1;\n    stop = countZeros(max + 1, zeros) - 1;\n  }\n\n  stops = [...stops];\n  stops.sort(compare);\n  return stops;\n}\n\n/**\n * Convert a range to a regex pattern\n * @param {Number} `start`\n * @param {Number} `stop`\n * @return {String}\n */\n\nfunction rangeToPattern(start, stop, options) {\n  if (start === stop) {\n    return { pattern: start, count: [], digits: 0 };\n  }\n\n  let zipped = zip(start, stop);\n  let digits = zipped.length;\n  let pattern = '';\n  let count = 0;\n\n  for (let i = 0; i < digits; i++) {\n    let [startDigit, stopDigit] = zipped[i];\n\n    if (startDigit === stopDigit) {\n      pattern += startDigit;\n\n    } else if (startDigit !== '0' || stopDigit !== '9') {\n      pattern += toCharacterClass(startDigit, stopDigit, options);\n\n    } else {\n      count++;\n    }\n  }\n\n  if (count) {\n    pattern += options.shorthand === true ? '\\\\d' : '[0-9]';\n  }\n\n  return { pattern, count: [count], digits };\n}\n\nfunction splitToPatterns(min, max, tok, options) {\n  let ranges = splitToRanges(min, max);\n  let tokens = [];\n  let start = min;\n  let prev;\n\n  for (let i = 0; i < ranges.length; i++) {\n    let max = ranges[i];\n    let obj = rangeToPattern(String(start), String(max), options);\n    let zeros = '';\n\n    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {\n      if (prev.count.length > 1) {\n        prev.count.pop();\n      }\n\n      prev.count.push(obj.count[0]);\n      prev.string = prev.pattern + toQuantifier(prev.count);\n      start = max + 1;\n      continue;\n    }\n\n    if (tok.isPadded) {\n      zeros = padZeros(max, tok, options);\n    }\n\n    obj.string = zeros + obj.pattern + toQuantifier(obj.count);\n    tokens.push(obj);\n    start = max + 1;\n    prev = obj;\n  }\n\n  return tokens;\n}\n\nfunction filterPatterns(arr, comparison, prefix, intersection, options) {\n  let result = [];\n\n  for (let ele of arr) {\n    let { string } = ele;\n\n    // only push if _both_ are negative...\n    if (!intersection && !contains(comparison, 'string', string)) {\n      result.push(prefix + string);\n    }\n\n    // or _both_ are positive\n    if (intersection && contains(comparison, 'string', string)) {\n      result.push(prefix + string);\n    }\n  }\n  return result;\n}\n\n/**\n * Zip strings\n */\n\nfunction zip(a, b) {\n  let arr = [];\n  for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);\n  return arr;\n}\n\nfunction compare(a, b) {\n  return a > b ? 1 : b > a ? -1 : 0;\n}\n\nfunction contains(arr, key, val) {\n  return arr.some(ele => ele[key] === val);\n}\n\nfunction countNines(min, len) {\n  return Number(String(min).slice(0, -len) + '9'.repeat(len));\n}\n\nfunction countZeros(integer, zeros) {\n  return integer - (integer % Math.pow(10, zeros));\n}\n\nfunction toQuantifier(digits) {\n  let [start = 0, stop = ''] = digits;\n  if (stop || start > 1) {\n    return `{${start + (stop ? ',' + stop : '')}}`;\n  }\n  return '';\n}\n\nfunction toCharacterClass(a, b, options) {\n  return `[${a}${(b - a === 1) ? '' : '-'}${b}]`;\n}\n\nfunction hasPadding(str) {\n  return /^-?(0+)\\d/.test(str);\n}\n\nfunction padZeros(value, tok, options) {\n  if (!tok.isPadded) {\n    return value;\n  }\n\n  let diff = Math.abs(tok.maxLen - String(value).length);\n  let relax = options.relaxZeros !== false;\n\n  switch (diff) {\n    case 0:\n      return '';\n    case 1:\n      return relax ? '0?' : '0';\n    case 2:\n      return relax ? '0{0,2}' : '00';\n    default: {\n      return relax ? `0{0,${diff}}` : `0{${diff}}`;\n    }\n  }\n}\n\n/**\n * Cache\n */\n\ntoRegexRange.cache = {};\ntoRegexRange.clearCache = () => (toRegexRange.cache = {});\n\n/**\n * Expose `toRegexRange`\n */\n\nmodule.exports = toRegexRange;\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __spreadArray;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __exportStar = function(m, o) {\r\n        for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n    };\r\n\r\n    __createBinding = Object.create ? (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n    }) : (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    });\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __spreadArray = function (to, from, pack) {\r\n        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n            if (ar || !(i in from)) {\r\n                if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n                ar[i] = from[i];\r\n            }\r\n        }\r\n        return to.concat(ar || Array.prototype.slice.call(from));\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    var __setModuleDefault = Object.create ? (function(o, v) {\r\n        Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n    }) : function(o, v) {\r\n        o[\"default\"] = v;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, state, kind, f) {\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n        return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, state, value, kind, f) {\r\n        if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n        return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__spreadArray\", __spreadArray);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n});\r\n","module.exports = require('./lib/tunnel');\n","'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\nObject.defineProperty(exports, \"NIL\", {\n  enumerable: true,\n  get: function () {\n    return _nil.default;\n  }\n});\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function () {\n    return _version.default;\n  }\n});\nObject.defineProperty(exports, \"validate\", {\n  enumerable: true,\n  get: function () {\n    return _validate.default;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return _stringify.default;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function () {\n    return _parse.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nvar _nil = _interopRequireDefault(require(\"./nil.js\"));\n\nvar _version = _interopRequireDefault(require(\"./version.js\"));\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return _crypto.default.createHash('md5').update(bytes).digest();\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = '00000000-0000-0000-0000-000000000000';\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parse(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nvar _default = parse;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\n\nfunction rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    _crypto.default.randomFillSync(rnds8Pool);\n\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return _crypto.default.createHash('sha1').update(bytes).digest();\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nvar _default = stringify;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _stringify.default)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.URL = exports.DNS = void 0;\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction _default(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0, _parse.default)(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0, _stringify.default)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _stringify.default)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regex = _interopRequireDefault(require(\"./regex.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex.default.test(uuid);\n}\n\nvar _default = validate;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction version(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nvar _default = version;\nexports.default = _default;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 11309;\nmodule.exports = webpackEmptyContext;","module.exports = require(\"assert\");","module.exports = require(\"buffer\");","module.exports = require(\"child_process\");","module.exports = require(\"crypto\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"http2\");","module.exports = require(\"https\");","module.exports = require(\"net\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"process\");","module.exports = require(\"stream\");","module.exports = require(\"tls\");","module.exports = require(\"url\");","module.exports = require(\"util\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"node:fs\");","const arrayUnion = (...arguments_) => [...new Set(arguments_.flat())];\n\nexport default arrayUnion;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"node:util\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"node:path\");","export default function slash(path) {\n\tconst isExtendedLengthPath = /^\\\\\\\\\\?\\\\/.test(path);\n\tconst hasNonAscii = /[^\\u0000-\\u0080]+/.test(path); // eslint-disable-line no-control-regex\n\n\tif (isExtendedLengthPath || hasNonAscii) {\n\t\treturn path;\n\t}\n\n\treturn path.replace(/\\\\/g, '/');\n}\n","import {promisify} from 'node:util';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport fastGlob from 'fast-glob';\nimport gitIgnore from 'ignore';\nimport slash from 'slash';\n\nconst DEFAULT_IGNORE = [\n\t'**/node_modules/**',\n\t'**/flow-typed/**',\n\t'**/coverage/**',\n\t'**/.git',\n];\n\nconst readFileP = promisify(fs.readFile);\n\nconst mapGitIgnorePatternTo = base => ignore => {\n\tif (ignore.startsWith('!')) {\n\t\treturn '!' + path.posix.join(base, ignore.slice(1));\n\t}\n\n\treturn path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, options) => {\n\tconst base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n\n\treturn content\n\t\t.split(/\\r?\\n/)\n\t\t.filter(Boolean)\n\t\t.filter(line => !line.startsWith('#'))\n\t\t.map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n\tconst ignores = gitIgnore();\n\tfor (const file of files) {\n\t\tignores.add(parseGitIgnore(file.content, {\n\t\t\tcwd: file.cwd,\n\t\t\tfileName: file.filePath,\n\t\t}));\n\t}\n\n\treturn ignores;\n};\n\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n\tcwd = slash(cwd);\n\tif (path.isAbsolute(p)) {\n\t\tif (slash(p).startsWith(cwd)) {\n\t\t\treturn p;\n\t\t}\n\n\t\tthrow new Error(`Path ${p} is not in cwd ${cwd}`);\n\t}\n\n\treturn path.join(cwd, p);\n};\n\nconst getIsIgnoredPredicate = (ignores, cwd) => p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, p.path || p))));\n\nconst getFile = async (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = await readFileP(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent,\n\t};\n};\n\nconst getFileSync = (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = fs.readFileSync(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent,\n\t};\n};\n\nconst normalizeOptions = ({\n\tignore = [],\n\tcwd = slash(process.cwd()),\n} = {}) => ({ignore, cwd});\n\nexport const isGitIgnored = async options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = await fastGlob('**/.gitignore', {\n\t\tignore: DEFAULT_IGNORE.concat(options.ignore),\n\t\tcwd: options.cwd,\n\t});\n\n\tconst files = await Promise.all(paths.map(file => getFile(file, options.cwd)));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredicate(ignores, options.cwd);\n};\n\nexport const isGitIgnoredSync = options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = fastGlob.sync('**/.gitignore', {\n\t\tignore: DEFAULT_IGNORE.concat(options.ignore),\n\t\tcwd: options.cwd,\n\t});\n\n\tconst files = paths.map(file => getFileSync(file, options.cwd));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredicate(ignores, options.cwd);\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"node:stream\");","import {Transform} from 'node:stream';\n\nclass ObjectTransform extends Transform {\n\tconstructor() {\n\t\tsuper({\n\t\t\tobjectMode: true,\n\t\t});\n\t}\n}\n\nexport class FilterStream extends ObjectTransform {\n\tconstructor(filter) {\n\t\tsuper();\n\t\tthis._filter = filter;\n\t}\n\n\t_transform(data, encoding, callback) {\n\t\tif (this._filter(data)) {\n\t\t\tthis.push(data);\n\t\t}\n\n\t\tcallback();\n\t}\n}\n\nexport class UniqueStream extends ObjectTransform {\n\tconstructor() {\n\t\tsuper();\n\t\tthis._pushed = new Set();\n\t}\n\n\t_transform(data, encoding, callback) {\n\t\tif (!this._pushed.has(data)) {\n\t\t\tthis.push(data);\n\t\t\tthis._pushed.add(data);\n\t\t}\n\n\t\tcallback();\n\t}\n}\n","import fs from 'node:fs';\nimport arrayUnion from 'array-union';\nimport merge2 from 'merge2';\nimport fastGlob from 'fast-glob';\nimport dirGlob from 'dir-glob';\nimport {isGitIgnored, isGitIgnoredSync} from './gitignore.js';\nimport {FilterStream, UniqueStream} from './stream-utils.js';\n\nconst DEFAULT_FILTER = () => false;\n\nconst isNegative = pattern => pattern[0] === '!';\n\nconst assertPatternsInput = patterns => {\n\tif (!patterns.every(pattern => typeof pattern === 'string')) {\n\t\tthrow new TypeError('Patterns must be a string or an array of strings');\n\t}\n};\n\nconst checkCwdOption = (options = {}) => {\n\tif (!options.cwd) {\n\t\treturn;\n\t}\n\n\tlet stat;\n\ttry {\n\t\tstat = fs.statSync(options.cwd);\n\t} catch {\n\t\treturn;\n\t}\n\n\tif (!stat.isDirectory()) {\n\t\tthrow new Error('The `cwd` option must be a path to a directory');\n\t}\n};\n\nconst getPathString = p => p.stats instanceof fs.Stats ? p.path : p;\n\nexport const generateGlobTasks = (patterns, taskOptions) => {\n\tpatterns = arrayUnion([patterns].flat());\n\tassertPatternsInput(patterns);\n\tcheckCwdOption(taskOptions);\n\n\tconst globTasks = [];\n\n\ttaskOptions = {\n\t\tignore: [],\n\t\texpandDirectories: true,\n\t\t...taskOptions,\n\t};\n\n\tfor (const [index, pattern] of patterns.entries()) {\n\t\tif (isNegative(pattern)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst ignore = patterns\n\t\t\t.slice(index)\n\t\t\t.filter(pattern => isNegative(pattern))\n\t\t\t.map(pattern => pattern.slice(1));\n\n\t\tconst options = {\n\t\t\t...taskOptions,\n\t\t\tignore: [...taskOptions.ignore, ...ignore],\n\t\t};\n\n\t\tglobTasks.push({pattern, options});\n\t}\n\n\treturn globTasks;\n};\n\nconst globDirectories = (task, fn) => {\n\tlet options = {};\n\tif (task.options.cwd) {\n\t\toptions.cwd = task.options.cwd;\n\t}\n\n\tif (Array.isArray(task.options.expandDirectories)) {\n\t\toptions = {\n\t\t\t...options,\n\t\t\tfiles: task.options.expandDirectories,\n\t\t};\n\t} else if (typeof task.options.expandDirectories === 'object') {\n\t\toptions = {\n\t\t\t...options,\n\t\t\t...task.options.expandDirectories,\n\t\t};\n\t}\n\n\treturn fn(task.pattern, options);\n};\n\nconst getPattern = (task, fn) => task.options.expandDirectories ? globDirectories(task, fn) : [task.pattern];\n\nconst getFilterSync = options => options && options.gitignore\n\t? isGitIgnoredSync({cwd: options.cwd, ignore: options.ignore})\n\t: DEFAULT_FILTER;\n\nconst globToTask = task => async glob => {\n\tconst {options} = task;\n\tif (options.ignore && Array.isArray(options.ignore) && options.expandDirectories) {\n\t\toptions.ignore = await dirGlob(options.ignore);\n\t}\n\n\treturn {\n\t\tpattern: glob,\n\t\toptions,\n\t};\n};\n\nconst globToTaskSync = task => glob => {\n\tconst {options} = task;\n\tif (options.ignore && Array.isArray(options.ignore) && options.expandDirectories) {\n\t\toptions.ignore = dirGlob.sync(options.ignore);\n\t}\n\n\treturn {\n\t\tpattern: glob,\n\t\toptions,\n\t};\n};\n\nexport const globby = async (patterns, options) => {\n\tconst globTasks = generateGlobTasks(patterns, options);\n\n\tconst getFilter = async () => options && options.gitignore\n\t\t? isGitIgnored({cwd: options.cwd, ignore: options.ignore})\n\t\t: DEFAULT_FILTER;\n\n\tconst getTasks = async () => {\n\t\tconst tasks = await Promise.all(globTasks.map(async task => {\n\t\t\tconst globs = await getPattern(task, dirGlob);\n\t\t\treturn Promise.all(globs.map(globToTask(task)));\n\t\t}));\n\n\t\treturn arrayUnion(...tasks);\n\t};\n\n\tconst [filter, tasks] = await Promise.all([getFilter(), getTasks()]);\n\tconst paths = await Promise.all(tasks.map(task => fastGlob(task.pattern, task.options)));\n\n\treturn arrayUnion(...paths).filter(path_ => !filter(getPathString(path_)));\n};\n\nexport const globbySync = (patterns, options) => {\n\tconst globTasks = generateGlobTasks(patterns, options);\n\n\tconst tasks = [];\n\tfor (const task of globTasks) {\n\t\tconst newTask = getPattern(task, dirGlob.sync).map(globToTaskSync(task));\n\t\ttasks.push(...newTask);\n\t}\n\n\tconst filter = getFilterSync(options);\n\n\tlet matches = [];\n\tfor (const task of tasks) {\n\t\tmatches = arrayUnion(matches, fastGlob.sync(task.pattern, task.options));\n\t}\n\n\treturn matches.filter(path_ => !filter(path_));\n};\n\nexport const globbyStream = (patterns, options) => {\n\tconst globTasks = generateGlobTasks(patterns, options);\n\n\tconst tasks = [];\n\tfor (const task of globTasks) {\n\t\tconst newTask = getPattern(task, dirGlob.sync).map(globToTaskSync(task));\n\t\ttasks.push(...newTask);\n\t}\n\n\tconst filter = getFilterSync(options);\n\tconst filterStream = new FilterStream(p => !filter(p));\n\tconst uniqueStream = new UniqueStream();\n\n\treturn merge2(tasks.map(task => fastGlob.stream(task.pattern, task.options)))\n\t\t.pipe(filterStream)\n\t\t.pipe(uniqueStream);\n};\n\nexport const isDynamicPattern = (patterns, options) => [patterns].flat()\n\t.some(pattern => fastGlob.isDynamicPattern(pattern, options));\n\nexport {\n\tisGitIgnored,\n\tisGitIgnoredSync,\n} from './gitignore.js';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst fs_1 = require(\"fs\");\r\nconst path_1 = require(\"path\");\r\nconst util_1 = require(\"util\");\r\nconst client_s3_1 = require(\"@aws-sdk/client-s3\");\r\nconst client_cloudfront_1 = require(\"@aws-sdk/client-cloudfront\");\r\nconst core_1 = require(\"@actions/core\");\r\nconst mime_types_1 = require(\"mime-types\");\r\nconst globby_1 = require(\"globby\");\r\nconst js_yaml_1 = require(\"js-yaml\");\r\nconst action_1 = require(\"./action\");\r\nconst getValue = (key) => ((0, core_1.getInput)(key) || process.env[key]);\r\nconst location = (0, core_1.getInput)('location', { required: true });\r\nconst bucket = (0, core_1.getInput)('bucket', { required: true });\r\nconst cacheControl = (0, core_1.getInput)('cache-control');\r\nconst invalidate = (0, core_1.getInput)('invalidate');\r\nconst wait = ((0, core_1.getInput)('wait') || 'true').toLowerCase() === 'true';\r\nconst awsRegion = getValue('AWS_REGION');\r\nconst awsAccessKeyId = getValue('AWS_ACCESS_KEY_ID');\r\nconst awsSecretAccessKey = getValue('AWS_SECRET_ACCESS_KEY');\r\nconst s3 = new client_s3_1.S3({\r\n    region: awsRegion,\r\n    credentials: {\r\n        accessKeyId: awsAccessKeyId,\r\n        secretAccessKey: awsSecretAccessKey\r\n    }\r\n});\r\nconst cf = new client_cloudfront_1.CloudFront({\r\n    region: awsRegion,\r\n    credentials: {\r\n        accessKeyId: awsAccessKeyId,\r\n        secretAccessKey: awsSecretAccessKey\r\n    }\r\n});\r\n(async () => {\r\n    try {\r\n        await new action_1.Action({\r\n            readdir: (0, util_1.promisify)(fs_1.readdir),\r\n            stat: (0, util_1.promisify)(fs_1.stat),\r\n            createReadStream: fs_1.createReadStream,\r\n            join: path_1.join\r\n        }, {\r\n            putObject: async (args) => {\r\n                await s3.send(args);\r\n            }\r\n        }, {\r\n            listDistributions: async (args) => cf.send(args),\r\n            getInvalidation: async (args) => cf.send(args),\r\n            createInvalidation: async (args) => cf.send(args)\r\n        }, {\r\n            lookup: mime_types_1.lookup\r\n        }, {\r\n            match: async (path, pattern) => (0, globby_1.globby)(pattern, { cwd: path, onlyFiles: true })\r\n        }, core_1.info).run({\r\n            location,\r\n            bucket,\r\n            cacheControl: cacheControl\r\n                ? (0, js_yaml_1.load)(cacheControl)\r\n                : {},\r\n            invalidate,\r\n            region: awsRegion,\r\n            wait\r\n        });\r\n    }\r\n    catch (error) {\r\n        (0, core_1.setFailed)(error);\r\n    }\r\n})();\r\n"],"names":[],"sourceRoot":""}